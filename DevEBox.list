
DevEBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ee70  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023e0  0801f110  0801f110  00020110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080214f0  080214f0  000224f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080214f8  080214f8  000224f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08021500  08021500  00022500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000778  24000000  08021504  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002714  24000778  08021c7c  00023778  2**2
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  00024000  2**0
                  ALLOC
  9 .CAM_Buffer_section 00025800  30000000  30000000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DMA_Buffer_section 00000600  38000000  38000000  0004a000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  0004a600  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046dce  00000000  00000000  0004a62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008f10  00000000  00000000  000913fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003058  00000000  00000000  0009a310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000250e  00000000  00000000  0009d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004a48c  00000000  00000000  0009f876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00049bed  00000000  00000000  000e9d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001967ee  00000000  00000000  001338ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002ca0dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000de78  00000000  00000000  002ca120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  002d7f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000778 	.word	0x24000778
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801f0f8 	.word	0x0801f0f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400077c 	.word	0x2400077c
 80002dc:	0801f0f8 	.word	0x0801f0f8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <AS7265X_begin>:
#include "AS7265X.h"

class AS7265X AS7265X_sensor;

void AS7265X_begin(I2C_HandleTypeDef *hi2c)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	AS7265X_sensor.begin(hi2c);
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <AS7265X_begin+0x18>)
 80006c8:	f000 f909 	bl	80008de <_ZN7AS7265X5beginEP19__I2C_HandleTypeDef>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	24000794 	.word	0x24000794

080006d8 <AS7265X_takeMeasurements>:
	return AS7265X_sensor.getTemperatureAverage();
}


void AS7265X_takeMeasurements()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	AS7265X_sensor.takeMeasurements();
 80006dc:	4802      	ldr	r0, [pc, #8]	@ (80006e8 <AS7265X_takeMeasurements+0x10>)
 80006de:	f000 f970 	bl	80009c2 <_ZN7AS7265X16takeMeasurementsEv>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	24000794 	.word	0x24000794

080006ec <AS7265X_getCalibrateA>:
{
	return AS7265X_sensor.dataAvailable();
}

float AS7265X_getCalibrateA()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedA();
 80006f0:	4803      	ldr	r0, [pc, #12]	@ (8000700 <AS7265X_getCalibrateA+0x14>)
 80006f2:	f000 f993 	bl	8000a1c <_ZN7AS7265X14getCalibratedAEv>
 80006f6:	eef0 7a40 	vmov.f32	s15, s0
}
 80006fa:	eeb0 0a67 	vmov.f32	s0, s15
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	24000794 	.word	0x24000794

08000704 <AS7265X_getCalibrateB>:

float AS7265X_getCalibrateB()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedB();
 8000708:	4803      	ldr	r0, [pc, #12]	@ (8000718 <AS7265X_getCalibrateB+0x14>)
 800070a:	f000 f997 	bl	8000a3c <_ZN7AS7265X14getCalibratedBEv>
 800070e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000712:	eeb0 0a67 	vmov.f32	s0, s15
 8000716:	bd80      	pop	{r7, pc}
 8000718:	24000794 	.word	0x24000794

0800071c <AS7265X_getCalibrateC>:

float AS7265X_getCalibrateC()
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedC();
 8000720:	4803      	ldr	r0, [pc, #12]	@ (8000730 <AS7265X_getCalibrateC+0x14>)
 8000722:	f000 f99b 	bl	8000a5c <_ZN7AS7265X14getCalibratedCEv>
 8000726:	eef0 7a40 	vmov.f32	s15, s0
}
 800072a:	eeb0 0a67 	vmov.f32	s0, s15
 800072e:	bd80      	pop	{r7, pc}
 8000730:	24000794 	.word	0x24000794

08000734 <AS7265X_getCalibrateD>:

float AS7265X_getCalibrateD()
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedD();
 8000738:	4803      	ldr	r0, [pc, #12]	@ (8000748 <AS7265X_getCalibrateD+0x14>)
 800073a:	f000 f99f 	bl	8000a7c <_ZN7AS7265X14getCalibratedDEv>
 800073e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000742:	eeb0 0a67 	vmov.f32	s0, s15
 8000746:	bd80      	pop	{r7, pc}
 8000748:	24000794 	.word	0x24000794

0800074c <AS7265X_getCalibrateE>:

float AS7265X_getCalibrateE()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedE();
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <AS7265X_getCalibrateE+0x14>)
 8000752:	f000 f9a3 	bl	8000a9c <_ZN7AS7265X14getCalibratedEEv>
 8000756:	eef0 7a40 	vmov.f32	s15, s0
}
 800075a:	eeb0 0a67 	vmov.f32	s0, s15
 800075e:	bd80      	pop	{r7, pc}
 8000760:	24000794 	.word	0x24000794

08000764 <AS7265X_getCalibrateF>:

float AS7265X_getCalibrateF()
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedF();
 8000768:	4803      	ldr	r0, [pc, #12]	@ (8000778 <AS7265X_getCalibrateF+0x14>)
 800076a:	f000 f9a7 	bl	8000abc <_ZN7AS7265X14getCalibratedFEv>
 800076e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000772:	eeb0 0a67 	vmov.f32	s0, s15
 8000776:	bd80      	pop	{r7, pc}
 8000778:	24000794 	.word	0x24000794

0800077c <AS7265X_getCalibrateG>:

float AS7265X_getCalibrateG()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedG();
 8000780:	4803      	ldr	r0, [pc, #12]	@ (8000790 <AS7265X_getCalibrateG+0x14>)
 8000782:	f000 f9ab 	bl	8000adc <_ZN7AS7265X14getCalibratedGEv>
 8000786:	eef0 7a40 	vmov.f32	s15, s0
}
 800078a:	eeb0 0a67 	vmov.f32	s0, s15
 800078e:	bd80      	pop	{r7, pc}
 8000790:	24000794 	.word	0x24000794

08000794 <AS7265X_getCalibrateH>:

float AS7265X_getCalibrateH()
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedH();
 8000798:	4803      	ldr	r0, [pc, #12]	@ (80007a8 <AS7265X_getCalibrateH+0x14>)
 800079a:	f000 f9af 	bl	8000afc <_ZN7AS7265X14getCalibratedHEv>
 800079e:	eef0 7a40 	vmov.f32	s15, s0
}
 80007a2:	eeb0 0a67 	vmov.f32	s0, s15
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	24000794 	.word	0x24000794

080007ac <AS7265X_getCalibrateI>:

float AS7265X_getCalibrateI()
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedI();
 80007b0:	4803      	ldr	r0, [pc, #12]	@ (80007c0 <AS7265X_getCalibrateI+0x14>)
 80007b2:	f000 f9b3 	bl	8000b1c <_ZN7AS7265X14getCalibratedIEv>
 80007b6:	eef0 7a40 	vmov.f32	s15, s0
}
 80007ba:	eeb0 0a67 	vmov.f32	s0, s15
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	24000794 	.word	0x24000794

080007c4 <AS7265X_getCalibrateJ>:

float AS7265X_getCalibrateJ()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedJ();
 80007c8:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <AS7265X_getCalibrateJ+0x14>)
 80007ca:	f000 f9b7 	bl	8000b3c <_ZN7AS7265X14getCalibratedJEv>
 80007ce:	eef0 7a40 	vmov.f32	s15, s0
}
 80007d2:	eeb0 0a67 	vmov.f32	s0, s15
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	24000794 	.word	0x24000794

080007dc <AS7265X_getCalibrateK>:

float AS7265X_getCalibrateK()
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedK();
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <AS7265X_getCalibrateK+0x14>)
 80007e2:	f000 f9bb 	bl	8000b5c <_ZN7AS7265X14getCalibratedKEv>
 80007e6:	eef0 7a40 	vmov.f32	s15, s0
}
 80007ea:	eeb0 0a67 	vmov.f32	s0, s15
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	24000794 	.word	0x24000794

080007f4 <AS7265X_getCalibrateL>:

float AS7265X_getCalibrateL()
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedL();
 80007f8:	4803      	ldr	r0, [pc, #12]	@ (8000808 <AS7265X_getCalibrateL+0x14>)
 80007fa:	f000 f9bf 	bl	8000b7c <_ZN7AS7265X14getCalibratedLEv>
 80007fe:	eef0 7a40 	vmov.f32	s15, s0
}
 8000802:	eeb0 0a67 	vmov.f32	s0, s15
 8000806:	bd80      	pop	{r7, pc}
 8000808:	24000794 	.word	0x24000794

0800080c <AS7265X_getCalibrateR>:

float AS7265X_getCalibrateR()
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedR();
 8000810:	4803      	ldr	r0, [pc, #12]	@ (8000820 <AS7265X_getCalibrateR+0x14>)
 8000812:	f000 f9c3 	bl	8000b9c <_ZN7AS7265X14getCalibratedREv>
 8000816:	eef0 7a40 	vmov.f32	s15, s0
}
 800081a:	eeb0 0a67 	vmov.f32	s0, s15
 800081e:	bd80      	pop	{r7, pc}
 8000820:	24000794 	.word	0x24000794

08000824 <AS7265X_getCalibrateS>:

float AS7265X_getCalibrateS()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedS();
 8000828:	4803      	ldr	r0, [pc, #12]	@ (8000838 <AS7265X_getCalibrateS+0x14>)
 800082a:	f000 f9c7 	bl	8000bbc <_ZN7AS7265X14getCalibratedSEv>
 800082e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000832:	eeb0 0a67 	vmov.f32	s0, s15
 8000836:	bd80      	pop	{r7, pc}
 8000838:	24000794 	.word	0x24000794

0800083c <AS7265X_getCalibrateT>:

float AS7265X_getCalibrateT()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedT();
 8000840:	4803      	ldr	r0, [pc, #12]	@ (8000850 <AS7265X_getCalibrateT+0x14>)
 8000842:	f000 f9cb 	bl	8000bdc <_ZN7AS7265X14getCalibratedTEv>
 8000846:	eef0 7a40 	vmov.f32	s15, s0
}
 800084a:	eeb0 0a67 	vmov.f32	s0, s15
 800084e:	bd80      	pop	{r7, pc}
 8000850:	24000794 	.word	0x24000794

08000854 <AS7265X_getCalibrateU>:

float AS7265X_getCalibrateU()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedU();
 8000858:	4803      	ldr	r0, [pc, #12]	@ (8000868 <AS7265X_getCalibrateU+0x14>)
 800085a:	f000 f9cf 	bl	8000bfc <_ZN7AS7265X14getCalibratedUEv>
 800085e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000862:	eeb0 0a67 	vmov.f32	s0, s15
 8000866:	bd80      	pop	{r7, pc}
 8000868:	24000794 	.word	0x24000794

0800086c <AS7265X_getCalibrateV>:

float AS7265X_getCalibrateV()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedV();
 8000870:	4803      	ldr	r0, [pc, #12]	@ (8000880 <AS7265X_getCalibrateV+0x14>)
 8000872:	f000 f9d3 	bl	8000c1c <_ZN7AS7265X14getCalibratedVEv>
 8000876:	eef0 7a40 	vmov.f32	s15, s0
}
 800087a:	eeb0 0a67 	vmov.f32	s0, s15
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000794 	.word	0x24000794

08000884 <AS7265X_getCalibrateW>:

float AS7265X_getCalibrateW()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	return AS7265X_sensor.getCalibratedW();
 8000888:	4803      	ldr	r0, [pc, #12]	@ (8000898 <AS7265X_getCalibrateW+0x14>)
 800088a:	f000 f9d7 	bl	8000c3c <_ZN7AS7265X14getCalibratedWEv>
 800088e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000892:	eeb0 0a67 	vmov.f32	s0, s15
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000794 	.word	0x24000794

0800089c <_Z41__static_initialization_and_destruction_0v>:
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
class AS7265X AS7265X_sensor;
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <_Z41__static_initialization_and_destruction_0v+0x10>)
 80008a2:	f000 f80a 	bl	80008ba <_ZN7AS7265XC1Ev>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	24000794 	.word	0x24000794

080008b0 <_GLOBAL__sub_I_AS7265X_sensor>:
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	f7ff fff2 	bl	800089c <_Z41__static_initialization_and_destruction_0v>
 80008b8:	bd80      	pop	{r7, pc}

080008ba <_ZN7AS7265XC1Ev>:
#include "main.h"
#include "stdio.h"
#include <string.h>

//Constructor
AS7265X::AS7265X()
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f240 422f 	movw	r2, #1071	@ 0x42f
 80008c8:	809a      	strh	r2, [r3, #4]
{
	_hi2c = NULL;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <_ZN7AS7265X5beginEP19__I2C_HandleTypeDef>:

//Initializes the sensor with basic settings
//Returns false if sensor is not detected
boolean AS7265X::begin(I2C_HandleTypeDef *hi2c)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b084      	sub	sp, #16
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	6039      	str	r1, [r7, #0]
	_hi2c = hi2c;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	601a      	str	r2, [r3, #0]

	if (isConnected() == false)
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 f84d 	bl	800098e <_ZN7AS7265X11isConnectedEv>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	bf0c      	ite	eq
 80008fa:	2301      	moveq	r3, #1
 80008fc:	2300      	movne	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <_ZN7AS7265X5beginEP19__I2C_HandleTypeDef+0x2a>
		return (false); //Check for sensor presence
 8000904:	2300      	movs	r3, #0
 8000906:	e03e      	b.n	8000986 <_ZN7AS7265X5beginEP19__I2C_HandleTypeDef+0xa8>

	//Check to see if both slaves are detected
	uint8_t value = virtualReadRegister(AS7265X_DEV_SELECT_CONTROL);
 8000908:	214f      	movs	r1, #79	@ 0x4f
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f000 fb58 	bl	8000fc0 <_ZN7AS7265X19virtualReadRegisterEh>
 8000910:	4603      	mov	r3, r0
 8000912:	73fb      	strb	r3, [r7, #15]
	if ((value & 0b00110000) == 0)
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800091a:	2b00      	cmp	r3, #0
 800091c:	d101      	bne.n	8000922 <_ZN7AS7265X5beginEP19__I2C_HandleTypeDef+0x44>
		return (false); //Test if Slave1 and 2 are detected. If not, bail.
 800091e:	2300      	movs	r3, #0
 8000920:	e031      	b.n	8000986 <_ZN7AS7265X5beginEP19__I2C_HandleTypeDef+0xa8>

	setBulbCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_WHITE);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f000 fac3 	bl	8000eb2 <_ZN7AS7265X14setBulbCurrentEhh>
	setBulbCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_IR);
 800092c:	2201      	movs	r2, #1
 800092e:	2100      	movs	r1, #0
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 fabe 	bl	8000eb2 <_ZN7AS7265X14setBulbCurrentEhh>
	setBulbCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_UV);
 8000936:	2202      	movs	r2, #2
 8000938:	2100      	movs	r1, #0
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 fab9 	bl	8000eb2 <_ZN7AS7265X14setBulbCurrentEhh>

	disableBulb(AS7265x_LED_WHITE); //Turn off bulb to avoid heating sensor
 8000940:	2100      	movs	r1, #0
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 fa96 	bl	8000e74 <_ZN7AS7265X11disableBulbEh>
	disableBulb(AS7265x_LED_IR);
 8000948:	2101      	movs	r1, #1
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f000 fa92 	bl	8000e74 <_ZN7AS7265X11disableBulbEh>
	disableBulb(AS7265x_LED_UV);
 8000950:	2102      	movs	r1, #2
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f000 fa8e 	bl	8000e74 <_ZN7AS7265X11disableBulbEh>

	setIndicatorCurrent(AS7265X_INDICATOR_CURRENT_LIMIT_8MA); //Set to 8mA (maximum)
 8000958:	2103      	movs	r1, #3
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 fb04 	bl	8000f68 <_ZN7AS7265X19setIndicatorCurrentEh>
	enableIndicator();
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f000 fae5 	bl	8000f30 <_ZN7AS7265X15enableIndicatorEv>

	setIntegrationCycles(49); //50 * 2.8ms = 140ms. 0 to 255 is valid.
 8000966:	2131      	movs	r1, #49	@ 0x31
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 fa29 	bl	8000dc0 <_ZN7AS7265X20setIntegrationCyclesEh>
	//If you use Mode 2 or 3 (all the colors) then integration time is double. 140*2 = 280ms between readings.

	setGain(AS7265X_GAIN_64X); //Set gain to 64x
 800096e:	2103      	movs	r1, #3
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 f9fb 	bl	8000d6c <_ZN7AS7265X7setGainEh>

	setMeasurementMode(AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT); //One-shot reading of VBGYOR
 8000976:	2103      	movs	r1, #3
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 f9cf 	bl	8000d1c <_ZN7AS7265X18setMeasurementModeEh>

	enableInterrupt();
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f000 fa4a 	bl	8000e18 <_ZN7AS7265X15enableInterruptEv>

	return (true); //We're all setup!
 8000984:	2301      	movs	r3, #1
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_ZN7AS7265X11isConnectedEv>:
	return (virtualReadRegister(AS7265X_FW_VERSION_LOW));
}

//Returns true if I2C device ack's
boolean AS7265X::isConnected()
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
	//Give IC 660ms for startup - max 1000ms
	if (HAL_I2C_IsDeviceReady(_hi2c, AS7265X_ADDR, 100, 100)==HAL_OK)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6818      	ldr	r0, [r3, #0]
 800099a:	2364      	movs	r3, #100	@ 0x64
 800099c:	2264      	movs	r2, #100	@ 0x64
 800099e:	2149      	movs	r1, #73	@ 0x49
 80009a0:	f00b f9e8 	bl	800bd74 <HAL_I2C_IsDeviceReady>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bf0c      	ite	eq
 80009aa:	2301      	moveq	r3, #1
 80009ac:	2300      	movne	r3, #0
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <_ZN7AS7265X11isConnectedEv+0x2a>
		return true;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e000      	b.n	80009ba <_ZN7AS7265X11isConnectedEv+0x2c>
	return (false); //Sensor did not ACK
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_ZN7AS7265X16takeMeasurementsEv>:

//Tells IC to take all channel measurements and polls for data ready flag
void AS7265X::takeMeasurements()
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b084      	sub	sp, #16
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
	setMeasurementMode(AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT); //Set mode to all 6-channels, one-shot
 80009ca:	2103      	movs	r1, #3
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f9a5 	bl	8000d1c <_ZN7AS7265X18setMeasurementModeEh>

	//Wait for data to be ready
	unsigned long startTime = HAL_GetTick();
 80009d2:	f004 fe11 	bl	80055f8 <HAL_GetTick>
 80009d6:	60f8      	str	r0, [r7, #12]
	while (dataAvailable() == false)
 80009d8:	e010      	b.n	80009fc <_ZN7AS7265X16takeMeasurementsEv+0x3a>
	{
		if (HAL_GetTick() - startTime > maxWaitTime)
 80009da:	f004 fe0d 	bl	80055f8 <HAL_GetTick>
 80009de:	4602      	mov	r2, r0
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	8892      	ldrh	r2, [r2, #4]
 80009e8:	4293      	cmp	r3, r2
 80009ea:	bf8c      	ite	hi
 80009ec:	2301      	movhi	r3, #1
 80009ee:	2300      	movls	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10e      	bne.n	8000a14 <_ZN7AS7265X16takeMeasurementsEv+0x52>
			return; //Sensor failed to respond
		HAL_Delay(AS7265X_POLLING_DELAY);
 80009f6:	2005      	movs	r0, #5
 80009f8:	f004 fe0a 	bl	8005610 <HAL_Delay>
	while (dataAvailable() == false)
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 fa23 	bl	8000e48 <_ZN7AS7265X13dataAvailableEv>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf0c      	ite	eq
 8000a08:	2301      	moveq	r3, #1
 8000a0a:	2300      	movne	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1e3      	bne.n	80009da <_ZN7AS7265X16takeMeasurementsEv+0x18>
 8000a12:	e000      	b.n	8000a16 <_ZN7AS7265X16takeMeasurementsEv+0x54>
			return; //Sensor failed to respond
 8000a14:	bf00      	nop
	}

	//Readings can now be accessed via getCalibratedA(), getJ(), etc
}
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_ZN7AS7265X14getCalibratedAEv>:
	return (colorData);
}

//Returns the various calibration data
float AS7265X::getCalibratedA()
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_R_G_A_CAL, AS72653_UV));
 8000a24:	2202      	movs	r2, #2
 8000a26:	2114      	movs	r1, #20
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f000 f917 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000a2e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000a32:	eeb0 0a67 	vmov.f32	s0, s15
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_ZN7AS7265X14getCalibratedBEv>:
float AS7265X::getCalibratedB()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_S_H_B_CAL, AS72653_UV));
 8000a44:	2202      	movs	r2, #2
 8000a46:	2118      	movs	r1, #24
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 f907 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000a4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000a52:	eeb0 0a67 	vmov.f32	s0, s15
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_ZN7AS7265X14getCalibratedCEv>:
float AS7265X::getCalibratedC()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_T_I_C_CAL, AS72653_UV));
 8000a64:	2202      	movs	r2, #2
 8000a66:	211c      	movs	r1, #28
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 f8f7 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000a6e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_ZN7AS7265X14getCalibratedDEv>:
float AS7265X::getCalibratedD()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_U_J_D_CAL, AS72653_UV));
 8000a84:	2202      	movs	r2, #2
 8000a86:	2120      	movs	r1, #32
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f8e7 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000a8e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000a92:	eeb0 0a67 	vmov.f32	s0, s15
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN7AS7265X14getCalibratedEEv>:
float AS7265X::getCalibratedE()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_V_K_E_CAL, AS72653_UV));
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	2124      	movs	r1, #36	@ 0x24
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 f8d7 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000aae:	eef0 7a40 	vmov.f32	s15, s0
}
 8000ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_ZN7AS7265X14getCalibratedFEv>:
float AS7265X::getCalibratedF()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_W_L_F_CAL, AS72653_UV));
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	2128      	movs	r1, #40	@ 0x28
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 f8c7 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000ace:	eef0 7a40 	vmov.f32	s15, s0
}
 8000ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <_ZN7AS7265X14getCalibratedGEv>:

//Returns the various calibration data
float AS7265X::getCalibratedG()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_R_G_A_CAL, AS72652_VISIBLE));
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2114      	movs	r1, #20
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 f8b7 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000aee:	eef0 7a40 	vmov.f32	s15, s0
}
 8000af2:	eeb0 0a67 	vmov.f32	s0, s15
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN7AS7265X14getCalibratedHEv>:
float AS7265X::getCalibratedH()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_S_H_B_CAL, AS72652_VISIBLE));
 8000b04:	2201      	movs	r2, #1
 8000b06:	2118      	movs	r1, #24
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 f8a7 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000b0e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000b12:	eeb0 0a67 	vmov.f32	s0, s15
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN7AS7265X14getCalibratedIEv>:
float AS7265X::getCalibratedI()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_T_I_C_CAL, AS72652_VISIBLE));
 8000b24:	2201      	movs	r2, #1
 8000b26:	211c      	movs	r1, #28
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f000 f897 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000b2e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000b32:	eeb0 0a67 	vmov.f32	s0, s15
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_ZN7AS7265X14getCalibratedJEv>:
float AS7265X::getCalibratedJ()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_U_J_D_CAL, AS72652_VISIBLE));
 8000b44:	2201      	movs	r2, #1
 8000b46:	2120      	movs	r1, #32
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f887 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000b4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000b52:	eeb0 0a67 	vmov.f32	s0, s15
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <_ZN7AS7265X14getCalibratedKEv>:
float AS7265X::getCalibratedK()
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_V_K_E_CAL, AS72652_VISIBLE));
 8000b64:	2201      	movs	r2, #1
 8000b66:	2124      	movs	r1, #36	@ 0x24
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 f877 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000b6e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000b72:	eeb0 0a67 	vmov.f32	s0, s15
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_ZN7AS7265X14getCalibratedLEv>:
float AS7265X::getCalibratedL()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_W_L_F_CAL, AS72652_VISIBLE));
 8000b84:	2201      	movs	r2, #1
 8000b86:	2128      	movs	r1, #40	@ 0x28
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f000 f867 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000b8e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000b92:	eeb0 0a67 	vmov.f32	s0, s15
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_ZN7AS7265X14getCalibratedREv>:

float AS7265X::getCalibratedR()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_R_G_A_CAL, AS72651_NIR));
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2114      	movs	r1, #20
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f000 f857 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000bae:	eef0 7a40 	vmov.f32	s15, s0
}
 8000bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_ZN7AS7265X14getCalibratedSEv>:
float AS7265X::getCalibratedS()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_S_H_B_CAL, AS72651_NIR));
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2118      	movs	r1, #24
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 f847 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000bce:	eef0 7a40 	vmov.f32	s15, s0
}
 8000bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_ZN7AS7265X14getCalibratedTEv>:
float AS7265X::getCalibratedT()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_T_I_C_CAL, AS72651_NIR));
 8000be4:	2200      	movs	r2, #0
 8000be6:	211c      	movs	r1, #28
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 f837 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000bee:	eef0 7a40 	vmov.f32	s15, s0
}
 8000bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_ZN7AS7265X14getCalibratedUEv>:
float AS7265X::getCalibratedU()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_U_J_D_CAL, AS72651_NIR));
 8000c04:	2200      	movs	r2, #0
 8000c06:	2120      	movs	r1, #32
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f000 f827 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000c0e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000c12:	eeb0 0a67 	vmov.f32	s0, s15
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <_ZN7AS7265X14getCalibratedVEv>:
float AS7265X::getCalibratedV()
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_V_K_E_CAL, AS72651_NIR));
 8000c24:	2200      	movs	r2, #0
 8000c26:	2124      	movs	r1, #36	@ 0x24
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 f817 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000c2e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000c32:	eeb0 0a67 	vmov.f32	s0, s15
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZN7AS7265X14getCalibratedWEv>:
float AS7265X::getCalibratedW()
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	return (getCalibratedValue(AS7265X_W_L_F_CAL, AS72651_NIR));
 8000c44:	2200      	movs	r2, #0
 8000c46:	2128      	movs	r1, #40	@ 0x28
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 f807 	bl	8000c5c <_ZN7AS7265X18getCalibratedValueEhh>
 8000c4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000c52:	eeb0 0a67 	vmov.f32	s0, s15
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <_ZN7AS7265X18getCalibratedValueEhh>:

//Given an address, read four bytes and return the floating point calibrated value
float AS7265X::getCalibratedValue(uint8_t calAddress, uint8_t device)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	70bb      	strb	r3, [r7, #2]
	selectDevice(device);
 8000c6c:	78bb      	ldrb	r3, [r7, #2]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 f94d 	bl	8000f10 <_ZN7AS7265X12selectDeviceEh>

	uint8_t b0, b1, b2, b3;
	b0 = virtualReadRegister(calAddress + 0);
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f000 f9a0 	bl	8000fc0 <_ZN7AS7265X19virtualReadRegisterEh>
 8000c80:	4603      	mov	r3, r0
 8000c82:	73fb      	strb	r3, [r7, #15]
	b1 = virtualReadRegister(calAddress + 1);
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	3301      	adds	r3, #1
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 f997 	bl	8000fc0 <_ZN7AS7265X19virtualReadRegisterEh>
 8000c92:	4603      	mov	r3, r0
 8000c94:	73bb      	strb	r3, [r7, #14]
	b2 = virtualReadRegister(calAddress + 2);
 8000c96:	78fb      	ldrb	r3, [r7, #3]
 8000c98:	3302      	adds	r3, #2
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 f98e 	bl	8000fc0 <_ZN7AS7265X19virtualReadRegisterEh>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	737b      	strb	r3, [r7, #13]
	b3 = virtualReadRegister(calAddress + 3);
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	3303      	adds	r3, #3
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f000 f985 	bl	8000fc0 <_ZN7AS7265X19virtualReadRegisterEh>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	733b      	strb	r3, [r7, #12]

	//Channel calibrated values are stored big-endian
	uint32_t calBytes = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t) b0 << (8 * 3));
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	061b      	lsls	r3, r3, #24
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t) b1 << (8 * 2));
 8000cc8:	7bbb      	ldrb	r3, [r7, #14]
 8000cca:	041b      	lsls	r3, r3, #16
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t) b2 << (8 * 1));
 8000cd2:	7b7b      	ldrb	r3, [r7, #13]
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t) b3 << (8 * 0));
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]

	return (convertBytesToFloat(calBytes));
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 f807 	bl	8000cfa <_ZN7AS7265X19convertBytesToFloatEm>
 8000cec:	eef0 7a40 	vmov.f32	s15, s0
}
 8000cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_ZN7AS7265X19convertBytesToFloatEm>:

//Given 4 bytes returns the floating point value
float AS7265X::convertBytesToFloat(uint32_t myLong)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
	float myFloat;
	memcpy(&myFloat, &myLong, 4); //Copy bytes into a float
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	60fb      	str	r3, [r7, #12]
	return (myFloat);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	ee07 3a90 	vmov	s15, r3
}
 8000d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <_ZN7AS7265X18setMeasurementModeEh>:
//Mode 0: 4 channels out of 6 (see datasheet)
//Mode 1: Different 4 channels out of 6 (see datasheet)
//Mode 2: All 6 channels continuously
//Mode 3: One-shot reading of all channels
void AS7265X::setMeasurementMode(uint8_t mode)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
	if (mode > 0b11)
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d901      	bls.n	8000d32 <_ZN7AS7265X18setMeasurementModeEh+0x16>
		mode = 0b11; //Error check
 8000d2e:	2303      	movs	r3, #3
 8000d30:	70fb      	strb	r3, [r7, #3]

	//Read, mask/set, write
	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read
 8000d32:	2104      	movs	r1, #4
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 f943 	bl	8000fc0 <_ZN7AS7265X19virtualReadRegisterEh>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	73fb      	strb	r3, [r7, #15]
	value &= 0b11110011;                                 //Clear BANK bits
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	f023 030c 	bic.w	r3, r3, #12
 8000d44:	73fb      	strb	r3, [r7, #15]
	value |= (mode << 2);                     //Set BANK bits with user's choice
 8000d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	b25a      	sxtb	r2, r3
 8000d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_CONFIG, value);         //Write
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 f99a 	bl	8001098 <_ZN7AS7265X20virtualWriteRegisterEhh>
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZN7AS7265X7setGainEh>:
//Gain 0: 1x (power-on default)
//Gain 1: 3.7x
//Gain 2: 16x
//Gain 3: 64x
void AS7265X::setGain(uint8_t gain)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	70fb      	strb	r3, [r7, #3]
	if (gain > 0b11)
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d901      	bls.n	8000d82 <_ZN7AS7265X7setGainEh+0x16>
		gain = 0b11;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	70fb      	strb	r3, [r7, #3]

	//Read, mask/set, write
	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read
 8000d82:	2104      	movs	r1, #4
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f91b 	bl	8000fc0 <_ZN7AS7265X19virtualReadRegisterEh>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	73fb      	strb	r3, [r7, #15]
	value &= 0b11001111;                                 //Clear GAIN bits
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000d94:	73fb      	strb	r3, [r7, #15]
	value |= (gain << 4);                     //Set GAIN bits with user's choice
 8000d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	b25a      	sxtb	r2, r3
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_CONFIG, value);         //Write
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	461a      	mov	r2, r3
 8000dac:	2104      	movs	r1, #4
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f972 	bl	8001098 <_ZN7AS7265X20virtualWriteRegisterEhh>
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	0000      	movs	r0, r0
	...

08000dc0 <_ZN7AS7265X20setIntegrationCyclesEh>:

//Sets the integration cycle amount
//Give this function a byte from 0 to 255.
//Time will be 2.8ms * [integration cycles + 1]
void AS7265X::setIntegrationCycles(uint8_t cycleValue)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
	maxWaitTime = (int) (cycleValue * 2.8 * 1.5) + 1; //Wait for integration time + 50%
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	ee07 3a90 	vmov	s15, r3
 8000dd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000dd6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000e10 <_ZN7AS7265X20setIntegrationCyclesEh+0x50>
 8000dda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000dde:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8000de2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000de6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000dea:	ee17 3a90 	vmov	r3, s15
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	3301      	adds	r3, #1
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	809a      	strh	r2, [r3, #4]
	virtualWriteRegister(AS7265X_INTERGRATION_TIME, cycleValue); //Write
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 f94a 	bl	8001098 <_ZN7AS7265X20virtualWriteRegisterEhh>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	f3af 8000 	nop.w
 8000e10:	66666666 	.word	0x66666666
 8000e14:	40066666 	.word	0x40066666

08000e18 <_ZN7AS7265X15enableInterruptEv>:

void AS7265X::enableInterrupt()
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	//Read, mask/set, write
	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read
 8000e20:	2104      	movs	r1, #4
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 f8cc 	bl	8000fc0 <_ZN7AS7265X19virtualReadRegisterEh>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	73fb      	strb	r3, [r7, #15]
	value |= (1 << 6);                                   //Set INT bit
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e32:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_CONFIG, value);         //Write
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	461a      	mov	r2, r3
 8000e38:	2104      	movs	r1, #4
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 f92c 	bl	8001098 <_ZN7AS7265X20virtualWriteRegisterEhh>
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <_ZN7AS7265X13dataAvailableEv>:
	virtualWriteRegister(AS7265X_CONFIG, value);         //Write
}

//Checks to see if DRDY flag is set in the control setup register
boolean AS7265X::dataAvailable()
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	uint8_t value = virtualReadRegister(AS7265X_CONFIG);
 8000e50:	2104      	movs	r1, #4
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 f8b4 	bl	8000fc0 <_ZN7AS7265X19virtualReadRegisterEh>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	73fb      	strb	r3, [r7, #15]
	return (value & (1 << 1)); //Bit 1 is DATA_RDY
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf14      	ite	ne
 8000e66:	2301      	movne	r3, #1
 8000e68:	2300      	moveq	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_ZN7AS7265X11disableBulbEh>:
	virtualWriteRegister(AS7265X_LED_CONFIG, value);
}

//Disable the LED or bulb on a given device
void AS7265X::disableBulb(uint8_t device)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
	selectDevice(device);
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	4619      	mov	r1, r3
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 f843 	bl	8000f10 <_ZN7AS7265X12selectDeviceEh>

	//Read, mask/set, write
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG);
 8000e8a:	2107      	movs	r1, #7
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f897 	bl	8000fc0 <_ZN7AS7265X19virtualReadRegisterEh>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73fb      	strb	r3, [r7, #15]
	value &= ~(1 << 3); //Clear the bit
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	f023 0308 	bic.w	r3, r3, #8
 8000e9c:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_LED_CONFIG, value);
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	2107      	movs	r1, #7
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f8f7 	bl	8001098 <_ZN7AS7265X20virtualWriteRegisterEhh>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_ZN7AS7265X14setBulbCurrentEhh>:
//Current 0: 12.5mA
//Current 1: 25mA
//Current 2: 50mA
//Current 3: 100mA
void AS7265X::setBulbCurrent(uint8_t current, uint8_t device)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	70fb      	strb	r3, [r7, #3]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	70bb      	strb	r3, [r7, #2]
	selectDevice(device);
 8000ec2:	78bb      	ldrb	r3, [r7, #2]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 f822 	bl	8000f10 <_ZN7AS7265X12selectDeviceEh>

	// set the current
	if (current > 0b11)
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d901      	bls.n	8000ed6 <_ZN7AS7265X14setBulbCurrentEhh+0x24>
		current = 0b11;                                      //Limit to two bits
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	70fb      	strb	r3, [r7, #3]
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read
 8000ed6:	2107      	movs	r1, #7
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 f871 	bl	8000fc0 <_ZN7AS7265X19virtualReadRegisterEh>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	73fb      	strb	r3, [r7, #15]
	value &= 0b11001111;                                    //Clear ICL_DRV bits
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000ee8:	73fb      	strb	r3, [r7, #15]
	value |= (current << 4);               //Set ICL_DRV bits with user's choice
 8000eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	b25a      	sxtb	r2, r3
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_LED_CONFIG, value);         //Write
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	461a      	mov	r2, r3
 8000f00:	2107      	movs	r1, #7
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f8c8 	bl	8001098 <_ZN7AS7265X20virtualWriteRegisterEhh>
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_ZN7AS7265X12selectDeviceEh>:

//As we read various registers we have to point at the master or first/second slave
void AS7265X::selectDevice(uint8_t device)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
	//Set the bits 0:1. Just overwrite whatever is there because masking in the correct value doesn't work.
	virtualWriteRegister(AS7265X_DEV_SELECT_CONTROL, device);
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	214f      	movs	r1, #79	@ 0x4f
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f8b8 	bl	8001098 <_ZN7AS7265X20virtualWriteRegisterEhh>
	//This fails
	//uint8_t value = virtualReadRegister(AS7265X_DEV_SELECT_CONTROL);
	//value &= 0b11111100; //Clear lower two bits
	//if(device < 3) value |= device; //Set the bits
	//virtualWriteRegister(AS7265X_DEV_SELECT_CONTROL, value);
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN7AS7265X15enableIndicatorEv>:

//Enable the onboard indicator LED
void AS7265X::enableIndicator()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	selectDevice(AS72651_NIR);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffe8 	bl	8000f10 <_ZN7AS7265X12selectDeviceEh>

	//Read, mask/set, write
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG);
 8000f40:	2107      	movs	r1, #7
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f83c 	bl	8000fc0 <_ZN7AS7265X19virtualReadRegisterEh>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]
	value |= (1 << 0); //Set the bit
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_LED_CONFIG, value);
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	461a      	mov	r2, r3
 8000f58:	2107      	movs	r1, #7
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f89c 	bl	8001098 <_ZN7AS7265X20virtualWriteRegisterEhh>
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_ZN7AS7265X19setIndicatorCurrentEh>:
	virtualWriteRegister(AS7265X_LED_CONFIG, value);
}

//Set the current limit of onboard LED. Default is max 8mA = 0b11.
void AS7265X::setIndicatorCurrent(uint8_t current)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
	selectDevice(AS72651_NIR);
 8000f74:	2100      	movs	r1, #0
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffca 	bl	8000f10 <_ZN7AS7265X12selectDeviceEh>

	if (current > 0b11)
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d901      	bls.n	8000f86 <_ZN7AS7265X19setIndicatorCurrentEh+0x1e>
		current = 0b11;
 8000f82:	2303      	movs	r3, #3
 8000f84:	70fb      	strb	r3, [r7, #3]
	//Read, mask/set, write
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read
 8000f86:	2107      	movs	r1, #7
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f819 	bl	8000fc0 <_ZN7AS7265X19virtualReadRegisterEh>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
	value &= 0b11111001;                                    //Clear ICL_IND bits
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	f023 0306 	bic.w	r3, r3, #6
 8000f98:	73fb      	strb	r3, [r7, #15]
	value |= (current << 1);               //Set ICL_IND bits with user's choice
 8000f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	b25a      	sxtb	r2, r3
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f870 	bl	8001098 <_ZN7AS7265X20virtualWriteRegisterEhh>
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZN7AS7265X19virtualReadRegisterEh>:
	virtualWriteRegister(AS7265X_CONFIG, value);         //Write
}

//Read a virtual register from the AS7265x
uint8_t AS7265X::virtualReadRegister(uint8_t virtualAddr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	uint8_t status;

	//Do a prelim check of the read register
	status = readRegister(AS7265X_STATUS_REG);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f8c2 	bl	8001158 <_ZN7AS7265X12readRegisterEh>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	75fb      	strb	r3, [r7, #23]
	if ((status & AS7265X_RX_VALID) != 0) //There is data to be read
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <_ZN7AS7265X19virtualReadRegisterEh+0x2a>
	{
		readRegister(AS7265X_READ_REG); //Read the byte but do nothing with it
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f8b7 	bl	8001158 <_ZN7AS7265X12readRegisterEh>
	}

	//Wait for WRITE flag to clear
	unsigned long startTime = HAL_GetTick();
 8000fea:	f004 fb05 	bl	80055f8 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]
	while (1)
	{
		if (HAL_GetTick() - startTime > maxWaitTime)
 8000ff0:	f004 fb02 	bl	80055f8 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	8892      	ldrh	r2, [r2, #4]
 8000ffe:	4293      	cmp	r3, r2
 8001000:	bf8c      	ite	hi
 8001002:	2301      	movhi	r3, #1
 8001004:	2300      	movls	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <_ZN7AS7265X19virtualReadRegisterEh+0x50>
			return (0); //Sensor failed to respond
 800100c:	2300      	movs	r3, #0
 800100e:	e03f      	b.n	8001090 <_ZN7AS7265X19virtualReadRegisterEh+0xd0>
		status = readRegister(AS7265X_STATUS_REG);
 8001010:	2100      	movs	r1, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f8a0 	bl	8001158 <_ZN7AS7265X12readRegisterEh>
 8001018:	4603      	mov	r3, r0
 800101a:	75fb      	strb	r3, [r7, #23]
		if ((status & AS7265X_TX_VALID) == 0)
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <_ZN7AS7265X19virtualReadRegisterEh+0x6e>
			break; // If TX bit is clear, it is ok to write
		HAL_Delay(AS7265X_POLLING_DELAY);
 8001026:	2005      	movs	r0, #5
 8001028:	f004 faf2 	bl	8005610 <HAL_Delay>
		if (HAL_GetTick() - startTime > maxWaitTime)
 800102c:	e7e0      	b.n	8000ff0 <_ZN7AS7265X19virtualReadRegisterEh+0x30>
			break; // If TX bit is clear, it is ok to write
 800102e:	bf00      	nop
	}

	// Send the virtual register address (bit 7 should be 0 to indicate we are reading a register).
	writeRegister(AS7265X_WRITE_REG, virtualAddr);
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	461a      	mov	r2, r3
 8001034:	2101      	movs	r1, #1
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f8be 	bl	80011b8 <_ZN7AS7265X13writeRegisterEhh>

	//Wait for READ flag to be set
	startTime = HAL_GetTick();
 800103c:	f004 fadc 	bl	80055f8 <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]
	while (1)
	{
		if (HAL_GetTick() - startTime > maxWaitTime)
 8001042:	f004 fad9 	bl	80055f8 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	8892      	ldrh	r2, [r2, #4]
 8001050:	4293      	cmp	r3, r2
 8001052:	bf8c      	ite	hi
 8001054:	2301      	movhi	r3, #1
 8001056:	2300      	movls	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <_ZN7AS7265X19virtualReadRegisterEh+0xa2>
			return (0); //Sensor failed to respond
 800105e:	2300      	movs	r3, #0
 8001060:	e016      	b.n	8001090 <_ZN7AS7265X19virtualReadRegisterEh+0xd0>
		status = readRegister(AS7265X_STATUS_REG);
 8001062:	2100      	movs	r1, #0
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 f877 	bl	8001158 <_ZN7AS7265X12readRegisterEh>
 800106a:	4603      	mov	r3, r0
 800106c:	75fb      	strb	r3, [r7, #23]
		if ((status & AS7265X_RX_VALID) != 0)
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <_ZN7AS7265X19virtualReadRegisterEh+0xc0>
			break; // Read data is ready.
		HAL_Delay(AS7265X_POLLING_DELAY);
 8001078:	2005      	movs	r0, #5
 800107a:	f004 fac9 	bl	8005610 <HAL_Delay>
		if (HAL_GetTick() - startTime > maxWaitTime)
 800107e:	e7e0      	b.n	8001042 <_ZN7AS7265X19virtualReadRegisterEh+0x82>
			break; // Read data is ready.
 8001080:	bf00      	nop
	}

	uint8_t incoming = readRegister(AS7265X_READ_REG);
 8001082:	2102      	movs	r1, #2
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f867 	bl	8001158 <_ZN7AS7265X12readRegisterEh>
 800108a:	4603      	mov	r3, r0
 800108c:	73fb      	strb	r3, [r7, #15]
	return (incoming);
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <_ZN7AS7265X20virtualWriteRegisterEhh>:

//Write to a virtual register in the AS726x
void AS7265X::virtualWriteRegister(uint8_t virtualAddr, uint8_t dataToWrite)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
 80010a4:	4613      	mov	r3, r2
 80010a6:	70bb      	strb	r3, [r7, #2]
	uint8_t status;

	//Wait for WRITE register to be empty
	unsigned long startTime = HAL_GetTick();
 80010a8:	f004 faa6 	bl	80055f8 <HAL_GetTick>
 80010ac:	60f8      	str	r0, [r7, #12]
	while (1)
	{
		if (HAL_GetTick() - startTime > maxWaitTime)
 80010ae:	f004 faa3 	bl	80055f8 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	8892      	ldrh	r2, [r2, #4]
 80010bc:	4293      	cmp	r3, r2
 80010be:	bf8c      	ite	hi
 80010c0:	2301      	movhi	r3, #1
 80010c2:	2300      	movls	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d140      	bne.n	800114c <_ZN7AS7265X20virtualWriteRegisterEhh+0xb4>
			return; //Sensor failed to respond
		status = readRegister(AS7265X_STATUS_REG);
 80010ca:	2100      	movs	r1, #0
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f843 	bl	8001158 <_ZN7AS7265X12readRegisterEh>
 80010d2:	4603      	mov	r3, r0
 80010d4:	72fb      	strb	r3, [r7, #11]
		if ((status & AS7265X_TX_VALID) == 0)
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <_ZN7AS7265X20virtualWriteRegisterEhh+0x50>
			break; // No inbound TX pending at slave. Okay to write now.
		HAL_Delay(AS7265X_POLLING_DELAY);
 80010e0:	2005      	movs	r0, #5
 80010e2:	f004 fa95 	bl	8005610 <HAL_Delay>
		if (HAL_GetTick() - startTime > maxWaitTime)
 80010e6:	e7e2      	b.n	80010ae <_ZN7AS7265X20virtualWriteRegisterEhh+0x16>
			break; // No inbound TX pending at slave. Okay to write now.
 80010e8:	bf00      	nop
	}

	// Send the virtual register address (setting bit 7 to indicate we are writing to a register).
	writeRegister(AS7265X_WRITE_REG, (virtualAddr | 1 << 7));
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	2101      	movs	r1, #1
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f85e 	bl	80011b8 <_ZN7AS7265X13writeRegisterEhh>

	//Wait for WRITE register to be empty
	startTime = HAL_GetTick();
 80010fc:	f004 fa7c 	bl	80055f8 <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]
	while (1)
	{
		if (HAL_GetTick() - startTime > maxWaitTime)
 8001102:	f004 fa79 	bl	80055f8 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	8892      	ldrh	r2, [r2, #4]
 8001110:	4293      	cmp	r3, r2
 8001112:	bf8c      	ite	hi
 8001114:	2301      	movhi	r3, #1
 8001116:	2300      	movls	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d118      	bne.n	8001150 <_ZN7AS7265X20virtualWriteRegisterEhh+0xb8>
			return; //Sensor failed to respond
		status = readRegister(AS7265X_STATUS_REG);
 800111e:	2100      	movs	r1, #0
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f819 	bl	8001158 <_ZN7AS7265X12readRegisterEh>
 8001126:	4603      	mov	r3, r0
 8001128:	72fb      	strb	r3, [r7, #11]
		if ((status & AS7265X_TX_VALID) == 0)
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <_ZN7AS7265X20virtualWriteRegisterEhh+0xa4>
			break; // No inbound TX pending at slave. Okay to write now.
		HAL_Delay(AS7265X_POLLING_DELAY);
 8001134:	2005      	movs	r0, #5
 8001136:	f004 fa6b 	bl	8005610 <HAL_Delay>
		if (HAL_GetTick() - startTime > maxWaitTime)
 800113a:	e7e2      	b.n	8001102 <_ZN7AS7265X20virtualWriteRegisterEhh+0x6a>
			break; // No inbound TX pending at slave. Okay to write now.
 800113c:	bf00      	nop
	}

	// Send the data to complete the operation.
	writeRegister(AS7265X_WRITE_REG, dataToWrite);
 800113e:	78bb      	ldrb	r3, [r7, #2]
 8001140:	461a      	mov	r2, r3
 8001142:	2101      	movs	r1, #1
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f837 	bl	80011b8 <_ZN7AS7265X13writeRegisterEhh>
 800114a:	e002      	b.n	8001152 <_ZN7AS7265X20virtualWriteRegisterEhh+0xba>
			return; //Sensor failed to respond
 800114c:	bf00      	nop
 800114e:	e000      	b.n	8001152 <_ZN7AS7265X20virtualWriteRegisterEhh+0xba>
			return; //Sensor failed to respond
 8001150:	bf00      	nop
}
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_ZN7AS7265X12readRegisterEh>:

//Reads from a give location from the AS726x
uint8_t AS7265X::readRegister(uint8_t addr)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af02      	add	r7, sp, #8
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	70fb      	strb	r3, [r7, #3]
	if (_hi2c==NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <_ZN7AS7265X12readRegisterEh+0x18>
		return 0;
 800116c:	2300      	movs	r3, #0
 800116e:	e01f      	b.n	80011b0 <_ZN7AS7265X12readRegisterEh+0x58>

	uint8_t data;

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(_hi2c, AS7265X_ADDR, &addr, 1, 100);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	1cfa      	adds	r2, r7, #3
 8001176:	2364      	movs	r3, #100	@ 0x64
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	2149      	movs	r1, #73	@ 0x49
 800117e:	f00a fad7 	bl	800b730 <HAL_I2C_Master_Transmit>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
	if (ret == HAL_OK) {
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d110      	bne.n	80011ae <_ZN7AS7265X12readRegisterEh+0x56>
		ret = HAL_I2C_Master_Receive(_hi2c, AS7265X_ADDR, &data, 1, 100);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	f107 020e 	add.w	r2, r7, #14
 8001194:	2364      	movs	r3, #100	@ 0x64
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2149      	movs	r1, #73	@ 0x49
 800119c:	f00a fbe0 	bl	800b960 <HAL_I2C_Master_Receive>
 80011a0:	4603      	mov	r3, r0
 80011a2:	73fb      	strb	r3, [r7, #15]
		if (ret == HAL_OK)
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <_ZN7AS7265X12readRegisterEh+0x56>
			return data;
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	e000      	b.n	80011b0 <_ZN7AS7265X12readRegisterEh+0x58>
	}
	//Serial.println("No ack!");
	return (0); //Device failed to respond
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_ZN7AS7265X13writeRegisterEhh>:

//Write a value to a spot in the AS726x
boolean AS7265X::writeRegister(uint8_t addr, uint8_t val)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
 80011c4:	4613      	mov	r3, r2
 80011c6:	70bb      	strb	r3, [r7, #2]
	if (_hi2c==NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <_ZN7AS7265X13writeRegisterEhh+0x1c>
		return (false);
 80011d0:	2300      	movs	r3, #0
 80011d2:	e01e      	b.n	8001212 <_ZN7AS7265X13writeRegisterEhh+0x5a>

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(_hi2c, AS7265X_ADDR, &addr, 1, 100);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	1cfa      	adds	r2, r7, #3
 80011da:	2364      	movs	r3, #100	@ 0x64
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	2149      	movs	r1, #73	@ 0x49
 80011e2:	f00a faa5 	bl	800b730 <HAL_I2C_Master_Transmit>
 80011e6:	4603      	mov	r3, r0
 80011e8:	73fb      	strb	r3, [r7, #15]
	if (ret == HAL_OK) {
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10f      	bne.n	8001210 <_ZN7AS7265X13writeRegisterEhh+0x58>
		ret = HAL_I2C_Master_Transmit(_hi2c, AS7265X_ADDR, &val, 1, 100);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	1cba      	adds	r2, r7, #2
 80011f6:	2364      	movs	r3, #100	@ 0x64
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	2149      	movs	r1, #73	@ 0x49
 80011fe:	f00a fa97 	bl	800b730 <HAL_I2C_Master_Transmit>
 8001202:	4603      	mov	r3, r0
 8001204:	73fb      	strb	r3, [r7, #15]
		if (ret == HAL_OK)
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <_ZN7AS7265X13writeRegisterEhh+0x58>
			return true;
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <_ZN7AS7265X13writeRegisterEhh+0x5a>
	}
	return (false);
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af02      	add	r7, sp, #8
  LCD_IO_Bl_OnOff(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f001 f8e5 	bl	80023f0 <LCD_IO_Bl_OnOff>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_SLPOUT, NULL, 0);    // Exit Sleep
 8001226:	2395      	movs	r3, #149	@ 0x95
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2300      	movs	r3, #0
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	2011      	movs	r0, #17
 8001232:	f001 f90b 	bl	800244c <LCD_IO_Transaction>
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af02      	add	r7, sp, #8
  LCD_IO_WriteCmd8MultipleData8(ILI9341_SLPIN, NULL, 0);    // Sleep
 8001242:	2395      	movs	r3, #149	@ 0x95
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2300      	movs	r3, #0
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	2010      	movs	r0, #16
 800124e:	f001 f8fd 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_Bl_OnOff(0);
 8001252:	2000      	movs	r0, #0
 8001254:	f001 f8cc 	bl	80023f0 <LCD_IO_Bl_OnOff>
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 8001262:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8001274:	23f0      	movs	r3, #240	@ 0xf0
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <ili9341_ReadID>:
  * @brief  Get the ILI9341 ID.
  * @param  None
  * @retval The ILI9341 ID
  */
uint32_t ili9341_ReadID(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af02      	add	r7, sp, #8
  uint32_t dt = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&dt, 3, 1);
 800128a:	1d39      	adds	r1, r7, #4
 800128c:	2399      	movs	r3, #153	@ 0x99
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	20d3      	movs	r0, #211	@ 0xd3
 8001296:	f001 f8d9 	bl	800244c <LCD_IO_Transaction>
  return dt;
 800129a:	687b      	ldr	r3, [r7, #4]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <ili9341_Init>:

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 80012aa:	4b77      	ldr	r3, [pc, #476]	@ (8001488 <ili9341_Init+0x1e4>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d115      	bne.n	80012e2 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 80012b6:	4b74      	ldr	r3, [pc, #464]	@ (8001488 <ili9341_Init+0x1e4>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b71      	ldr	r3, [pc, #452]	@ (8001488 <ili9341_Init+0x1e4>)
 80012c2:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 80012c4:	4b70      	ldr	r3, [pc, #448]	@ (8001488 <ili9341_Init+0x1e4>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <ili9341_Init+0x30>
      LCD_IO_Init();
 80012d0:	f001 f8a8 	bl	8002424 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80012d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001488 <ili9341_Init+0x1e4>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b6a      	ldr	r3, [pc, #424]	@ (8001488 <ili9341_Init+0x1e4>)
 80012e0:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 80012e2:	200a      	movs	r0, #10
 80012e4:	f001 f878 	bl	80023d8 <LCD_Delay>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_SWRESET, NULL, 0);
 80012e8:	2395      	movs	r3, #149	@ 0x95
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2300      	movs	r3, #0
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2001      	movs	r0, #1
 80012f4:	f001 f8aa 	bl	800244c <LCD_IO_Transaction>
  LCD_Delay(10);
 80012f8:	200a      	movs	r0, #10
 80012fa:	f001 f86d 	bl	80023d8 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 80012fe:	2395      	movs	r3, #149	@ 0x95
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2300      	movs	r3, #0
 8001304:	2203      	movs	r2, #3
 8001306:	4961      	ldr	r1, [pc, #388]	@ (800148c <ili9341_Init+0x1e8>)
 8001308:	20ef      	movs	r0, #239	@ 0xef
 800130a:	f001 f89f 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 800130e:	2395      	movs	r3, #149	@ 0x95
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2300      	movs	r3, #0
 8001314:	2203      	movs	r2, #3
 8001316:	495e      	ldr	r1, [pc, #376]	@ (8001490 <ili9341_Init+0x1ec>)
 8001318:	20cf      	movs	r0, #207	@ 0xcf
 800131a:	f001 f897 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 800131e:	2395      	movs	r3, #149	@ 0x95
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2300      	movs	r3, #0
 8001324:	2204      	movs	r2, #4
 8001326:	495b      	ldr	r1, [pc, #364]	@ (8001494 <ili9341_Init+0x1f0>)
 8001328:	20ed      	movs	r0, #237	@ 0xed
 800132a:	f001 f88f 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 800132e:	2395      	movs	r3, #149	@ 0x95
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	2203      	movs	r2, #3
 8001336:	4958      	ldr	r1, [pc, #352]	@ (8001498 <ili9341_Init+0x1f4>)
 8001338:	20e8      	movs	r0, #232	@ 0xe8
 800133a:	f001 f887 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 800133e:	2395      	movs	r3, #149	@ 0x95
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2300      	movs	r3, #0
 8001344:	2205      	movs	r2, #5
 8001346:	4955      	ldr	r1, [pc, #340]	@ (800149c <ili9341_Init+0x1f8>)
 8001348:	20cb      	movs	r0, #203	@ 0xcb
 800134a:	f001 f87f 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 800134e:	2395      	movs	r3, #149	@ 0x95
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	2201      	movs	r2, #1
 8001356:	4952      	ldr	r1, [pc, #328]	@ (80014a0 <ili9341_Init+0x1fc>)
 8001358:	20f7      	movs	r0, #247	@ 0xf7
 800135a:	f001 f877 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 800135e:	2395      	movs	r3, #149	@ 0x95
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	2202      	movs	r2, #2
 8001366:	494f      	ldr	r1, [pc, #316]	@ (80014a4 <ili9341_Init+0x200>)
 8001368:	20ea      	movs	r0, #234	@ 0xea
 800136a:	f001 f86f 	bl	800244c <LCD_IO_Transaction>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 800136e:	2395      	movs	r3, #149	@ 0x95
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2300      	movs	r3, #0
 8001374:	2201      	movs	r2, #1
 8001376:	494c      	ldr	r1, [pc, #304]	@ (80014a8 <ili9341_Init+0x204>)
 8001378:	20c0      	movs	r0, #192	@ 0xc0
 800137a:	f001 f867 	bl	800244c <LCD_IO_Transaction>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 800137e:	2395      	movs	r3, #149	@ 0x95
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2300      	movs	r3, #0
 8001384:	2201      	movs	r2, #1
 8001386:	4949      	ldr	r1, [pc, #292]	@ (80014ac <ili9341_Init+0x208>)
 8001388:	20c1      	movs	r0, #193	@ 0xc1
 800138a:	f001 f85f 	bl	800244c <LCD_IO_Transaction>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 800138e:	2395      	movs	r3, #149	@ 0x95
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2300      	movs	r3, #0
 8001394:	2202      	movs	r2, #2
 8001396:	4946      	ldr	r1, [pc, #280]	@ (80014b0 <ili9341_Init+0x20c>)
 8001398:	20c5      	movs	r0, #197	@ 0xc5
 800139a:	f001 f857 	bl	800244c <LCD_IO_Transaction>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 800139e:	2395      	movs	r3, #149	@ 0x95
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2300      	movs	r3, #0
 80013a4:	2201      	movs	r2, #1
 80013a6:	4943      	ldr	r1, [pc, #268]	@ (80014b4 <ili9341_Init+0x210>)
 80013a8:	20c7      	movs	r0, #199	@ 0xc7
 80013aa:	f001 f84f 	bl	800244c <LCD_IO_Transaction>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 80013ae:	2395      	movs	r3, #149	@ 0x95
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	2201      	movs	r2, #1
 80013b6:	4940      	ldr	r1, [pc, #256]	@ (80014b8 <ili9341_Init+0x214>)
 80013b8:	2037      	movs	r0, #55	@ 0x37
 80013ba:	f001 f847 	bl	800244c <LCD_IO_Transaction>
  #if ILI9341_WRITEBITDEPTH == 16
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 80013be:	2395      	movs	r3, #149	@ 0x95
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2300      	movs	r3, #0
 80013c4:	2201      	movs	r2, #1
 80013c6:	493d      	ldr	r1, [pc, #244]	@ (80014bc <ili9341_Init+0x218>)
 80013c8:	203a      	movs	r0, #58	@ 0x3a
 80013ca:	f001 f83f 	bl	800244c <LCD_IO_Transaction>
  #elif ILI9341_WRITEBITDEPTH == 24
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1);
  #endif

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 80013ce:	2395      	movs	r3, #149	@ 0x95
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2300      	movs	r3, #0
 80013d4:	2202      	movs	r2, #2
 80013d6:	493a      	ldr	r1, [pc, #232]	@ (80014c0 <ili9341_Init+0x21c>)
 80013d8:	20b1      	movs	r0, #177	@ 0xb1
 80013da:	f001 f837 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 80013de:	2395      	movs	r3, #149	@ 0x95
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2300      	movs	r3, #0
 80013e4:	2203      	movs	r2, #3
 80013e6:	4937      	ldr	r1, [pc, #220]	@ (80014c4 <ili9341_Init+0x220>)
 80013e8:	20b6      	movs	r0, #182	@ 0xb6
 80013ea:	f001 f82f 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 80013ee:	2395      	movs	r3, #149	@ 0x95
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2300      	movs	r3, #0
 80013f4:	2201      	movs	r2, #1
 80013f6:	4930      	ldr	r1, [pc, #192]	@ (80014b8 <ili9341_Init+0x214>)
 80013f8:	20f2      	movs	r0, #242	@ 0xf2
 80013fa:	f001 f827 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 80013fe:	2395      	movs	r3, #149	@ 0x95
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2300      	movs	r3, #0
 8001404:	2201      	movs	r2, #1
 8001406:	4930      	ldr	r1, [pc, #192]	@ (80014c8 <ili9341_Init+0x224>)
 8001408:	2026      	movs	r0, #38	@ 0x26
 800140a:	f001 f81f 	bl	800244c <LCD_IO_Transaction>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 800140e:	2395      	movs	r3, #149	@ 0x95
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	220f      	movs	r2, #15
 8001416:	492d      	ldr	r1, [pc, #180]	@ (80014cc <ili9341_Init+0x228>)
 8001418:	20e0      	movs	r0, #224	@ 0xe0
 800141a:	f001 f817 	bl	800244c <LCD_IO_Transaction>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 800141e:	2395      	movs	r3, #149	@ 0x95
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2300      	movs	r3, #0
 8001424:	220f      	movs	r2, #15
 8001426:	492a      	ldr	r1, [pc, #168]	@ (80014d0 <ili9341_Init+0x22c>)
 8001428:	20e1      	movs	r0, #225	@ 0xe1
 800142a:	f001 f80f 	bl	800244c <LCD_IO_Transaction>

  LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 800142e:	2395      	movs	r3, #149	@ 0x95
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2300      	movs	r3, #0
 8001434:	2201      	movs	r2, #1
 8001436:	4927      	ldr	r1, [pc, #156]	@ (80014d4 <ili9341_Init+0x230>)
 8001438:	2036      	movs	r0, #54	@ 0x36
 800143a:	f001 f807 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_SLPOUT, NULL, 0);    // Exit Sleep
 800143e:	2395      	movs	r3, #149	@ 0x95
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2300      	movs	r3, #0
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2011      	movs	r0, #17
 800144a:	f000 ffff 	bl	800244c <LCD_IO_Transaction>
  LCD_Delay(10);
 800144e:	200a      	movs	r0, #10
 8001450:	f000 ffc2 	bl	80023d8 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 8001454:	2300      	movs	r3, #0
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	23f0      	movs	r3, #240	@ 0xf0
 800145a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800145e:	2100      	movs	r1, #0
 8001460:	2000      	movs	r0, #0
 8001462:	f000 fad5 	bl	8001a10 <ili9341_FillRect>
  LCD_Delay(10);
 8001466:	200a      	movs	r0, #10
 8001468:	f000 ffb6 	bl	80023d8 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DISPON, NULL, 0);    // Display on
 800146c:	2395      	movs	r3, #149	@ 0x95
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2300      	movs	r3, #0
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2029      	movs	r0, #41	@ 0x29
 8001478:	f000 ffe8 	bl	800244c <LCD_IO_Transaction>
  LCD_Delay(10);
 800147c:	200a      	movs	r0, #10
 800147e:	f000 ffab 	bl	80023d8 <LCD_Delay>
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	240007a0 	.word	0x240007a0
 800148c:	0801f110 	.word	0x0801f110
 8001490:	0801f114 	.word	0x0801f114
 8001494:	0801f118 	.word	0x0801f118
 8001498:	0801f120 	.word	0x0801f120
 800149c:	0801f124 	.word	0x0801f124
 80014a0:	0801f12c 	.word	0x0801f12c
 80014a4:	0801f130 	.word	0x0801f130
 80014a8:	0801f134 	.word	0x0801f134
 80014ac:	0801f138 	.word	0x0801f138
 80014b0:	0801f13c 	.word	0x0801f13c
 80014b4:	0801f140 	.word	0x0801f140
 80014b8:	0801f144 	.word	0x0801f144
 80014bc:	0801f148 	.word	0x0801f148
 80014c0:	0801f14c 	.word	0x0801f14c
 80014c4:	0801f150 	.word	0x0801f150
 80014c8:	0801f154 	.word	0x0801f154
 80014cc:	0801f158 	.word	0x0801f158
 80014d0:	0801f168 	.word	0x0801f168
 80014d4:	080210c5 	.word	0x080210c5

080014d8 <ili9341_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9341_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	4603      	mov	r3, r0
 80014e0:	460a      	mov	r2, r1
 80014e2:	80fb      	strh	r3, [r7, #6]
 80014e4:	4613      	mov	r3, r2
 80014e6:	80bb      	strh	r3, [r7, #4]
  ILI9341_SETCURSOR(Xpos, Ypos);
 80014e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ec:	813b      	strh	r3, [r7, #8]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 80014ee:	893b      	ldrh	r3, [r7, #8]
 80014f0:	ba5b      	rev16	r3, r3
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <ili9341_SetCursor+0x88>)
 80014fa:	801a      	strh	r2, [r3, #0]
 80014fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001500:	817b      	strh	r3, [r7, #10]
 8001502:	897b      	ldrh	r3, [r7, #10]
 8001504:	ba5b      	rev16	r3, r3
 8001506:	b29b      	uxth	r3, r3
 8001508:	b21b      	sxth	r3, r3
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <ili9341_SetCursor+0x88>)
 800150e:	805a      	strh	r2, [r3, #2]
 8001510:	2395      	movs	r3, #149	@ 0x95
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2300      	movs	r3, #0
 8001516:	2204      	movs	r2, #4
 8001518:	4911      	ldr	r1, [pc, #68]	@ (8001560 <ili9341_SetCursor+0x88>)
 800151a:	202a      	movs	r0, #42	@ 0x2a
 800151c:	f000 ff96 	bl	800244c <LCD_IO_Transaction>
 8001520:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001524:	81bb      	strh	r3, [r7, #12]
 8001526:	89bb      	ldrh	r3, [r7, #12]
 8001528:	ba5b      	rev16	r3, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	b21b      	sxth	r3, r3
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <ili9341_SetCursor+0x88>)
 8001532:	801a      	strh	r2, [r3, #0]
 8001534:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	ba5b      	rev16	r3, r3
 800153e:	b29b      	uxth	r3, r3
 8001540:	b21b      	sxth	r3, r3
 8001542:	b29a      	uxth	r2, r3
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <ili9341_SetCursor+0x88>)
 8001546:	805a      	strh	r2, [r3, #2]
 8001548:	2395      	movs	r3, #149	@ 0x95
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2300      	movs	r3, #0
 800154e:	2204      	movs	r2, #4
 8001550:	4903      	ldr	r1, [pc, #12]	@ (8001560 <ili9341_SetCursor+0x88>)
 8001552:	202b      	movs	r0, #43	@ 0x2b
 8001554:	f000 ff7a 	bl	800244c <LCD_IO_Transaction>
}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2400079c 	.word	0x2400079c

08001564 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af02      	add	r7, sp, #8
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
 800156e:	460b      	mov	r3, r1
 8001570:	80bb      	strh	r3, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	807b      	strh	r3, [r7, #2]
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 8001576:	4b31      	ldr	r3, [pc, #196]	@ (800163c <ili9341_WritePixel+0xd8>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2be0      	cmp	r3, #224	@ 0xe0
 800157c:	d00a      	beq.n	8001594 <ili9341_WritePixel+0x30>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 800157e:	4b2f      	ldr	r3, [pc, #188]	@ (800163c <ili9341_WritePixel+0xd8>)
 8001580:	22e0      	movs	r2, #224	@ 0xe0
 8001582:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 8001584:	2395      	movs	r3, #149	@ 0x95
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2300      	movs	r3, #0
 800158a:	2201      	movs	r2, #1
 800158c:	492c      	ldr	r1, [pc, #176]	@ (8001640 <ili9341_WritePixel+0xdc>)
 800158e:	2036      	movs	r0, #54	@ 0x36
 8001590:	f000 ff5c 	bl	800244c <LCD_IO_Transaction>
  }
  ILI9341_SETCURSOR(Xpos, Ypos);
 8001594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001598:	813b      	strh	r3, [r7, #8]
 800159a:	893b      	ldrh	r3, [r7, #8]
 800159c:	ba5b      	rev16	r3, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <ili9341_WritePixel+0xe0>)
 80015a6:	801a      	strh	r2, [r3, #0]
 80015a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ac:	817b      	strh	r3, [r7, #10]
 80015ae:	897b      	ldrh	r3, [r7, #10]
 80015b0:	ba5b      	rev16	r3, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <ili9341_WritePixel+0xe0>)
 80015ba:	805a      	strh	r2, [r3, #2]
 80015bc:	2395      	movs	r3, #149	@ 0x95
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	2204      	movs	r2, #4
 80015c4:	491f      	ldr	r1, [pc, #124]	@ (8001644 <ili9341_WritePixel+0xe0>)
 80015c6:	202a      	movs	r0, #42	@ 0x2a
 80015c8:	f000 ff40 	bl	800244c <LCD_IO_Transaction>
 80015cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015d0:	81bb      	strh	r3, [r7, #12]
 80015d2:	89bb      	ldrh	r3, [r7, #12]
 80015d4:	ba5b      	rev16	r3, r3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b21b      	sxth	r3, r3
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <ili9341_WritePixel+0xe0>)
 80015de:	801a      	strh	r2, [r3, #0]
 80015e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015e4:	81fb      	strh	r3, [r7, #14]
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	ba5b      	rev16	r3, r3
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <ili9341_WritePixel+0xe0>)
 80015f2:	805a      	strh	r2, [r3, #2]
 80015f4:	2395      	movs	r3, #149	@ 0x95
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	2204      	movs	r2, #4
 80015fc:	4911      	ldr	r1, [pc, #68]	@ (8001644 <ili9341_WritePixel+0xe0>)
 80015fe:	202b      	movs	r0, #43	@ 0x2b
 8001600:	f000 ff24 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_DrawFill(RGBCode, 1);
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <ili9341_WritePixel+0xe4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00a      	beq.n	8001622 <ili9341_WritePixel+0xbe>
 800160c:	2395      	movs	r3, #149	@ 0x95
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2300      	movs	r3, #0
 8001612:	2201      	movs	r2, #1
 8001614:	490d      	ldr	r1, [pc, #52]	@ (800164c <ili9341_WritePixel+0xe8>)
 8001616:	203a      	movs	r0, #58	@ 0x3a
 8001618:	f000 ff18 	bl	800244c <LCD_IO_Transaction>
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <ili9341_WritePixel+0xe4>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	1cb9      	adds	r1, r7, #2
 8001624:	f240 1325 	movw	r3, #293	@ 0x125
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2300      	movs	r3, #0
 800162c:	2201      	movs	r2, #1
 800162e:	202c      	movs	r0, #44	@ 0x2c
 8001630:	f000 ff0c 	bl	800244c <LCD_IO_Transaction>
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	24000054 	.word	0x24000054
 8001640:	080210c5 	.word	0x080210c5
 8001644:	2400079c 	.word	0x2400079c
 8001648:	240007a6 	.word	0x240007a6
 800164c:	0801f178 	.word	0x0801f178

08001650 <ili9341_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9341_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	4603      	mov	r3, r0
 8001658:	460a      	mov	r2, r1
 800165a:	80fb      	strh	r3, [r7, #6]
 800165c:	4613      	mov	r3, r2
 800165e:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 8001660:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <ili9341_ReadPixel+0xd8>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2be0      	cmp	r3, #224	@ 0xe0
 8001666:	d00a      	beq.n	800167e <ili9341_ReadPixel+0x2e>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 8001668:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <ili9341_ReadPixel+0xd8>)
 800166a:	22e0      	movs	r2, #224	@ 0xe0
 800166c:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 800166e:	2395      	movs	r3, #149	@ 0x95
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2300      	movs	r3, #0
 8001674:	2201      	movs	r2, #1
 8001676:	492d      	ldr	r1, [pc, #180]	@ (800172c <ili9341_ReadPixel+0xdc>)
 8001678:	2036      	movs	r0, #54	@ 0x36
 800167a:	f000 fee7 	bl	800244c <LCD_IO_Transaction>
  }
  ILI9341_SETCURSOR(Xpos, Ypos);
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	823b      	strh	r3, [r7, #16]
 8001684:	8a3b      	ldrh	r3, [r7, #16]
 8001686:	ba5b      	rev16	r3, r3
 8001688:	b29b      	uxth	r3, r3
 800168a:	b21b      	sxth	r3, r3
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b28      	ldr	r3, [pc, #160]	@ (8001730 <ili9341_ReadPixel+0xe0>)
 8001690:	801a      	strh	r2, [r3, #0]
 8001692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001696:	827b      	strh	r3, [r7, #18]
 8001698:	8a7b      	ldrh	r3, [r7, #18]
 800169a:	ba5b      	rev16	r3, r3
 800169c:	b29b      	uxth	r3, r3
 800169e:	b21b      	sxth	r3, r3
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <ili9341_ReadPixel+0xe0>)
 80016a4:	805a      	strh	r2, [r3, #2]
 80016a6:	2395      	movs	r3, #149	@ 0x95
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2300      	movs	r3, #0
 80016ac:	2204      	movs	r2, #4
 80016ae:	4920      	ldr	r1, [pc, #128]	@ (8001730 <ili9341_ReadPixel+0xe0>)
 80016b0:	202a      	movs	r0, #42	@ 0x2a
 80016b2:	f000 fecb 	bl	800244c <LCD_IO_Transaction>
 80016b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016ba:	82bb      	strh	r3, [r7, #20]
 80016bc:	8abb      	ldrh	r3, [r7, #20]
 80016be:	ba5b      	rev16	r3, r3
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <ili9341_ReadPixel+0xe0>)
 80016c8:	801a      	strh	r2, [r3, #0]
 80016ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016ce:	82fb      	strh	r3, [r7, #22]
 80016d0:	8afb      	ldrh	r3, [r7, #22]
 80016d2:	ba5b      	rev16	r3, r3
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <ili9341_ReadPixel+0xe0>)
 80016dc:	805a      	strh	r2, [r3, #2]
 80016de:	2395      	movs	r3, #149	@ 0x95
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2300      	movs	r3, #0
 80016e4:	2204      	movs	r2, #4
 80016e6:	4912      	ldr	r1, [pc, #72]	@ (8001730 <ili9341_ReadPixel+0xe0>)
 80016e8:	202b      	movs	r0, #43	@ 0x2b
 80016ea:	f000 feaf 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_ReadBitmap(&ret, 1);
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <ili9341_ReadPixel+0xe4>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <ili9341_ReadPixel+0xbc>
 80016f6:	2395      	movs	r3, #149	@ 0x95
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2300      	movs	r3, #0
 80016fc:	2201      	movs	r2, #1
 80016fe:	490e      	ldr	r1, [pc, #56]	@ (8001738 <ili9341_ReadPixel+0xe8>)
 8001700:	203a      	movs	r0, #58	@ 0x3a
 8001702:	f000 fea3 	bl	800244c <LCD_IO_Transaction>
 8001706:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <ili9341_ReadPixel+0xe4>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	f107 010e 	add.w	r1, r7, #14
 8001710:	23c9      	movs	r3, #201	@ 0xc9
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2301      	movs	r3, #1
 8001716:	2201      	movs	r2, #1
 8001718:	202e      	movs	r0, #46	@ 0x2e
 800171a:	f000 fe97 	bl	800244c <LCD_IO_Transaction>
  return(ret);
 800171e:	89fb      	ldrh	r3, [r7, #14]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	24000054 	.word	0x24000054
 800172c:	080210c5 	.word	0x080210c5
 8001730:	2400079c 	.word	0x2400079c
 8001734:	240007a6 	.word	0x240007a6
 8001738:	0801f17c 	.word	0x0801f17c

0800173c <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b087      	sub	sp, #28
 8001740:	af02      	add	r7, sp, #8
 8001742:	4604      	mov	r4, r0
 8001744:	4608      	mov	r0, r1
 8001746:	4611      	mov	r1, r2
 8001748:	461a      	mov	r2, r3
 800174a:	4623      	mov	r3, r4
 800174c:	80fb      	strh	r3, [r7, #6]
 800174e:	4603      	mov	r3, r0
 8001750:	80bb      	strh	r3, [r7, #4]
 8001752:	460b      	mov	r3, r1
 8001754:	807b      	strh	r3, [r7, #2]
 8001756:	4613      	mov	r3, r2
 8001758:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 800175a:	4a28      	ldr	r2, [pc, #160]	@ (80017fc <ili9341_SetDisplayWindow+0xc0>)
 800175c:	88bb      	ldrh	r3, [r7, #4]
 800175e:	8013      	strh	r3, [r2, #0]
 8001760:	88ba      	ldrh	r2, [r7, #4]
 8001762:	883b      	ldrh	r3, [r7, #0]
 8001764:	4413      	add	r3, r2
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <ili9341_SetDisplayWindow+0xc4>)
 800176e:	801a      	strh	r2, [r3, #0]
  ILI9341_SETWINDOW(Xpos, Xpos + Width - 1, Ypos, Ypos + Height - 1);
 8001770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001774:	813b      	strh	r3, [r7, #8]
 8001776:	893b      	ldrh	r3, [r7, #8]
 8001778:	ba5b      	rev16	r3, r3
 800177a:	b29b      	uxth	r3, r3
 800177c:	b21b      	sxth	r3, r3
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <ili9341_SetDisplayWindow+0xc8>)
 8001782:	801a      	strh	r2, [r3, #0]
 8001784:	88fa      	ldrh	r2, [r7, #6]
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	4413      	add	r3, r2
 800178a:	b29b      	uxth	r3, r3
 800178c:	3b01      	subs	r3, #1
 800178e:	b29b      	uxth	r3, r3
 8001790:	b21b      	sxth	r3, r3
 8001792:	817b      	strh	r3, [r7, #10]
 8001794:	897b      	ldrh	r3, [r7, #10]
 8001796:	ba5b      	rev16	r3, r3
 8001798:	b29b      	uxth	r3, r3
 800179a:	b21b      	sxth	r3, r3
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <ili9341_SetDisplayWindow+0xc8>)
 80017a0:	805a      	strh	r2, [r3, #2]
 80017a2:	2395      	movs	r3, #149	@ 0x95
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2300      	movs	r3, #0
 80017a8:	2204      	movs	r2, #4
 80017aa:	4916      	ldr	r1, [pc, #88]	@ (8001804 <ili9341_SetDisplayWindow+0xc8>)
 80017ac:	202a      	movs	r0, #42	@ 0x2a
 80017ae:	f000 fe4d 	bl	800244c <LCD_IO_Transaction>
 80017b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017b6:	81bb      	strh	r3, [r7, #12]
 80017b8:	89bb      	ldrh	r3, [r7, #12]
 80017ba:	ba5b      	rev16	r3, r3
 80017bc:	b29b      	uxth	r3, r3
 80017be:	b21b      	sxth	r3, r3
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <ili9341_SetDisplayWindow+0xc8>)
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	88ba      	ldrh	r2, [r7, #4]
 80017c8:	883b      	ldrh	r3, [r7, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	81fb      	strh	r3, [r7, #14]
 80017d6:	89fb      	ldrh	r3, [r7, #14]
 80017d8:	ba5b      	rev16	r3, r3
 80017da:	b29b      	uxth	r3, r3
 80017dc:	b21b      	sxth	r3, r3
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <ili9341_SetDisplayWindow+0xc8>)
 80017e2:	805a      	strh	r2, [r3, #2]
 80017e4:	2395      	movs	r3, #149	@ 0x95
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2300      	movs	r3, #0
 80017ea:	2204      	movs	r2, #4
 80017ec:	4905      	ldr	r1, [pc, #20]	@ (8001804 <ili9341_SetDisplayWindow+0xc8>)
 80017ee:	202b      	movs	r0, #43	@ 0x2b
 80017f0:	f000 fe2c 	bl	800244c <LCD_IO_Transaction>
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd90      	pop	{r4, r7, pc}
 80017fc:	240007a2 	.word	0x240007a2
 8001800:	240007a4 	.word	0x240007a4
 8001804:	2400079c 	.word	0x2400079c

08001808 <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b087      	sub	sp, #28
 800180c:	af02      	add	r7, sp, #8
 800180e:	4604      	mov	r4, r0
 8001810:	4608      	mov	r0, r1
 8001812:	4611      	mov	r1, r2
 8001814:	461a      	mov	r2, r3
 8001816:	4623      	mov	r3, r4
 8001818:	80fb      	strh	r3, [r7, #6]
 800181a:	4603      	mov	r3, r0
 800181c:	80bb      	strh	r3, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	807b      	strh	r3, [r7, #2]
 8001822:	4613      	mov	r3, r2
 8001824:	803b      	strh	r3, [r7, #0]
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 8001826:	4b34      	ldr	r3, [pc, #208]	@ (80018f8 <ili9341_DrawHLine+0xf0>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2be0      	cmp	r3, #224	@ 0xe0
 800182c:	d00a      	beq.n	8001844 <ili9341_DrawHLine+0x3c>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 800182e:	4b32      	ldr	r3, [pc, #200]	@ (80018f8 <ili9341_DrawHLine+0xf0>)
 8001830:	22e0      	movs	r2, #224	@ 0xe0
 8001832:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 8001834:	2395      	movs	r3, #149	@ 0x95
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2300      	movs	r3, #0
 800183a:	2201      	movs	r2, #1
 800183c:	492f      	ldr	r1, [pc, #188]	@ (80018fc <ili9341_DrawHLine+0xf4>)
 800183e:	2036      	movs	r0, #54	@ 0x36
 8001840:	f000 fe04 	bl	800244c <LCD_IO_Transaction>
  }
  ILI9341_SETWINDOW(Xpos, Xpos + Length - 1, Ypos, Ypos);
 8001844:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001848:	813b      	strh	r3, [r7, #8]
 800184a:	893b      	ldrh	r3, [r7, #8]
 800184c:	ba5b      	rev16	r3, r3
 800184e:	b29b      	uxth	r3, r3
 8001850:	b21b      	sxth	r3, r3
 8001852:	b29a      	uxth	r2, r3
 8001854:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <ili9341_DrawHLine+0xf8>)
 8001856:	801a      	strh	r2, [r3, #0]
 8001858:	88ba      	ldrh	r2, [r7, #4]
 800185a:	883b      	ldrh	r3, [r7, #0]
 800185c:	4413      	add	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29b      	uxth	r3, r3
 8001864:	b21b      	sxth	r3, r3
 8001866:	817b      	strh	r3, [r7, #10]
 8001868:	897b      	ldrh	r3, [r7, #10]
 800186a:	ba5b      	rev16	r3, r3
 800186c:	b29b      	uxth	r3, r3
 800186e:	b21b      	sxth	r3, r3
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <ili9341_DrawHLine+0xf8>)
 8001874:	805a      	strh	r2, [r3, #2]
 8001876:	2395      	movs	r3, #149	@ 0x95
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	2204      	movs	r2, #4
 800187e:	4920      	ldr	r1, [pc, #128]	@ (8001900 <ili9341_DrawHLine+0xf8>)
 8001880:	202a      	movs	r0, #42	@ 0x2a
 8001882:	f000 fde3 	bl	800244c <LCD_IO_Transaction>
 8001886:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800188a:	81bb      	strh	r3, [r7, #12]
 800188c:	89bb      	ldrh	r3, [r7, #12]
 800188e:	ba5b      	rev16	r3, r3
 8001890:	b29b      	uxth	r3, r3
 8001892:	b21b      	sxth	r3, r3
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <ili9341_DrawHLine+0xf8>)
 8001898:	801a      	strh	r2, [r3, #0]
 800189a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800189e:	81fb      	strh	r3, [r7, #14]
 80018a0:	89fb      	ldrh	r3, [r7, #14]
 80018a2:	ba5b      	rev16	r3, r3
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b21b      	sxth	r3, r3
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <ili9341_DrawHLine+0xf8>)
 80018ac:	805a      	strh	r2, [r3, #2]
 80018ae:	2395      	movs	r3, #149	@ 0x95
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2300      	movs	r3, #0
 80018b4:	2204      	movs	r2, #4
 80018b6:	4912      	ldr	r1, [pc, #72]	@ (8001900 <ili9341_DrawHLine+0xf8>)
 80018b8:	202b      	movs	r0, #43	@ 0x2b
 80018ba:	f000 fdc7 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_DrawFill(RGBCode, Length);
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <ili9341_DrawHLine+0xfc>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00a      	beq.n	80018dc <ili9341_DrawHLine+0xd4>
 80018c6:	2395      	movs	r3, #149	@ 0x95
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2300      	movs	r3, #0
 80018cc:	2201      	movs	r2, #1
 80018ce:	490e      	ldr	r1, [pc, #56]	@ (8001908 <ili9341_DrawHLine+0x100>)
 80018d0:	203a      	movs	r0, #58	@ 0x3a
 80018d2:	f000 fdbb 	bl	800244c <LCD_IO_Transaction>
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <ili9341_DrawHLine+0xfc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	883a      	ldrh	r2, [r7, #0]
 80018de:	1db9      	adds	r1, r7, #6
 80018e0:	f240 1325 	movw	r3, #293	@ 0x125
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2300      	movs	r3, #0
 80018e8:	202c      	movs	r0, #44	@ 0x2c
 80018ea:	f000 fdaf 	bl	800244c <LCD_IO_Transaction>
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	bf00      	nop
 80018f8:	24000054 	.word	0x24000054
 80018fc:	080210c5 	.word	0x080210c5
 8001900:	2400079c 	.word	0x2400079c
 8001904:	240007a6 	.word	0x240007a6
 8001908:	0801f178 	.word	0x0801f178

0800190c <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b087      	sub	sp, #28
 8001910:	af02      	add	r7, sp, #8
 8001912:	4604      	mov	r4, r0
 8001914:	4608      	mov	r0, r1
 8001916:	4611      	mov	r1, r2
 8001918:	461a      	mov	r2, r3
 800191a:	4623      	mov	r3, r4
 800191c:	80fb      	strh	r3, [r7, #6]
 800191e:	4603      	mov	r3, r0
 8001920:	80bb      	strh	r3, [r7, #4]
 8001922:	460b      	mov	r3, r1
 8001924:	807b      	strh	r3, [r7, #2]
 8001926:	4613      	mov	r3, r2
 8001928:	803b      	strh	r3, [r7, #0]
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 800192a:	4b34      	ldr	r3, [pc, #208]	@ (80019fc <ili9341_DrawVLine+0xf0>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2be0      	cmp	r3, #224	@ 0xe0
 8001930:	d00a      	beq.n	8001948 <ili9341_DrawVLine+0x3c>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 8001932:	4b32      	ldr	r3, [pc, #200]	@ (80019fc <ili9341_DrawVLine+0xf0>)
 8001934:	22e0      	movs	r2, #224	@ 0xe0
 8001936:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 8001938:	2395      	movs	r3, #149	@ 0x95
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2300      	movs	r3, #0
 800193e:	2201      	movs	r2, #1
 8001940:	492f      	ldr	r1, [pc, #188]	@ (8001a00 <ili9341_DrawVLine+0xf4>)
 8001942:	2036      	movs	r0, #54	@ 0x36
 8001944:	f000 fd82 	bl	800244c <LCD_IO_Transaction>
  }
  ILI9341_SETWINDOW(Xpos, Xpos, Ypos, Ypos + Length - 1);
 8001948:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800194c:	813b      	strh	r3, [r7, #8]
 800194e:	893b      	ldrh	r3, [r7, #8]
 8001950:	ba5b      	rev16	r3, r3
 8001952:	b29b      	uxth	r3, r3
 8001954:	b21b      	sxth	r3, r3
 8001956:	b29a      	uxth	r2, r3
 8001958:	4b2a      	ldr	r3, [pc, #168]	@ (8001a04 <ili9341_DrawVLine+0xf8>)
 800195a:	801a      	strh	r2, [r3, #0]
 800195c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001960:	817b      	strh	r3, [r7, #10]
 8001962:	897b      	ldrh	r3, [r7, #10]
 8001964:	ba5b      	rev16	r3, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	b21b      	sxth	r3, r3
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b25      	ldr	r3, [pc, #148]	@ (8001a04 <ili9341_DrawVLine+0xf8>)
 800196e:	805a      	strh	r2, [r3, #2]
 8001970:	2395      	movs	r3, #149	@ 0x95
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2300      	movs	r3, #0
 8001976:	2204      	movs	r2, #4
 8001978:	4922      	ldr	r1, [pc, #136]	@ (8001a04 <ili9341_DrawVLine+0xf8>)
 800197a:	202a      	movs	r0, #42	@ 0x2a
 800197c:	f000 fd66 	bl	800244c <LCD_IO_Transaction>
 8001980:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001984:	81bb      	strh	r3, [r7, #12]
 8001986:	89bb      	ldrh	r3, [r7, #12]
 8001988:	ba5b      	rev16	r3, r3
 800198a:	b29b      	uxth	r3, r3
 800198c:	b21b      	sxth	r3, r3
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b1c      	ldr	r3, [pc, #112]	@ (8001a04 <ili9341_DrawVLine+0xf8>)
 8001992:	801a      	strh	r2, [r3, #0]
 8001994:	887a      	ldrh	r2, [r7, #2]
 8001996:	883b      	ldrh	r3, [r7, #0]
 8001998:	4413      	add	r3, r2
 800199a:	b29b      	uxth	r3, r3
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	81fb      	strh	r3, [r7, #14]
 80019a4:	89fb      	ldrh	r3, [r7, #14]
 80019a6:	ba5b      	rev16	r3, r3
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <ili9341_DrawVLine+0xf8>)
 80019b0:	805a      	strh	r2, [r3, #2]
 80019b2:	2395      	movs	r3, #149	@ 0x95
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2300      	movs	r3, #0
 80019b8:	2204      	movs	r2, #4
 80019ba:	4912      	ldr	r1, [pc, #72]	@ (8001a04 <ili9341_DrawVLine+0xf8>)
 80019bc:	202b      	movs	r0, #43	@ 0x2b
 80019be:	f000 fd45 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_DrawFill(RGBCode, Length);
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <ili9341_DrawVLine+0xfc>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00a      	beq.n	80019e0 <ili9341_DrawVLine+0xd4>
 80019ca:	2395      	movs	r3, #149	@ 0x95
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2300      	movs	r3, #0
 80019d0:	2201      	movs	r2, #1
 80019d2:	490e      	ldr	r1, [pc, #56]	@ (8001a0c <ili9341_DrawVLine+0x100>)
 80019d4:	203a      	movs	r0, #58	@ 0x3a
 80019d6:	f000 fd39 	bl	800244c <LCD_IO_Transaction>
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <ili9341_DrawVLine+0xfc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	883a      	ldrh	r2, [r7, #0]
 80019e2:	1db9      	adds	r1, r7, #6
 80019e4:	f240 1325 	movw	r3, #293	@ 0x125
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2300      	movs	r3, #0
 80019ec:	202c      	movs	r0, #44	@ 0x2c
 80019ee:	f000 fd2d 	bl	800244c <LCD_IO_Transaction>
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd90      	pop	{r4, r7, pc}
 80019fa:	bf00      	nop
 80019fc:	24000054 	.word	0x24000054
 8001a00:	080210c5 	.word	0x080210c5
 8001a04:	2400079c 	.word	0x2400079c
 8001a08:	240007a6 	.word	0x240007a6
 8001a0c:	0801f178 	.word	0x0801f178

08001a10 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	4604      	mov	r4, r0
 8001a18:	4608      	mov	r0, r1
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4623      	mov	r3, r4
 8001a20:	80fb      	strh	r3, [r7, #6]
 8001a22:	4603      	mov	r3, r0
 8001a24:	80bb      	strh	r3, [r7, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	807b      	strh	r3, [r7, #2]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	803b      	strh	r3, [r7, #0]
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 8001a2e:	4b39      	ldr	r3, [pc, #228]	@ (8001b14 <ili9341_FillRect+0x104>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2be0      	cmp	r3, #224	@ 0xe0
 8001a34:	d00a      	beq.n	8001a4c <ili9341_FillRect+0x3c>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 8001a36:	4b37      	ldr	r3, [pc, #220]	@ (8001b14 <ili9341_FillRect+0x104>)
 8001a38:	22e0      	movs	r2, #224	@ 0xe0
 8001a3a:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 8001a3c:	2395      	movs	r3, #149	@ 0x95
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2300      	movs	r3, #0
 8001a42:	2201      	movs	r2, #1
 8001a44:	4934      	ldr	r1, [pc, #208]	@ (8001b18 <ili9341_FillRect+0x108>)
 8001a46:	2036      	movs	r0, #54	@ 0x36
 8001a48:	f000 fd00 	bl	800244c <LCD_IO_Transaction>
  }
  ILI9341_SETWINDOW(Xpos, Xpos + Xsize - 1, Ypos, Ypos + Ysize - 1);
 8001a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a50:	813b      	strh	r3, [r7, #8]
 8001a52:	893b      	ldrh	r3, [r7, #8]
 8001a54:	ba5b      	rev16	r3, r3
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b1c <ili9341_FillRect+0x10c>)
 8001a5e:	801a      	strh	r2, [r3, #0]
 8001a60:	88fa      	ldrh	r2, [r7, #6]
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	817b      	strh	r3, [r7, #10]
 8001a70:	897b      	ldrh	r3, [r7, #10]
 8001a72:	ba5b      	rev16	r3, r3
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b28      	ldr	r3, [pc, #160]	@ (8001b1c <ili9341_FillRect+0x10c>)
 8001a7c:	805a      	strh	r2, [r3, #2]
 8001a7e:	2395      	movs	r3, #149	@ 0x95
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2300      	movs	r3, #0
 8001a84:	2204      	movs	r2, #4
 8001a86:	4925      	ldr	r1, [pc, #148]	@ (8001b1c <ili9341_FillRect+0x10c>)
 8001a88:	202a      	movs	r0, #42	@ 0x2a
 8001a8a:	f000 fcdf 	bl	800244c <LCD_IO_Transaction>
 8001a8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a92:	81bb      	strh	r3, [r7, #12]
 8001a94:	89bb      	ldrh	r3, [r7, #12]
 8001a96:	ba5b      	rev16	r3, r3
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b1c <ili9341_FillRect+0x10c>)
 8001aa0:	801a      	strh	r2, [r3, #0]
 8001aa2:	88ba      	ldrh	r2, [r7, #4]
 8001aa4:	883b      	ldrh	r3, [r7, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	81fb      	strh	r3, [r7, #14]
 8001ab2:	89fb      	ldrh	r3, [r7, #14]
 8001ab4:	ba5b      	rev16	r3, r3
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <ili9341_FillRect+0x10c>)
 8001abe:	805a      	strh	r2, [r3, #2]
 8001ac0:	2395      	movs	r3, #149	@ 0x95
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	4914      	ldr	r1, [pc, #80]	@ (8001b1c <ili9341_FillRect+0x10c>)
 8001aca:	202b      	movs	r0, #43	@ 0x2b
 8001acc:	f000 fcbe 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_DrawFill(RGBCode, Xsize * Ysize);
 8001ad0:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <ili9341_FillRect+0x110>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00a      	beq.n	8001aee <ili9341_FillRect+0xde>
 8001ad8:	2395      	movs	r3, #149	@ 0x95
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2300      	movs	r3, #0
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4910      	ldr	r1, [pc, #64]	@ (8001b24 <ili9341_FillRect+0x114>)
 8001ae2:	203a      	movs	r0, #58	@ 0x3a
 8001ae4:	f000 fcb2 	bl	800244c <LCD_IO_Transaction>
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <ili9341_FillRect+0x110>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	883a      	ldrh	r2, [r7, #0]
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	f240 1325 	movw	r3, #293	@ 0x125
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	f107 0120 	add.w	r1, r7, #32
 8001b04:	202c      	movs	r0, #44	@ 0x2c
 8001b06:	f000 fca1 	bl	800244c <LCD_IO_Transaction>
}
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd90      	pop	{r4, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	24000054 	.word	0x24000054
 8001b18:	080210c5 	.word	0x080210c5
 8001b1c:	2400079c 	.word	0x2400079c
 8001b20:	240007a6 	.word	0x240007a6
 8001b24:	0801f178 	.word	0x0801f178

08001b28 <ili9341_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9341_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	4603      	mov	r3, r0
 8001b30:	603a      	str	r2, [r7, #0]
 8001b32:	80fb      	strh	r3, [r7, #6]
 8001b34:	460b      	mov	r3, r1
 8001b36:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001b3e:	617b      	str	r3, [r7, #20]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8001b46:	613b      	str	r3, [r7, #16]
  size = (size - index) / 2;
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	085b      	lsrs	r3, r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
  pbmp += index;
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4413      	add	r3, r2
 8001b58:	603b      	str	r3, [r7, #0]

  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_UP)
 8001b5a:	4b27      	ldr	r3, [pc, #156]	@ (8001bf8 <ili9341_DrawBitmap+0xd0>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b60:	d00a      	beq.n	8001b78 <ili9341_DrawBitmap+0x50>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_UP;
 8001b62:	4b25      	ldr	r3, [pc, #148]	@ (8001bf8 <ili9341_DrawBitmap+0xd0>)
 8001b64:	22a0      	movs	r2, #160	@ 0xa0
 8001b66:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenUp, 1);
 8001b68:	2395      	movs	r3, #149	@ 0x95
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4922      	ldr	r1, [pc, #136]	@ (8001bfc <ili9341_DrawBitmap+0xd4>)
 8001b72:	2036      	movs	r0, #54	@ 0x36
 8001b74:	f000 fc6a 	bl	800244c <LCD_IO_Transaction>
  }
  transdata.d16[0] = __REVSH(ILI9341_SIZE_Y - 1 - yEnd);
 8001b78:	4b21      	ldr	r3, [pc, #132]	@ (8001c00 <ili9341_DrawBitmap+0xd8>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	81bb      	strh	r3, [r7, #12]
 8001b86:	89bb      	ldrh	r3, [r7, #12]
 8001b88:	ba5b      	rev16	r3, r3
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <ili9341_DrawBitmap+0xdc>)
 8001b92:	801a      	strh	r2, [r3, #0]
  transdata.d16[1] = __REVSH(ILI9341_SIZE_Y - 1 - yStart);
 8001b94:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <ili9341_DrawBitmap+0xe0>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	81fb      	strh	r3, [r7, #14]
 8001ba2:	89fb      	ldrh	r3, [r7, #14]
 8001ba4:	ba5b      	rev16	r3, r3
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <ili9341_DrawBitmap+0xdc>)
 8001bae:	805a      	strh	r2, [r3, #2]
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PASET, &transdata, 4);
 8001bb0:	2395      	movs	r3, #149	@ 0x95
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	4912      	ldr	r1, [pc, #72]	@ (8001c04 <ili9341_DrawBitmap+0xdc>)
 8001bba:	202b      	movs	r0, #43	@ 0x2b
 8001bbc:	f000 fc46 	bl	800244c <LCD_IO_Transaction>
  LCD_IO_DrawBitmap(pbmp, size);
 8001bc0:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <ili9341_DrawBitmap+0xe4>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00a      	beq.n	8001bde <ili9341_DrawBitmap+0xb6>
 8001bc8:	2395      	movs	r3, #149	@ 0x95
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2201      	movs	r2, #1
 8001bd0:	490f      	ldr	r1, [pc, #60]	@ (8001c10 <ili9341_DrawBitmap+0xe8>)
 8001bd2:	203a      	movs	r0, #58	@ 0x3a
 8001bd4:	f000 fc3a 	bl	800244c <LCD_IO_Transaction>
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <ili9341_DrawBitmap+0xe4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	23a5      	movs	r3, #165	@ 0xa5
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2300      	movs	r3, #0
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	6839      	ldr	r1, [r7, #0]
 8001be8:	202c      	movs	r0, #44	@ 0x2c
 8001bea:	f000 fc2f 	bl	800244c <LCD_IO_Transaction>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	24000054 	.word	0x24000054
 8001bfc:	080210c4 	.word	0x080210c4
 8001c00:	240007a4 	.word	0x240007a4
 8001c04:	2400079c 	.word	0x2400079c
 8001c08:	240007a2 	.word	0x240007a2
 8001c0c:	240007a6 	.word	0x240007a6
 8001c10:	0801f178 	.word	0x0801f178

08001c14 <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	4608      	mov	r0, r1
 8001c1e:	4611      	mov	r1, r2
 8001c20:	461a      	mov	r2, r3
 8001c22:	4623      	mov	r3, r4
 8001c24:	80fb      	strh	r3, [r7, #6]
 8001c26:	4603      	mov	r3, r0
 8001c28:	80bb      	strh	r3, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	807b      	strh	r3, [r7, #2]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	803b      	strh	r3, [r7, #0]
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <ili9341_DrawRGBImage+0x88>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2be0      	cmp	r3, #224	@ 0xe0
 8001c38:	d00a      	beq.n	8001c50 <ili9341_DrawRGBImage+0x3c>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 8001c3a:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <ili9341_DrawRGBImage+0x88>)
 8001c3c:	22e0      	movs	r2, #224	@ 0xe0
 8001c3e:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 8001c40:	2395      	movs	r3, #149	@ 0x95
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2300      	movs	r3, #0
 8001c46:	2201      	movs	r2, #1
 8001c48:	4915      	ldr	r1, [pc, #84]	@ (8001ca0 <ili9341_DrawRGBImage+0x8c>)
 8001c4a:	2036      	movs	r0, #54	@ 0x36
 8001c4c:	f000 fbfe 	bl	800244c <LCD_IO_Transaction>
  }
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8001c50:	883b      	ldrh	r3, [r7, #0]
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	88b9      	ldrh	r1, [r7, #4]
 8001c56:	88f8      	ldrh	r0, [r7, #6]
 8001c58:	f7ff fd70 	bl	800173c <ili9341_SetDisplayWindow>
  LCD_IO_DrawBitmap(pData, Xsize * Ysize);
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <ili9341_DrawRGBImage+0x90>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00a      	beq.n	8001c7a <ili9341_DrawRGBImage+0x66>
 8001c64:	2395      	movs	r3, #149	@ 0x95
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	490e      	ldr	r1, [pc, #56]	@ (8001ca8 <ili9341_DrawRGBImage+0x94>)
 8001c6e:	203a      	movs	r0, #58	@ 0x3a
 8001c70:	f000 fbec 	bl	800244c <LCD_IO_Transaction>
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <ili9341_DrawRGBImage+0x90>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	883a      	ldrh	r2, [r7, #0]
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	23a5      	movs	r3, #165	@ 0xa5
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	202c      	movs	r0, #44	@ 0x2c
 8001c8e:	f000 fbdd 	bl	800244c <LCD_IO_Transaction>
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd90      	pop	{r4, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	24000054 	.word	0x24000054
 8001ca0:	080210c5 	.word	0x080210c5
 8001ca4:	240007a6 	.word	0x240007a6
 8001ca8:	0801f178 	.word	0x0801f178

08001cac <ili9341_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	4608      	mov	r0, r1
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4623      	mov	r3, r4
 8001cbc:	80fb      	strh	r3, [r7, #6]
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80bb      	strh	r3, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	807b      	strh	r3, [r7, #2]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	803b      	strh	r3, [r7, #0]
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 8001cca:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <ili9341_ReadRGBImage+0x88>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2be0      	cmp	r3, #224	@ 0xe0
 8001cd0:	d00a      	beq.n	8001ce8 <ili9341_ReadRGBImage+0x3c>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 8001cd2:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <ili9341_ReadRGBImage+0x88>)
 8001cd4:	22e0      	movs	r2, #224	@ 0xe0
 8001cd6:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 8001cd8:	2395      	movs	r3, #149	@ 0x95
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4915      	ldr	r1, [pc, #84]	@ (8001d38 <ili9341_ReadRGBImage+0x8c>)
 8001ce2:	2036      	movs	r0, #54	@ 0x36
 8001ce4:	f000 fbb2 	bl	800244c <LCD_IO_Transaction>
  }
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8001ce8:	883b      	ldrh	r3, [r7, #0]
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	88b9      	ldrh	r1, [r7, #4]
 8001cee:	88f8      	ldrh	r0, [r7, #6]
 8001cf0:	f7ff fd24 	bl	800173c <ili9341_SetDisplayWindow>
  LCD_IO_ReadBitmap(pData, Xsize * Ysize);
 8001cf4:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <ili9341_ReadRGBImage+0x90>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10a      	bne.n	8001d12 <ili9341_ReadRGBImage+0x66>
 8001cfc:	2395      	movs	r3, #149	@ 0x95
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2300      	movs	r3, #0
 8001d02:	2201      	movs	r2, #1
 8001d04:	490e      	ldr	r1, [pc, #56]	@ (8001d40 <ili9341_ReadRGBImage+0x94>)
 8001d06:	203a      	movs	r0, #58	@ 0x3a
 8001d08:	f000 fba0 	bl	800244c <LCD_IO_Transaction>
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <ili9341_ReadRGBImage+0x90>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	887b      	ldrh	r3, [r7, #2]
 8001d14:	883a      	ldrh	r2, [r7, #0]
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	23c9      	movs	r3, #201	@ 0xc9
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2301      	movs	r3, #1
 8001d22:	69b9      	ldr	r1, [r7, #24]
 8001d24:	202e      	movs	r0, #46	@ 0x2e
 8001d26:	f000 fb91 	bl	800244c <LCD_IO_Transaction>
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}
 8001d32:	bf00      	nop
 8001d34:	24000054 	.word	0x24000054
 8001d38:	080210c5 	.word	0x080210c5
 8001d3c:	240007a6 	.word	0x240007a6
 8001d40:	0801f17c 	.word	0x0801f17c

08001d44 <ili9341_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9341_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	@ 0x28
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	80bb      	strh	r3, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9341_ORIENTATION == 3)
  if((TopFix != __REVSH(scrparam[3])) || (BottonFix != __REVSH(scrparam[1])))
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	4a4d      	ldr	r2, [pc, #308]	@ (8001e90 <ili9341_Scroll+0x14c>)
 8001d5a:	88d2      	ldrh	r2, [r2, #6]
 8001d5c:	b212      	sxth	r2, r2
 8001d5e:	83fa      	strh	r2, [r7, #30]
 8001d60:	8bfa      	ldrh	r2, [r7, #30]
 8001d62:	ba52      	rev16	r2, r2
 8001d64:	b292      	uxth	r2, r2
 8001d66:	b212      	sxth	r2, r2
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d10a      	bne.n	8001d82 <ili9341_Scroll+0x3e>
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	4a48      	ldr	r2, [pc, #288]	@ (8001e90 <ili9341_Scroll+0x14c>)
 8001d70:	8852      	ldrh	r2, [r2, #2]
 8001d72:	b212      	sxth	r2, r2
 8001d74:	83ba      	strh	r2, [r7, #28]
 8001d76:	8bba      	ldrh	r2, [r7, #28]
 8001d78:	ba52      	rev16	r2, r2
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	b212      	sxth	r2, r2
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d02b      	beq.n	8001dda <ili9341_Scroll+0x96>
  {
    scrparam[3] = __REVSH(TopFix);
 8001d82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d86:	82fb      	strh	r3, [r7, #22]
 8001d88:	8afb      	ldrh	r3, [r7, #22]
 8001d8a:	ba5b      	rev16	r3, r3
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b3f      	ldr	r3, [pc, #252]	@ (8001e90 <ili9341_Scroll+0x14c>)
 8001d94:	80da      	strh	r2, [r3, #6]
    scrparam[1] = __REVSH(BottonFix);
 8001d96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d9a:	833b      	strh	r3, [r7, #24]
 8001d9c:	8b3b      	ldrh	r3, [r7, #24]
 8001d9e:	ba5b      	rev16	r3, r3
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	b21b      	sxth	r3, r3
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b3a      	ldr	r3, [pc, #232]	@ (8001e90 <ili9341_Scroll+0x14c>)
 8001da8:	805a      	strh	r2, [r3, #2]
    scrparam[2] = __REVSH(ILI9341_LCD_PIXEL_HEIGHT - TopFix - BottonFix);
 8001daa:	88ba      	ldrh	r2, [r7, #4]
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	4413      	add	r3, r2
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	837b      	strh	r3, [r7, #26]
 8001dbc:	8b7b      	ldrh	r3, [r7, #26]
 8001dbe:	ba5b      	rev16	r3, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b32      	ldr	r3, [pc, #200]	@ (8001e90 <ili9341_Scroll+0x14c>)
 8001dc8:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRDEF, &scrparam[1], 6);
 8001dca:	2395      	movs	r3, #149	@ 0x95
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2206      	movs	r2, #6
 8001dd2:	4930      	ldr	r1, [pc, #192]	@ (8001e94 <ili9341_Scroll+0x150>)
 8001dd4:	2033      	movs	r0, #51	@ 0x33
 8001dd6:	f000 fb39 	bl	800244c <LCD_IO_Transaction>
  }
  Scroll %= __REVSH(scrparam[2]);
 8001dda:	4b2d      	ldr	r3, [pc, #180]	@ (8001e90 <ili9341_Scroll+0x14c>)
 8001ddc:	889b      	ldrh	r3, [r3, #4]
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	82bb      	strh	r3, [r7, #20]
 8001de2:	8abb      	ldrh	r3, [r7, #20]
 8001de4:	ba5b      	rev16	r3, r3
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dee:	fb93 f1f2 	sdiv	r1, r3, r2
 8001df2:	fb01 f202 	mul.w	r2, r1, r2
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8001dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da18      	bge.n	8001e34 <ili9341_Scroll+0xf0>
    Scroll = __REVSH(scrparam[2]) + Scroll + __REVSH(scrparam[1]);
 8001e02:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <ili9341_Scroll+0x14c>)
 8001e04:	889b      	ldrh	r3, [r3, #4]
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	823b      	strh	r3, [r7, #16]
 8001e0a:	8a3b      	ldrh	r3, [r7, #16]
 8001e0c:	ba5b      	rev16	r3, r3
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	4413      	add	r3, r2
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <ili9341_Scroll+0x14c>)
 8001e1c:	885b      	ldrh	r3, [r3, #2]
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	827b      	strh	r3, [r7, #18]
 8001e22:	8a7b      	ldrh	r3, [r7, #18]
 8001e24:	ba5b      	rev16	r3, r3
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	80fb      	strh	r3, [r7, #6]
 8001e32:	e00c      	b.n	8001e4e <ili9341_Scroll+0x10a>
  else
    Scroll = Scroll + __REVSH(scrparam[1]);
 8001e34:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <ili9341_Scroll+0x14c>)
 8001e36:	885b      	ldrh	r3, [r3, #2]
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	81fb      	strh	r3, [r7, #14]
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	ba5b      	rev16	r3, r3
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4413      	add	r3, r2
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	80fb      	strh	r3, [r7, #6]
  #endif
  if(Scroll != __REVSH(scrparam[0]))
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <ili9341_Scroll+0x14c>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	81bb      	strh	r3, [r7, #12]
 8001e56:	89bb      	ldrh	r3, [r7, #12]
 8001e58:	ba5b      	rev16	r3, r3
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d010      	beq.n	8001e88 <ili9341_Scroll+0x144>
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	817b      	strh	r3, [r7, #10]
 8001e6a:	897b      	ldrh	r3, [r7, #10]
 8001e6c:	ba5b      	rev16	r3, r3
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	b21b      	sxth	r3, r3
  {
    scrparam[0] = __REVSH(Scroll);
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <ili9341_Scroll+0x14c>)
 8001e76:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, &scrparam[0], 2);
 8001e78:	2395      	movs	r3, #149	@ 0x95
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	2202      	movs	r2, #2
 8001e80:	4903      	ldr	r1, [pc, #12]	@ (8001e90 <ili9341_Scroll+0x14c>)
 8001e82:	2037      	movs	r0, #55	@ 0x37
 8001e84:	f000 fae2 	bl	800244c <LCD_IO_Transaction>
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	240007a8 	.word	0x240007a8
 8001e94:	240007aa 	.word	0x240007aa

08001e98 <ili9341_UserCommand>:
  * @param  Size      : data number
  * @param  Mode      : 0=write 8bits datas, 1=0=write 16bits datas, 2=read 8bits datas, 3=read 16bits datas
  * @retval None
  */
void ili9341_UserCommand(uint16_t Command, uint8_t* pData, uint32_t Size, uint8_t Mode)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	81fb      	strh	r3, [r7, #14]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	737b      	strb	r3, [r7, #13]
  if(Mode == 0)
 8001eac:	7b7b      	ldrb	r3, [r7, #13]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10a      	bne.n	8001ec8 <ili9341_UserCommand+0x30>
    LCD_IO_WriteCmd8MultipleData8((uint8_t)Command, pData, Size);
 8001eb2:	89fb      	ldrh	r3, [r7, #14]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	2395      	movs	r3, #149	@ 0x95
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	f000 fac3 	bl	800244c <LCD_IO_Transaction>
    LCD_IO_WriteCmd8MultipleData16((uint8_t)Command, pData, Size);
  else if(Mode == 2)
    LCD_IO_ReadCmd8MultipleData8((uint8_t)Command, pData, Size, 1);
  else if(Mode == 3)
    LCD_IO_ReadCmd8MultipleData16((uint8_t)Command, pData, Size, 1);
}
 8001ec6:	e028      	b.n	8001f1a <ili9341_UserCommand+0x82>
  else if(Mode == 1)
 8001ec8:	7b7b      	ldrb	r3, [r7, #13]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10a      	bne.n	8001ee4 <ili9341_UserCommand+0x4c>
    LCD_IO_WriteCmd8MultipleData16((uint8_t)Command, pData, Size);
 8001ece:	89fb      	ldrh	r3, [r7, #14]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	23a5      	movs	r3, #165	@ 0xa5
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	f000 fab5 	bl	800244c <LCD_IO_Transaction>
}
 8001ee2:	e01a      	b.n	8001f1a <ili9341_UserCommand+0x82>
  else if(Mode == 2)
 8001ee4:	7b7b      	ldrb	r3, [r7, #13]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d10a      	bne.n	8001f00 <ili9341_UserCommand+0x68>
    LCD_IO_ReadCmd8MultipleData8((uint8_t)Command, pData, Size, 1);
 8001eea:	89fb      	ldrh	r3, [r7, #14]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	2399      	movs	r3, #153	@ 0x99
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	f000 faa7 	bl	800244c <LCD_IO_Transaction>
}
 8001efe:	e00c      	b.n	8001f1a <ili9341_UserCommand+0x82>
  else if(Mode == 3)
 8001f00:	7b7b      	ldrb	r3, [r7, #13]
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d109      	bne.n	8001f1a <ili9341_UserCommand+0x82>
    LCD_IO_ReadCmd8MultipleData16((uint8_t)Command, pData, Size, 1);
 8001f06:	89fb      	ldrh	r3, [r7, #14]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	23a9      	movs	r3, #169	@ 0xa9
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2301      	movs	r3, #1
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	f000 fa99 	bl	800244c <LCD_IO_Transaction>
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <LcdSpiMode8>:
#endif /* LCD_SPI_MODE */

//-----------------------------------------------------------------------------
/* Set SPI 8bit mode without HAL_SPI_Init */
static inline void LcdSpiMode8(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  LCD_SPI_SETDATASIZE_8BIT(LCD_SPI_HANDLE);
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <LcdSpiMode8+0x28>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f023 021f 	bic.w	r2, r3, #31
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <LcdSpiMode8+0x28>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0207 	orr.w	r2, r2, #7
 8001f3a:	609a      	str	r2, [r3, #8]
  LCD_SPI_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	@ (8001f4c <LcdSpiMode8+0x28>)
 8001f3e:	2207      	movs	r2, #7
 8001f40:	60da      	str	r2, [r3, #12]
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	24000c30 	.word	0x24000c30

08001f50 <LcdSpiMode16>:

/* Set SPI 16bit mode without HAL_SPI_Init */
static inline void LcdSpiMode16(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  LCD_SPI_SETDATASIZE_16BIT(LCD_SPI_HANDLE);
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <LcdSpiMode16+0x28>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f023 021f 	bic.w	r2, r3, #31
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <LcdSpiMode16+0x28>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 020f 	orr.w	r2, r2, #15
 8001f66:	609a      	str	r2, [r3, #8]
  LCD_SPI_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <LcdSpiMode16+0x28>)
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	60da      	str	r2, [r3, #12]
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	24000c30 	.word	0x24000c30

08001f7c <HAL_SPI_TxCpltCallback>:
#if USE_HAL_SPI_REGISTER_CALLBACKS == 0
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
#elif USE_HAL_SPI_REGISTER_CALLBACKS == 1
void HAL_SPI_TxCpltCallback_Lcd(SPI_HandleTypeDef *hspi)
#endif
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if(hspi == &LCD_SPI_HANDLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a2d      	ldr	r2, [pc, #180]	@ (800203c <HAL_SPI_TxCpltCallback+0xc0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d152      	bne.n	8002032 <HAL_SPI_TxCpltCallback+0xb6>
  {
    if(dmastatus.size > dmastatus.trsize)
 8001f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4b2b      	ldr	r3, [pc, #172]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d940      	bls.n	800201a <HAL_SPI_TxCpltCallback+0x9e>
    { /* dma operation is still required */

      if(dmastatus.status == (DMA_STATUS_MULTIDATA | DMA_STATUS_8BIT))
 8001f98:	4b29      	ldr	r3, [pc, #164]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b06      	cmp	r3, #6
 8001f9e:	d107      	bne.n	8001fb0 <HAL_SPI_TxCpltCallback+0x34>
        dmastatus.ptr += dmastatus.trsize;        /* 8bit multidata */
 8001fa0:	4b27      	ldr	r3, [pc, #156]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	4b26      	ldr	r3, [pc, #152]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4a25      	ldr	r2, [pc, #148]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fac:	6113      	str	r3, [r2, #16]
 8001fae:	e018      	b.n	8001fe2 <HAL_SPI_TxCpltCallback+0x66>
      else if(dmastatus.status == (DMA_STATUS_MULTIDATA | DMA_STATUS_16BIT))
 8001fb0:	4b23      	ldr	r3, [pc, #140]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b0a      	cmp	r3, #10
 8001fb6:	d108      	bne.n	8001fca <HAL_SPI_TxCpltCallback+0x4e>
        dmastatus.ptr += dmastatus.trsize << 1; /* 16bit multidata */
 8001fb8:	4b21      	ldr	r3, [pc, #132]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	005a      	lsls	r2, r3, #1
 8001fbe:	4b20      	ldr	r3, [pc, #128]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fc6:	6113      	str	r3, [r2, #16]
 8001fc8:	e00b      	b.n	8001fe2 <HAL_SPI_TxCpltCallback+0x66>
      else if(dmastatus.status == (DMA_STATUS_MULTIDATA | DMA_STATUS_24BIT))
 8001fca:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b12      	cmp	r3, #18
 8001fd0:	d107      	bne.n	8001fe2 <HAL_SPI_TxCpltCallback+0x66>
        dmastatus.ptr += dmastatus.trsize << 1; /* 24bit multidata */
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	005a      	lsls	r2, r3, #1
 8001fd8:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a18      	ldr	r2, [pc, #96]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fe0:	6113      	str	r3, [r2, #16]

      dmastatus.size -= dmastatus.trsize;
 8001fe2:	4b17      	ldr	r3, [pc, #92]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4a16      	ldr	r2, [pc, #88]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fe8:	6852      	ldr	r2, [r2, #4]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001fee:	6053      	str	r3, [r2, #4]
      if(dmastatus.size <= dmastatus.maxtrsize)
 8001ff0:	4b13      	ldr	r3, [pc, #76]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d803      	bhi.n	8002004 <HAL_SPI_TxCpltCallback+0x88>
        dmastatus.trsize = dmastatus.size;
 8001ffc:	4b10      	ldr	r3, [pc, #64]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a0f      	ldr	r2, [pc, #60]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8002002:	6093      	str	r3, [r2, #8]

      #if LCD_RGB24_BUFFSIZE == 0
      HAL_SPI_Transmit_DMA(&LCD_SPI_HANDLE, (uint8_t *)dmastatus.ptr, dmastatus.trsize);
 8002004:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	4619      	mov	r1, r3
 800200a:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	b29b      	uxth	r3, r3
 8002010:	461a      	mov	r2, r3
 8002012:	480a      	ldr	r0, [pc, #40]	@ (800203c <HAL_SPI_TxCpltCallback+0xc0>)
 8002014:	f00f ff8c 	bl	8011f30 <HAL_SPI_Transmit_DMA>
      HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
      LcdDmaTransEnd();
      LCD_IO_DmaTxCpltCallback(hspi);
    }
  }
}
 8002018:	e00b      	b.n	8002032 <HAL_SPI_TxCpltCallback+0xb6>
      HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800201a:	2201      	movs	r2, #1
 800201c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002020:	4808      	ldr	r0, [pc, #32]	@ (8002044 <HAL_SPI_TxCpltCallback+0xc8>)
 8002022:	f009 fab5 	bl	800b590 <HAL_GPIO_WritePin>
      LcdDmaTransEnd();
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_SPI_TxCpltCallback+0xc4>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
      LCD_IO_DmaTxCpltCallback(hspi);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f001 fd05 	bl	8003a3c <LCD_IO_DmaTxCpltCallback>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	24000c30 	.word	0x24000c30
 8002040:	240007b0 	.word	0x240007b0
 8002044:	58020400 	.word	0x58020400

08002048 <LCDWriteFillMultiData8and16>:
/* Wrtite fill and multi data to Lcd (8 and 16 bit mode)
   - pData: 8 or 16 bits data pointer
   - Size: data number
   - Mode: 8 or 16 or 24 bit mode, write or read, fill or multidata (see the LCD_IO_... defines in lcd_io.h file) */
void LCDWriteFillMultiData8and16(uint8_t * pData, uint32_t Size, uint32_t Mode)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  if(Mode & LCD_IO_DATA8)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <LCDWriteFillMultiData8and16+0x1c>
    LcdSpiMode8();
 800205e:	f7ff ff61 	bl	8001f24 <LcdSpiMode8>
 8002062:	e001      	b.n	8002068 <LCDWriteFillMultiData8and16+0x20>
  else
    LcdSpiMode16();
 8002064:	f7ff ff74 	bl	8001f50 <LcdSpiMode16>

  #if LCD_DMA_TX == 1
  if((Size > DMA_MINSIZE) && (!LCD_DMA_UNABLE((uint32_t)pData)))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b10      	cmp	r3, #16
 800206c:	f240 80e5 	bls.w	800223a <LCDWriteFillMultiData8and16+0x1f2>
  { /* DMA mode */
    if(Mode & LCD_IO_DATA8)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00b      	beq.n	8002092 <LCDWriteFillMultiData8and16+0x4a>
    { /* 8bit DMA */
      LCD_SPI_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800207a:	4b8b      	ldr	r3, [pc, #556]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 800207c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800207e:	2200      	movs	r2, #0
 8002080:	615a      	str	r2, [r3, #20]
      LCD_SPI_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002082:	4b89      	ldr	r3, [pc, #548]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 8002084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
      dmastatus.status = DMA_STATUS_8BIT;
 800208a:	4b88      	ldr	r3, [pc, #544]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 800208c:	2204      	movs	r2, #4
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e00c      	b.n	80020ac <LCDWriteFillMultiData8and16+0x64>
    }
    else
    { /* 16bit DMA */
      LCD_SPI_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002092:	4b85      	ldr	r3, [pc, #532]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 8002094:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002096:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800209a:	615a      	str	r2, [r3, #20]
      LCD_SPI_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800209c:	4b82      	ldr	r3, [pc, #520]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 800209e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020a4:	619a      	str	r2, [r3, #24]
      dmastatus.status = DMA_STATUS_16BIT;
 80020a6:	4b81      	ldr	r3, [pc, #516]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 80020a8:	2208      	movs	r2, #8
 80020aa:	601a      	str	r2, [r3, #0]
    }

    if(Mode & LCD_IO_FILL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d011      	beq.n	80020da <LCDWriteFillMultiData8and16+0x92>
    { /* fill */
      LCD_SPI_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 80020b6:	4b7c      	ldr	r3, [pc, #496]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 80020b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
      dmastatus.status |= DMA_STATUS_FILL;
 80020be:	4b7b      	ldr	r3, [pc, #492]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	4a79      	ldr	r2, [pc, #484]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 80020c8:	6013      	str	r3, [r2, #0]
      dmastatus.data = *(uint16_t *)pData;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	881a      	ldrh	r2, [r3, #0]
 80020ce:	4b77      	ldr	r3, [pc, #476]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 80020d0:	829a      	strh	r2, [r3, #20]
      dmastatus.ptr = (uint32_t)&dmastatus.data;
 80020d2:	4a77      	ldr	r2, [pc, #476]	@ (80022b0 <LCDWriteFillMultiData8and16+0x268>)
 80020d4:	4b75      	ldr	r3, [pc, #468]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 80020d6:	611a      	str	r2, [r3, #16]
 80020d8:	e00d      	b.n	80020f6 <LCDWriteFillMultiData8and16+0xae>
    }
    else
    { /* multidata */
      LCD_SPI_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80020da:	4b73      	ldr	r3, [pc, #460]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 80020dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020e2:	611a      	str	r2, [r3, #16]
      dmastatus.status |= DMA_STATUS_MULTIDATA;
 80020e4:	4b71      	ldr	r3, [pc, #452]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	4a6f      	ldr	r2, [pc, #444]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 80020ee:	6013      	str	r3, [r2, #0]
      dmastatus.ptr = (uint32_t)pData;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a6e      	ldr	r2, [pc, #440]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 80020f4:	6113      	str	r3, [r2, #16]
    }

    dmastatus.size = Size;
 80020f6:	4a6d      	ldr	r2, [pc, #436]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	6053      	str	r3, [r2, #4]
    dmastatus.maxtrsize = DMA_MAXSIZE;
 80020fc:	4b6b      	ldr	r3, [pc, #428]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 80020fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002102:	60da      	str	r2, [r3, #12]

    if(Size > DMA_MAXSIZE)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800210a:	4293      	cmp	r3, r2
 800210c:	d904      	bls.n	8002118 <LCDWriteFillMultiData8and16+0xd0>
      dmastatus.trsize = DMA_MAXSIZE;
 800210e:	4b67      	ldr	r3, [pc, #412]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 8002110:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	e002      	b.n	800211e <LCDWriteFillMultiData8and16+0xd6>
    else /* the transaction can be performed with one DMA operation */
      dmastatus.trsize = Size;
 8002118:	4a64      	ldr	r2, [pc, #400]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	6093      	str	r3, [r2, #8]

    __HAL_DMA_DISABLE(LCD_SPI_HANDLE.hdmatx);
 800211e:	4b62      	ldr	r3, [pc, #392]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 8002120:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a63      	ldr	r2, [pc, #396]	@ (80022b4 <LCDWriteFillMultiData8and16+0x26c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d059      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 800212a:	4b5f      	ldr	r3, [pc, #380]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 800212c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a61      	ldr	r2, [pc, #388]	@ (80022b8 <LCDWriteFillMultiData8and16+0x270>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d053      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 8002136:	4b5c      	ldr	r3, [pc, #368]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 8002138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a5f      	ldr	r2, [pc, #380]	@ (80022bc <LCDWriteFillMultiData8and16+0x274>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d04d      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 8002142:	4b59      	ldr	r3, [pc, #356]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 8002144:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a5d      	ldr	r2, [pc, #372]	@ (80022c0 <LCDWriteFillMultiData8and16+0x278>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d047      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 800214e:	4b56      	ldr	r3, [pc, #344]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 8002150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a5b      	ldr	r2, [pc, #364]	@ (80022c4 <LCDWriteFillMultiData8and16+0x27c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d041      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 800215a:	4b53      	ldr	r3, [pc, #332]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 800215c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a59      	ldr	r2, [pc, #356]	@ (80022c8 <LCDWriteFillMultiData8and16+0x280>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d03b      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 8002166:	4b50      	ldr	r3, [pc, #320]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 8002168:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a57      	ldr	r2, [pc, #348]	@ (80022cc <LCDWriteFillMultiData8and16+0x284>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d035      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 8002172:	4b4d      	ldr	r3, [pc, #308]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 8002174:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a55      	ldr	r2, [pc, #340]	@ (80022d0 <LCDWriteFillMultiData8and16+0x288>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02f      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 800217e:	4b4a      	ldr	r3, [pc, #296]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 8002180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a53      	ldr	r2, [pc, #332]	@ (80022d4 <LCDWriteFillMultiData8and16+0x28c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d029      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 800218a:	4b47      	ldr	r3, [pc, #284]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 800218c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a51      	ldr	r2, [pc, #324]	@ (80022d8 <LCDWriteFillMultiData8and16+0x290>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d023      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 8002196:	4b44      	ldr	r3, [pc, #272]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 8002198:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a4f      	ldr	r2, [pc, #316]	@ (80022dc <LCDWriteFillMultiData8and16+0x294>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01d      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 80021a2:	4b41      	ldr	r3, [pc, #260]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 80021a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a4d      	ldr	r2, [pc, #308]	@ (80022e0 <LCDWriteFillMultiData8and16+0x298>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d017      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 80021ae:	4b3e      	ldr	r3, [pc, #248]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 80021b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a4b      	ldr	r2, [pc, #300]	@ (80022e4 <LCDWriteFillMultiData8and16+0x29c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d011      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 80021ba:	4b3b      	ldr	r3, [pc, #236]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 80021bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a49      	ldr	r2, [pc, #292]	@ (80022e8 <LCDWriteFillMultiData8and16+0x2a0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00b      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 80021c6:	4b38      	ldr	r3, [pc, #224]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 80021c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a47      	ldr	r2, [pc, #284]	@ (80022ec <LCDWriteFillMultiData8and16+0x2a4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d005      	beq.n	80021de <LCDWriteFillMultiData8and16+0x196>
 80021d2:	4b35      	ldr	r3, [pc, #212]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 80021d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a45      	ldr	r2, [pc, #276]	@ (80022f0 <LCDWriteFillMultiData8and16+0x2a8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10a      	bne.n	80021f4 <LCDWriteFillMultiData8and16+0x1ac>
 80021de:	4b32      	ldr	r3, [pc, #200]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 80021e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4b30      	ldr	r3, [pc, #192]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 80021e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e009      	b.n	8002208 <LCDWriteFillMultiData8and16+0x1c0>
 80021f4:	4b2c      	ldr	r3, [pc, #176]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 80021f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b2a      	ldr	r3, [pc, #168]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 80021fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
    HAL_DMA_Init(LCD_SPI_HANDLE.hdmatx);
 8002208:	4b27      	ldr	r3, [pc, #156]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 800220a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800220c:	4618      	mov	r0, r3
 800220e:	f005 faf5 	bl	80077fc <HAL_DMA_Init>
    HAL_SPI_Transmit_DMA(&LCD_SPI_HANDLE, (uint8_t *)dmastatus.ptr, dmastatus.trsize);
 8002212:	4b26      	ldr	r3, [pc, #152]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	4619      	mov	r1, r3
 8002218:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	b29b      	uxth	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	4821      	ldr	r0, [pc, #132]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 8002222:	f00f fe85 	bl	8011f30 <HAL_SPI_Transmit_DMA>
    LcdDmaWaitEnd(Mode & LCD_IO_MULTIDATA);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222c:	2b00      	cmp	r3, #0
 800222e:	d071      	beq.n	8002314 <LCDWriteFillMultiData8and16+0x2cc>
 8002230:	4b1e      	ldr	r3, [pc, #120]	@ (80022ac <LCDWriteFillMultiData8and16+0x264>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1fb      	bne.n	8002230 <LCDWriteFillMultiData8and16+0x1e8>
      }
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
    LcdTransEnd();
  }
}
 8002238:	e06c      	b.n	8002314 <LCDWriteFillMultiData8and16+0x2cc>
    if(Mode & LCD_IO_FILL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d05e      	beq.n	8002302 <LCDWriteFillMultiData8and16+0x2ba>
      while(Size--) /* fill 8 and 16bit */
 8002244:	e006      	b.n	8002254 <LCDWriteFillMultiData8and16+0x20c>
        HAL_SPI_Transmit(&LCD_SPI_HANDLE, (uint8_t *)pData, 1, LCD_SPI_TIMEOUT);
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	2201      	movs	r2, #1
 800224c:	68f9      	ldr	r1, [r7, #12]
 800224e:	4816      	ldr	r0, [pc, #88]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 8002250:	f00f fc80 	bl	8011b54 <HAL_SPI_Transmit>
      while(Size--) /* fill 8 and 16bit */
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	1e5a      	subs	r2, r3, #1
 8002258:	60ba      	str	r2, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f3      	bne.n	8002246 <LCDWriteFillMultiData8and16+0x1fe>
 800225e:	e053      	b.n	8002308 <LCDWriteFillMultiData8and16+0x2c0>
        if(Size > DMA_MAXSIZE)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002266:	4293      	cmp	r3, r2
 8002268:	d907      	bls.n	800227a <LCDWriteFillMultiData8and16+0x232>
          trsize = DMA_MAXSIZE;
 800226a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800226e:	617b      	str	r3, [r7, #20]
          Size -= DMA_MAXSIZE;
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <LCDWriteFillMultiData8and16+0x2ac>)
 8002274:	4413      	add	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	e003      	b.n	8002282 <LCDWriteFillMultiData8and16+0x23a>
          trsize = Size;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	617b      	str	r3, [r7, #20]
          Size = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
        HAL_SPI_Transmit(&LCD_SPI_HANDLE, pData, trsize, LCD_SPI_TIMEOUT);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	b29a      	uxth	r2, r3
 8002286:	f04f 33ff 	mov.w	r3, #4294967295
 800228a:	68f9      	ldr	r1, [r7, #12]
 800228c:	4806      	ldr	r0, [pc, #24]	@ (80022a8 <LCDWriteFillMultiData8and16+0x260>)
 800228e:	f00f fc61 	bl	8011b54 <HAL_SPI_Transmit>
        if(Mode & LCD_IO_DATA8)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	2b00      	cmp	r3, #0
 800229a:	d02d      	beq.n	80022f8 <LCDWriteFillMultiData8and16+0x2b0>
          pData += trsize;
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	4413      	add	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e02d      	b.n	8002302 <LCDWriteFillMultiData8and16+0x2ba>
 80022a6:	bf00      	nop
 80022a8:	24000c30 	.word	0x24000c30
 80022ac:	240007b0 	.word	0x240007b0
 80022b0:	240007c4 	.word	0x240007c4
 80022b4:	40020010 	.word	0x40020010
 80022b8:	40020028 	.word	0x40020028
 80022bc:	40020040 	.word	0x40020040
 80022c0:	40020058 	.word	0x40020058
 80022c4:	40020070 	.word	0x40020070
 80022c8:	40020088 	.word	0x40020088
 80022cc:	400200a0 	.word	0x400200a0
 80022d0:	400200b8 	.word	0x400200b8
 80022d4:	40020410 	.word	0x40020410
 80022d8:	40020428 	.word	0x40020428
 80022dc:	40020440 	.word	0x40020440
 80022e0:	40020458 	.word	0x40020458
 80022e4:	40020470 	.word	0x40020470
 80022e8:	40020488 	.word	0x40020488
 80022ec:	400204a0 	.word	0x400204a0
 80022f0:	400204b8 	.word	0x400204b8
 80022f4:	ffff0002 	.word	0xffff0002
          pData += (trsize << 1);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
      while(Size)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ab      	bne.n	8002260 <LCDWriteFillMultiData8and16+0x218>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002308:	2201      	movs	r2, #1
 800230a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800230e:	4803      	ldr	r0, [pc, #12]	@ (800231c <LCDWriteFillMultiData8and16+0x2d4>)
 8002310:	f009 f93e 	bl	800b590 <HAL_GPIO_WritePin>
}
 8002314:	bf00      	nop
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	58020400 	.word	0x58020400

08002320 <LCDWriteFillMultiData16to24>:
/* Wrtite fill and multi data to Lcd (convert RGB16 bit (5-6-5) to RGB24 bit (8-8-8) mode, no dma capability)
   - pData: RGB 16 bits data pointer
   - Size: data number
   - Mode: 8 or 16 or 24 bit mode, write or read, fill or multidata (see the LCD_IO_... defines in lcd_io.h file) */
void LCDWriteFillMultiData16to24(uint8_t * pData, uint32_t Size, uint32_t Mode)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  LcdSpiMode8();
 800232c:	f7ff fdfa 	bl	8001f24 <LcdSpiMode8>
  else
  #endif
  { /* not DMA mode */
    #if LCD_RGB24_BUFFSIZE == 0
    uint32_t rgb888;
    if(Mode & LCD_IO_FILL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d03b      	beq.n	80023b2 <LCDWriteFillMultiData16to24+0x92>
    { /* fill 16bit to 24bit */
      rgb888 = RGB565TO888(*(uint16_t *)pData);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	f403 0278 	and.w	r2, r3, #16252928	@ 0xf80000
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	015b      	lsls	r3, r3, #5
 800234a:	f403 437c 	and.w	r3, r3, #64512	@ 0xfc00
 800234e:	431a      	orrs	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
      while(Size--)
 800235c:	e007      	b.n	800236e <LCDWriteFillMultiData16to24+0x4e>
        HAL_SPI_Transmit(&LCD_SPI_HANDLE, (uint8_t *)&rgb888, 3, LCD_SPI_TIMEOUT);
 800235e:	f107 0114 	add.w	r1, r7, #20
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	2203      	movs	r2, #3
 8002368:	4819      	ldr	r0, [pc, #100]	@ (80023d0 <LCDWriteFillMultiData16to24+0xb0>)
 800236a:	f00f fbf3 	bl	8011b54 <HAL_SPI_Transmit>
      while(Size--)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1e5a      	subs	r2, r3, #1
 8002372:	60ba      	str	r2, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f2      	bne.n	800235e <LCDWriteFillMultiData16to24+0x3e>
 8002378:	e020      	b.n	80023bc <LCDWriteFillMultiData16to24+0x9c>
    }
    else
    { /* multidata 16bit to 24bit */
      while(Size--)
      {
        rgb888 = RGB565TO888(*(uint16_t *)pData);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	f403 0278 	and.w	r2, r3, #16252928	@ 0xf80000
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	015b      	lsls	r3, r3, #5
 800238a:	f403 437c 	and.w	r3, r3, #64512	@ 0xfc00
 800238e:	431a      	orrs	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
        HAL_SPI_Transmit(&LCD_SPI_HANDLE, (uint8_t *)&rgb888, 3, LCD_SPI_TIMEOUT);
 800239c:	f107 0114 	add.w	r1, r7, #20
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
 80023a4:	2203      	movs	r2, #3
 80023a6:	480a      	ldr	r0, [pc, #40]	@ (80023d0 <LCDWriteFillMultiData16to24+0xb0>)
 80023a8:	f00f fbd4 	bl	8011b54 <HAL_SPI_Transmit>
        pData+=2;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3302      	adds	r3, #2
 80023b0:	60fb      	str	r3, [r7, #12]
      while(Size--)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1e5a      	subs	r2, r3, #1
 80023b6:	60ba      	str	r2, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1de      	bne.n	800237a <LCDWriteFillMultiData16to24+0x5a>
        HAL_SPI_Transmit(&LCD_SPI_HANDLE, lcd_rgb24_buffer, trsize * 3, LCD_SPI_TIMEOUT);
        pData += trsize << 1;
      }
    }
    #endif /* #elif LCD_RGB24_BUFFSIZE > 0 */
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80023bc:	2201      	movs	r2, #1
 80023be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023c2:	4804      	ldr	r0, [pc, #16]	@ (80023d4 <LCDWriteFillMultiData16to24+0xb4>)
 80023c4:	f009 f8e4 	bl	800b590 <HAL_GPIO_WritePin>
    LcdTransEnd();
  }
}
 80023c8:	bf00      	nop
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	24000c30 	.word	0x24000c30
 80023d4:	58020400 	.word	0x58020400

080023d8 <LCD_Delay>:
//=============================================================================
/* Public functions */

/* n millisec delay */
void LCD_Delay(uint32_t Delay)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  #ifndef  osCMSIS
  HAL_Delay(Delay);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f003 f915 	bl	8005610 <HAL_Delay>
  #else
  osDelay(Delay);
  #endif
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <LCD_IO_Bl_OnOff>:

/* Backlight on-off (Bl=0 -> off, Bl=1 -> on) */
//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  #if defined(LCD_BL_GPIO_Port) && defined (LCD_BL_Pin)
  if(Bl)
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <LCD_IO_Bl_OnOff+0x1c>
    #if LCD_BLON == 0
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
    #elif LCD_BLON == 1
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8002400:	2201      	movs	r2, #1
 8002402:	2101      	movs	r1, #1
 8002404:	4806      	ldr	r0, [pc, #24]	@ (8002420 <LCD_IO_Bl_OnOff+0x30>)
 8002406:	f009 f8c3 	bl	800b590 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
    #elif LCD_BLON == 1
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
    #endif
  #endif
}
 800240a:	e004      	b.n	8002416 <LCD_IO_Bl_OnOff+0x26>
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	2101      	movs	r1, #1
 8002410:	4803      	ldr	r0, [pc, #12]	@ (8002420 <LCD_IO_Bl_OnOff+0x30>)
 8002412:	f009 f8bd 	bl	800b590 <HAL_GPIO_WritePin>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	58020400 	.word	0x58020400

08002424 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
/* Lcd IO init, reset, spi speed init, get the freertos task id */
void LCD_IO_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  LCD_Delay(50);
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
  LCD_Delay(50);
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
  #endif
  LCD_Delay(10);
 8002428:	200a      	movs	r0, #10
 800242a:	f7ff ffd5 	bl	80023d8 <LCD_Delay>
  #if defined(LCD_SPI_SPD_WRITE)
  LCD_SPI_SETBAUDRATE(LCD_SPI_HANDLE, LCD_SPI_SPD_WRITE);
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <LCD_IO_Init+0x24>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8002438:	4b03      	ldr	r3, [pc, #12]	@ (8002448 <LCD_IO_Init+0x24>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002440:	609a      	str	r2, [r3, #8]
  #endif
  #if LCD_DMA_RX == 1
  HAL_SPI_RegisterCallback(&LCD_SPI_HANDLE, HAL_SPI_RX_COMPLETE_CB_ID, (pSPI_CallbackTypeDef)HAL_SPI_RxCpltCallback_Lcd);
  #endif
  #endif  /* #if USE_HAL_SPI_REGISTER_CALLBACKS == 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	24000c30 	.word	0x24000c30

0800244c <LCD_IO_Transaction>:
   - pData: 8 or 16 bits data pointer
   - Size: data number
   - DummySize: dummy byte number at read
   - Mode: 8 or 16 or 24 bit mode, write or read, fill or multidata (see the LCD_IO_... defines in lcd_io.h file) */
void LCD_IO_Transaction(uint16_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize, uint32_t Mode)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4603      	mov	r3, r0
 800245a:	81fb      	strh	r3, [r7, #14]
  #if LCD_SPI_MODE == 0  /* only TX mode */
  if(Mode & LCD_IO_READ)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d14a      	bne.n	80024fc <LCD_IO_Transaction+0xb0>
    return;
  #endif

  LcdTransStart();
 8002466:	4b27      	ldr	r3, [pc, #156]	@ (8002504 <LCD_IO_Transaction+0xb8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1fb      	bne.n	8002466 <LCD_IO_Transaction+0x1a>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800246e:	2200      	movs	r2, #0
 8002470:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002474:	4824      	ldr	r0, [pc, #144]	@ (8002508 <LCD_IO_Transaction+0xbc>)
 8002476:	f009 f88b 	bl	800b590 <HAL_GPIO_WritePin>

  /* Command write */
  if(Mode & LCD_IO_CMD8)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <LCD_IO_Transaction+0x3e>
    LcdSpiMode8();
 8002484:	f7ff fd4e 	bl	8001f24 <LcdSpiMode8>
 8002488:	e006      	b.n	8002498 <LCD_IO_Transaction+0x4c>
  else if(Mode & LCD_IO_CMD16)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <LCD_IO_Transaction+0x4c>
    LcdSpiMode16();
 8002494:	f7ff fd5c 	bl	8001f50 <LcdSpiMode16>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8002498:	2200      	movs	r2, #0
 800249a:	2102      	movs	r1, #2
 800249c:	481a      	ldr	r0, [pc, #104]	@ (8002508 <LCD_IO_Transaction+0xbc>)
 800249e:	f009 f877 	bl	800b590 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_HANDLE, (uint8_t *)&Cmd, 1, LCD_SPI_TIMEOUT); /* CMD write */
 80024a2:	f107 010e 	add.w	r1, r7, #14
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	2201      	movs	r2, #1
 80024ac:	4817      	ldr	r0, [pc, #92]	@ (800250c <LCD_IO_Transaction+0xc0>)
 80024ae:	f00f fb51 	bl	8011b54 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80024b2:	2201      	movs	r2, #1
 80024b4:	2102      	movs	r1, #2
 80024b6:	4814      	ldr	r0, [pc, #80]	@ (8002508 <LCD_IO_Transaction+0xbc>)
 80024b8:	f009 f86a 	bl	800b590 <HAL_GPIO_WritePin>

  if(Size == 0)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <LCD_IO_Transaction+0x84>
  { /* only command byte or word */
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80024c2:	2201      	movs	r2, #1
 80024c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024c8:	480f      	ldr	r0, [pc, #60]	@ (8002508 <LCD_IO_Transaction+0xbc>)
 80024ca:	f009 f861 	bl	800b590 <HAL_GPIO_WritePin>
    LcdTransEnd();
    return;
 80024ce:	e016      	b.n	80024fe <LCD_IO_Transaction+0xb2>
  }

  /* Datas write or read */
  if(Mode & LCD_IO_WRITE)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d011      	beq.n	80024fe <LCD_IO_Transaction+0xb2>
  { /* Write Lcd */
    if(Mode & LCD_IO_DATA16TO24)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <LCD_IO_Transaction+0xa4>
      LCDWriteFillMultiData16to24(pData, Size, Mode);
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	68b8      	ldr	r0, [r7, #8]
 80024ea:	f7ff ff19 	bl	8002320 <LCDWriteFillMultiData16to24>
 80024ee:	e006      	b.n	80024fe <LCD_IO_Transaction+0xb2>
    else
      LCDWriteFillMultiData8and16(pData, Size, Mode);
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	68b8      	ldr	r0, [r7, #8]
 80024f6:	f7ff fda7 	bl	8002048 <LCDWriteFillMultiData8and16>
 80024fa:	e000      	b.n	80024fe <LCD_IO_Transaction+0xb2>
    return;
 80024fc:	bf00      	nop
      LCDReadMultiData24to16(pData, Size, Mode);
    else
      LCDReadMultiData8and16(pData, Size, Mode);
  }
  #endif /* #if LCD_SPI_MODE != 0 */
}
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	240007b0 	.word	0x240007b0
 8002508:	58020400 	.word	0x58020400
 800250c:	24000c30 	.word	0x24000c30

08002510 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 800251a:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <BSP_LCD_Init+0x3c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8002522:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <BSP_LCD_Init+0x40>)
 8002524:	2200      	movs	r2, #0
 8002526:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8002528:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <BSP_LCD_Init+0x40>)
 800252a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800252e:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8002530:	4b07      	ldr	r3, [pc, #28]	@ (8002550 <BSP_LCD_Init+0x40>)
 8002532:	4a08      	ldr	r2, [pc, #32]	@ (8002554 <BSP_LCD_Init+0x44>)
 8002534:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 8002536:	2000      	movs	r0, #0
 8002538:	f000 f826 	bl	8002588 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002540:	79fb      	ldrb	r3, [r7, #7]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	24000050 	.word	0x24000050
 8002550:	240007c8 	.word	0x240007c8
 8002554:	24000000 	.word	0x24000000

08002558 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 800255c:	4b03      	ldr	r3, [pc, #12]	@ (800256c <BSP_LCD_GetXSize+0x14>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002562:	4798      	blx	r3
 8002564:	4603      	mov	r3, r0
}
 8002566:	4618      	mov	r0, r3
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	24000050 	.word	0x24000050

08002570 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8002574:	4b03      	ldr	r3, [pc, #12]	@ (8002584 <BSP_LCD_GetYSize+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257a:	4798      	blx	r3
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	24000050 	.word	0x24000050

08002588 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af02      	add	r7, sp, #8
 800258e:	4603      	mov	r3, r0
 8002590:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8002592:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <BSP_LCD_Clear+0x38>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8002598:	f7ff ffde 	bl	8002558 <BSP_LCD_GetXSize>
 800259c:	4603      	mov	r3, r0
 800259e:	461d      	mov	r5, r3
 80025a0:	f7ff ffe6 	bl	8002570 <BSP_LCD_GetYSize>
 80025a4:	4603      	mov	r3, r0
 80025a6:	461a      	mov	r2, r3
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	462a      	mov	r2, r5
 80025b0:	2100      	movs	r1, #0
 80025b2:	2000      	movs	r0, #0
 80025b4:	47a0      	blx	r4
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bdb0      	pop	{r4, r5, r7, pc}
 80025be:	bf00      	nop
 80025c0:	24000050 	.word	0x24000050

080025c4 <BSP_LCD_DisplayOn>:
  * @brief  Enables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 80025c8:	4b02      	ldr	r3, [pc, #8]	@ (80025d4 <BSP_LCD_DisplayOn+0x10>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4798      	blx	r3
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	24000050 	.word	0x24000050

080025d8 <BSP_LCD_DrawRGB16Image>:
  * @param  Height: image height
  * @param  *pData: image data pointer
  * @retval None
  */
void BSP_LCD_DrawRGB16Image(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 80025d8:	b5b0      	push	{r4, r5, r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af02      	add	r7, sp, #8
 80025de:	4604      	mov	r4, r0
 80025e0:	4608      	mov	r0, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	4623      	mov	r3, r4
 80025e8:	80fb      	strh	r3, [r7, #6]
 80025ea:	4603      	mov	r3, r0
 80025ec:	80bb      	strh	r3, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	807b      	strh	r3, [r7, #2]
 80025f2:	4613      	mov	r3, r2
 80025f4:	803b      	strh	r3, [r7, #0]
  lcd_drv->DrawRGBImage(Xpos, Ypos, Xsize, Ysize, pData);
 80025f6:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <BSP_LCD_DrawRGB16Image+0x3c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80025fc:	883d      	ldrh	r5, [r7, #0]
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	88b9      	ldrh	r1, [r7, #4]
 8002602:	88f8      	ldrh	r0, [r7, #6]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	462b      	mov	r3, r5
 800260a:	47a0      	blx	r4
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bdb0      	pop	{r4, r5, r7, pc}
 8002614:	24000050 	.word	0x24000050

08002618 <OV7670_Init>:
/******************************************************************************
 *                              GLOBAL FUNCTIONS                              *
 ******************************************************************************/

void OV7670_Init(DCMI_HandleTypeDef *hdcmi, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htim, uint32_t tim_ch)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
    OV7670.hdcmi = hdcmi;
 8002626:	4a2f      	ldr	r2, [pc, #188]	@ (80026e4 <OV7670_Init+0xcc>)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6013      	str	r3, [r2, #0]
    OV7670.hi2c = hi2c;
 800262c:	4a2d      	ldr	r2, [pc, #180]	@ (80026e4 <OV7670_Init+0xcc>)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6053      	str	r3, [r2, #4]
    OV7670.htim = htim;
 8002632:	4a2c      	ldr	r2, [pc, #176]	@ (80026e4 <OV7670_Init+0xcc>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6093      	str	r3, [r2, #8]
    OV7670.tim_ch = tim_ch;
 8002638:	4a2a      	ldr	r2, [pc, #168]	@ (80026e4 <OV7670_Init+0xcc>)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	60d3      	str	r3, [r2, #12]

    /* PWDN to LOW */
    HAL_GPIO_WritePin(OV7670_GPIO_PORT_PWDN, OV7670_GPIO_PIN_PWDN, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	2180      	movs	r1, #128	@ 0x80
 8002642:	4829      	ldr	r0, [pc, #164]	@ (80026e8 <OV7670_Init+0xd0>)
 8002644:	f008 ffa4 	bl	800b590 <HAL_GPIO_WritePin>
    /* RET pin to LOW */
    HAL_GPIO_WritePin(OV7670_GPIO_PORT_RET, OV7670_GPIO_PIN_RET, GPIO_PIN_RESET);
 8002648:	2200      	movs	r2, #0
 800264a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800264e:	4827      	ldr	r0, [pc, #156]	@ (80026ec <OV7670_Init+0xd4>)
 8002650:	f008 ff9e 	bl	800b590 <HAL_GPIO_WritePin>
    OV7670_DELAY(100);
 8002654:	2064      	movs	r0, #100	@ 0x64
 8002656:	f002 ffdb 	bl	8005610 <HAL_Delay>
    /* RET pin to HIGH */
    HAL_GPIO_WritePin(OV7670_GPIO_PORT_RET, OV7670_GPIO_PIN_RET, GPIO_PIN_SET);
 800265a:	2201      	movs	r2, #1
 800265c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002660:	4822      	ldr	r0, [pc, #136]	@ (80026ec <OV7670_Init+0xd4>)
 8002662:	f008 ff95 	bl	800b590 <HAL_GPIO_WritePin>
    OV7670_DELAY(100);
 8002666:	2064      	movs	r0, #100	@ 0x64
 8002668:	f002 ffd2 	bl	8005610 <HAL_Delay>
    {
        OV7670_START_XLK(OV7670.htim, OV7670.tim_ch);
    }

    /* Do camera reset */
    SCCB_Write(OV7670_REG_COM7, 0x80);
 800266c:	2180      	movs	r1, #128	@ 0x80
 800266e:	2012      	movs	r0, #18
 8002670:	f000 f916 	bl	80028a0 <SCCB_Write>
    OV7670_DELAY(30);
 8002674:	201e      	movs	r0, #30
 8002676:	f002 ffcb 	bl	8005610 <HAL_Delay>

    /* Get camera ID */
    uint8_t buf[4];
    SCCB_Read(OV7670_REG_VER, buf);
 800267a:	f107 0310 	add.w	r3, r7, #16
 800267e:	4619      	mov	r1, r3
 8002680:	200b      	movs	r0, #11
 8002682:	f000 f93d 	bl	8002900 <SCCB_Read>
    DebugPrint("[OV7670] dev id = 0x%02X", buf[0]);
 8002686:	7c3b      	ldrb	r3, [r7, #16]
 8002688:	4619      	mov	r1, r3
 800268a:	4819      	ldr	r0, [pc, #100]	@ (80026f0 <OV7670_Init+0xd8>)
 800268c:	f019 fa14 	bl	801bab8 <DebugPrint>

    /* Do camera reset */
    SCCB_Write(OV7670_REG_COM7, 0x80);
 8002690:	2180      	movs	r1, #128	@ 0x80
 8002692:	2012      	movs	r0, #18
 8002694:	f000 f904 	bl	80028a0 <SCCB_Write>
    OV7670_DELAY(30);
 8002698:	201e      	movs	r0, #30
 800269a:	f002 ffb9 	bl	8005610 <HAL_Delay>

    /* Do camera configuration */
    for (uint32_t i = 0; OV7670_reg[i][0] != OV7670_REG_DUMMY; i++)
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	e012      	b.n	80026ca <OV7670_Init+0xb2>
    {
        SCCB_Write(OV7670_reg[i][0], OV7670_reg[i][1]);
 80026a4:	4a13      	ldr	r2, [pc, #76]	@ (80026f4 <OV7670_Init+0xdc>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80026ac:	4911      	ldr	r1, [pc, #68]	@ (80026f4 <OV7670_Init+0xdc>)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	440b      	add	r3, r1
 80026b4:	785b      	ldrb	r3, [r3, #1]
 80026b6:	4619      	mov	r1, r3
 80026b8:	4610      	mov	r0, r2
 80026ba:	f000 f8f1 	bl	80028a0 <SCCB_Write>
        OV7670_DELAY(1);
 80026be:	2001      	movs	r0, #1
 80026c0:	f002 ffa6 	bl	8005610 <HAL_Delay>
    for (uint32_t i = 0; OV7670_reg[i][0] != OV7670_REG_DUMMY; i++)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3301      	adds	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <OV7670_Init+0xdc>)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80026d2:	2bff      	cmp	r3, #255	@ 0xff
 80026d4:	d1e6      	bne.n	80026a4 <OV7670_Init+0x8c>

    /* Initialize buffer address */
#ifdef	DISPLAY_BUFFER_ADDR
    OV7670.buffer_addr = (uint32_t) DISPLAY_BUFFER_ADDR;
#else
    OV7670.buffer_addr = (uint32_t) img_buffer;
 80026d6:	4a08      	ldr	r2, [pc, #32]	@ (80026f8 <OV7670_Init+0xe0>)
 80026d8:	4b02      	ldr	r3, [pc, #8]	@ (80026e4 <OV7670_Init+0xcc>)
 80026da:	615a      	str	r2, [r3, #20]
    __HAL_DMA_CLEAR_FLAG(OV7670.hdcmi->DMA_Handle, __HAL_DMA_GET_DME_FLAG_INDEX(OV7670.hdcmi->DMA_Handle));
    __HAL_DMA_CLEAR_FLAG(OV7670.hdcmi->DMA_Handle, __HAL_DMA_GET_FE_FLAG_INDEX(OV7670.hdcmi->DMA_Handle));
    /* Enable Common interrupts*/
    SET_BIT(OV7670.hdcmi->DMA_Handle->Instance->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
#endif
}
 80026dc:	bf00      	nop
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	24000058 	.word	0x24000058
 80026e8:	58020000 	.word	0x58020000
 80026ec:	58020800 	.word	0x58020800
 80026f0:	0801f180 	.word	0x0801f180
 80026f4:	080210c8 	.word	0x080210c8
 80026f8:	30000000 	.word	0x30000000

080026fc <OV7670_Start>:

void OV7670_Start(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002700:	b672      	cpsid	i
}
 8002702:	bf00      	nop
    __disable_irq();
    line_counter = 0;
 8002704:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <OV7670_Start+0x4c>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
    /* Update requested mode */
    OV7670.mode = DCMI_MODE_CONTINUOUS;
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <OV7670_Start+0x50>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
//#if (OV7670_STREAM_MODE == OV7670_STREAM_MODE_BY_LINE)
    /* Reset buffer address */
    OV7670.buffer_addr = OV7670_RESET_BUFFER_ADDR();
 8002710:	4a0f      	ldr	r2, [pc, #60]	@ (8002750 <OV7670_Start+0x54>)
 8002712:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <OV7670_Start+0x50>)
 8002714:	615a      	str	r2, [r3, #20]
//#endif
    /* Reset line counter */
    OV7670.lineCnt = 0U;
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <OV7670_Start+0x50>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
    OV7670.state = BUSY;
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <OV7670_Start+0x50>)
 800271e:	2200      	movs	r2, #0
 8002720:	771a      	strb	r2, [r3, #28]
  __ASM volatile ("cpsie i" : : : "memory");
 8002722:	b662      	cpsie	i
}
 8002724:	bf00      	nop
    }
    /* Start DCMI capturing */
#if (OV7670_USE_DMA_CMSIS == 1)
    OV7670_DCMI_DMA_START(OV7670.hdcmi, OV7670.buffer_addr);
#else
    HAL_DCMI_Start_DMA(OV7670.hdcmi, DCMI_MODE_CONTINUOUS, OV7670.buffer_addr, OV7670_DMA_DATA_LEN);
 8002726:	4b09      	ldr	r3, [pc, #36]	@ (800274c <OV7670_Start+0x50>)
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	4b08      	ldr	r3, [pc, #32]	@ (800274c <OV7670_Start+0x50>)
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8002732:	2100      	movs	r1, #0
 8002734:	f004 fdfa 	bl	800732c <HAL_DCMI_Start_DMA>
    HAL_Delay(400);
 8002738:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800273c:	f002 ff68 	bl	8005610 <HAL_Delay>
    OV7670_Stop();
 8002740:	f000 f808 	bl	8002754 <OV7670_Stop>
#endif
}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	240007d4 	.word	0x240007d4
 800274c:	24000058 	.word	0x24000058
 8002750:	30000000 	.word	0x30000000

08002754 <OV7670_Stop>:


void OV7670_Stop(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
    while(!isFrameCaptured());
 8002758:	bf00      	nop
 800275a:	f000 f919 	bl	8002990 <isFrameCaptured>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0fa      	beq.n	800275a <OV7670_Stop+0x6>
  __ASM volatile ("cpsid i" : : : "memory");
 8002764:	b672      	cpsid	i
}
 8002766:	bf00      	nop
    __disable_irq();
#if (OV7670_USE_DMA_CMSIS == 1)
    OV7670_DCMI_DMA_STOP(OV7670.hdcmi);
#else
    HAL_DCMI_Stop(OV7670.hdcmi);
 8002768:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <OV7670_Stop+0x2c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f004 fe9f 	bl	80074b0 <HAL_DCMI_Stop>
#endif
    OV7670.state = READY;
 8002772:	4b03      	ldr	r3, [pc, #12]	@ (8002780 <OV7670_Stop+0x2c>)
 8002774:	2201      	movs	r2, #1
 8002776:	771a      	strb	r2, [r3, #28]
  __ASM volatile ("cpsie i" : : : "memory");
 8002778:	b662      	cpsie	i
}
 800277a:	bf00      	nop
    __enable_irq();
    if (OV7670.htim!=0)
    {
    	OV7670_STOP_XLK(OV7670.htim, OV7670.tim_ch);
    }
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}
 8002780:	24000058 	.word	0x24000058

08002784 <OV7670_isDriverBusy>:
}

uint32_t buf_addr = 0x0U;

uint8_t OV7670_isDriverBusy(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af02      	add	r7, sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
 800278a:	b672      	cpsid	i
}
 800278c:	bf00      	nop
    uint8_t retVal;
    __disable_irq();
    uint32_t _line_counter = line_counter;
 800278e:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <OV7670_isDriverBusy+0x50>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	607b      	str	r3, [r7, #4]
    retVal = (OV7670.state == BUSY) ? TRUE : FALSE;
 8002794:	4b10      	ldr	r3, [pc, #64]	@ (80027d8 <OV7670_isDriverBusy+0x54>)
 8002796:	7f1b      	ldrb	r3, [r3, #28]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsie i" : : : "memory");
 80027a6:	b662      	cpsie	i
}
 80027a8:	bf00      	nop
    __enable_irq();
    DebugPrint("\r\n line_counter=%8ld %8ld %8ld %8lX %8ld",
 80027aa:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <OV7670_isDriverBusy+0x58>)
 80027ac:	6819      	ldr	r1, [r3, #0]
    		_line_counter, frame_counter, OV7670.lineCnt, buf_addr, frame_delay);
 80027ae:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <OV7670_isDriverBusy+0x54>)
 80027b0:	6998      	ldr	r0, [r3, #24]
    DebugPrint("\r\n line_counter=%8ld %8ld %8ld %8lX %8ld",
 80027b2:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <OV7670_isDriverBusy+0x5c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a0b      	ldr	r2, [pc, #44]	@ (80027e4 <OV7670_isDriverBusy+0x60>)
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	9201      	str	r2, [sp, #4]
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	4603      	mov	r3, r0
 80027c0:	460a      	mov	r2, r1
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4808      	ldr	r0, [pc, #32]	@ (80027e8 <OV7670_isDriverBusy+0x64>)
 80027c6:	f019 f977 	bl	801bab8 <DebugPrint>
    return retVal;
 80027ca:	78fb      	ldrb	r3, [r7, #3]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	240007d4 	.word	0x240007d4
 80027d8:	24000058 	.word	0x24000058
 80027dc:	240007d8 	.word	0x240007d8
 80027e0:	240007e4 	.word	0x240007e4
 80027e4:	240007dc 	.word	0x240007dc
 80027e8:	0801f19c 	.word	0x0801f19c

080027ec <HAL_DCMI_VsyncEventCallback>:


#if (OV7670_STREAM_MODE == OV7670_STREAM_MODE_BY_FRAME)

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
    /* Disable DCMI Camera interface */
    HAL_DCMI_Stop(OV7670.hdcmi);
 80027f4:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <HAL_DCMI_VsyncEventCallback+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f004 fe59 	bl	80074b0 <HAL_DCMI_Stop>

    /* Stop camera XLK signal until captured image data is drawn */
    if (OV7670.htim!=0)
 80027fe:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <HAL_DCMI_VsyncEventCallback+0x64>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <HAL_DCMI_VsyncEventCallback+0x2a>
    {
    	HAL_TIM_OC_Stop(OV7670.htim, OV7670.tim_ch);
 8002806:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <HAL_DCMI_VsyncEventCallback+0x64>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	4a11      	ldr	r2, [pc, #68]	@ (8002850 <HAL_DCMI_VsyncEventCallback+0x64>)
 800280c:	68d2      	ldr	r2, [r2, #12]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f010 f9b7 	bl	8012b84 <HAL_TIM_OC_Stop>
    }

    /* Call Display flush function */
    if (OV7670.drawFrame_cb != NULL)
 8002816:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <HAL_DCMI_VsyncEventCallback+0x64>)
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_DCMI_VsyncEventCallback+0x42>
    {
        OV7670.drawFrame_cb((uint8_t*) OV7670.buffer_addr, OV7670_FRAME_SIZE_BYTES);
 800281e:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <HAL_DCMI_VsyncEventCallback+0x64>)
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	4a0b      	ldr	r2, [pc, #44]	@ (8002850 <HAL_DCMI_VsyncEventCallback+0x64>)
 8002824:	6952      	ldr	r2, [r2, #20]
 8002826:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 800282a:	4610      	mov	r0, r2
 800282c:	4798      	blx	r3
    }

    /* Reset line counter */
    OV7670.lineCnt = 0U;
 800282e:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <HAL_DCMI_VsyncEventCallback+0x64>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
    //TODO: check for full-size QVGA buffer mode
    HAL_DCMI_Start_DMA(OV7670.hdcmi, DCMI_MODE_CONTINUOUS, OV7670.buffer_addr,
 8002834:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <HAL_DCMI_VsyncEventCallback+0x64>)
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <HAL_DCMI_VsyncEventCallback+0x64>)
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8002840:	2100      	movs	r1, #0
 8002842:	f004 fd73 	bl	800732c <HAL_DCMI_Start_DMA>
            OV7670_FRAME_SIZE_WORDS);
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	24000058 	.word	0x24000058

08002854 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
    frame_counter++;
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <HAL_DCMI_FrameEventCallback+0x3c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	4a0b      	ldr	r2, [pc, #44]	@ (8002890 <HAL_DCMI_FrameEventCallback+0x3c>)
 8002864:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002866:	2102      	movs	r1, #2
 8002868:	480a      	ldr	r0, [pc, #40]	@ (8002894 <HAL_DCMI_FrameEventCallback+0x40>)
 800286a:	f008 feaa 	bl	800b5c2 <HAL_GPIO_TogglePin>
	uint32_t ticks = HAL_GetTick();
 800286e:	f002 fec3 	bl	80055f8 <HAL_GetTick>
 8002872:	60f8      	str	r0, [r7, #12]
	frame_delay = ticks - frame_ticks;
 8002874:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <HAL_DCMI_FrameEventCallback+0x44>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	4a07      	ldr	r2, [pc, #28]	@ (800289c <HAL_DCMI_FrameEventCallback+0x48>)
 800287e:	6013      	str	r3, [r2, #0]
	frame_ticks = ticks;
 8002880:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <HAL_DCMI_FrameEventCallback+0x44>)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6013      	str	r3, [r2, #0]
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	240007d8 	.word	0x240007d8
 8002894:	58020000 	.word	0x58020000
 8002898:	240007e0 	.word	0x240007e0
 800289c:	240007dc 	.word	0x240007dc

080028a0 <SCCB_Write>:
/******************************************************************************
 *                              LOCAL FUNCTIONS                               *
 ******************************************************************************/

static HAL_StatusTypeDef SCCB_Write(uint8_t regAddr, uint8_t data)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af04      	add	r7, sp, #16
 80028a6:	4603      	mov	r3, r0
 80028a8:	460a      	mov	r2, r1
 80028aa:	71fb      	strb	r3, [r7, #7]
 80028ac:	4613      	mov	r3, r2
 80028ae:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef ret = 0xFF;
 80028b0:	23ff      	movs	r3, #255	@ 0xff
 80028b2:	73fb      	strb	r3, [r7, #15]

	for (int try=0; try<3;  try++)
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	e015      	b.n	80028e6 <SCCB_Write+0x46>
	{
        ret = HAL_I2C_Mem_Write(OV7670.hi2c, OV7670_SCCB_ADDR, regAddr,
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <SCCB_Write+0x5c>)
 80028bc:	6858      	ldr	r0, [r3, #4]
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	2364      	movs	r3, #100	@ 0x64
 80028c4:	9302      	str	r3, [sp, #8]
 80028c6:	2301      	movs	r3, #1
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	1dbb      	adds	r3, r7, #6
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	2301      	movs	r3, #1
 80028d0:	2142      	movs	r1, #66	@ 0x42
 80028d2:	f009 f93b 	bl	800bb4c <HAL_I2C_Mem_Write>
 80028d6:	4603      	mov	r3, r0
 80028d8:	73fb      	strb	r3, [r7, #15]
                I2C_MEMADD_SIZE_8BIT, &data, 1U, 100U);
        if (ret==HAL_OK) break;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <SCCB_Write+0x4e>
	for (int try=0; try<3;  try++)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3301      	adds	r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	dde6      	ble.n	80028ba <SCCB_Write+0x1a>
 80028ec:	e000      	b.n	80028f0 <SCCB_Write+0x50>
        if (ret==HAL_OK) break;
 80028ee:	bf00      	nop
    }
    return ret;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	24000058 	.word	0x24000058

08002900 <SCCB_Read>:

static HAL_StatusTypeDef SCCB_Read(uint8_t regAddr, uint8_t *data)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af02      	add	r7, sp, #8
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef ret = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]

	for (int try=0; try<3;  try++)
 8002910:	2300      	movs	r3, #0
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	e020      	b.n	8002958 <SCCB_Read+0x58>
    {
        /* HAL_I2C_Mem_Read doesn't work because of SCCB protocol(doesn't have ACK) */
        ret = HAL_I2C_Master_Transmit(OV7670.hi2c, OV7670_SCCB_ADDR, &regAddr, 1U, 100U);
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <SCCB_Read+0x6c>)
 8002918:	6858      	ldr	r0, [r3, #4]
 800291a:	1dfa      	adds	r2, r7, #7
 800291c:	2364      	movs	r3, #100	@ 0x64
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2301      	movs	r3, #1
 8002922:	2142      	movs	r1, #66	@ 0x42
 8002924:	f008 ff04 	bl	800b730 <HAL_I2C_Master_Transmit>
 8002928:	4603      	mov	r3, r0
 800292a:	73fb      	strb	r3, [r7, #15]
        if (ret!=HAL_OK) continue;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10e      	bne.n	8002950 <SCCB_Read+0x50>
        ret = HAL_I2C_Master_Receive(OV7670.hi2c, OV7670_SCCB_ADDR, data, 1U, 100U);
 8002932:	4b0e      	ldr	r3, [pc, #56]	@ (800296c <SCCB_Read+0x6c>)
 8002934:	6858      	ldr	r0, [r3, #4]
 8002936:	2364      	movs	r3, #100	@ 0x64
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2301      	movs	r3, #1
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	2142      	movs	r1, #66	@ 0x42
 8002940:	f009 f80e 	bl	800b960 <HAL_I2C_Master_Receive>
 8002944:	4603      	mov	r3, r0
 8002946:	73fb      	strb	r3, [r7, #15]
        if (ret==HAL_OK) break;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <SCCB_Read+0x60>
 800294e:	e000      	b.n	8002952 <SCCB_Read+0x52>
        if (ret!=HAL_OK) continue;
 8002950:	bf00      	nop
	for (int try=0; try<3;  try++)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	3301      	adds	r3, #1
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b02      	cmp	r3, #2
 800295c:	dddb      	ble.n	8002916 <SCCB_Read+0x16>
 800295e:	e000      	b.n	8002962 <SCCB_Read+0x62>
        if (ret==HAL_OK) break;
 8002960:	bf00      	nop
    }

    return ret;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	24000058 	.word	0x24000058

08002970 <ov7670_read>:
{
	return SCCB_Write(regAddr, data);
}

HAL_StatusTypeDef ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	71fb      	strb	r3, [r7, #7]
	return SCCB_Read(regAddr, data);
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	6839      	ldr	r1, [r7, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ffbd 	bl	8002900 <SCCB_Read>
 8002986:	4603      	mov	r3, r0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <isFrameCaptured>:

static uint8_t isFrameCaptured(void)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002996:	b672      	cpsid	i
}
 8002998:	bf00      	nop
    uint8_t retVal;
    __disable_irq();
    retVal = (OV7670.lineCnt == 0U) ? TRUE : FALSE;
 800299a:	4b08      	ldr	r3, [pc, #32]	@ (80029bc <isFrameCaptured+0x2c>)
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf0c      	ite	eq
 80029a2:	2301      	moveq	r3, #1
 80029a4:	2300      	movne	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsie i" : : : "memory");
 80029aa:	b662      	cpsie	i
}
 80029ac:	bf00      	nop
    __enable_irq();
    return retVal;
 80029ae:	79fb      	ldrb	r3, [r7, #7]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	24000058 	.word	0x24000058

080029c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	@ 0x28
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80029c6:	f107 031c 	add.w	r3, r7, #28
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80029d2:	463b      	mov	r3, r7
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
 80029e0:	615a      	str	r2, [r3, #20]
 80029e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80029e4:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <MX_ADC1_Init+0xec>)
 80029e6:	4a32      	ldr	r2, [pc, #200]	@ (8002ab0 <MX_ADC1_Init+0xf0>)
 80029e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80029ea:	4b30      	ldr	r3, [pc, #192]	@ (8002aac <MX_ADC1_Init+0xec>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80029f0:	4b2e      	ldr	r3, [pc, #184]	@ (8002aac <MX_ADC1_Init+0xec>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029f6:	4b2d      	ldr	r3, [pc, #180]	@ (8002aac <MX_ADC1_Init+0xec>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029fc:	4b2b      	ldr	r3, [pc, #172]	@ (8002aac <MX_ADC1_Init+0xec>)
 80029fe:	2204      	movs	r2, #4
 8002a00:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a02:	4b2a      	ldr	r3, [pc, #168]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a08:	4b28      	ldr	r3, [pc, #160]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8002a0e:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a14:	4b25      	ldr	r3, [pc, #148]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a1a:	4b24      	ldr	r3, [pc, #144]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a20:	4b22      	ldr	r3, [pc, #136]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002a26:	4b21      	ldr	r3, [pc, #132]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002a32:	4b1e      	ldr	r3, [pc, #120]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002a38:	4b1c      	ldr	r3, [pc, #112]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8002a40:	4b1a      	ldr	r3, [pc, #104]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a46:	4819      	ldr	r0, [pc, #100]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a48:	f003 f892 	bl	8005b70 <HAL_ADC_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002a52:	f001 fc95 	bl	8004380 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002a5a:	f107 031c 	add.w	r3, r7, #28
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4812      	ldr	r0, [pc, #72]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a62:	f004 f9b3 	bl	8006dcc <HAL_ADCEx_MultiModeConfigChannel>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002a6c:	f001 fc88 	bl	8004380 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002a70:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <MX_ADC1_Init+0xf4>)
 8002a72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a74:	2306      	movs	r3, #6
 8002a76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a7c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002a80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a82:	2304      	movs	r3, #4
 8002a84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a8e:	463b      	mov	r3, r7
 8002a90:	4619      	mov	r1, r3
 8002a92:	4806      	ldr	r0, [pc, #24]	@ (8002aac <MX_ADC1_Init+0xec>)
 8002a94:	f003 fb3e 	bl	8006114 <HAL_ADC_ConfigChannel>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8002a9e:	f001 fc6f 	bl	8004380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	@ 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	240007e8 	.word	0x240007e8
 8002ab0:	40022000 	.word	0x40022000
 8002ab4:	21800100 	.word	0x21800100

08002ab8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002abe:	463b      	mov	r3, r7
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
 8002acc:	615a      	str	r2, [r3, #20]
 8002ace:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002ad2:	4a2e      	ldr	r2, [pc, #184]	@ (8002b8c <MX_ADC3_Init+0xd4>)
 8002ad4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8002ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002adc:	4b2a      	ldr	r3, [pc, #168]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ae2:	4b29      	ldr	r3, [pc, #164]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002ae8:	4b27      	ldr	r3, [pc, #156]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002aee:	4b26      	ldr	r3, [pc, #152]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002af4:	4b24      	ldr	r3, [pc, #144]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002afa:	4b23      	ldr	r3, [pc, #140]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b00:	4b21      	ldr	r3, [pc, #132]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b06:	4b20      	ldr	r3, [pc, #128]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8002b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002b12:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002b14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b18:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8002b20:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8002b28:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002b2e:	4816      	ldr	r0, [pc, #88]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002b30:	f003 f81e 	bl	8005b70 <HAL_ADC_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8002b3a:	f001 fc21 	bl	8004380 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002b3e:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <MX_ADC3_Init+0xd8>)
 8002b40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b42:	2306      	movs	r3, #6
 8002b44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8002b46:	2307      	movs	r3, #7
 8002b48:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b4a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002b4e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b50:	2304      	movs	r3, #4
 8002b52:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b5c:	463b      	mov	r3, r7
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4809      	ldr	r0, [pc, #36]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002b62:	f003 fad7 	bl	8006114 <HAL_ADC_ConfigChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8002b6c:	f001 fc08 	bl	8004380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 8002b70:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <MX_ADC3_Init+0xdc>)
 8002b72:	61fb      	str	r3, [r7, #28]
  HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 8002b74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b78:	69f9      	ldr	r1, [r7, #28]
 8002b7a:	4803      	ldr	r0, [pc, #12]	@ (8002b88 <MX_ADC3_Init+0xd0>)
 8002b7c:	f003 f99a 	bl	8005eb4 <HAL_ADC_Start_DMA>

  /* USER CODE END ADC3_Init 2 */

}
 8002b80:	bf00      	nop
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	2400084c 	.word	0x2400084c
 8002b8c:	58026000 	.word	0x58026000
 8002b90:	cb840000 	.word	0xcb840000
 8002b94:	38000200 	.word	0x38000200

08002b98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	@ 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a39      	ldr	r2, [pc, #228]	@ (8002c9c <HAL_ADC_MspInit+0x104>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d12a      	bne.n	8002c10 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002bba:	4b39      	ldr	r3, [pc, #228]	@ (8002ca0 <HAL_ADC_MspInit+0x108>)
 8002bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002bc0:	4a37      	ldr	r2, [pc, #220]	@ (8002ca0 <HAL_ADC_MspInit+0x108>)
 8002bc2:	f043 0320 	orr.w	r3, r3, #32
 8002bc6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002bca:	4b35      	ldr	r3, [pc, #212]	@ (8002ca0 <HAL_ADC_MspInit+0x108>)
 8002bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd8:	4b31      	ldr	r3, [pc, #196]	@ (8002ca0 <HAL_ADC_MspInit+0x108>)
 8002bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bde:	4a30      	ldr	r2, [pc, #192]	@ (8002ca0 <HAL_ADC_MspInit+0x108>)
 8002be0:	f043 0304 	orr.w	r3, r3, #4
 8002be4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002be8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca0 <HAL_ADC_MspInit+0x108>)
 8002bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = ADC_INP_Pin|ADC_INN_Pin;
 8002bf6:	2330      	movs	r3, #48	@ 0x30
 8002bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	4619      	mov	r1, r3
 8002c08:	4826      	ldr	r0, [pc, #152]	@ (8002ca4 <HAL_ADC_MspInit+0x10c>)
 8002c0a:	f008 fb11 	bl	800b230 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002c0e:	e040      	b.n	8002c92 <HAL_ADC_MspInit+0xfa>
  else if(adcHandle->Instance==ADC3)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a24      	ldr	r2, [pc, #144]	@ (8002ca8 <HAL_ADC_MspInit+0x110>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d13b      	bne.n	8002c92 <HAL_ADC_MspInit+0xfa>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c1a:	4b21      	ldr	r3, [pc, #132]	@ (8002ca0 <HAL_ADC_MspInit+0x108>)
 8002c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca0 <HAL_ADC_MspInit+0x108>)
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <HAL_ADC_MspInit+0x108>)
 8002c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = BDMA_Channel0;
 8002c38:	4b1c      	ldr	r3, [pc, #112]	@ (8002cac <HAL_ADC_MspInit+0x114>)
 8002c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb0 <HAL_ADC_MspInit+0x118>)
 8002c3c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <HAL_ADC_MspInit+0x114>)
 8002c40:	2211      	movs	r2, #17
 8002c42:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c44:	4b19      	ldr	r3, [pc, #100]	@ (8002cac <HAL_ADC_MspInit+0x114>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c4a:	4b18      	ldr	r3, [pc, #96]	@ (8002cac <HAL_ADC_MspInit+0x114>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002c50:	4b16      	ldr	r3, [pc, #88]	@ (8002cac <HAL_ADC_MspInit+0x114>)
 8002c52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c56:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c58:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <HAL_ADC_MspInit+0x114>)
 8002c5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c5e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c60:	4b12      	ldr	r3, [pc, #72]	@ (8002cac <HAL_ADC_MspInit+0x114>)
 8002c62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c66:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002c68:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <HAL_ADC_MspInit+0x114>)
 8002c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c6e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002c70:	4b0e      	ldr	r3, [pc, #56]	@ (8002cac <HAL_ADC_MspInit+0x114>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002c76:	480d      	ldr	r0, [pc, #52]	@ (8002cac <HAL_ADC_MspInit+0x114>)
 8002c78:	f004 fdc0 	bl	80077fc <HAL_DMA_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_ADC_MspInit+0xee>
      Error_Handler();
 8002c82:	f001 fb7d 	bl	8004380 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a08      	ldr	r2, [pc, #32]	@ (8002cac <HAL_ADC_MspInit+0x114>)
 8002c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002c8c:	4a07      	ldr	r2, [pc, #28]	@ (8002cac <HAL_ADC_MspInit+0x114>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002c92:	bf00      	nop
 8002c94:	3728      	adds	r7, #40	@ 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40022000 	.word	0x40022000
 8002ca0:	58024400 	.word	0x58024400
 8002ca4:	58020800 	.word	0x58020800
 8002ca8:	58026000 	.word	0x58026000
 8002cac:	240008b0 	.word	0x240008b0
 8002cb0:	58025408 	.word	0x58025408

08002cb4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
volatile uint16_t conversion_count;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 8002cbc:	4806      	ldr	r0, [pc, #24]	@ (8002cd8 <HAL_ADC_ConvCpltCallback+0x24>)
 8002cbe:	f003 f9bd 	bl	800603c <HAL_ADC_Stop_DMA>
	conversion_count++;
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_ADC_ConvCpltCallback+0x28>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	4b03      	ldr	r3, [pc, #12]	@ (8002cdc <HAL_ADC_ConvCpltCallback+0x28>)
 8002cce:	801a      	strh	r2, [r3, #0]
	//DebugPrint("\r\n conversion_count = %d", conversion_count);
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	2400084c 	.word	0x2400084c
 8002cdc:	24000928 	.word	0x24000928

08002ce0 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 8002ce8:	480b      	ldr	r0, [pc, #44]	@ (8002d18 <HAL_ADC_ErrorCallback+0x38>)
 8002cea:	f003 f9a7 	bl	800603c <HAL_ADC_Stop_DMA>
	conversion_count++;
 8002cee:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <HAL_ADC_ErrorCallback+0x3c>)
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	4b08      	ldr	r3, [pc, #32]	@ (8002d1c <HAL_ADC_ErrorCallback+0x3c>)
 8002cfa:	801a      	strh	r2, [r3, #0]
	DebugPrint("\r\n Error State = %8lX", hadc3.State);
 8002cfc:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <HAL_ADC_ErrorCallback+0x38>)
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d00:	4619      	mov	r1, r3
 8002d02:	4807      	ldr	r0, [pc, #28]	@ (8002d20 <HAL_ADC_ErrorCallback+0x40>)
 8002d04:	f018 fed8 	bl	801bab8 <DebugPrint>
	hadc3.State = 0;
 8002d08:	4b03      	ldr	r3, [pc, #12]	@ (8002d18 <HAL_ADC_ErrorCallback+0x38>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	2400084c 	.word	0x2400084c
 8002d1c:	24000928 	.word	0x24000928
 8002d20:	0801f1c8 	.word	0x0801f1c8

08002d24 <CalcTemperature>:

uint32_t CalcTemperature(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
	if (conversion_count>0)
 8002d2a:	4b37      	ldr	r3, [pc, #220]	@ (8002e08 <CalcTemperature+0xe4>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d05c      	beq.n	8002dee <CalcTemperature+0xca>
	{
	    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002d34:	4b35      	ldr	r3, [pc, #212]	@ (8002e0c <CalcTemperature+0xe8>)
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d030      	beq.n	8002da2 <CalcTemperature+0x7e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002d40:	4b32      	ldr	r3, [pc, #200]	@ (8002e0c <CalcTemperature+0xe8>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002d48:	f3bf 8f4f 	dsb	sy
}
 8002d4c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002e0c <CalcTemperature+0xe8>)
 8002d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d54:	60bb      	str	r3, [r7, #8]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	0b5b      	lsrs	r3, r3, #13
 8002d5a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002d5e:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	08db      	lsrs	r3, r3, #3
 8002d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d68:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8002d72:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002d78:	4924      	ldr	r1, [pc, #144]	@ (8002e0c <CalcTemperature+0xe8>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	1e5a      	subs	r2, r3, #1
 8002d84:	603a      	str	r2, [r7, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ef      	bne.n	8002d6a <CalcTemperature+0x46>
    } while(sets-- != 0U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	1e5a      	subs	r2, r3, #1
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e5      	bne.n	8002d60 <CalcTemperature+0x3c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002d94:	f3bf 8f4f 	dsb	sy
}
 8002d98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d9a:	f3bf 8f6f 	isb	sy
}
 8002d9e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002da0:	bf00      	nop
	    {
	        SCB_CleanInvalidateDCache();
	    }

		uint32_t total_adc = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	e010      	b.n	8002dce <CalcTemperature+0xaa>
		{
			uint16_t adv_val = ADC_BUFFER[i];
 8002dac:	4a18      	ldr	r2, [pc, #96]	@ (8002e10 <CalcTemperature+0xec>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002db4:	81fb      	strh	r3, [r7, #14]
			total_adc += adv_val;
 8002db6:	89fb      	ldrh	r3, [r7, #14]
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	61fb      	str	r3, [r7, #28]
			ADC_BUFFER[i] = 0;
 8002dbe:	4a14      	ldr	r2, [pc, #80]	@ (8002e10 <CalcTemperature+0xec>)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2bff      	cmp	r3, #255	@ 0xff
 8002dd2:	ddeb      	ble.n	8002dac <CalcTemperature+0x88>
		}

		conversion_count = 0;
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <CalcTemperature+0xe4>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	801a      	strh	r2, [r3, #0]
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 8002dda:	4b0d      	ldr	r3, [pc, #52]	@ (8002e10 <CalcTemperature+0xec>)
 8002ddc:	613b      	str	r3, [r7, #16]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 8002dde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002de2:	6939      	ldr	r1, [r7, #16]
 8002de4:	480b      	ldr	r0, [pc, #44]	@ (8002e14 <CalcTemperature+0xf0>)
 8002de6:	f003 f865 	bl	8005eb4 <HAL_ADC_Start_DMA>

		return total_adc;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	e008      	b.n	8002e00 <CalcTemperature+0xdc>
	}
	else
	{
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 8002dee:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <CalcTemperature+0xec>)
 8002df0:	617b      	str	r3, [r7, #20]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 8002df2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002df6:	6979      	ldr	r1, [r7, #20]
 8002df8:	4806      	ldr	r0, [pc, #24]	@ (8002e14 <CalcTemperature+0xf0>)
 8002dfa:	f003 f85b 	bl	8005eb4 <HAL_ADC_Start_DMA>
	}

	return 0;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3720      	adds	r7, #32
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	24000928 	.word	0x24000928
 8002e0c:	e000ed00 	.word	0xe000ed00
 8002e10:	38000200 	.word	0x38000200
 8002e14:	2400084c 	.word	0x2400084c

08002e18 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e54 <MX_BDMA_Init+0x3c>)
 8002e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e24:	4a0b      	ldr	r2, [pc, #44]	@ (8002e54 <MX_BDMA_Init+0x3c>)
 8002e26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e2e:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <MX_BDMA_Init+0x3c>)
 8002e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2100      	movs	r1, #0
 8002e40:	2081      	movs	r0, #129	@ 0x81
 8002e42:	f004 f959 	bl	80070f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8002e46:	2081      	movs	r0, #129	@ 0x81
 8002e48:	f004 f970 	bl	800712c <HAL_NVIC_EnableIRQ>

}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	58024400 	.word	0x58024400

08002e58 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	@ (8002eb8 <MX_DCMI_Init+0x60>)
 8002e5e:	4a17      	ldr	r2, [pc, #92]	@ (8002ebc <MX_DCMI_Init+0x64>)
 8002e60:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8002e62:	4b15      	ldr	r3, [pc, #84]	@ (8002eb8 <MX_DCMI_Init+0x60>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8002e68:	4b13      	ldr	r3, [pc, #76]	@ (8002eb8 <MX_DCMI_Init+0x60>)
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8002e6e:	4b12      	ldr	r3, [pc, #72]	@ (8002eb8 <MX_DCMI_Init+0x60>)
 8002e70:	2280      	movs	r2, #128	@ 0x80
 8002e72:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8002e74:	4b10      	ldr	r3, [pc, #64]	@ (8002eb8 <MX_DCMI_Init+0x60>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb8 <MX_DCMI_Init+0x60>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002e80:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb8 <MX_DCMI_Init+0x60>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8002e86:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb8 <MX_DCMI_Init+0x60>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <MX_DCMI_Init+0x60>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8002e92:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <MX_DCMI_Init+0x60>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002e98:	4b07      	ldr	r3, [pc, #28]	@ (8002eb8 <MX_DCMI_Init+0x60>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8002e9e:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <MX_DCMI_Init+0x60>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002ea4:	4804      	ldr	r0, [pc, #16]	@ (8002eb8 <MX_DCMI_Init+0x60>)
 8002ea6:	f004 f9c7 	bl	8007238 <HAL_DCMI_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002eb0:	f001 fa66 	bl	8004380 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002eb4:	bf00      	nop
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	2400092c 	.word	0x2400092c
 8002ebc:	48020000 	.word	0x48020000

08002ec0 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08e      	sub	sp, #56	@ 0x38
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a78      	ldr	r2, [pc, #480]	@ (80030c0 <HAL_DCMI_MspInit+0x200>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	f040 80ea 	bne.w	80030b8 <HAL_DCMI_MspInit+0x1f8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002ee4:	4b77      	ldr	r3, [pc, #476]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002ee6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002eea:	4a76      	ldr	r2, [pc, #472]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002ef4:	4b73      	ldr	r3, [pc, #460]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002ef6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f02:	4b70      	ldr	r3, [pc, #448]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f08:	4a6e      	ldr	r2, [pc, #440]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f0a:	f043 0310 	orr.w	r3, r3, #16
 8002f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f12:	4b6c      	ldr	r3, [pc, #432]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f20:	4b68      	ldr	r3, [pc, #416]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f26:	4a67      	ldr	r2, [pc, #412]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f30:	4b64      	ldr	r3, [pc, #400]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f3e:	4b61      	ldr	r3, [pc, #388]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f44:	4a5f      	ldr	r2, [pc, #380]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f46:	f043 0304 	orr.w	r3, r3, #4
 8002f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f5c:	4b59      	ldr	r3, [pc, #356]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f62:	4a58      	ldr	r2, [pc, #352]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f64:	f043 0308 	orr.w	r3, r3, #8
 8002f68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f6c:	4b55      	ldr	r3, [pc, #340]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7a:	4b52      	ldr	r3, [pc, #328]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f80:	4a50      	ldr	r2, [pc, #320]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f82:	f043 0302 	orr.w	r3, r3, #2
 8002f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f8a:	4b4e      	ldr	r3, [pc, #312]	@ (80030c4 <HAL_DCMI_MspInit+0x204>)
 8002f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8002f98:	2373      	movs	r3, #115	@ 0x73
 8002f9a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002fa8:	230d      	movs	r3, #13
 8002faa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4845      	ldr	r0, [pc, #276]	@ (80030c8 <HAL_DCMI_MspInit+0x208>)
 8002fb4:	f008 f93c 	bl	800b230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002fb8:	2350      	movs	r3, #80	@ 0x50
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002fc8:	230d      	movs	r3, #13
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	483e      	ldr	r0, [pc, #248]	@ (80030cc <HAL_DCMI_MspInit+0x20c>)
 8002fd4:	f008 f92c 	bl	800b230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fd8:	23c0      	movs	r3, #192	@ 0xc0
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002fe8:	230d      	movs	r3, #13
 8002fea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4837      	ldr	r0, [pc, #220]	@ (80030d0 <HAL_DCMI_MspInit+0x210>)
 8002ff4:	f008 f91c 	bl	800b230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003004:	2300      	movs	r3, #0
 8003006:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003008:	230d      	movs	r3, #13
 800300a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800300c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003010:	4619      	mov	r1, r3
 8003012:	4830      	ldr	r0, [pc, #192]	@ (80030d4 <HAL_DCMI_MspInit+0x214>)
 8003014:	f008 f90c 	bl	800b230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003018:	2380      	movs	r3, #128	@ 0x80
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003028:	230d      	movs	r3, #13
 800302a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003030:	4619      	mov	r1, r3
 8003032:	4829      	ldr	r0, [pc, #164]	@ (80030d8 <HAL_DCMI_MspInit+0x218>)
 8003034:	f008 f8fc 	bl	800b230 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream0;
 8003038:	4b28      	ldr	r3, [pc, #160]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 800303a:	4a29      	ldr	r2, [pc, #164]	@ (80030e0 <HAL_DCMI_MspInit+0x220>)
 800303c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 800303e:	4b27      	ldr	r3, [pc, #156]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 8003040:	224b      	movs	r2, #75	@ 0x4b
 8003042:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003044:	4b25      	ldr	r3, [pc, #148]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800304a:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 800304c:	2200      	movs	r2, #0
 800304e:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8003050:	4b22      	ldr	r3, [pc, #136]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 8003052:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003056:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003058:	4b20      	ldr	r3, [pc, #128]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 800305a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800305e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003060:	4b1e      	ldr	r3, [pc, #120]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 8003062:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003066:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8003068:	4b1c      	ldr	r3, [pc, #112]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 800306a:	2200      	movs	r2, #0
 800306c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800306e:	4b1b      	ldr	r3, [pc, #108]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 8003070:	2200      	movs	r2, #0
 8003072:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003074:	4b19      	ldr	r3, [pc, #100]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 8003076:	2204      	movs	r2, #4
 8003078:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800307a:	4b18      	ldr	r3, [pc, #96]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 800307c:	2203      	movs	r2, #3
 800307e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8003080:	4b16      	ldr	r3, [pc, #88]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 8003082:	2200      	movs	r2, #0
 8003084:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003086:	4b15      	ldr	r3, [pc, #84]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 8003088:	2200      	movs	r2, #0
 800308a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800308c:	4813      	ldr	r0, [pc, #76]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 800308e:	f004 fbb5 	bl	80077fc <HAL_DMA_Init>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_DCMI_MspInit+0x1dc>
    {
      Error_Handler();
 8003098:	f001 f972 	bl	8004380 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a0f      	ldr	r2, [pc, #60]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 80030a0:	649a      	str	r2, [r3, #72]	@ 0x48
 80030a2:	4a0e      	ldr	r2, [pc, #56]	@ (80030dc <HAL_DCMI_MspInit+0x21c>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2100      	movs	r1, #0
 80030ac:	204e      	movs	r0, #78	@ 0x4e
 80030ae:	f004 f823 	bl	80070f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80030b2:	204e      	movs	r0, #78	@ 0x4e
 80030b4:	f004 f83a 	bl	800712c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80030b8:	bf00      	nop
 80030ba:	3738      	adds	r7, #56	@ 0x38
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	48020000 	.word	0x48020000
 80030c4:	58024400 	.word	0x58024400
 80030c8:	58021000 	.word	0x58021000
 80030cc:	58020000 	.word	0x58020000
 80030d0:	58020800 	.word	0x58020800
 80030d4:	58020c00 	.word	0x58020c00
 80030d8:	58020400 	.word	0x58020400
 80030dc:	2400097c 	.word	0x2400097c
 80030e0:	40020410 	.word	0x40020410

080030e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030ea:	4b21      	ldr	r3, [pc, #132]	@ (8003170 <MX_DMA_Init+0x8c>)
 80030ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003170 <MX_DMA_Init+0x8c>)
 80030f2:	f043 0302 	orr.w	r3, r3, #2
 80030f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003170 <MX_DMA_Init+0x8c>)
 80030fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003108:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <MX_DMA_Init+0x8c>)
 800310a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800310e:	4a18      	ldr	r2, [pc, #96]	@ (8003170 <MX_DMA_Init+0x8c>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003118:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <MX_DMA_Init+0x8c>)
 800311a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	200b      	movs	r0, #11
 800312c:	f003 ffe4 	bl	80070f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003130:	200b      	movs	r0, #11
 8003132:	f003 fffb 	bl	800712c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003136:	2200      	movs	r2, #0
 8003138:	2100      	movs	r1, #0
 800313a:	200c      	movs	r0, #12
 800313c:	f003 ffdc 	bl	80070f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003140:	200c      	movs	r0, #12
 8003142:	f003 fff3 	bl	800712c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	200d      	movs	r0, #13
 800314c:	f003 ffd4 	bl	80070f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003150:	200d      	movs	r0, #13
 8003152:	f003 ffeb 	bl	800712c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	2100      	movs	r1, #0
 800315a:	2038      	movs	r0, #56	@ 0x38
 800315c:	f003 ffcc 	bl	80070f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003160:	2038      	movs	r0, #56	@ 0x38
 8003162:	f003 ffe3 	bl	800712c <HAL_NVIC_EnableIRQ>

}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	58024400 	.word	0x58024400

08003174 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8003178:	4b19      	ldr	r3, [pc, #100]	@ (80031e0 <MX_DMA2D_Init+0x6c>)
 800317a:	4a1a      	ldr	r2, [pc, #104]	@ (80031e4 <MX_DMA2D_Init+0x70>)
 800317c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800317e:	4b18      	ldr	r3, [pc, #96]	@ (80031e0 <MX_DMA2D_Init+0x6c>)
 8003180:	2200      	movs	r2, #0
 8003182:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8003184:	4b16      	ldr	r3, [pc, #88]	@ (80031e0 <MX_DMA2D_Init+0x6c>)
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800318a:	4b15      	ldr	r3, [pc, #84]	@ (80031e0 <MX_DMA2D_Init+0x6c>)
 800318c:	2200      	movs	r2, #0
 800318e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003190:	4b13      	ldr	r3, [pc, #76]	@ (80031e0 <MX_DMA2D_Init+0x6c>)
 8003192:	2200      	movs	r2, #0
 8003194:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003196:	4b12      	ldr	r3, [pc, #72]	@ (80031e0 <MX_DMA2D_Init+0x6c>)
 8003198:	2200      	movs	r2, #0
 800319a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800319c:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <MX_DMA2D_Init+0x6c>)
 800319e:	2200      	movs	r2, #0
 80031a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80031a2:	4b0f      	ldr	r3, [pc, #60]	@ (80031e0 <MX_DMA2D_Init+0x6c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80031a8:	4b0d      	ldr	r3, [pc, #52]	@ (80031e0 <MX_DMA2D_Init+0x6c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80031ae:	4b0c      	ldr	r3, [pc, #48]	@ (80031e0 <MX_DMA2D_Init+0x6c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80031b4:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <MX_DMA2D_Init+0x6c>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80031ba:	4809      	ldr	r0, [pc, #36]	@ (80031e0 <MX_DMA2D_Init+0x6c>)
 80031bc:	f007 f966 	bl	800a48c <HAL_DMA2D_Init>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80031c6:	f001 f8db 	bl	8004380 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80031ca:	2101      	movs	r1, #1
 80031cc:	4804      	ldr	r0, [pc, #16]	@ (80031e0 <MX_DMA2D_Init+0x6c>)
 80031ce:	f007 fad1 	bl	800a774 <HAL_DMA2D_ConfigLayer>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80031d8:	f001 f8d2 	bl	8004380 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	240009f4 	.word	0x240009f4
 80031e4:	52001000 	.word	0x52001000

080031e8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003230 <HAL_DMA2D_MspInit+0x48>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d116      	bne.n	8003228 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80031fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003234 <HAL_DMA2D_MspInit+0x4c>)
 80031fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003200:	4a0c      	ldr	r2, [pc, #48]	@ (8003234 <HAL_DMA2D_MspInit+0x4c>)
 8003202:	f043 0310 	orr.w	r3, r3, #16
 8003206:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800320a:	4b0a      	ldr	r3, [pc, #40]	@ (8003234 <HAL_DMA2D_MspInit+0x4c>)
 800320c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8003218:	2200      	movs	r2, #0
 800321a:	2100      	movs	r1, #0
 800321c:	205a      	movs	r0, #90	@ 0x5a
 800321e:	f003 ff6b 	bl	80070f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003222:	205a      	movs	r0, #90	@ 0x5a
 8003224:	f003 ff82 	bl	800712c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	52001000 	.word	0x52001000
 8003234:	58024400 	.word	0x58024400

08003238 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
 800324c:	615a      	str	r2, [r3, #20]
 800324e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8003250:	4b28      	ldr	r3, [pc, #160]	@ (80032f4 <MX_FMC_Init+0xbc>)
 8003252:	4a29      	ldr	r2, [pc, #164]	@ (80032f8 <MX_FMC_Init+0xc0>)
 8003254:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8003256:	4b27      	ldr	r3, [pc, #156]	@ (80032f4 <MX_FMC_Init+0xbc>)
 8003258:	4a28      	ldr	r2, [pc, #160]	@ (80032fc <MX_FMC_Init+0xc4>)
 800325a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800325c:	4b25      	ldr	r3, [pc, #148]	@ (80032f4 <MX_FMC_Init+0xbc>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8003262:	4b24      	ldr	r3, [pc, #144]	@ (80032f4 <MX_FMC_Init+0xbc>)
 8003264:	2200      	movs	r2, #0
 8003266:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8003268:	4b22      	ldr	r3, [pc, #136]	@ (80032f4 <MX_FMC_Init+0xbc>)
 800326a:	2200      	movs	r2, #0
 800326c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800326e:	4b21      	ldr	r3, [pc, #132]	@ (80032f4 <MX_FMC_Init+0xbc>)
 8003270:	2210      	movs	r2, #16
 8003272:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8003274:	4b1f      	ldr	r3, [pc, #124]	@ (80032f4 <MX_FMC_Init+0xbc>)
 8003276:	2200      	movs	r2, #0
 8003278:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800327a:	4b1e      	ldr	r3, [pc, #120]	@ (80032f4 <MX_FMC_Init+0xbc>)
 800327c:	2200      	movs	r2, #0
 800327e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8003280:	4b1c      	ldr	r3, [pc, #112]	@ (80032f4 <MX_FMC_Init+0xbc>)
 8003282:	2200      	movs	r2, #0
 8003284:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8003286:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <MX_FMC_Init+0xbc>)
 8003288:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800328c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800328e:	4b19      	ldr	r3, [pc, #100]	@ (80032f4 <MX_FMC_Init+0xbc>)
 8003290:	2200      	movs	r2, #0
 8003292:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8003294:	4b17      	ldr	r3, [pc, #92]	@ (80032f4 <MX_FMC_Init+0xbc>)
 8003296:	2200      	movs	r2, #0
 8003298:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800329a:	4b16      	ldr	r3, [pc, #88]	@ (80032f4 <MX_FMC_Init+0xbc>)
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80032a0:	4b14      	ldr	r3, [pc, #80]	@ (80032f4 <MX_FMC_Init+0xbc>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80032a6:	4b13      	ldr	r3, [pc, #76]	@ (80032f4 <MX_FMC_Init+0xbc>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80032ac:	4b11      	ldr	r3, [pc, #68]	@ (80032f4 <MX_FMC_Init+0xbc>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80032b2:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <MX_FMC_Init+0xbc>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80032b8:	230f      	movs	r3, #15
 80032ba:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80032bc:	230f      	movs	r3, #15
 80032be:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80032c0:	23ff      	movs	r3, #255	@ 0xff
 80032c2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80032c4:	230f      	movs	r3, #15
 80032c6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80032c8:	2310      	movs	r3, #16
 80032ca:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80032cc:	2311      	movs	r3, #17
 80032ce:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	2200      	movs	r2, #0
 80032d8:	4619      	mov	r1, r3
 80032da:	4806      	ldr	r0, [pc, #24]	@ (80032f4 <MX_FMC_Init+0xbc>)
 80032dc:	f00f fac2 	bl	8012864 <HAL_SRAM_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 80032e6:	f001 f84b 	bl	8004380 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80032ea:	bf00      	nop
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	24000a5c 	.word	0x24000a5c
 80032f8:	52004000 	.word	0x52004000
 80032fc:	52004104 	.word	0x52004104

08003300 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003300:	b580      	push	{r7, lr}
 8003302:	b0b8      	sub	sp, #224	@ 0xe0
 8003304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003306:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003316:	4b30      	ldr	r3, [pc, #192]	@ (80033d8 <HAL_FMC_MspInit+0xd8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d157      	bne.n	80033ce <HAL_FMC_MspInit+0xce>
    return;
  }
  FMC_Initialized = 1;
 800331e:	4b2e      	ldr	r3, [pc, #184]	@ (80033d8 <HAL_FMC_MspInit+0xd8>)
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003324:	f107 0308 	add.w	r3, r7, #8
 8003328:	22c0      	movs	r2, #192	@ 0xc0
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f019 fa67 	bl	801c800 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8003332:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800333e:	2300      	movs	r3, #0
 8003340:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003342:	f107 0308 	add.w	r3, r7, #8
 8003346:	4618      	mov	r0, r3
 8003348:	f00b fde2 	bl	800ef10 <HAL_RCCEx_PeriphCLKConfig>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_FMC_MspInit+0x56>
    {
      Error_Handler();
 8003352:	f001 f815 	bl	8004380 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003356:	4b21      	ldr	r3, [pc, #132]	@ (80033dc <HAL_FMC_MspInit+0xdc>)
 8003358:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800335c:	4a1f      	ldr	r2, [pc, #124]	@ (80033dc <HAL_FMC_MspInit+0xdc>)
 800335e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003362:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003366:	4b1d      	ldr	r3, [pc, #116]	@ (80033dc <HAL_FMC_MspInit+0xdc>)
 8003368:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800336c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D4_Pin|FMC_D5_Pin|FMC_D6_Pin|FMC_D7_Pin
 8003374:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003378:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |FMC_D8_Pin|FMC_D9_Pin|FMC_D10_Pin|FMC_D11_Pin
                          |FMC_D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003388:	2303      	movs	r3, #3
 800338a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800338e:	230c      	movs	r3, #12
 8003390:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003394:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003398:	4619      	mov	r1, r3
 800339a:	4811      	ldr	r0, [pc, #68]	@ (80033e0 <HAL_FMC_MspInit+0xe0>)
 800339c:	f007 ff48 	bl	800b230 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D13_Pin|FMC_D14_Pin|FMC_D15_Pin|FMC_DC_Pin
 80033a0:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 80033a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |FMC_D0_Pin|FMC_D1_Pin|FMC_D2_Pin|FMC_D3_Pin
                          |FMC_NRD_Pin|FMC_NWR_Pin|FMC_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a8:	2302      	movs	r3, #2
 80033aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b4:	2303      	movs	r3, #3
 80033b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033ba:	230c      	movs	r3, #12
 80033bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033c0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80033c4:	4619      	mov	r1, r3
 80033c6:	4807      	ldr	r0, [pc, #28]	@ (80033e4 <HAL_FMC_MspInit+0xe4>)
 80033c8:	f007 ff32 	bl	800b230 <HAL_GPIO_Init>
 80033cc:	e000      	b.n	80033d0 <HAL_FMC_MspInit+0xd0>
    return;
 80033ce:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80033d0:	37e0      	adds	r7, #224	@ 0xe0
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	24000aa8 	.word	0x24000aa8
 80033dc:	58024400 	.word	0x58024400
 80033e0:	58021000 	.word	0x58021000
 80033e4:	58020c00 	.word	0x58020c00

080033e8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80033f0:	f7ff ff86 	bl	8003300 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08c      	sub	sp, #48	@ 0x30
 8003400:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003402:	f107 031c 	add.w	r3, r7, #28
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	609a      	str	r2, [r3, #8]
 800340e:	60da      	str	r2, [r3, #12]
 8003410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003412:	4b74      	ldr	r3, [pc, #464]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 8003414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003418:	4a72      	ldr	r2, [pc, #456]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 800341a:	f043 0310 	orr.w	r3, r3, #16
 800341e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003422:	4b70      	ldr	r3, [pc, #448]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 8003424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003430:	4b6c      	ldr	r3, [pc, #432]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 8003432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003436:	4a6b      	ldr	r2, [pc, #428]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003440:	4b68      	ldr	r3, [pc, #416]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 8003442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800344e:	4b65      	ldr	r3, [pc, #404]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 8003450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003454:	4a63      	ldr	r2, [pc, #396]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 8003456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800345a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800345e:	4b61      	ldr	r3, [pc, #388]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 8003460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800346c:	4b5d      	ldr	r3, [pc, #372]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 800346e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003472:	4a5c      	ldr	r2, [pc, #368]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800347c:	4b59      	ldr	r3, [pc, #356]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 800347e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800348a:	4b56      	ldr	r3, [pc, #344]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 800348c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003490:	4a54      	ldr	r2, [pc, #336]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 8003492:	f043 0302 	orr.w	r3, r3, #2
 8003496:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800349a:	4b52      	ldr	r3, [pc, #328]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 800349c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034a8:	4b4e      	ldr	r3, [pc, #312]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 80034aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034ae:	4a4d      	ldr	r2, [pc, #308]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 80034b0:	f043 0308 	orr.w	r3, r3, #8
 80034b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034b8:	4b4a      	ldr	r3, [pc, #296]	@ (80035e4 <MX_GPIO_Init+0x1e8>)
 80034ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRESET_OUT_GPIO_Port, NRESET_OUT_Pin, GPIO_PIN_RESET);
 80034c6:	2200      	movs	r2, #0
 80034c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034cc:	4846      	ldr	r0, [pc, #280]	@ (80035e8 <MX_GPIO_Init+0x1ec>)
 80034ce:	f008 f85f 	bl	800b590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80034d2:	2201      	movs	r2, #1
 80034d4:	2102      	movs	r1, #2
 80034d6:	4845      	ldr	r0, [pc, #276]	@ (80035ec <MX_GPIO_Init+0x1f0>)
 80034d8:	f008 f85a 	bl	800b590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_RESET);
 80034dc:	2200      	movs	r2, #0
 80034de:	2180      	movs	r1, #128	@ 0x80
 80034e0:	4842      	ldr	r0, [pc, #264]	@ (80035ec <MX_GPIO_Init+0x1f0>)
 80034e2:	f008 f855 	bl	800b590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_BL_Pin|TFT_RS_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 80034e6:	2200      	movs	r2, #0
 80034e8:	f241 0103 	movw	r1, #4099	@ 0x1003
 80034ec:	4840      	ldr	r0, [pc, #256]	@ (80035f0 <MX_GPIO_Init+0x1f4>)
 80034ee:	f008 f84f 	bl	800b590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_INT_Pin */
  GPIO_InitStruct.Pin = TFT_INT_Pin;
 80034f2:	2308      	movs	r3, #8
 80034f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80034fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TFT_INT_GPIO_Port, &GPIO_InitStruct);
 8003500:	f107 031c 	add.w	r3, r7, #28
 8003504:	4619      	mov	r1, r3
 8003506:	483b      	ldr	r0, [pc, #236]	@ (80035f4 <MX_GPIO_Init+0x1f8>)
 8003508:	f007 fe92 	bl	800b230 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRESET_OUT_Pin */
  GPIO_InitStruct.Pin = NRESET_OUT_Pin;
 800350c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003512:	2301      	movs	r3, #1
 8003514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351a:	2300      	movs	r3, #0
 800351c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NRESET_OUT_GPIO_Port, &GPIO_InitStruct);
 800351e:	f107 031c 	add.w	r3, r7, #28
 8003522:	4619      	mov	r1, r3
 8003524:	4830      	ldr	r0, [pc, #192]	@ (80035e8 <MX_GPIO_Init+0x1ec>)
 8003526:	f007 fe83 	bl	800b230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_BUTTON1_Pin PUSH_BUTTON2_Pin PUSH_BUTTON3_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON1_Pin|PUSH_BUTTON2_Pin|PUSH_BUTTON3_Pin;
 800352a:	230e      	movs	r3, #14
 800352c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800352e:	2300      	movs	r3, #0
 8003530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003532:	2301      	movs	r3, #1
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003536:	f107 031c 	add.w	r3, r7, #28
 800353a:	4619      	mov	r1, r3
 800353c:	482a      	ldr	r0, [pc, #168]	@ (80035e8 <MX_GPIO_Init+0x1ec>)
 800353e:	f007 fe77 	bl	800b230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON4_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON4_Pin;
 8003542:	2301      	movs	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003546:	2300      	movs	r3, #0
 8003548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800354a:	2301      	movs	r3, #1
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PUSH_BUTTON4_GPIO_Port, &GPIO_InitStruct);
 800354e:	f107 031c 	add.w	r3, r7, #28
 8003552:	4619      	mov	r1, r3
 8003554:	4825      	ldr	r0, [pc, #148]	@ (80035ec <MX_GPIO_Init+0x1f0>)
 8003556:	f007 fe6b 	bl	800b230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DCMI_PWDN_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DCMI_PWDN_Pin;
 800355a:	2382      	movs	r3, #130	@ 0x82
 800355c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355e:	2301      	movs	r3, #1
 8003560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003566:	2300      	movs	r3, #0
 8003568:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356a:	f107 031c 	add.w	r3, r7, #28
 800356e:	4619      	mov	r1, r3
 8003570:	481e      	ldr	r0, [pc, #120]	@ (80035ec <MX_GPIO_Init+0x1f0>)
 8003572:	f007 fe5d 	bl	800b230 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_BL_Pin TFT_RS_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_BL_Pin|TFT_RS_Pin|TFT_CS_Pin;
 8003576:	f241 0303 	movw	r3, #4099	@ 0x1003
 800357a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800357c:	2301      	movs	r3, #1
 800357e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003584:	2300      	movs	r3, #0
 8003586:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003588:	f107 031c 	add.w	r3, r7, #28
 800358c:	4619      	mov	r1, r3
 800358e:	4818      	ldr	r0, [pc, #96]	@ (80035f0 <MX_GPIO_Init+0x1f4>)
 8003590:	f007 fe4e 	bl	800b230 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_XCLK_Pin */
  GPIO_InitStruct.Pin = DCMI_XCLK_Pin;
 8003594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	2302      	movs	r3, #2
 800359c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a2:	2303      	movs	r3, #3
 80035a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80035a6:	2300      	movs	r3, #0
 80035a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DCMI_XCLK_GPIO_Port, &GPIO_InitStruct);
 80035aa:	f107 031c 	add.w	r3, r7, #28
 80035ae:	4619      	mov	r1, r3
 80035b0:	480e      	ldr	r0, [pc, #56]	@ (80035ec <MX_GPIO_Init+0x1f0>)
 80035b2:	f007 fe3d 	bl	800b230 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_TE_Pin */
  GPIO_InitStruct.Pin = TFT_TE_Pin;
 80035b6:	2304      	movs	r3, #4
 80035b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80035be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035c0:	2301      	movs	r3, #1
 80035c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TFT_TE_GPIO_Port, &GPIO_InitStruct);
 80035c4:	f107 031c 	add.w	r3, r7, #28
 80035c8:	4619      	mov	r1, r3
 80035ca:	480b      	ldr	r0, [pc, #44]	@ (80035f8 <MX_GPIO_Init+0x1fc>)
 80035cc:	f007 fe30 	bl	800b230 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_CLOSE);
 80035d0:	2100      	movs	r1, #0
 80035d2:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80035d6:	f002 f84b 	bl	8005670 <HAL_SYSCFG_AnalogSwitchConfig>

}
 80035da:	bf00      	nop
 80035dc:	3730      	adds	r7, #48	@ 0x30
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	58024400 	.word	0x58024400
 80035e8:	58020800 	.word	0x58020800
 80035ec:	58020000 	.word	0x58020000
 80035f0:	58020400 	.word	0x58020400
 80035f4:	58021000 	.word	0x58021000
 80035f8:	58020c00 	.word	0x58020c00

080035fc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c_lcd;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af02      	add	r7, sp, #8
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	f023 030f 	bic.w	r3, r3, #15
 800360c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	f043 030c 	orr.w	r3, r3, #12
 800361a:	b2db      	uxtb	r3, r3
 800361c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	f043 0308 	orr.w	r3, r3, #8
 8003624:	b2db      	uxtb	r3, r3
 8003626:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8003628:	7bbb      	ldrb	r3, [r7, #14]
 800362a:	f043 030c 	orr.w	r3, r3, #12
 800362e:	b2db      	uxtb	r3, r3
 8003630:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8003632:	7bbb      	ldrb	r3, [r7, #14]
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	b2db      	uxtb	r3, r3
 800363a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c_lcd, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800363c:	f107 0208 	add.w	r2, r7, #8
 8003640:	2364      	movs	r3, #100	@ 0x64
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2304      	movs	r3, #4
 8003646:	214e      	movs	r1, #78	@ 0x4e
 8003648:	4803      	ldr	r0, [pc, #12]	@ (8003658 <lcd_send_cmd+0x5c>)
 800364a:	f008 f871 	bl	800b730 <HAL_I2C_Master_Transmit>
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	24000b00 	.word	0x24000b00

0800365c <lcd_send_data>:

void lcd_send_data (char data)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
 8003662:	4603      	mov	r3, r0
 8003664:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	f023 030f 	bic.w	r3, r3, #15
 800366c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	f043 030d 	orr.w	r3, r3, #13
 800367a:	b2db      	uxtb	r3, r3
 800367c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	f043 0309 	orr.w	r3, r3, #9
 8003684:	b2db      	uxtb	r3, r3
 8003686:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8003688:	7bbb      	ldrb	r3, [r7, #14]
 800368a:	f043 030d 	orr.w	r3, r3, #13
 800368e:	b2db      	uxtb	r3, r3
 8003690:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8003692:	7bbb      	ldrb	r3, [r7, #14]
 8003694:	f043 0309 	orr.w	r3, r3, #9
 8003698:	b2db      	uxtb	r3, r3
 800369a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c_lcd, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800369c:	f107 0208 	add.w	r2, r7, #8
 80036a0:	2364      	movs	r3, #100	@ 0x64
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2304      	movs	r3, #4
 80036a6:	214e      	movs	r1, #78	@ 0x4e
 80036a8:	4803      	ldr	r0, [pc, #12]	@ (80036b8 <lcd_send_data+0x5c>)
 80036aa:	f008 f841 	bl	800b730 <HAL_I2C_Master_Transmit>
}
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	24000b00 	.word	0x24000b00

080036bc <lcd_clear>:

void lcd_clear (void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80036c2:	2080      	movs	r0, #128	@ 0x80
 80036c4:	f7ff ff9a 	bl	80035fc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	607b      	str	r3, [r7, #4]
 80036cc:	e005      	b.n	80036da <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80036ce:	2020      	movs	r0, #32
 80036d0:	f7ff ffc4 	bl	800365c <lcd_send_data>
	for (int i=0; i<70; i++)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3301      	adds	r3, #1
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b45      	cmp	r3, #69	@ 0x45
 80036de:	ddf6      	ble.n	80036ce <lcd_clear+0x12>
	}
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
    switch (row)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <lcd_put_cur+0x18>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d005      	beq.n	800370c <lcd_put_cur+0x22>
 8003700:	e009      	b.n	8003716 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003708:	603b      	str	r3, [r7, #0]
            break;
 800370a:	e004      	b.n	8003716 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003712:	603b      	str	r3, [r7, #0]
            break;
 8003714:	bf00      	nop
    }

    lcd_send_cmd (col);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff ff6e 	bl	80035fc <lcd_send_cmd>
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <lcd_init>:


void lcd_init (void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800372c:	2032      	movs	r0, #50	@ 0x32
 800372e:	f001 ff6f 	bl	8005610 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003732:	2030      	movs	r0, #48	@ 0x30
 8003734:	f7ff ff62 	bl	80035fc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8003738:	2005      	movs	r0, #5
 800373a:	f001 ff69 	bl	8005610 <HAL_Delay>
	lcd_send_cmd (0x30);
 800373e:	2030      	movs	r0, #48	@ 0x30
 8003740:	f7ff ff5c 	bl	80035fc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8003744:	2001      	movs	r0, #1
 8003746:	f001 ff63 	bl	8005610 <HAL_Delay>
	lcd_send_cmd (0x30);
 800374a:	2030      	movs	r0, #48	@ 0x30
 800374c:	f7ff ff56 	bl	80035fc <lcd_send_cmd>
	HAL_Delay(10);
 8003750:	200a      	movs	r0, #10
 8003752:	f001 ff5d 	bl	8005610 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8003756:	2020      	movs	r0, #32
 8003758:	f7ff ff50 	bl	80035fc <lcd_send_cmd>
	HAL_Delay(10);
 800375c:	200a      	movs	r0, #10
 800375e:	f001 ff57 	bl	8005610 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003762:	2028      	movs	r0, #40	@ 0x28
 8003764:	f7ff ff4a 	bl	80035fc <lcd_send_cmd>
	HAL_Delay(1);
 8003768:	2001      	movs	r0, #1
 800376a:	f001 ff51 	bl	8005610 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800376e:	2008      	movs	r0, #8
 8003770:	f7ff ff44 	bl	80035fc <lcd_send_cmd>
	HAL_Delay(1);
 8003774:	2001      	movs	r0, #1
 8003776:	f001 ff4b 	bl	8005610 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800377a:	2001      	movs	r0, #1
 800377c:	f7ff ff3e 	bl	80035fc <lcd_send_cmd>
	HAL_Delay(1);
 8003780:	2001      	movs	r0, #1
 8003782:	f001 ff45 	bl	8005610 <HAL_Delay>
	HAL_Delay(1);
 8003786:	2001      	movs	r0, #1
 8003788:	f001 ff42 	bl	8005610 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800378c:	2006      	movs	r0, #6
 800378e:	f7ff ff35 	bl	80035fc <lcd_send_cmd>
	HAL_Delay(1);
 8003792:	2001      	movs	r0, #1
 8003794:	f001 ff3c 	bl	8005610 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003798:	200c      	movs	r0, #12
 800379a:	f7ff ff2f 	bl	80035fc <lcd_send_cmd>
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80037aa:	e006      	b.n	80037ba <lcd_send_string+0x18>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff ff51 	bl	800365c <lcd_send_data>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f4      	bne.n	80037ac <lcd_send_string+0xa>
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003840 <MX_I2C1_Init+0x74>)
 80037d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003844 <MX_I2C1_Init+0x78>)
 80037d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 80037d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <MX_I2C1_Init+0x74>)
 80037d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003848 <MX_I2C1_Init+0x7c>)
 80037da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80037dc:	4b18      	ldr	r3, [pc, #96]	@ (8003840 <MX_I2C1_Init+0x74>)
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037e2:	4b17      	ldr	r3, [pc, #92]	@ (8003840 <MX_I2C1_Init+0x74>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037e8:	4b15      	ldr	r3, [pc, #84]	@ (8003840 <MX_I2C1_Init+0x74>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80037ee:	4b14      	ldr	r3, [pc, #80]	@ (8003840 <MX_I2C1_Init+0x74>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037f4:	4b12      	ldr	r3, [pc, #72]	@ (8003840 <MX_I2C1_Init+0x74>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037fa:	4b11      	ldr	r3, [pc, #68]	@ (8003840 <MX_I2C1_Init+0x74>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003800:	4b0f      	ldr	r3, [pc, #60]	@ (8003840 <MX_I2C1_Init+0x74>)
 8003802:	2200      	movs	r2, #0
 8003804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003806:	480e      	ldr	r0, [pc, #56]	@ (8003840 <MX_I2C1_Init+0x74>)
 8003808:	f007 fef6 	bl	800b5f8 <HAL_I2C_Init>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003812:	f000 fdb5 	bl	8004380 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003816:	2100      	movs	r1, #0
 8003818:	4809      	ldr	r0, [pc, #36]	@ (8003840 <MX_I2C1_Init+0x74>)
 800381a:	f008 feab 	bl	800c574 <HAL_I2CEx_ConfigAnalogFilter>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003824:	f000 fdac 	bl	8004380 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003828:	2100      	movs	r1, #0
 800382a:	4805      	ldr	r0, [pc, #20]	@ (8003840 <MX_I2C1_Init+0x74>)
 800382c:	f008 feed 	bl	800c60a <HAL_I2CEx_ConfigDigitalFilter>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003836:	f000 fda3 	bl	8004380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	24000aac 	.word	0x24000aac
 8003844:	40005400 	.word	0x40005400
 8003848:	10c0ecff 	.word	0x10c0ecff

0800384c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003850:	4b1b      	ldr	r3, [pc, #108]	@ (80038c0 <MX_I2C2_Init+0x74>)
 8003852:	4a1c      	ldr	r2, [pc, #112]	@ (80038c4 <MX_I2C2_Init+0x78>)
 8003854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8003856:	4b1a      	ldr	r3, [pc, #104]	@ (80038c0 <MX_I2C2_Init+0x74>)
 8003858:	4a1b      	ldr	r2, [pc, #108]	@ (80038c8 <MX_I2C2_Init+0x7c>)
 800385a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800385c:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <MX_I2C2_Init+0x74>)
 800385e:	2200      	movs	r2, #0
 8003860:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003862:	4b17      	ldr	r3, [pc, #92]	@ (80038c0 <MX_I2C2_Init+0x74>)
 8003864:	2201      	movs	r2, #1
 8003866:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003868:	4b15      	ldr	r3, [pc, #84]	@ (80038c0 <MX_I2C2_Init+0x74>)
 800386a:	2200      	movs	r2, #0
 800386c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800386e:	4b14      	ldr	r3, [pc, #80]	@ (80038c0 <MX_I2C2_Init+0x74>)
 8003870:	2200      	movs	r2, #0
 8003872:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003874:	4b12      	ldr	r3, [pc, #72]	@ (80038c0 <MX_I2C2_Init+0x74>)
 8003876:	2200      	movs	r2, #0
 8003878:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800387a:	4b11      	ldr	r3, [pc, #68]	@ (80038c0 <MX_I2C2_Init+0x74>)
 800387c:	2200      	movs	r2, #0
 800387e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003880:	4b0f      	ldr	r3, [pc, #60]	@ (80038c0 <MX_I2C2_Init+0x74>)
 8003882:	2200      	movs	r2, #0
 8003884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003886:	480e      	ldr	r0, [pc, #56]	@ (80038c0 <MX_I2C2_Init+0x74>)
 8003888:	f007 feb6 	bl	800b5f8 <HAL_I2C_Init>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003892:	f000 fd75 	bl	8004380 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003896:	2100      	movs	r1, #0
 8003898:	4809      	ldr	r0, [pc, #36]	@ (80038c0 <MX_I2C2_Init+0x74>)
 800389a:	f008 fe6b 	bl	800c574 <HAL_I2CEx_ConfigAnalogFilter>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80038a4:	f000 fd6c 	bl	8004380 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80038a8:	2100      	movs	r1, #0
 80038aa:	4805      	ldr	r0, [pc, #20]	@ (80038c0 <MX_I2C2_Init+0x74>)
 80038ac:	f008 fead 	bl	800c60a <HAL_I2CEx_ConfigDigitalFilter>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80038b6:	f000 fd63 	bl	8004380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	24000b00 	.word	0x24000b00
 80038c4:	40005800 	.word	0x40005800
 80038c8:	10c0ecff 	.word	0x10c0ecff

080038cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b0bc      	sub	sp, #240	@ 0xf0
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038e4:	f107 0318 	add.w	r3, r7, #24
 80038e8:	22c0      	movs	r2, #192	@ 0xc0
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f018 ff87 	bl	801c800 <memset>
  if(i2cHandle->Instance==I2C1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a4d      	ldr	r2, [pc, #308]	@ (8003a2c <HAL_I2C_MspInit+0x160>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d147      	bne.n	800398c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80038fc:	f04f 0208 	mov.w	r2, #8
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003908:	2300      	movs	r3, #0
 800390a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800390e:	f107 0318 	add.w	r3, r7, #24
 8003912:	4618      	mov	r0, r3
 8003914:	f00b fafc 	bl	800ef10 <HAL_RCCEx_PeriphCLKConfig>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800391e:	f000 fd2f 	bl	8004380 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003922:	4b43      	ldr	r3, [pc, #268]	@ (8003a30 <HAL_I2C_MspInit+0x164>)
 8003924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003928:	4a41      	ldr	r2, [pc, #260]	@ (8003a30 <HAL_I2C_MspInit+0x164>)
 800392a:	f043 0302 	orr.w	r3, r3, #2
 800392e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003932:	4b3f      	ldr	r3, [pc, #252]	@ (8003a30 <HAL_I2C_MspInit+0x164>)
 8003934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003940:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003944:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003948:	2312      	movs	r3, #18
 800394a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800394e:	2301      	movs	r3, #1
 8003950:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003954:	2302      	movs	r3, #2
 8003956:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800395a:	2304      	movs	r3, #4
 800395c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003960:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003964:	4619      	mov	r1, r3
 8003966:	4833      	ldr	r0, [pc, #204]	@ (8003a34 <HAL_I2C_MspInit+0x168>)
 8003968:	f007 fc62 	bl	800b230 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800396c:	4b30      	ldr	r3, [pc, #192]	@ (8003a30 <HAL_I2C_MspInit+0x164>)
 800396e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003972:	4a2f      	ldr	r2, [pc, #188]	@ (8003a30 <HAL_I2C_MspInit+0x164>)
 8003974:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003978:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800397c:	4b2c      	ldr	r3, [pc, #176]	@ (8003a30 <HAL_I2C_MspInit+0x164>)
 800397e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003982:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800398a:	e04b      	b.n	8003a24 <HAL_I2C_MspInit+0x158>
  else if(i2cHandle->Instance==I2C2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a29      	ldr	r2, [pc, #164]	@ (8003a38 <HAL_I2C_MspInit+0x16c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d146      	bne.n	8003a24 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003996:	f04f 0208 	mov.w	r2, #8
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039a8:	f107 0318 	add.w	r3, r7, #24
 80039ac:	4618      	mov	r0, r3
 80039ae:	f00b faaf 	bl	800ef10 <HAL_RCCEx_PeriphCLKConfig>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80039b8:	f000 fce2 	bl	8004380 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003a30 <HAL_I2C_MspInit+0x164>)
 80039be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003a30 <HAL_I2C_MspInit+0x164>)
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039cc:	4b18      	ldr	r3, [pc, #96]	@ (8003a30 <HAL_I2C_MspInit+0x164>)
 80039ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80039da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80039de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039e2:	2312      	movs	r3, #18
 80039e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039ee:	2302      	movs	r3, #2
 80039f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80039f4:	2304      	movs	r3, #4
 80039f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80039fe:	4619      	mov	r1, r3
 8003a00:	480c      	ldr	r0, [pc, #48]	@ (8003a34 <HAL_I2C_MspInit+0x168>)
 8003a02:	f007 fc15 	bl	800b230 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003a06:	4b0a      	ldr	r3, [pc, #40]	@ (8003a30 <HAL_I2C_MspInit+0x164>)
 8003a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a0c:	4a08      	ldr	r2, [pc, #32]	@ (8003a30 <HAL_I2C_MspInit+0x164>)
 8003a0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003a16:	4b06      	ldr	r3, [pc, #24]	@ (8003a30 <HAL_I2C_MspInit+0x164>)
 8003a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
}
 8003a24:	bf00      	nop
 8003a26:	37f0      	adds	r7, #240	@ 0xf0
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40005400 	.word	0x40005400
 8003a30:	58024400 	.word	0x58024400
 8003a34:	58020400 	.word	0x58020400
 8003a38:	40005800 	.word	0x40005800

08003a3c <LCD_IO_DmaTxCpltCallback>:
extern uint8_t img_buffer[];
char LCD_Busy = 0;
uint32_t new_frame_counter = 0;

void LCD_IO_DmaTxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	LCD_Busy = 0;
 8003a44:	4b04      	ldr	r3, [pc, #16]	@ (8003a58 <LCD_IO_DmaTxCpltCallback+0x1c>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	24000b54 	.word	0x24000b54

08003a5c <RefreshCamera>:

void RefreshCamera()
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af02      	add	r7, sp, #8
	if ((!LCD_Busy)&&(new_frame_counter!=frame_counter))
 8003a62:	4b16      	ldr	r3, [pc, #88]	@ (8003abc <RefreshCamera+0x60>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d124      	bne.n	8003ab4 <RefreshCamera+0x58>
 8003a6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <RefreshCamera+0x64>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ac4 <RefreshCamera+0x68>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d01e      	beq.n	8003ab4 <RefreshCamera+0x58>
	{
		if ((frame_counter-new_frame_counter)>1)
 8003a76:	4b13      	ldr	r3, [pc, #76]	@ (8003ac4 <RefreshCamera+0x68>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4b11      	ldr	r3, [pc, #68]	@ (8003ac0 <RefreshCamera+0x64>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d907      	bls.n	8003a94 <RefreshCamera+0x38>
		{
			DebugPrint("\r\n %8lX %8lX", frame_counter, new_frame_counter);
 8003a84:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac4 <RefreshCamera+0x68>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac0 <RefreshCamera+0x64>)
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	480e      	ldr	r0, [pc, #56]	@ (8003ac8 <RefreshCamera+0x6c>)
 8003a90:	f018 f812 	bl	801bab8 <DebugPrint>
		}
		LCD_Busy = 0;
 8003a94:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <RefreshCamera+0x60>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]
		new_frame_counter = frame_counter;
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac4 <RefreshCamera+0x68>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a08      	ldr	r2, [pc, #32]	@ (8003ac0 <RefreshCamera+0x64>)
 8003aa0:	6013      	str	r3, [r2, #0]
		BSP_LCD_DrawRGB16Image(0, 0, 320, 240, (uint16_t *)img_buffer);
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8003acc <RefreshCamera+0x70>)
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	23f0      	movs	r3, #240	@ 0xf0
 8003aa8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003aac:	2100      	movs	r1, #0
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f7fe fd92 	bl	80025d8 <BSP_LCD_DrawRGB16Image>
	}
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	24000b54 	.word	0x24000b54
 8003ac0:	24000b58 	.word	0x24000b58
 8003ac4:	240007d8 	.word	0x240007d8
 8003ac8:	0801f1e0 	.word	0x0801f1e0
 8003acc:	30000000 	.word	0x30000000

08003ad0 <SetServoPos>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SetServoPos(uint8_t servo_no, int16_t pos)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	460a      	mov	r2, r1
 8003ada:	71fb      	strb	r3, [r7, #7]
 8003adc:	4613      	mov	r3, r2
 8003ade:	80bb      	strh	r3, [r7, #4]
	if (pos>1000)
 8003ae0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ae4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ae8:	dd02      	ble.n	8003af0 <SetServoPos+0x20>
		pos = 1000;
 8003aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003aee:	80bb      	strh	r3, [r7, #4]
	if (pos<-1000)
 8003af0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003af4:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8003af8:	da02      	bge.n	8003b00 <SetServoPos+0x30>
		pos = -1000;
 8003afa:	f64f 4318 	movw	r3, #64536	@ 0xfc18
 8003afe:	80bb      	strh	r3, [r7, #4]

	uint32_t duty = 300000l + (200l * pos);
 8003b00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b04:	22c8      	movs	r2, #200	@ 0xc8
 8003b06:	fb03 f202 	mul.w	r2, r3, r2
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <SetServoPos+0x6c>)
 8003b0c:	4413      	add	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
	switch (servo_no) {
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d002      	beq.n	8003b1c <SetServoPos+0x4c>
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d005      	beq.n	8003b26 <SetServoPos+0x56>
		break;
	case 2:
		((TIM_HandleTypeDef*)&SERVO_TIMER_HANDLE)->Instance->CCR4 = duty;
		break;
	}
}
 8003b1a:	e009      	b.n	8003b30 <SetServoPos+0x60>
		((TIM_HandleTypeDef*)&SERVO_TIMER_HANDLE)->Instance->CCR1 = duty;
 8003b1c:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <SetServoPos+0x70>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8003b24:	e004      	b.n	8003b30 <SetServoPos+0x60>
		((TIM_HandleTypeDef*)&SERVO_TIMER_HANDLE)->Instance->CCR4 = duty;
 8003b26:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <SetServoPos+0x70>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8003b2e:	bf00      	nop
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	000493e0 	.word	0x000493e0
 8003b40:	24000d80 	.word	0x24000d80

08003b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b0e8      	sub	sp, #416	@ 0x1a0
 8003b48:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003b4a:	f000 fbcf 	bl	80042ec <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003b4e:	4bb3      	ldr	r3, [pc, #716]	@ (8003e1c <main+0x2d8>)
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d11b      	bne.n	8003b92 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003b5a:	f3bf 8f4f 	dsb	sy
}
 8003b5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b60:	f3bf 8f6f 	isb	sy
}
 8003b64:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003b66:	4bad      	ldr	r3, [pc, #692]	@ (8003e1c <main+0x2d8>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003b6e:	f3bf 8f4f 	dsb	sy
}
 8003b72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b74:	f3bf 8f6f 	isb	sy
}
 8003b78:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003b7a:	4ba8      	ldr	r3, [pc, #672]	@ (8003e1c <main+0x2d8>)
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	4aa7      	ldr	r2, [pc, #668]	@ (8003e1c <main+0x2d8>)
 8003b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b84:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b86:	f3bf 8f4f 	dsb	sy
}
 8003b8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b8c:	f3bf 8f6f 	isb	sy
}
 8003b90:	e000      	b.n	8003b94 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003b92:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003b94:	4ba1      	ldr	r3, [pc, #644]	@ (8003e1c <main+0x2d8>)
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d143      	bne.n	8003c28 <main+0xe4>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003ba0:	4b9e      	ldr	r3, [pc, #632]	@ (8003e1c <main+0x2d8>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003ba8:	f3bf 8f4f 	dsb	sy
}
 8003bac:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003bae:	4b9b      	ldr	r3, [pc, #620]	@ (8003e1c <main+0x2d8>)
 8003bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bb4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003bb8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003bbc:	0b5b      	lsrs	r3, r3, #13
 8003bbe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003bc2:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003bc6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003bca:	08db      	lsrs	r3, r3, #3
 8003bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003bd4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003bde:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003be0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003be4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003be6:	498d      	ldr	r1, [pc, #564]	@ (8003e1c <main+0x2d8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8003bee:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8003bf2:	1e5a      	subs	r2, r3, #1
 8003bf4:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1eb      	bne.n	8003bd4 <main+0x90>
    } while(sets-- != 0U);
 8003bfc:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8003c00:	1e5a      	subs	r2, r3, #1
 8003c02:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1dd      	bne.n	8003bc6 <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 8003c0a:	f3bf 8f4f 	dsb	sy
}
 8003c0e:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003c10:	4b82      	ldr	r3, [pc, #520]	@ (8003e1c <main+0x2d8>)
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	4a81      	ldr	r2, [pc, #516]	@ (8003e1c <main+0x2d8>)
 8003c16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c1a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c1c:	f3bf 8f4f 	dsb	sy
}
 8003c20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c22:	f3bf 8f6f 	isb	sy
}
 8003c26:	e000      	b.n	8003c2a <main+0xe6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003c28:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c2a:	f001 fc95 	bl	8005558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c2e:	f000 f9ab 	bl	8003f88 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003c32:	f000 fa2b 	bl	800408c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c36:	f7ff fbe1 	bl	80033fc <MX_GPIO_Init>
  MX_BDMA_Init();
 8003c3a:	f7ff f8ed 	bl	8002e18 <MX_BDMA_Init>
  MX_DMA_Init();
 8003c3e:	f7ff fa51 	bl	80030e4 <MX_DMA_Init>
  MX_QUADSPI_Init();
 8003c42:	f000 fba3 	bl	800438c <MX_QUADSPI_Init>
  MX_ADC3_Init();
 8003c46:	f7fe ff37 	bl	8002ab8 <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 8003c4a:	f016 fa4b 	bl	801a0e4 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8003c4e:	f001 fa57 	bl	8005100 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8003c52:	f7ff fdfb 	bl	800384c <MX_I2C2_Init>
  MX_DCMI_Init();
 8003c56:	f7ff f8ff 	bl	8002e58 <MX_DCMI_Init>
  MX_SPI2_Init();
 8003c5a:	f000 fd0b 	bl	8004674 <MX_SPI2_Init>
  MX_DMA2D_Init();
 8003c5e:	f7ff fa89 	bl	8003174 <MX_DMA2D_Init>
  MX_I2C1_Init();
 8003c62:	f7ff fdb3 	bl	80037cc <MX_I2C1_Init>
  MX_FMC_Init();
 8003c66:	f7ff fae7 	bl	8003238 <MX_FMC_Init>
  MX_USART2_UART_Init();
 8003c6a:	f001 fa95 	bl	8005198 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003c6e:	f000 fcab 	bl	80045c8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8003c72:	f001 f881 	bl	8004d78 <MX_TIM2_Init>
  MX_ADC1_Init();
 8003c76:	f7fe fea3 	bl	80029c0 <MX_ADC1_Init>
  MX_TIM8_Init();
 8003c7a:	f001 f901 	bl	8004e80 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
#if	_USE_TFT_
	BSP_LCD_Init();
 8003c7e:	f7fe fc47 	bl	8002510 <BSP_LCD_Init>
	BSP_LCD_DisplayOn();
 8003c82:	f7fe fc9f 	bl	80025c4 <BSP_LCD_DisplayOn>
	{
		uint32_t size = 320l * 240 * 2;
 8003c86:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8003c8a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
		memset(img_buffer, 0, size);
 8003c8e:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8003c92:	2100      	movs	r1, #0
 8003c94:	4862      	ldr	r0, [pc, #392]	@ (8003e20 <main+0x2dc>)
 8003c96:	f018 fdb3 	bl	801c800 <memset>
	}
#endif
#if	_USE_LCD_
	lcd_init();
 8003c9a:	f7ff fd45 	bl	8003728 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//send initializing sensor
	lcd_put_cur(0,0);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7ff fd22 	bl	80036ea <lcd_put_cur>
	lcd_send_string("INITIALIZING SENSORS");
 8003ca6:	485f      	ldr	r0, [pc, #380]	@ (8003e24 <main+0x2e0>)
 8003ca8:	f7ff fd7b 	bl	80037a2 <lcd_send_string>





	AS7265X_begin(&hi2c_as7265x);
 8003cac:	485e      	ldr	r0, [pc, #376]	@ (8003e28 <main+0x2e4>)
 8003cae:	f7fc fd05 	bl	80006bc <AS7265X_begin>
	AS7265X_takeMeasurements();
 8003cb2:	f7fc fd11 	bl	80006d8 <AS7265X_takeMeasurements>

	lcd_clear();
 8003cb6:	f7ff fd01 	bl	80036bc <lcd_clear>
	lcd_put_cur(0,0);
 8003cba:	2100      	movs	r1, #0
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	f7ff fd14 	bl	80036ea <lcd_put_cur>
	lcd_send_string("CAPTURING SPECTRAL");
 8003cc2:	485a      	ldr	r0, [pc, #360]	@ (8003e2c <main+0x2e8>)
 8003cc4:	f7ff fd6d 	bl	80037a2 <lcd_send_string>



	// WAVELENGTH
	float specRaw[] = {
	    AS7265X_getCalibrateA(),
 8003cc8:	f7fc fd10 	bl	80006ec <AS7265X_getCalibrateA>
 8003ccc:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003cd0:	edc7 7a4b 	vstr	s15, [r7, #300]	@ 0x12c
	    AS7265X_getCalibrateB(),
 8003cd4:	f7fc fd16 	bl	8000704 <AS7265X_getCalibrateB>
 8003cd8:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003cdc:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
	    AS7265X_getCalibrateC(),
 8003ce0:	f7fc fd1c 	bl	800071c <AS7265X_getCalibrateC>
 8003ce4:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003ce8:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
	    AS7265X_getCalibrateD(),
 8003cec:	f7fc fd22 	bl	8000734 <AS7265X_getCalibrateD>
 8003cf0:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003cf4:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138
	    AS7265X_getCalibrateE(),
 8003cf8:	f7fc fd28 	bl	800074c <AS7265X_getCalibrateE>
 8003cfc:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d00:	edc7 7a4f 	vstr	s15, [r7, #316]	@ 0x13c
	    AS7265X_getCalibrateF(),
 8003d04:	f7fc fd2e 	bl	8000764 <AS7265X_getCalibrateF>
 8003d08:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d0c:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140
	    AS7265X_getCalibrateG(),
 8003d10:	f7fc fd34 	bl	800077c <AS7265X_getCalibrateG>
 8003d14:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d18:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144
	    AS7265X_getCalibrateH(),
 8003d1c:	f7fc fd3a 	bl	8000794 <AS7265X_getCalibrateH>
 8003d20:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d24:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148
	    AS7265X_getCalibrateI(),
 8003d28:	f7fc fd40 	bl	80007ac <AS7265X_getCalibrateI>
 8003d2c:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d30:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c
	    AS7265X_getCalibrateJ(),
 8003d34:	f7fc fd46 	bl	80007c4 <AS7265X_getCalibrateJ>
 8003d38:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d3c:	edc7 7a54 	vstr	s15, [r7, #336]	@ 0x150
	    AS7265X_getCalibrateK(),
 8003d40:	f7fc fd4c 	bl	80007dc <AS7265X_getCalibrateK>
 8003d44:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d48:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
	    AS7265X_getCalibrateL(),
 8003d4c:	f7fc fd52 	bl	80007f4 <AS7265X_getCalibrateL>
 8003d50:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d54:	edc7 7a56 	vstr	s15, [r7, #344]	@ 0x158
	    AS7265X_getCalibrateR(),
 8003d58:	f7fc fd58 	bl	800080c <AS7265X_getCalibrateR>
 8003d5c:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d60:	edc7 7a57 	vstr	s15, [r7, #348]	@ 0x15c
	    AS7265X_getCalibrateS(),
 8003d64:	f7fc fd5e 	bl	8000824 <AS7265X_getCalibrateS>
 8003d68:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d6c:	edc7 7a58 	vstr	s15, [r7, #352]	@ 0x160
	    AS7265X_getCalibrateT(),
 8003d70:	f7fc fd64 	bl	800083c <AS7265X_getCalibrateT>
 8003d74:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d78:	edc7 7a59 	vstr	s15, [r7, #356]	@ 0x164
	    AS7265X_getCalibrateU(),
 8003d7c:	f7fc fd6a 	bl	8000854 <AS7265X_getCalibrateU>
 8003d80:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d84:	edc7 7a5a 	vstr	s15, [r7, #360]	@ 0x168
	    AS7265X_getCalibrateV(),
 8003d88:	f7fc fd70 	bl	800086c <AS7265X_getCalibrateV>
 8003d8c:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d90:	edc7 7a5b 	vstr	s15, [r7, #364]	@ 0x16c
	    AS7265X_getCalibrateW()
 8003d94:	f7fc fd76 	bl	8000884 <AS7265X_getCalibrateW>
 8003d98:	eef0 7a40 	vmov.f32	s15, s0
	float specRaw[] = {
 8003d9c:	edc7 7a5c 	vstr	s15, [r7, #368]	@ 0x170
	};


	lcd_clear();
 8003da0:	f7ff fc8c 	bl	80036bc <lcd_clear>
	lcd_put_cur(0,0);
 8003da4:	2100      	movs	r1, #0
 8003da6:	2000      	movs	r0, #0
 8003da8:	f7ff fc9f 	bl	80036ea <lcd_put_cur>
	lcd_send_string("SPECTRAL DATA:");
 8003dac:	4820      	ldr	r0, [pc, #128]	@ (8003e30 <main+0x2ec>)
 8003dae:	f7ff fcf8 	bl	80037a2 <lcd_send_string>

	char buffer[256];
	int offset = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

	for (int i = 0; i < sizeof(specRaw) / sizeof(specRaw[0]); i++) {
 8003db8:	2300      	movs	r3, #0
 8003dba:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003dbe:	e027      	b.n	8003e10 <main+0x2cc>
	    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "%.2f,", specRaw[i]);
 8003dc0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003dc4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003dc8:	18d0      	adds	r0, r2, r3
 8003dca:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003dce:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8003dd2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8003ddc:	443b      	add	r3, r7
 8003dde:	3b6c      	subs	r3, #108	@ 0x6c
 8003de0:	edd3 7a00 	vldr	s15, [r3]
 8003de4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003de8:	ed8d 7b00 	vstr	d7, [sp]
 8003dec:	4a11      	ldr	r2, [pc, #68]	@ (8003e34 <main+0x2f0>)
 8003dee:	f018 fc1d 	bl	801c62c <sniprintf>
 8003df2:	4602      	mov	r2, r0
 8003df4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003df8:	4413      	add	r3, r2
 8003dfa:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
	    if (offset >= sizeof(buffer)) break;
 8003dfe:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003e02:	2bff      	cmp	r3, #255	@ 0xff
 8003e04:	d818      	bhi.n	8003e38 <main+0x2f4>
	for (int i = 0; i < sizeof(specRaw) / sizeof(specRaw[0]); i++) {
 8003e06:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003e10:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003e14:	2b11      	cmp	r3, #17
 8003e16:	d9d3      	bls.n	8003dc0 <main+0x27c>
 8003e18:	e00f      	b.n	8003e3a <main+0x2f6>
 8003e1a:	bf00      	nop
 8003e1c:	e000ed00 	.word	0xe000ed00
 8003e20:	30000000 	.word	0x30000000
 8003e24:	0801f1f0 	.word	0x0801f1f0
 8003e28:	24000aac 	.word	0x24000aac
 8003e2c:	0801f208 	.word	0x0801f208
 8003e30:	0801f21c 	.word	0x0801f21c
 8003e34:	0801f22c 	.word	0x0801f22c
	    if (offset >= sizeof(buffer)) break;
 8003e38:	bf00      	nop
	}
	lcd_send_string(buffer);
 8003e3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fcaf 	bl	80037a2 <lcd_send_string>





	HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_RESET);
 8003e44:	2200      	movs	r2, #0
 8003e46:	2180      	movs	r1, #128	@ 0x80
 8003e48:	4845      	ldr	r0, [pc, #276]	@ (8003f60 <main+0x41c>)
 8003e4a:	f007 fba1 	bl	800b590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e54:	4843      	ldr	r0, [pc, #268]	@ (8003f64 <main+0x420>)
 8003e56:	f007 fb9b 	bl	800b590 <HAL_GPIO_WritePin>


	DebugInit();
 8003e5a:	f017 fd93 	bl	801b984 <DebugInit>
	// CAMERA_SET-UP
	{
		lcd_clear();
 8003e5e:	f7ff fc2d 	bl	80036bc <lcd_clear>
		lcd_put_cur(0,0);
 8003e62:	2100      	movs	r1, #0
 8003e64:	2000      	movs	r0, #0
 8003e66:	f7ff fc40 	bl	80036ea <lcd_put_cur>
		lcd_send_string("CAPTURING IMAGE");
 8003e6a:	483f      	ldr	r0, [pc, #252]	@ (8003f68 <main+0x424>)
 8003e6c:	f7ff fc99 	bl	80037a2 <lcd_send_string>

		OV7670_Init(&hdcmi, &hi2c_dcmi, 0, 0);
 8003e70:	2300      	movs	r3, #0
 8003e72:	2200      	movs	r2, #0
 8003e74:	493d      	ldr	r1, [pc, #244]	@ (8003f6c <main+0x428>)
 8003e76:	483e      	ldr	r0, [pc, #248]	@ (8003f70 <main+0x42c>)
 8003e78:	f7fe fbce 	bl	8002618 <OV7670_Init>
		OV7670_Start();
 8003e7c:	f7fe fc3e 	bl	80026fc <OV7670_Start>

		lcd_clear();
 8003e80:	f7ff fc1c 	bl	80036bc <lcd_clear>
		lcd_put_cur(0,0);
 8003e84:	2100      	movs	r1, #0
 8003e86:	2000      	movs	r0, #0
 8003e88:	f7ff fc2f 	bl	80036ea <lcd_put_cur>
		lcd_send_string("DISPLAY IMAGE");
 8003e8c:	4839      	ldr	r0, [pc, #228]	@ (8003f74 <main+0x430>)
 8003e8e:	f7ff fc88 	bl	80037a2 <lcd_send_string>

	}

	{
		HAL_TIM_Base_Start(&htim2);
 8003e92:	4839      	ldr	r0, [pc, #228]	@ (8003f78 <main+0x434>)
 8003e94:	f00e fd8e 	bl	80129b4 <HAL_TIM_Base_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4837      	ldr	r0, [pc, #220]	@ (8003f78 <main+0x434>)
 8003e9c:	f00e ff60 	bl	8012d60 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003ea0:	210c      	movs	r1, #12
 8003ea2:	4835      	ldr	r0, [pc, #212]	@ (8003f78 <main+0x434>)
 8003ea4:	f00e ff5c 	bl	8012d60 <HAL_TIM_PWM_Start>
		SetServoPos(1,0);
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	2001      	movs	r0, #1
 8003eac:	f7ff fe10 	bl	8003ad0 <SetServoPos>
		SetServoPos(2,0);
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	2002      	movs	r0, #2
 8003eb4:	f7ff fe0c 	bl	8003ad0 <SetServoPos>
	}

	int counter = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	int position = 1000;
 8003ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ec2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

	while (1)
	{
		counter++;
 8003ec6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003eca:	3301      	adds	r3, #1
 8003ecc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
		if (counter>10)
 8003ed0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003ed4:	2b0a      	cmp	r3, #10
 8003ed6:	dd1a      	ble.n	8003f0e <main+0x3ca>
		{
			counter = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
			position = -position;
 8003ede:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003ee2:	425b      	negs	r3, r3
 8003ee4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
			SetServoPos(1,position);
 8003ee8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003eec:	b21b      	sxth	r3, r3
 8003eee:	4619      	mov	r1, r3
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	f7ff fded 	bl	8003ad0 <SetServoPos>
			SetServoPos(2,position);
 8003ef6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	4619      	mov	r1, r3
 8003efe:	2002      	movs	r0, #2
 8003f00:	f7ff fde6 	bl	8003ad0 <SetServoPos>
			DebugPrint("\r\n SetServoPos(1,%d);", position);
 8003f04:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8003f08:	481c      	ldr	r0, [pc, #112]	@ (8003f7c <main+0x438>)
 8003f0a:	f017 fdd5 	bl	801bab8 <DebugPrint>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
		HAL_Delay(100);
 8003f0e:	2064      	movs	r0, #100	@ 0x64
 8003f10:	f001 fb7e 	bl	8005610 <HAL_Delay>
		DebugTask();
 8003f14:	f017 fd7a 	bl	801ba0c <DebugTask>
		RefreshCamera();
 8003f18:	f7ff fda0 	bl	8003a5c <RefreshCamera>
		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
		HAL_Delay(100);
 8003f1c:	2064      	movs	r0, #100	@ 0x64
 8003f1e:	f001 fb77 	bl	8005610 <HAL_Delay>
		DebugTask();
 8003f22:	f017 fd73 	bl	801ba0c <DebugTask>
		RefreshCamera();
 8003f26:	f7ff fd99 	bl	8003a5c <RefreshCamera>
		uint32_t ADC_val = CalcTemperature();
 8003f2a:	f7fe fefb 	bl	8002d24 <CalcTemperature>
 8003f2e:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180
		if (ADC_val > 0)
 8003f32:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0c5      	beq.n	8003ec6 <main+0x382>
		{
			char buffer[40];
			sprintf(buffer, "\r\n ADC_val = %10ld", ADC_val);
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8003f40:	490f      	ldr	r1, [pc, #60]	@ (8003f80 <main+0x43c>)
 8003f42:	4618      	mov	r0, r3
 8003f44:	f018 fba8 	bl	801c698 <siprintf>
			HAL_UART_Transmit(&huart_ADC, (uint8_t*) buffer, strlen(buffer), 100);
 8003f48:	1d3b      	adds	r3, r7, #4
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fc fa18 	bl	8000380 <strlen>
 8003f50:	4603      	mov	r3, r0
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	1d39      	adds	r1, r7, #4
 8003f56:	2364      	movs	r3, #100	@ 0x64
 8003f58:	480a      	ldr	r0, [pc, #40]	@ (8003f84 <main+0x440>)
 8003f5a:	f010 f8ff 	bl	801415c <HAL_UART_Transmit>
	{
 8003f5e:	e7b2      	b.n	8003ec6 <main+0x382>
 8003f60:	58020000 	.word	0x58020000
 8003f64:	58020800 	.word	0x58020800
 8003f68:	0801f234 	.word	0x0801f234
 8003f6c:	24000b00 	.word	0x24000b00
 8003f70:	2400092c 	.word	0x2400092c
 8003f74:	0801f244 	.word	0x0801f244
 8003f78:	24000d80 	.word	0x24000d80
 8003f7c:	0801f254 	.word	0x0801f254
 8003f80:	0801f26c 	.word	0x0801f26c
 8003f84:	24000eac 	.word	0x24000eac

08003f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b09c      	sub	sp, #112	@ 0x70
 8003f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f92:	224c      	movs	r2, #76	@ 0x4c
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f018 fc32 	bl	801c800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f9c:	1d3b      	adds	r3, r7, #4
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f018 fc2c 	bl	801c800 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003fa8:	2002      	movs	r0, #2
 8003faa:	f009 fe1b 	bl	800dbe4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fae:	2300      	movs	r3, #0
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	4b34      	ldr	r3, [pc, #208]	@ (8004084 <SystemClock_Config+0xfc>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb6:	4a33      	ldr	r2, [pc, #204]	@ (8004084 <SystemClock_Config+0xfc>)
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003fbe:	4b31      	ldr	r3, [pc, #196]	@ (8004084 <SystemClock_Config+0xfc>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8004088 <SystemClock_Config+0x100>)
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	4a2e      	ldr	r2, [pc, #184]	@ (8004088 <SystemClock_Config+0x100>)
 8003fce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fd2:	6193      	str	r3, [r2, #24]
 8003fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8004088 <SystemClock_Config+0x100>)
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003fe0:	bf00      	nop
 8003fe2:	4b29      	ldr	r3, [pc, #164]	@ (8004088 <SystemClock_Config+0x100>)
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fee:	d1f8      	bne.n	8003fe2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ff4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ffe:	2302      	movs	r3, #2
 8004000:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8004002:	2305      	movs	r3, #5
 8004004:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8004006:	23a0      	movs	r3, #160	@ 0xa0
 8004008:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800400a:	2302      	movs	r3, #2
 800400c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800400e:	2314      	movs	r3, #20
 8004010:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004012:	2302      	movs	r3, #2
 8004014:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8004016:	2308      	movs	r3, #8
 8004018:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800401a:	2300      	movs	r3, #0
 800401c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004026:	4618      	mov	r0, r3
 8004028:	f009 fee0 	bl	800ddec <HAL_RCC_OscConfig>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004032:	f000 f9a5 	bl	8004380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004036:	233f      	movs	r3, #63	@ 0x3f
 8004038:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800403a:	2303      	movs	r3, #3
 800403c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004042:	2308      	movs	r3, #8
 8004044:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004046:	2340      	movs	r3, #64	@ 0x40
 8004048:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800404a:	2340      	movs	r3, #64	@ 0x40
 800404c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800404e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004052:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004054:	2340      	movs	r3, #64	@ 0x40
 8004056:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004058:	1d3b      	adds	r3, r7, #4
 800405a:	2102      	movs	r1, #2
 800405c:	4618      	mov	r0, r3
 800405e:	f00a fb1f 	bl	800e6a0 <HAL_RCC_ClockConfig>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8004068:	f000 f98a 	bl	8004380 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_5);
 800406c:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8004070:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 8004074:	2000      	movs	r0, #0
 8004076:	f00a fcc9 	bl	800ea0c <HAL_RCC_MCOConfig>
}
 800407a:	bf00      	nop
 800407c:	3770      	adds	r7, #112	@ 0x70
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	58000400 	.word	0x58000400
 8004088:	58024800 	.word	0x58024800

0800408c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b0b0      	sub	sp, #192	@ 0xc0
 8004090:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004092:	463b      	mov	r3, r7
 8004094:	22c0      	movs	r2, #192	@ 0xc0
 8004096:	2100      	movs	r1, #0
 8004098:	4618      	mov	r0, r3
 800409a:	f018 fbb1 	bl	801c800 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800409e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80040aa:	2319      	movs	r3, #25
 80040ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 80040ae:	23c0      	movs	r3, #192	@ 0xc0
 80040b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80040b2:	2302      	movs	r3, #2
 80040b4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80040b6:	2302      	movs	r3, #2
 80040b8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80040ba:	2302      	movs	r3, #2
 80040bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80040ca:	2300      	movs	r3, #0
 80040cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040d0:	463b      	mov	r3, r7
 80040d2:	4618      	mov	r0, r3
 80040d4:	f00a ff1c 	bl	800ef10 <HAL_RCCEx_PeriphCLKConfig>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80040de:	f000 f94f 	bl	8004380 <Error_Handler>
  }
}
 80040e2:	bf00      	nop
 80040e4:	37c0      	adds	r7, #192	@ 0xc0
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <DebugMain>:

/* USER CODE BEGIN 4 */
void DebugMain(uint32_t val)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	6078      	str	r0, [r7, #4]
	switch (val)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d836      	bhi.n	8004168 <DebugMain+0x7c>
 80040fa:	e021      	b.n	8004140 <DebugMain+0x54>
 80040fc:	2201      	movs	r2, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	f403 6210 	and.w	r2, r3, #2304	@ 0x900
 8004108:	2a00      	cmp	r2, #0
 800410a:	bf14      	ite	ne
 800410c:	2201      	movne	r2, #1
 800410e:	2200      	moveq	r2, #0
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	2a00      	cmp	r2, #0
 8004114:	f040 80b1 	bne.w	800427a <DebugMain+0x18e>
 8004118:	f403 6290 	and.w	r2, r3, #1152	@ 0x480
 800411c:	2a00      	cmp	r2, #0
 800411e:	bf14      	ite	ne
 8004120:	2201      	movne	r2, #1
 8004122:	2200      	moveq	r2, #0
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	2a00      	cmp	r2, #0
 8004128:	f040 8095 	bne.w	8004256 <DebugMain+0x16a>
 800412c:	f403 7310 	and.w	r3, r3, #576	@ 0x240
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d178      	bne.n	8004230 <DebugMain+0x144>
		DebugPrint("\r\n SetServoPos(%d,-1000);", servo_no);
		SetServoPos(servo_no,-1000);
	}
		break;
	}
}
 800413e:	e0ae      	b.n	800429e <DebugMain+0x1b2>
	switch (val)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b05      	cmp	r3, #5
 8004144:	f200 80ab 	bhi.w	800429e <DebugMain+0x1b2>
 8004148:	a201      	add	r2, pc, #4	@ (adr r2, 8004150 <DebugMain+0x64>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004179 	.word	0x08004179
 8004154:	08004191 	.word	0x08004191
 8004158:	080041c7 	.word	0x080041c7
 800415c:	080041e1 	.word	0x080041e1
 8004160:	080041ff 	.word	0x080041ff
 8004164:	08004217 	.word	0x08004217
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b0b      	cmp	r3, #11
 800416c:	f200 8097 	bhi.w	800429e <DebugMain+0x1b2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b06      	cmp	r3, #6
 8004174:	d2c2      	bcs.n	80040fc <DebugMain+0x10>
}
 8004176:	e092      	b.n	800429e <DebugMain+0x1b2>
		DebugPrint("\r\n OV7670_Init(&hdcmi, &hi2c_dcmi, 0, 0);");
 8004178:	484b      	ldr	r0, [pc, #300]	@ (80042a8 <DebugMain+0x1bc>)
 800417a:	f017 fc9d 	bl	801bab8 <DebugPrint>
		OV7670_Init(&hdcmi, &hi2c_dcmi, 0, 0);
 800417e:	2300      	movs	r3, #0
 8004180:	2200      	movs	r2, #0
 8004182:	494a      	ldr	r1, [pc, #296]	@ (80042ac <DebugMain+0x1c0>)
 8004184:	484a      	ldr	r0, [pc, #296]	@ (80042b0 <DebugMain+0x1c4>)
 8004186:	f7fe fa47 	bl	8002618 <OV7670_Init>
		OV7670_Start();
 800418a:	f7fe fab7 	bl	80026fc <OV7670_Start>
		break;
 800418e:	e086      	b.n	800429e <DebugMain+0x1b2>
		if (ov7670_read(OV7670_REG_PID, &temp1) == HAL_OK)
 8004190:	f107 030f 	add.w	r3, r7, #15
 8004194:	4619      	mov	r1, r3
 8004196:	200a      	movs	r0, #10
 8004198:	f7fe fbea 	bl	8002970 <ov7670_read>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10d      	bne.n	80041be <DebugMain+0xd2>
			ov7670_read(OV7670_REG_VER, &temp2);
 80041a2:	f107 030e 	add.w	r3, r7, #14
 80041a6:	4619      	mov	r1, r3
 80041a8:	200b      	movs	r0, #11
 80041aa:	f7fe fbe1 	bl	8002970 <ov7670_read>
			DebugPrint("\r\n ReadID %02X %02X", temp1, temp2);
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	4619      	mov	r1, r3
 80041b2:	7bbb      	ldrb	r3, [r7, #14]
 80041b4:	461a      	mov	r2, r3
 80041b6:	483f      	ldr	r0, [pc, #252]	@ (80042b4 <DebugMain+0x1c8>)
 80041b8:	f017 fc7e 	bl	801bab8 <DebugPrint>
		break;
 80041bc:	e06f      	b.n	800429e <DebugMain+0x1b2>
			DebugPrint("\r\n ReadID Error!");
 80041be:	483e      	ldr	r0, [pc, #248]	@ (80042b8 <DebugMain+0x1cc>)
 80041c0:	f017 fc7a 	bl	801bab8 <DebugPrint>
		break;
 80041c4:	e06b      	b.n	800429e <DebugMain+0x1b2>
		if (OV7670_isDriverBusy())
 80041c6:	f7fe fadd 	bl	8002784 <OV7670_isDriverBusy>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <DebugMain+0xec>
			DebugPrint("\r\n OV7670_isDriver is Busy");
 80041d0:	483a      	ldr	r0, [pc, #232]	@ (80042bc <DebugMain+0x1d0>)
 80041d2:	f017 fc71 	bl	801bab8 <DebugPrint>
		break;
 80041d6:	e062      	b.n	800429e <DebugMain+0x1b2>
			DebugPrint("\r\n OV7670_isDriver is NOY Busy");
 80041d8:	4839      	ldr	r0, [pc, #228]	@ (80042c0 <DebugMain+0x1d4>)
 80041da:	f017 fc6d 	bl	801bab8 <DebugPrint>
		break;
 80041de:	e05e      	b.n	800429e <DebugMain+0x1b2>
		DebugPrint("\r\n Start Servos");
 80041e0:	4838      	ldr	r0, [pc, #224]	@ (80042c4 <DebugMain+0x1d8>)
 80041e2:	f017 fc69 	bl	801bab8 <DebugPrint>
		HAL_TIM_Base_Start(&htim2);
 80041e6:	4838      	ldr	r0, [pc, #224]	@ (80042c8 <DebugMain+0x1dc>)
 80041e8:	f00e fbe4 	bl	80129b4 <HAL_TIM_Base_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80041ec:	2100      	movs	r1, #0
 80041ee:	4836      	ldr	r0, [pc, #216]	@ (80042c8 <DebugMain+0x1dc>)
 80041f0:	f00e fdb6 	bl	8012d60 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80041f4:	210c      	movs	r1, #12
 80041f6:	4834      	ldr	r0, [pc, #208]	@ (80042c8 <DebugMain+0x1dc>)
 80041f8:	f00e fdb2 	bl	8012d60 <HAL_TIM_PWM_Start>
		break;
 80041fc:	e04f      	b.n	800429e <DebugMain+0x1b2>
		DebugPrint("\r\n Clearing img_buffer");
 80041fe:	4833      	ldr	r0, [pc, #204]	@ (80042cc <DebugMain+0x1e0>)
 8004200:	f017 fc5a 	bl	801bab8 <DebugPrint>
		uint32_t size = 320l * 240 * 2;
 8004204:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8004208:	613b      	str	r3, [r7, #16]
		memset(img_buffer, 0, size);
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	2100      	movs	r1, #0
 800420e:	4830      	ldr	r0, [pc, #192]	@ (80042d0 <DebugMain+0x1e4>)
 8004210:	f018 faf6 	bl	801c800 <memset>
		break;
 8004214:	e043      	b.n	800429e <DebugMain+0x1b2>
		DebugPrint("\r\n BSP_LCD_DrawRGB16Image");
 8004216:	482f      	ldr	r0, [pc, #188]	@ (80042d4 <DebugMain+0x1e8>)
 8004218:	f017 fc4e 	bl	801bab8 <DebugPrint>
		BSP_LCD_DrawRGB16Image(0, 0, 320, 240, (uint16_t *)img_buffer);
 800421c:	4b2c      	ldr	r3, [pc, #176]	@ (80042d0 <DebugMain+0x1e4>)
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	23f0      	movs	r3, #240	@ 0xf0
 8004222:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004226:	2100      	movs	r1, #0
 8004228:	2000      	movs	r0, #0
 800422a:	f7fe f9d5 	bl	80025d8 <BSP_LCD_DrawRGB16Image>
		break;
 800422e:	e036      	b.n	800429e <DebugMain+0x1b2>
		uint8_t servo_no = (val - 3)/3;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3b03      	subs	r3, #3
 8004234:	4a28      	ldr	r2, [pc, #160]	@ (80042d8 <DebugMain+0x1ec>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	757b      	strb	r3, [r7, #21]
		DebugPrint("\r\n SetServoPos(%d,1000);", servo_no);
 800423e:	7d7b      	ldrb	r3, [r7, #21]
 8004240:	4619      	mov	r1, r3
 8004242:	4826      	ldr	r0, [pc, #152]	@ (80042dc <DebugMain+0x1f0>)
 8004244:	f017 fc38 	bl	801bab8 <DebugPrint>
		SetServoPos(servo_no,1000);
 8004248:	7d7b      	ldrb	r3, [r7, #21]
 800424a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fc3e 	bl	8003ad0 <SetServoPos>
		break;
 8004254:	e023      	b.n	800429e <DebugMain+0x1b2>
		uint8_t servo_no = (val - 4)/3;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3b04      	subs	r3, #4
 800425a:	4a1f      	ldr	r2, [pc, #124]	@ (80042d8 <DebugMain+0x1ec>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	085b      	lsrs	r3, r3, #1
 8004262:	75bb      	strb	r3, [r7, #22]
		DebugPrint("\r\n SetServoPos(%d,0);", servo_no);
 8004264:	7dbb      	ldrb	r3, [r7, #22]
 8004266:	4619      	mov	r1, r3
 8004268:	481d      	ldr	r0, [pc, #116]	@ (80042e0 <DebugMain+0x1f4>)
 800426a:	f017 fc25 	bl	801bab8 <DebugPrint>
		SetServoPos(servo_no,0);
 800426e:	7dbb      	ldrb	r3, [r7, #22]
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fc2c 	bl	8003ad0 <SetServoPos>
		break;
 8004278:	e011      	b.n	800429e <DebugMain+0x1b2>
		uint8_t servo_no = (val - 5)/3;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3b05      	subs	r3, #5
 800427e:	4a16      	ldr	r2, [pc, #88]	@ (80042d8 <DebugMain+0x1ec>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	085b      	lsrs	r3, r3, #1
 8004286:	75fb      	strb	r3, [r7, #23]
		DebugPrint("\r\n SetServoPos(%d,-1000);", servo_no);
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	4619      	mov	r1, r3
 800428c:	4815      	ldr	r0, [pc, #84]	@ (80042e4 <DebugMain+0x1f8>)
 800428e:	f017 fc13 	bl	801bab8 <DebugPrint>
		SetServoPos(servo_no,-1000);
 8004292:	7dfb      	ldrb	r3, [r7, #23]
 8004294:	4914      	ldr	r1, [pc, #80]	@ (80042e8 <DebugMain+0x1fc>)
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fc1a 	bl	8003ad0 <SetServoPos>
		break;
 800429c:	bf00      	nop
}
 800429e:	bf00      	nop
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	0801f280 	.word	0x0801f280
 80042ac:	24000b00 	.word	0x24000b00
 80042b0:	2400092c 	.word	0x2400092c
 80042b4:	0801f2ac 	.word	0x0801f2ac
 80042b8:	0801f2c0 	.word	0x0801f2c0
 80042bc:	0801f2d4 	.word	0x0801f2d4
 80042c0:	0801f2f0 	.word	0x0801f2f0
 80042c4:	0801f310 	.word	0x0801f310
 80042c8:	24000d80 	.word	0x24000d80
 80042cc:	0801f320 	.word	0x0801f320
 80042d0:	30000000 	.word	0x30000000
 80042d4:	0801f338 	.word	0x0801f338
 80042d8:	aaaaaaab 	.word	0xaaaaaaab
 80042dc:	0801f354 	.word	0x0801f354
 80042e0:	0801f370 	.word	0x0801f370
 80042e4:	0801f388 	.word	0x0801f388
 80042e8:	fffffc18 	.word	0xfffffc18

080042ec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80042f2:	463b      	mov	r3, r7
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80042fe:	f002 ff23 	bl	8007148 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004302:	2301      	movs	r3, #1
 8004304:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004306:	2300      	movs	r3, #0
 8004308:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 800430a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800430e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8004310:	230f      	movs	r3, #15
 8004312:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8004314:	2300      	movs	r3, #0
 8004316:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8004318:	2301      	movs	r3, #1
 800431a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800431c:	2303      	movs	r3, #3
 800431e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004320:	2300      	movs	r3, #0
 8004322:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004324:	2301      	movs	r3, #1
 8004326:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004328:	2300      	movs	r3, #0
 800432a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004330:	463b      	mov	r3, r7
 8004332:	4618      	mov	r0, r3
 8004334:	f002 ff40 	bl	80071b8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8004338:	2301      	movs	r3, #1
 800433a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800433c:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004340:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8004342:	2312      	movs	r3, #18
 8004344:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004346:	463b      	mov	r3, r7
 8004348:	4618      	mov	r0, r3
 800434a:	f002 ff35 	bl	80071b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800434e:	2004      	movs	r0, #4
 8004350:	f002 ff12 	bl	8007178 <HAL_MPU_Enable>

}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a04      	ldr	r2, [pc, #16]	@ (800437c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d101      	bne.n	8004372 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800436e:	f001 f92f 	bl	80055d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40010000 	.word	0x40010000

08004380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004384:	b672      	cpsid	i
}
 8004386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <Error_Handler+0x8>

0800438c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8004390:	4b12      	ldr	r3, [pc, #72]	@ (80043dc <MX_QUADSPI_Init+0x50>)
 8004392:	4a13      	ldr	r2, [pc, #76]	@ (80043e0 <MX_QUADSPI_Init+0x54>)
 8004394:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8004396:	4b11      	ldr	r3, [pc, #68]	@ (80043dc <MX_QUADSPI_Init+0x50>)
 8004398:	2202      	movs	r2, #2
 800439a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800439c:	4b0f      	ldr	r3, [pc, #60]	@ (80043dc <MX_QUADSPI_Init+0x50>)
 800439e:	2204      	movs	r2, #4
 80043a0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80043a2:	4b0e      	ldr	r3, [pc, #56]	@ (80043dc <MX_QUADSPI_Init+0x50>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 80043a8:	4b0c      	ldr	r3, [pc, #48]	@ (80043dc <MX_QUADSPI_Init+0x50>)
 80043aa:	2216      	movs	r2, #22
 80043ac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80043ae:	4b0b      	ldr	r3, [pc, #44]	@ (80043dc <MX_QUADSPI_Init+0x50>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80043b4:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <MX_QUADSPI_Init+0x50>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80043ba:	4b08      	ldr	r3, [pc, #32]	@ (80043dc <MX_QUADSPI_Init+0x50>)
 80043bc:	2200      	movs	r2, #0
 80043be:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80043c0:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <MX_QUADSPI_Init+0x50>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80043c6:	4805      	ldr	r0, [pc, #20]	@ (80043dc <MX_QUADSPI_Init+0x50>)
 80043c8:	f009 fc56 	bl	800dc78 <HAL_QSPI_Init>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80043d2:	f7ff ffd5 	bl	8004380 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	24000b5c 	.word	0x24000b5c
 80043e0:	52005000 	.word	0x52005000

080043e4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b0be      	sub	sp, #248	@ 0xf8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ec:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043fc:	f107 0320 	add.w	r3, r7, #32
 8004400:	22c0      	movs	r2, #192	@ 0xc0
 8004402:	2100      	movs	r1, #0
 8004404:	4618      	mov	r0, r3
 8004406:	f018 f9fb 	bl	801c800 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a68      	ldr	r2, [pc, #416]	@ (80045b0 <HAL_QSPI_MspInit+0x1cc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	f040 80c8 	bne.w	80045a6 <HAL_QSPI_MspInit+0x1c2>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8004416:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8004422:	2300      	movs	r3, #0
 8004424:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004426:	f107 0320 	add.w	r3, r7, #32
 800442a:	4618      	mov	r0, r3
 800442c:	f00a fd70 	bl	800ef10 <HAL_RCCEx_PeriphCLKConfig>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8004436:	f7ff ffa3 	bl	8004380 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800443a:	4b5e      	ldr	r3, [pc, #376]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 800443c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004440:	4a5c      	ldr	r2, [pc, #368]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 8004442:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004446:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800444a:	4b5a      	ldr	r3, [pc, #360]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 800444c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004450:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004458:	4b56      	ldr	r3, [pc, #344]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 800445a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800445e:	4a55      	ldr	r2, [pc, #340]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 8004460:	f043 0310 	orr.w	r3, r3, #16
 8004464:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004468:	4b52      	ldr	r3, [pc, #328]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 800446a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004476:	4b4f      	ldr	r3, [pc, #316]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 8004478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800447c:	4a4d      	ldr	r2, [pc, #308]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 800447e:	f043 0302 	orr.w	r3, r3, #2
 8004482:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004486:	4b4b      	ldr	r3, [pc, #300]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 8004488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004494:	4b47      	ldr	r3, [pc, #284]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 8004496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800449a:	4a46      	ldr	r2, [pc, #280]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 800449c:	f043 0308 	orr.w	r3, r3, #8
 80044a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80044a4:	4b43      	ldr	r3, [pc, #268]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 80044a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044b2:	4b40      	ldr	r3, [pc, #256]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 80044b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044b8:	4a3e      	ldr	r2, [pc, #248]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 80044ba:	f043 0304 	orr.w	r3, r3, #4
 80044be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80044c2:	4b3c      	ldr	r3, [pc, #240]	@ (80045b4 <HAL_QSPI_MspInit+0x1d0>)
 80044c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PC9     ------> QUADSPI_BK1_IO0
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044d0:	2304      	movs	r3, #4
 80044d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d6:	2302      	movs	r3, #2
 80044d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e2:	2303      	movs	r3, #3
 80044e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80044e8:	2309      	movs	r3, #9
 80044ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044ee:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80044f2:	4619      	mov	r1, r3
 80044f4:	4830      	ldr	r0, [pc, #192]	@ (80045b8 <HAL_QSPI_MspInit+0x1d4>)
 80044f6:	f006 fe9b 	bl	800b230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044fa:	2304      	movs	r3, #4
 80044fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004500:	2302      	movs	r3, #2
 8004502:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004506:	2300      	movs	r3, #0
 8004508:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800450c:	2303      	movs	r3, #3
 800450e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004512:	2309      	movs	r3, #9
 8004514:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004518:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800451c:	4619      	mov	r1, r3
 800451e:	4827      	ldr	r0, [pc, #156]	@ (80045bc <HAL_QSPI_MspInit+0x1d8>)
 8004520:	f006 fe86 	bl	800b230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004524:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004528:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452c:	2302      	movs	r3, #2
 800452e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004532:	2300      	movs	r3, #0
 8004534:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004538:	2303      	movs	r3, #3
 800453a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800453e:	2309      	movs	r3, #9
 8004540:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004544:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004548:	4619      	mov	r1, r3
 800454a:	481d      	ldr	r0, [pc, #116]	@ (80045c0 <HAL_QSPI_MspInit+0x1dc>)
 800454c:	f006 fe70 	bl	800b230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004554:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004558:	2302      	movs	r3, #2
 800455a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004564:	2303      	movs	r3, #3
 8004566:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800456a:	2309      	movs	r3, #9
 800456c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004570:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004574:	4619      	mov	r1, r3
 8004576:	4813      	ldr	r0, [pc, #76]	@ (80045c4 <HAL_QSPI_MspInit+0x1e0>)
 8004578:	f006 fe5a 	bl	800b230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800457c:	2340      	movs	r3, #64	@ 0x40
 800457e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004582:	2302      	movs	r3, #2
 8004584:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004588:	2301      	movs	r3, #1
 800458a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800458e:	2303      	movs	r3, #3
 8004590:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004594:	230a      	movs	r3, #10
 8004596:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800459a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800459e:	4619      	mov	r1, r3
 80045a0:	4806      	ldr	r0, [pc, #24]	@ (80045bc <HAL_QSPI_MspInit+0x1d8>)
 80045a2:	f006 fe45 	bl	800b230 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80045a6:	bf00      	nop
 80045a8:	37f8      	adds	r7, #248	@ 0xf8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	52005000 	.word	0x52005000
 80045b4:	58024400 	.word	0x58024400
 80045b8:	58021000 	.word	0x58021000
 80045bc:	58020400 	.word	0x58020400
 80045c0:	58020c00 	.word	0x58020c00
 80045c4:	58020800 	.word	0x58020800

080045c8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80045cc:	4b27      	ldr	r3, [pc, #156]	@ (800466c <MX_SPI1_Init+0xa4>)
 80045ce:	4a28      	ldr	r2, [pc, #160]	@ (8004670 <MX_SPI1_Init+0xa8>)
 80045d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80045d2:	4b26      	ldr	r3, [pc, #152]	@ (800466c <MX_SPI1_Init+0xa4>)
 80045d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80045d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80045da:	4b24      	ldr	r3, [pc, #144]	@ (800466c <MX_SPI1_Init+0xa4>)
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80045e0:	4b22      	ldr	r3, [pc, #136]	@ (800466c <MX_SPI1_Init+0xa4>)
 80045e2:	2203      	movs	r2, #3
 80045e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045e6:	4b21      	ldr	r3, [pc, #132]	@ (800466c <MX_SPI1_Init+0xa4>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045ec:	4b1f      	ldr	r3, [pc, #124]	@ (800466c <MX_SPI1_Init+0xa4>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80045f2:	4b1e      	ldr	r3, [pc, #120]	@ (800466c <MX_SPI1_Init+0xa4>)
 80045f4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80045f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045fa:	4b1c      	ldr	r3, [pc, #112]	@ (800466c <MX_SPI1_Init+0xa4>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004600:	4b1a      	ldr	r3, [pc, #104]	@ (800466c <MX_SPI1_Init+0xa4>)
 8004602:	2200      	movs	r2, #0
 8004604:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004606:	4b19      	ldr	r3, [pc, #100]	@ (800466c <MX_SPI1_Init+0xa4>)
 8004608:	2200      	movs	r2, #0
 800460a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800460c:	4b17      	ldr	r3, [pc, #92]	@ (800466c <MX_SPI1_Init+0xa4>)
 800460e:	2200      	movs	r2, #0
 8004610:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004612:	4b16      	ldr	r3, [pc, #88]	@ (800466c <MX_SPI1_Init+0xa4>)
 8004614:	2200      	movs	r2, #0
 8004616:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004618:	4b14      	ldr	r3, [pc, #80]	@ (800466c <MX_SPI1_Init+0xa4>)
 800461a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800461e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004620:	4b12      	ldr	r3, [pc, #72]	@ (800466c <MX_SPI1_Init+0xa4>)
 8004622:	2200      	movs	r2, #0
 8004624:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004626:	4b11      	ldr	r3, [pc, #68]	@ (800466c <MX_SPI1_Init+0xa4>)
 8004628:	2200      	movs	r2, #0
 800462a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800462c:	4b0f      	ldr	r3, [pc, #60]	@ (800466c <MX_SPI1_Init+0xa4>)
 800462e:	2200      	movs	r2, #0
 8004630:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004632:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <MX_SPI1_Init+0xa4>)
 8004634:	2200      	movs	r2, #0
 8004636:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004638:	4b0c      	ldr	r3, [pc, #48]	@ (800466c <MX_SPI1_Init+0xa4>)
 800463a:	2200      	movs	r2, #0
 800463c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800463e:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <MX_SPI1_Init+0xa4>)
 8004640:	2200      	movs	r2, #0
 8004642:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004644:	4b09      	ldr	r3, [pc, #36]	@ (800466c <MX_SPI1_Init+0xa4>)
 8004646:	2200      	movs	r2, #0
 8004648:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800464a:	4b08      	ldr	r3, [pc, #32]	@ (800466c <MX_SPI1_Init+0xa4>)
 800464c:	2200      	movs	r2, #0
 800464e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004650:	4b06      	ldr	r3, [pc, #24]	@ (800466c <MX_SPI1_Init+0xa4>)
 8004652:	2200      	movs	r2, #0
 8004654:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004656:	4805      	ldr	r0, [pc, #20]	@ (800466c <MX_SPI1_Init+0xa4>)
 8004658:	f00d f958 	bl	801190c <HAL_SPI_Init>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8004662:	f7ff fe8d 	bl	8004380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	24000ba8 	.word	0x24000ba8
 8004670:	40013000 	.word	0x40013000

08004674 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004678:	4b28      	ldr	r3, [pc, #160]	@ (800471c <MX_SPI2_Init+0xa8>)
 800467a:	4a29      	ldr	r2, [pc, #164]	@ (8004720 <MX_SPI2_Init+0xac>)
 800467c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800467e:	4b27      	ldr	r3, [pc, #156]	@ (800471c <MX_SPI2_Init+0xa8>)
 8004680:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004684:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004686:	4b25      	ldr	r3, [pc, #148]	@ (800471c <MX_SPI2_Init+0xa8>)
 8004688:	2200      	movs	r2, #0
 800468a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800468c:	4b23      	ldr	r3, [pc, #140]	@ (800471c <MX_SPI2_Init+0xa8>)
 800468e:	2207      	movs	r2, #7
 8004690:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004692:	4b22      	ldr	r3, [pc, #136]	@ (800471c <MX_SPI2_Init+0xa8>)
 8004694:	2200      	movs	r2, #0
 8004696:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004698:	4b20      	ldr	r3, [pc, #128]	@ (800471c <MX_SPI2_Init+0xa8>)
 800469a:	2200      	movs	r2, #0
 800469c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800469e:	4b1f      	ldr	r3, [pc, #124]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046a0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80046a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80046a6:	4b1d      	ldr	r3, [pc, #116]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046ae:	4b1b      	ldr	r3, [pc, #108]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80046b4:	4b19      	ldr	r3, [pc, #100]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ba:	4b18      	ldr	r3, [pc, #96]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046bc:	2200      	movs	r2, #0
 80046be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80046c0:	4b16      	ldr	r3, [pc, #88]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80046c6:	4b15      	ldr	r3, [pc, #84]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80046cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80046ce:	4b13      	ldr	r3, [pc, #76]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80046d4:	4b11      	ldr	r3, [pc, #68]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80046da:	4b10      	ldr	r3, [pc, #64]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046dc:	2200      	movs	r2, #0
 80046de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80046e0:	4b0e      	ldr	r3, [pc, #56]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80046e6:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80046ec:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80046f2:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80046f8:	4b08      	ldr	r3, [pc, #32]	@ (800471c <MX_SPI2_Init+0xa8>)
 80046fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80046fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004700:	4b06      	ldr	r3, [pc, #24]	@ (800471c <MX_SPI2_Init+0xa8>)
 8004702:	2200      	movs	r2, #0
 8004704:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004706:	4805      	ldr	r0, [pc, #20]	@ (800471c <MX_SPI2_Init+0xa8>)
 8004708:	f00d f900 	bl	801190c <HAL_SPI_Init>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8004712:	f7ff fe35 	bl	8004380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004716:	bf00      	nop
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	24000c30 	.word	0x24000c30
 8004720:	40003800 	.word	0x40003800

08004724 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b0be      	sub	sp, #248	@ 0xf8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800473c:	f107 0320 	add.w	r3, r7, #32
 8004740:	22c0      	movs	r2, #192	@ 0xc0
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f018 f85b 	bl	801c800 <memset>
  if(spiHandle->Instance==SPI1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a7a      	ldr	r2, [pc, #488]	@ (8004938 <HAL_SPI_MspInit+0x214>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d16b      	bne.n	800482c <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004754:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004760:	2300      	movs	r3, #0
 8004762:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004766:	f107 0320 	add.w	r3, r7, #32
 800476a:	4618      	mov	r0, r3
 800476c:	f00a fbd0 	bl	800ef10 <HAL_RCCEx_PeriphCLKConfig>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8004776:	f7ff fe03 	bl	8004380 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800477a:	4b70      	ldr	r3, [pc, #448]	@ (800493c <HAL_SPI_MspInit+0x218>)
 800477c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004780:	4a6e      	ldr	r2, [pc, #440]	@ (800493c <HAL_SPI_MspInit+0x218>)
 8004782:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004786:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800478a:	4b6c      	ldr	r3, [pc, #432]	@ (800493c <HAL_SPI_MspInit+0x218>)
 800478c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004790:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004798:	4b68      	ldr	r3, [pc, #416]	@ (800493c <HAL_SPI_MspInit+0x218>)
 800479a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800479e:	4a67      	ldr	r2, [pc, #412]	@ (800493c <HAL_SPI_MspInit+0x218>)
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80047a8:	4b64      	ldr	r3, [pc, #400]	@ (800493c <HAL_SPI_MspInit+0x218>)
 80047aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b6:	4b61      	ldr	r3, [pc, #388]	@ (800493c <HAL_SPI_MspInit+0x218>)
 80047b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047bc:	4a5f      	ldr	r2, [pc, #380]	@ (800493c <HAL_SPI_MspInit+0x218>)
 80047be:	f043 0302 	orr.w	r3, r3, #2
 80047c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80047c6:	4b5d      	ldr	r3, [pc, #372]	@ (800493c <HAL_SPI_MspInit+0x218>)
 80047c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	697b      	ldr	r3, [r7, #20]
    PA15 (JTDI)     ------> SPI1_NSS
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_NCS_Pin;
 80047d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047dc:	2302      	movs	r3, #2
 80047de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e8:	2300      	movs	r3, #0
 80047ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80047ee:	2305      	movs	r3, #5
 80047f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 80047f4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80047f8:	4619      	mov	r1, r3
 80047fa:	4851      	ldr	r0, [pc, #324]	@ (8004940 <HAL_SPI_MspInit+0x21c>)
 80047fc:	f006 fd18 	bl	800b230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004800:	2338      	movs	r3, #56	@ 0x38
 8004802:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004806:	2302      	movs	r3, #2
 8004808:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004812:	2300      	movs	r3, #0
 8004814:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004818:	2305      	movs	r3, #5
 800481a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800481e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004822:	4619      	mov	r1, r3
 8004824:	4847      	ldr	r0, [pc, #284]	@ (8004944 <HAL_SPI_MspInit+0x220>)
 8004826:	f006 fd03 	bl	800b230 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800482a:	e080      	b.n	800492e <HAL_SPI_MspInit+0x20a>
  else if(spiHandle->Instance==SPI2)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a45      	ldr	r2, [pc, #276]	@ (8004948 <HAL_SPI_MspInit+0x224>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d17b      	bne.n	800492e <HAL_SPI_MspInit+0x20a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004836:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004842:	2300      	movs	r3, #0
 8004844:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004848:	f107 0320 	add.w	r3, r7, #32
 800484c:	4618      	mov	r0, r3
 800484e:	f00a fb5f 	bl	800ef10 <HAL_RCCEx_PeriphCLKConfig>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8004858:	f7ff fd92 	bl	8004380 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800485c:	4b37      	ldr	r3, [pc, #220]	@ (800493c <HAL_SPI_MspInit+0x218>)
 800485e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004862:	4a36      	ldr	r2, [pc, #216]	@ (800493c <HAL_SPI_MspInit+0x218>)
 8004864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004868:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800486c:	4b33      	ldr	r3, [pc, #204]	@ (800493c <HAL_SPI_MspInit+0x218>)
 800486e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800487a:	4b30      	ldr	r3, [pc, #192]	@ (800493c <HAL_SPI_MspInit+0x218>)
 800487c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004880:	4a2e      	ldr	r2, [pc, #184]	@ (800493c <HAL_SPI_MspInit+0x218>)
 8004882:	f043 0302 	orr.w	r3, r3, #2
 8004886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800488a:	4b2c      	ldr	r3, [pc, #176]	@ (800493c <HAL_SPI_MspInit+0x218>)
 800488c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MISO_Pin|TFT_MOSI_Pin;
 8004898:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800489c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a0:	2302      	movs	r3, #2
 80048a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ac:	2300      	movs	r3, #0
 80048ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048b2:	2305      	movs	r3, #5
 80048b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80048bc:	4619      	mov	r1, r3
 80048be:	4821      	ldr	r0, [pc, #132]	@ (8004944 <HAL_SPI_MspInit+0x220>)
 80048c0:	f006 fcb6 	bl	800b230 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream0;
 80048c4:	4b21      	ldr	r3, [pc, #132]	@ (800494c <HAL_SPI_MspInit+0x228>)
 80048c6:	4a22      	ldr	r2, [pc, #136]	@ (8004950 <HAL_SPI_MspInit+0x22c>)
 80048c8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80048ca:	4b20      	ldr	r3, [pc, #128]	@ (800494c <HAL_SPI_MspInit+0x228>)
 80048cc:	2228      	movs	r2, #40	@ 0x28
 80048ce:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048d0:	4b1e      	ldr	r3, [pc, #120]	@ (800494c <HAL_SPI_MspInit+0x228>)
 80048d2:	2240      	movs	r2, #64	@ 0x40
 80048d4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048d6:	4b1d      	ldr	r3, [pc, #116]	@ (800494c <HAL_SPI_MspInit+0x228>)
 80048d8:	2200      	movs	r2, #0
 80048da:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048dc:	4b1b      	ldr	r3, [pc, #108]	@ (800494c <HAL_SPI_MspInit+0x228>)
 80048de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048e2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048e4:	4b19      	ldr	r3, [pc, #100]	@ (800494c <HAL_SPI_MspInit+0x228>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048ea:	4b18      	ldr	r3, [pc, #96]	@ (800494c <HAL_SPI_MspInit+0x228>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80048f0:	4b16      	ldr	r3, [pc, #88]	@ (800494c <HAL_SPI_MspInit+0x228>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80048f6:	4b15      	ldr	r3, [pc, #84]	@ (800494c <HAL_SPI_MspInit+0x228>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048fc:	4b13      	ldr	r3, [pc, #76]	@ (800494c <HAL_SPI_MspInit+0x228>)
 80048fe:	2200      	movs	r2, #0
 8004900:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004902:	4812      	ldr	r0, [pc, #72]	@ (800494c <HAL_SPI_MspInit+0x228>)
 8004904:	f002 ff7a 	bl	80077fc <HAL_DMA_Init>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_SPI_MspInit+0x1ee>
      Error_Handler();
 800490e:	f7ff fd37 	bl	8004380 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a0d      	ldr	r2, [pc, #52]	@ (800494c <HAL_SPI_MspInit+0x228>)
 8004916:	679a      	str	r2, [r3, #120]	@ 0x78
 8004918:	4a0c      	ldr	r2, [pc, #48]	@ (800494c <HAL_SPI_MspInit+0x228>)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800491e:	2200      	movs	r2, #0
 8004920:	2100      	movs	r1, #0
 8004922:	2024      	movs	r0, #36	@ 0x24
 8004924:	f002 fbe8 	bl	80070f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004928:	2024      	movs	r0, #36	@ 0x24
 800492a:	f002 fbff 	bl	800712c <HAL_NVIC_EnableIRQ>
}
 800492e:	bf00      	nop
 8004930:	37f8      	adds	r7, #248	@ 0xf8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40013000 	.word	0x40013000
 800493c:	58024400 	.word	0x58024400
 8004940:	58020000 	.word	0x58020000
 8004944:	58020400 	.word	0x58020400
 8004948:	40003800 	.word	0x40003800
 800494c:	24000cb8 	.word	0x24000cb8
 8004950:	40020010 	.word	0x40020010

08004954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495a:	4b0a      	ldr	r3, [pc, #40]	@ (8004984 <HAL_MspInit+0x30>)
 800495c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004960:	4a08      	ldr	r2, [pc, #32]	@ (8004984 <HAL_MspInit+0x30>)
 8004962:	f043 0302 	orr.w	r3, r3, #2
 8004966:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800496a:	4b06      	ldr	r3, [pc, #24]	@ (8004984 <HAL_MspInit+0x30>)
 800496c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	58024400 	.word	0x58024400

08004988 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08e      	sub	sp, #56	@ 0x38
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b0f      	cmp	r3, #15
 8004994:	d844      	bhi.n	8004a20 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8004996:	2200      	movs	r2, #0
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	2019      	movs	r0, #25
 800499c:	f002 fbac 	bl	80070f8 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80049a0:	2019      	movs	r0, #25
 80049a2:	f002 fbc3 	bl	800712c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80049a6:	4a24      	ldr	r2, [pc, #144]	@ (8004a38 <HAL_InitTick+0xb0>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80049ac:	4b23      	ldr	r3, [pc, #140]	@ (8004a3c <HAL_InitTick+0xb4>)
 80049ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049b2:	4a22      	ldr	r2, [pc, #136]	@ (8004a3c <HAL_InitTick+0xb4>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049bc:	4b1f      	ldr	r3, [pc, #124]	@ (8004a3c <HAL_InitTick+0xb4>)
 80049be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80049ca:	f107 020c 	add.w	r2, r7, #12
 80049ce:	f107 0310 	add.w	r3, r7, #16
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f00a fa59 	bl	800ee8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80049da:	f00a fa41 	bl	800ee60 <HAL_RCC_GetPCLK2Freq>
 80049de:	4603      	mov	r3, r0
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80049e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e6:	4a16      	ldr	r2, [pc, #88]	@ (8004a40 <HAL_InitTick+0xb8>)
 80049e8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ec:	0c9b      	lsrs	r3, r3, #18
 80049ee:	3b01      	subs	r3, #1
 80049f0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80049f2:	4b14      	ldr	r3, [pc, #80]	@ (8004a44 <HAL_InitTick+0xbc>)
 80049f4:	4a14      	ldr	r2, [pc, #80]	@ (8004a48 <HAL_InitTick+0xc0>)
 80049f6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80049f8:	4b12      	ldr	r3, [pc, #72]	@ (8004a44 <HAL_InitTick+0xbc>)
 80049fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80049fe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004a00:	4a10      	ldr	r2, [pc, #64]	@ (8004a44 <HAL_InitTick+0xbc>)
 8004a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a04:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004a06:	4b0f      	ldr	r3, [pc, #60]	@ (8004a44 <HAL_InitTick+0xbc>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <HAL_InitTick+0xbc>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004a12:	480c      	ldr	r0, [pc, #48]	@ (8004a44 <HAL_InitTick+0xbc>)
 8004a14:	f00d ff76 	bl	8012904 <HAL_TIM_Base_Init>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d107      	bne.n	8004a2e <HAL_InitTick+0xa6>
 8004a1e:	e001      	b.n	8004a24 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e005      	b.n	8004a30 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004a24:	4807      	ldr	r0, [pc, #28]	@ (8004a44 <HAL_InitTick+0xbc>)
 8004a26:	f00e f835 	bl	8012a94 <HAL_TIM_Base_Start_IT>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	e000      	b.n	8004a30 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3738      	adds	r7, #56	@ 0x38
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	24000088 	.word	0x24000088
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	431bde83 	.word	0x431bde83
 8004a44:	24000d30 	.word	0x24000d30
 8004a48:	40010000 	.word	0x40010000

08004a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a50:	bf00      	nop
 8004a52:	e7fd      	b.n	8004a50 <NMI_Handler+0x4>

08004a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a58:	bf00      	nop
 8004a5a:	e7fd      	b.n	8004a58 <HardFault_Handler+0x4>

08004a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a60:	bf00      	nop
 8004a62:	e7fd      	b.n	8004a60 <MemManage_Handler+0x4>

08004a64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a68:	bf00      	nop
 8004a6a:	e7fd      	b.n	8004a68 <BusFault_Handler+0x4>

08004a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a70:	bf00      	nop
 8004a72:	e7fd      	b.n	8004a70 <UsageFault_Handler+0x4>

08004a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a78:	bf00      	nop
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a82:	b480      	push	{r7}
 8004a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004ab0:	4802      	ldr	r0, [pc, #8]	@ (8004abc <DMA1_Stream0_IRQHandler+0x10>)
 8004ab2:	f004 f9cd 	bl	8008e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	24000cb8 	.word	0x24000cb8

08004ac0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004ac4:	4802      	ldr	r0, [pc, #8]	@ (8004ad0 <DMA1_Stream1_IRQHandler+0x10>)
 8004ac6:	f004 f9c3 	bl	8008e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	24000fb8 	.word	0x24000fb8

08004ad4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004ad8:	4802      	ldr	r0, [pc, #8]	@ (8004ae4 <DMA1_Stream2_IRQHandler+0x10>)
 8004ada:	f004 f9b9 	bl	8008e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	24000f40 	.word	0x24000f40

08004ae8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004aec:	4802      	ldr	r0, [pc, #8]	@ (8004af8 <TIM1_UP_IRQHandler+0x10>)
 8004aee:	f00e fa45 	bl	8012f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004af2:	bf00      	nop
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	24000d30 	.word	0x24000d30

08004afc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004b00:	4802      	ldr	r0, [pc, #8]	@ (8004b0c <SPI2_IRQHandler+0x10>)
 8004b02:	f00d fb57 	bl	80121b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	24000c30 	.word	0x24000c30

08004b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b14:	4802      	ldr	r0, [pc, #8]	@ (8004b20 <USART1_IRQHandler+0x10>)
 8004b16:	f00f fdd7 	bl	80146c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b1a:	bf00      	nop
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	24000e18 	.word	0x24000e18

08004b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b28:	4802      	ldr	r0, [pc, #8]	@ (8004b34 <USART2_IRQHandler+0x10>)
 8004b2a:	f00f fdcd 	bl	80146c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	24000eac 	.word	0x24000eac

08004b38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8004b3c:	4802      	ldr	r0, [pc, #8]	@ (8004b48 <DMA2_Stream0_IRQHandler+0x10>)
 8004b3e:	f004 f987 	bl	8008e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004b42:	bf00      	nop
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	2400097c 	.word	0x2400097c

08004b4c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8004b50:	4802      	ldr	r0, [pc, #8]	@ (8004b5c <DCMI_IRQHandler+0x10>)
 8004b52:	f002 fd0d 	bl	8007570 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8004b56:	bf00      	nop
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	2400092c 	.word	0x2400092c

08004b60 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004b64:	4802      	ldr	r0, [pc, #8]	@ (8004b70 <DMA2D_IRQHandler+0x10>)
 8004b66:	f005 fcf5 	bl	800a554 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004b6a:	bf00      	nop
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	240009f4 	.word	0x240009f4

08004b74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004b78:	4802      	ldr	r0, [pc, #8]	@ (8004b84 <OTG_FS_IRQHandler+0x10>)
 8004b7a:	f007 fed3 	bl	800c924 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	24002514 	.word	0x24002514

08004b88 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004b8c:	4802      	ldr	r0, [pc, #8]	@ (8004b98 <BDMA_Channel0_IRQHandler+0x10>)
 8004b8e:	f004 f95f 	bl	8008e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	240008b0 	.word	0x240008b0

08004b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ba4:	4a14      	ldr	r2, [pc, #80]	@ (8004bf8 <_sbrk+0x5c>)
 8004ba6:	4b15      	ldr	r3, [pc, #84]	@ (8004bfc <_sbrk+0x60>)
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bb0:	4b13      	ldr	r3, [pc, #76]	@ (8004c00 <_sbrk+0x64>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bb8:	4b11      	ldr	r3, [pc, #68]	@ (8004c00 <_sbrk+0x64>)
 8004bba:	4a12      	ldr	r2, [pc, #72]	@ (8004c04 <_sbrk+0x68>)
 8004bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bbe:	4b10      	ldr	r3, [pc, #64]	@ (8004c00 <_sbrk+0x64>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d207      	bcs.n	8004bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bcc:	f017 fe6a 	bl	801c8a4 <__errno>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	220c      	movs	r2, #12
 8004bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bda:	e009      	b.n	8004bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bdc:	4b08      	ldr	r3, [pc, #32]	@ (8004c00 <_sbrk+0x64>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004be2:	4b07      	ldr	r3, [pc, #28]	@ (8004c00 <_sbrk+0x64>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4413      	add	r3, r2
 8004bea:	4a05      	ldr	r2, [pc, #20]	@ (8004c00 <_sbrk+0x64>)
 8004bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bee:	68fb      	ldr	r3, [r7, #12]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	24080000 	.word	0x24080000
 8004bfc:	00000800 	.word	0x00000800
 8004c00:	24000d7c 	.word	0x24000d7c
 8004c04:	20000000 	.word	0x20000000

08004c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004c0c:	4b43      	ldr	r3, [pc, #268]	@ (8004d1c <SystemInit+0x114>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c12:	4a42      	ldr	r2, [pc, #264]	@ (8004d1c <SystemInit+0x114>)
 8004c14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004c1c:	4b40      	ldr	r3, [pc, #256]	@ (8004d20 <SystemInit+0x118>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	2b06      	cmp	r3, #6
 8004c26:	d807      	bhi.n	8004c38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c28:	4b3d      	ldr	r3, [pc, #244]	@ (8004d20 <SystemInit+0x118>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f023 030f 	bic.w	r3, r3, #15
 8004c30:	4a3b      	ldr	r2, [pc, #236]	@ (8004d20 <SystemInit+0x118>)
 8004c32:	f043 0307 	orr.w	r3, r3, #7
 8004c36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004c38:	4b3a      	ldr	r3, [pc, #232]	@ (8004d24 <SystemInit+0x11c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a39      	ldr	r2, [pc, #228]	@ (8004d24 <SystemInit+0x11c>)
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004c44:	4b37      	ldr	r3, [pc, #220]	@ (8004d24 <SystemInit+0x11c>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004c4a:	4b36      	ldr	r3, [pc, #216]	@ (8004d24 <SystemInit+0x11c>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4935      	ldr	r1, [pc, #212]	@ (8004d24 <SystemInit+0x11c>)
 8004c50:	4b35      	ldr	r3, [pc, #212]	@ (8004d28 <SystemInit+0x120>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004c56:	4b32      	ldr	r3, [pc, #200]	@ (8004d20 <SystemInit+0x118>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d007      	beq.n	8004c72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c62:	4b2f      	ldr	r3, [pc, #188]	@ (8004d20 <SystemInit+0x118>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 030f 	bic.w	r3, r3, #15
 8004c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004d20 <SystemInit+0x118>)
 8004c6c:	f043 0307 	orr.w	r3, r3, #7
 8004c70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004c72:	4b2c      	ldr	r3, [pc, #176]	@ (8004d24 <SystemInit+0x11c>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004c78:	4b2a      	ldr	r3, [pc, #168]	@ (8004d24 <SystemInit+0x11c>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004c7e:	4b29      	ldr	r3, [pc, #164]	@ (8004d24 <SystemInit+0x11c>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004c84:	4b27      	ldr	r3, [pc, #156]	@ (8004d24 <SystemInit+0x11c>)
 8004c86:	4a29      	ldr	r2, [pc, #164]	@ (8004d2c <SystemInit+0x124>)
 8004c88:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004c8a:	4b26      	ldr	r3, [pc, #152]	@ (8004d24 <SystemInit+0x11c>)
 8004c8c:	4a28      	ldr	r2, [pc, #160]	@ (8004d30 <SystemInit+0x128>)
 8004c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004c90:	4b24      	ldr	r3, [pc, #144]	@ (8004d24 <SystemInit+0x11c>)
 8004c92:	4a28      	ldr	r2, [pc, #160]	@ (8004d34 <SystemInit+0x12c>)
 8004c94:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004c96:	4b23      	ldr	r3, [pc, #140]	@ (8004d24 <SystemInit+0x11c>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004c9c:	4b21      	ldr	r3, [pc, #132]	@ (8004d24 <SystemInit+0x11c>)
 8004c9e:	4a25      	ldr	r2, [pc, #148]	@ (8004d34 <SystemInit+0x12c>)
 8004ca0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004ca2:	4b20      	ldr	r3, [pc, #128]	@ (8004d24 <SystemInit+0x11c>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8004d24 <SystemInit+0x11c>)
 8004caa:	4a22      	ldr	r2, [pc, #136]	@ (8004d34 <SystemInit+0x12c>)
 8004cac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004cae:	4b1d      	ldr	r3, [pc, #116]	@ (8004d24 <SystemInit+0x11c>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d24 <SystemInit+0x11c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8004d24 <SystemInit+0x11c>)
 8004cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004cc0:	4b18      	ldr	r3, [pc, #96]	@ (8004d24 <SystemInit+0x11c>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8004d38 <SystemInit+0x130>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4b1c      	ldr	r3, [pc, #112]	@ (8004d3c <SystemInit+0x134>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cd2:	d202      	bcs.n	8004cda <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d40 <SystemInit+0x138>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8004cda:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <SystemInit+0x11c>)
 8004cdc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004ce0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d113      	bne.n	8004d10 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8004d24 <SystemInit+0x11c>)
 8004cea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004cee:	4a0d      	ldr	r2, [pc, #52]	@ (8004d24 <SystemInit+0x11c>)
 8004cf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cf4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004cf8:	4b12      	ldr	r3, [pc, #72]	@ (8004d44 <SystemInit+0x13c>)
 8004cfa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004cfe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8004d00:	4b08      	ldr	r3, [pc, #32]	@ (8004d24 <SystemInit+0x11c>)
 8004d02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004d06:	4a07      	ldr	r2, [pc, #28]	@ (8004d24 <SystemInit+0x11c>)
 8004d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d0c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004d10:	bf00      	nop
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	e000ed00 	.word	0xe000ed00
 8004d20:	52002000 	.word	0x52002000
 8004d24:	58024400 	.word	0x58024400
 8004d28:	eaf6ed7f 	.word	0xeaf6ed7f
 8004d2c:	02020200 	.word	0x02020200
 8004d30:	01ff0000 	.word	0x01ff0000
 8004d34:	01010280 	.word	0x01010280
 8004d38:	5c001000 	.word	0x5c001000
 8004d3c:	ffff0000 	.word	0xffff0000
 8004d40:	51008108 	.word	0x51008108
 8004d44:	52004000 	.word	0x52004000

08004d48 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8004d4c:	4b09      	ldr	r3, [pc, #36]	@ (8004d74 <ExitRun0Mode+0x2c>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4a08      	ldr	r2, [pc, #32]	@ (8004d74 <ExitRun0Mode+0x2c>)
 8004d52:	f043 0302 	orr.w	r3, r3, #2
 8004d56:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8004d58:	bf00      	nop
 8004d5a:	4b06      	ldr	r3, [pc, #24]	@ (8004d74 <ExitRun0Mode+0x2c>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f9      	beq.n	8004d5a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	58024800 	.word	0x58024800

08004d78 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08e      	sub	sp, #56	@ 0x38
 8004d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	605a      	str	r2, [r3, #4]
 8004d88:	609a      	str	r2, [r3, #8]
 8004d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d8c:	f107 031c 	add.w	r3, r7, #28
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	605a      	str	r2, [r3, #4]
 8004d96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d98:	463b      	mov	r3, r7
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	605a      	str	r2, [r3, #4]
 8004da0:	609a      	str	r2, [r3, #8]
 8004da2:	60da      	str	r2, [r3, #12]
 8004da4:	611a      	str	r2, [r3, #16]
 8004da6:	615a      	str	r2, [r3, #20]
 8004da8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004daa:	4b32      	ldr	r3, [pc, #200]	@ (8004e74 <MX_TIM2_Init+0xfc>)
 8004dac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004db0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004db2:	4b30      	ldr	r3, [pc, #192]	@ (8004e74 <MX_TIM2_Init+0xfc>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004db8:	4b2e      	ldr	r3, [pc, #184]	@ (8004e74 <MX_TIM2_Init+0xfc>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000000;
 8004dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8004e74 <MX_TIM2_Init+0xfc>)
 8004dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e78 <MX_TIM2_Init+0x100>)
 8004dc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e74 <MX_TIM2_Init+0xfc>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dca:	4b2a      	ldr	r3, [pc, #168]	@ (8004e74 <MX_TIM2_Init+0xfc>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004dd0:	4828      	ldr	r0, [pc, #160]	@ (8004e74 <MX_TIM2_Init+0xfc>)
 8004dd2:	f00d fd97 	bl	8012904 <HAL_TIM_Base_Init>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004ddc:	f7ff fad0 	bl	8004380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004de0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004de6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004dea:	4619      	mov	r1, r3
 8004dec:	4821      	ldr	r0, [pc, #132]	@ (8004e74 <MX_TIM2_Init+0xfc>)
 8004dee:	f00e fae1 	bl	80133b4 <HAL_TIM_ConfigClockSource>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004df8:	f7ff fac2 	bl	8004380 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004dfc:	481d      	ldr	r0, [pc, #116]	@ (8004e74 <MX_TIM2_Init+0xfc>)
 8004dfe:	f00d ff57 	bl	8012cb0 <HAL_TIM_PWM_Init>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004e08:	f7ff faba 	bl	8004380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e14:	f107 031c 	add.w	r3, r7, #28
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4816      	ldr	r0, [pc, #88]	@ (8004e74 <MX_TIM2_Init+0xfc>)
 8004e1c:	f00f f824 	bl	8013e68 <HAL_TIMEx_MasterConfigSynchronization>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004e26:	f7ff faab 	bl	8004380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e2a:	2360      	movs	r3, #96	@ 0x60
 8004e2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 300000;
 8004e2e:	4b13      	ldr	r3, [pc, #76]	@ (8004e7c <MX_TIM2_Init+0x104>)
 8004e30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004e32:	2302      	movs	r3, #2
 8004e34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e3a:	463b      	mov	r3, r7
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	4619      	mov	r1, r3
 8004e40:	480c      	ldr	r0, [pc, #48]	@ (8004e74 <MX_TIM2_Init+0xfc>)
 8004e42:	f00e f9a3 	bl	801318c <HAL_TIM_PWM_ConfigChannel>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004e4c:	f7ff fa98 	bl	8004380 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004e50:	463b      	mov	r3, r7
 8004e52:	220c      	movs	r2, #12
 8004e54:	4619      	mov	r1, r3
 8004e56:	4807      	ldr	r0, [pc, #28]	@ (8004e74 <MX_TIM2_Init+0xfc>)
 8004e58:	f00e f998 	bl	801318c <HAL_TIM_PWM_ConfigChannel>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8004e62:	f7ff fa8d 	bl	8004380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004e66:	4803      	ldr	r0, [pc, #12]	@ (8004e74 <MX_TIM2_Init+0xfc>)
 8004e68:	f000 f8dc 	bl	8005024 <HAL_TIM_MspPostInit>

}
 8004e6c:	bf00      	nop
 8004e6e:	3738      	adds	r7, #56	@ 0x38
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	24000d80 	.word	0x24000d80
 8004e78:	003d0900 	.word	0x003d0900
 8004e7c:	000493e0 	.word	0x000493e0

08004e80 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b096      	sub	sp, #88	@ 0x58
 8004e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e86:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	605a      	str	r2, [r3, #4]
 8004e90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	605a      	str	r2, [r3, #4]
 8004e9c:	609a      	str	r2, [r3, #8]
 8004e9e:	60da      	str	r2, [r3, #12]
 8004ea0:	611a      	str	r2, [r3, #16]
 8004ea2:	615a      	str	r2, [r3, #20]
 8004ea4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004ea6:	1d3b      	adds	r3, r7, #4
 8004ea8:	222c      	movs	r2, #44	@ 0x2c
 8004eaa:	2100      	movs	r1, #0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f017 fca7 	bl	801c800 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004eb2:	4b39      	ldr	r3, [pc, #228]	@ (8004f98 <MX_TIM8_Init+0x118>)
 8004eb4:	4a39      	ldr	r2, [pc, #228]	@ (8004f9c <MX_TIM8_Init+0x11c>)
 8004eb6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004eb8:	4b37      	ldr	r3, [pc, #220]	@ (8004f98 <MX_TIM8_Init+0x118>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ebe:	4b36      	ldr	r3, [pc, #216]	@ (8004f98 <MX_TIM8_Init+0x118>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004ec4:	4b34      	ldr	r3, [pc, #208]	@ (8004f98 <MX_TIM8_Init+0x118>)
 8004ec6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004eca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ecc:	4b32      	ldr	r3, [pc, #200]	@ (8004f98 <MX_TIM8_Init+0x118>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004ed2:	4b31      	ldr	r3, [pc, #196]	@ (8004f98 <MX_TIM8_Init+0x118>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8004f98 <MX_TIM8_Init+0x118>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004ede:	482e      	ldr	r0, [pc, #184]	@ (8004f98 <MX_TIM8_Init+0x118>)
 8004ee0:	f00d fee6 	bl	8012cb0 <HAL_TIM_PWM_Init>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8004eea:	f7ff fa49 	bl	8004380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004efa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004efe:	4619      	mov	r1, r3
 8004f00:	4825      	ldr	r0, [pc, #148]	@ (8004f98 <MX_TIM8_Init+0x118>)
 8004f02:	f00e ffb1 	bl	8013e68 <HAL_TIMEx_MasterConfigSynchronization>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8004f0c:	f7ff fa38 	bl	8004380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f10:	2360      	movs	r3, #96	@ 0x60
 8004f12:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004f24:	2300      	movs	r3, #0
 8004f26:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004f30:	2208      	movs	r2, #8
 8004f32:	4619      	mov	r1, r3
 8004f34:	4818      	ldr	r0, [pc, #96]	@ (8004f98 <MX_TIM8_Init+0x118>)
 8004f36:	f00e f929 	bl	801318c <HAL_TIM_PWM_ConfigChannel>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004f40:	f7ff fa1e 	bl	8004380 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f44:	2300      	movs	r3, #0
 8004f46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004f62:	2300      	movs	r3, #0
 8004f64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004f66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f70:	2300      	movs	r3, #0
 8004f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004f74:	1d3b      	adds	r3, r7, #4
 8004f76:	4619      	mov	r1, r3
 8004f78:	4807      	ldr	r0, [pc, #28]	@ (8004f98 <MX_TIM8_Init+0x118>)
 8004f7a:	f00f f803 	bl	8013f84 <HAL_TIMEx_ConfigBreakDeadTime>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8004f84:	f7ff f9fc 	bl	8004380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004f88:	4803      	ldr	r0, [pc, #12]	@ (8004f98 <MX_TIM8_Init+0x118>)
 8004f8a:	f000 f84b 	bl	8005024 <HAL_TIM_MspPostInit>

}
 8004f8e:	bf00      	nop
 8004f90:	3758      	adds	r7, #88	@ 0x58
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	24000dcc 	.word	0x24000dcc
 8004f9c:	40010400 	.word	0x40010400

08004fa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb0:	d10e      	bne.n	8004fd0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fdc <HAL_TIM_Base_MspInit+0x3c>)
 8004fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fb8:	4a08      	ldr	r2, [pc, #32]	@ (8004fdc <HAL_TIM_Base_MspInit+0x3c>)
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004fc2:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <HAL_TIM_Base_MspInit+0x3c>)
 8004fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	58024400 	.word	0x58024400

08004fe0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a0b      	ldr	r2, [pc, #44]	@ (800501c <HAL_TIM_PWM_MspInit+0x3c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d10e      	bne.n	8005010 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8005020 <HAL_TIM_PWM_MspInit+0x40>)
 8004ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ff8:	4a09      	ldr	r2, [pc, #36]	@ (8005020 <HAL_TIM_PWM_MspInit+0x40>)
 8004ffa:	f043 0302 	orr.w	r3, r3, #2
 8004ffe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005002:	4b07      	ldr	r3, [pc, #28]	@ (8005020 <HAL_TIM_PWM_MspInit+0x40>)
 8005004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8005010:	bf00      	nop
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	40010400 	.word	0x40010400
 8005020:	58024400 	.word	0x58024400

08005024 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08a      	sub	sp, #40	@ 0x28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800502c:	f107 0314 	add.w	r3, r7, #20
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	609a      	str	r2, [r3, #8]
 8005038:	60da      	str	r2, [r3, #12]
 800503a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005044:	d12a      	bne.n	800509c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005046:	4b2a      	ldr	r3, [pc, #168]	@ (80050f0 <HAL_TIM_MspPostInit+0xcc>)
 8005048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800504c:	4a28      	ldr	r2, [pc, #160]	@ (80050f0 <HAL_TIM_MspPostInit+0xcc>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005056:	4b26      	ldr	r3, [pc, #152]	@ (80050f0 <HAL_TIM_MspPostInit+0xcc>)
 8005058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_OUT2_Pin|SERVO_OUT1_Pin;
 8005064:	2328      	movs	r3, #40	@ 0x28
 8005066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005068:	2302      	movs	r3, #2
 800506a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506c:	2300      	movs	r3, #0
 800506e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005070:	2300      	movs	r3, #0
 8005072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005074:	2301      	movs	r3, #1
 8005076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005078:	f107 0314 	add.w	r3, r7, #20
 800507c:	4619      	mov	r1, r3
 800507e:	481d      	ldr	r0, [pc, #116]	@ (80050f4 <HAL_TIM_MspPostInit+0xd0>)
 8005080:	f006 f8d6 	bl	800b230 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */
	HAL_TIM_Base_Start(timHandle);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f00d fc95 	bl	80129b4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(timHandle, TIM_CHANNEL_1);
 800508a:	2100      	movs	r1, #0
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f00d fe67 	bl	8012d60 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timHandle, TIM_CHANNEL_4);
 8005092:	210c      	movs	r1, #12
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f00d fe63 	bl	8012d60 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800509a:	e024      	b.n	80050e6 <HAL_TIM_MspPostInit+0xc2>
  else if(timHandle->Instance==TIM8)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a15      	ldr	r2, [pc, #84]	@ (80050f8 <HAL_TIM_MspPostInit+0xd4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d11f      	bne.n	80050e6 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050a6:	4b12      	ldr	r3, [pc, #72]	@ (80050f0 <HAL_TIM_MspPostInit+0xcc>)
 80050a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050ac:	4a10      	ldr	r2, [pc, #64]	@ (80050f0 <HAL_TIM_MspPostInit+0xcc>)
 80050ae:	f043 0304 	orr.w	r3, r3, #4
 80050b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050b6:	4b0e      	ldr	r3, [pc, #56]	@ (80050f0 <HAL_TIM_MspPostInit+0xcc>)
 80050b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_OUT_Pin;
 80050c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ca:	2302      	movs	r3, #2
 80050cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d2:	2300      	movs	r3, #0
 80050d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80050d6:	2303      	movs	r3, #3
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_OUT_GPIO_Port, &GPIO_InitStruct);
 80050da:	f107 0314 	add.w	r3, r7, #20
 80050de:	4619      	mov	r1, r3
 80050e0:	4806      	ldr	r0, [pc, #24]	@ (80050fc <HAL_TIM_MspPostInit+0xd8>)
 80050e2:	f006 f8a5 	bl	800b230 <HAL_GPIO_Init>
}
 80050e6:	bf00      	nop
 80050e8:	3728      	adds	r7, #40	@ 0x28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	58024400 	.word	0x58024400
 80050f4:	58020000 	.word	0x58020000
 80050f8:	40010400 	.word	0x40010400
 80050fc:	58020800 	.word	0x58020800

08005100 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005104:	4b22      	ldr	r3, [pc, #136]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 8005106:	4a23      	ldr	r2, [pc, #140]	@ (8005194 <MX_USART1_UART_Init+0x94>)
 8005108:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800510a:	4b21      	ldr	r3, [pc, #132]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 800510c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005110:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005112:	4b1f      	ldr	r3, [pc, #124]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 8005114:	2200      	movs	r2, #0
 8005116:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005118:	4b1d      	ldr	r3, [pc, #116]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 800511a:	2200      	movs	r2, #0
 800511c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800511e:	4b1c      	ldr	r3, [pc, #112]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 8005120:	2200      	movs	r2, #0
 8005122:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005124:	4b1a      	ldr	r3, [pc, #104]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 8005126:	220c      	movs	r2, #12
 8005128:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800512a:	4b19      	ldr	r3, [pc, #100]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 800512c:	2200      	movs	r2, #0
 800512e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005130:	4b17      	ldr	r3, [pc, #92]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 8005132:	2200      	movs	r2, #0
 8005134:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005136:	4b16      	ldr	r3, [pc, #88]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 8005138:	2200      	movs	r2, #0
 800513a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800513c:	4b14      	ldr	r3, [pc, #80]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 800513e:	2200      	movs	r2, #0
 8005140:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005142:	4b13      	ldr	r3, [pc, #76]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 8005144:	2200      	movs	r2, #0
 8005146:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005148:	4811      	ldr	r0, [pc, #68]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 800514a:	f00e ffb7 	bl	80140bc <HAL_UART_Init>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005154:	f7ff f914 	bl	8004380 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005158:	2100      	movs	r1, #0
 800515a:	480d      	ldr	r0, [pc, #52]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 800515c:	f011 fa92 	bl	8016684 <HAL_UARTEx_SetTxFifoThreshold>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005166:	f7ff f90b 	bl	8004380 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800516a:	2100      	movs	r1, #0
 800516c:	4808      	ldr	r0, [pc, #32]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 800516e:	f011 fac7 	bl	8016700 <HAL_UARTEx_SetRxFifoThreshold>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005178:	f7ff f902 	bl	8004380 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800517c:	4804      	ldr	r0, [pc, #16]	@ (8005190 <MX_USART1_UART_Init+0x90>)
 800517e:	f011 fa48 	bl	8016612 <HAL_UARTEx_DisableFifoMode>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005188:	f7ff f8fa 	bl	8004380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800518c:	bf00      	nop
 800518e:	bd80      	pop	{r7, pc}
 8005190:	24000e18 	.word	0x24000e18
 8005194:	40011000 	.word	0x40011000

08005198 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800519c:	4b22      	ldr	r3, [pc, #136]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 800519e:	4a23      	ldr	r2, [pc, #140]	@ (800522c <MX_USART2_UART_Init+0x94>)
 80051a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80051a2:	4b21      	ldr	r3, [pc, #132]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 80051a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80051a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80051aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80051b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80051bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 80051be:	220c      	movs	r2, #12
 80051c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051c2:	4b19      	ldr	r3, [pc, #100]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80051c8:	4b17      	ldr	r3, [pc, #92]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051ce:	4b16      	ldr	r3, [pc, #88]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80051d4:	4b14      	ldr	r3, [pc, #80]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051da:	4b13      	ldr	r3, [pc, #76]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 80051dc:	2200      	movs	r2, #0
 80051de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80051e0:	4811      	ldr	r0, [pc, #68]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 80051e2:	f00e ff6b 	bl	80140bc <HAL_UART_Init>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80051ec:	f7ff f8c8 	bl	8004380 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80051f0:	2100      	movs	r1, #0
 80051f2:	480d      	ldr	r0, [pc, #52]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 80051f4:	f011 fa46 	bl	8016684 <HAL_UARTEx_SetTxFifoThreshold>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80051fe:	f7ff f8bf 	bl	8004380 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005202:	2100      	movs	r1, #0
 8005204:	4808      	ldr	r0, [pc, #32]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 8005206:	f011 fa7b 	bl	8016700 <HAL_UARTEx_SetRxFifoThreshold>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005210:	f7ff f8b6 	bl	8004380 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005214:	4804      	ldr	r0, [pc, #16]	@ (8005228 <MX_USART2_UART_Init+0x90>)
 8005216:	f011 f9fc 	bl	8016612 <HAL_UARTEx_DisableFifoMode>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005220:	f7ff f8ae 	bl	8004380 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005224:	bf00      	nop
 8005226:	bd80      	pop	{r7, pc}
 8005228:	24000eac 	.word	0x24000eac
 800522c:	40004400 	.word	0x40004400

08005230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b0be      	sub	sp, #248	@ 0xf8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005238:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	605a      	str	r2, [r3, #4]
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	60da      	str	r2, [r3, #12]
 8005246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005248:	f107 0320 	add.w	r3, r7, #32
 800524c:	22c0      	movs	r2, #192	@ 0xc0
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f017 fad5 	bl	801c800 <memset>
  if(uartHandle->Instance==USART1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4aa0      	ldr	r2, [pc, #640]	@ (80054dc <HAL_UART_MspInit+0x2ac>)
 800525c:	4293      	cmp	r3, r2
 800525e:	f040 8093 	bne.w	8005388 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005262:	f04f 0201 	mov.w	r2, #1
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800526e:	2300      	movs	r3, #0
 8005270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005274:	f107 0320 	add.w	r3, r7, #32
 8005278:	4618      	mov	r0, r3
 800527a:	f009 fe49 	bl	800ef10 <HAL_RCCEx_PeriphCLKConfig>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8005284:	f7ff f87c 	bl	8004380 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005288:	4b95      	ldr	r3, [pc, #596]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 800528a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800528e:	4a94      	ldr	r2, [pc, #592]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 8005290:	f043 0310 	orr.w	r3, r3, #16
 8005294:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005298:	4b91      	ldr	r3, [pc, #580]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 800529a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	61fb      	str	r3, [r7, #28]
 80052a4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a6:	4b8e      	ldr	r3, [pc, #568]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 80052a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052ac:	4a8c      	ldr	r2, [pc, #560]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80052b6:	4b8a      	ldr	r3, [pc, #552]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 80052b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART1_TX_Pin;
 80052c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052cc:	2302      	movs	r3, #2
 80052ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d8:	2300      	movs	r3, #0
 80052da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052de:	2307      	movs	r3, #7
 80052e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 80052e4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80052e8:	4619      	mov	r1, r3
 80052ea:	487e      	ldr	r0, [pc, #504]	@ (80054e4 <HAL_UART_MspInit+0x2b4>)
 80052ec:	f005 ffa0 	bl	800b230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART1_RX_Pin;
 80052f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f8:	2302      	movs	r3, #2
 80052fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052fe:	2301      	movs	r3, #1
 8005300:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005304:	2300      	movs	r3, #0
 8005306:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800530a:	2307      	movs	r3, #7
 800530c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);
 8005310:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8005314:	4619      	mov	r1, r3
 8005316:	4873      	ldr	r0, [pc, #460]	@ (80054e4 <HAL_UART_MspInit+0x2b4>)
 8005318:	f005 ff8a 	bl	800b230 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 800531c:	4b72      	ldr	r3, [pc, #456]	@ (80054e8 <HAL_UART_MspInit+0x2b8>)
 800531e:	4a73      	ldr	r2, [pc, #460]	@ (80054ec <HAL_UART_MspInit+0x2bc>)
 8005320:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005322:	4b71      	ldr	r3, [pc, #452]	@ (80054e8 <HAL_UART_MspInit+0x2b8>)
 8005324:	222a      	movs	r2, #42	@ 0x2a
 8005326:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005328:	4b6f      	ldr	r3, [pc, #444]	@ (80054e8 <HAL_UART_MspInit+0x2b8>)
 800532a:	2240      	movs	r2, #64	@ 0x40
 800532c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800532e:	4b6e      	ldr	r3, [pc, #440]	@ (80054e8 <HAL_UART_MspInit+0x2b8>)
 8005330:	2200      	movs	r2, #0
 8005332:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005334:	4b6c      	ldr	r3, [pc, #432]	@ (80054e8 <HAL_UART_MspInit+0x2b8>)
 8005336:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800533a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800533c:	4b6a      	ldr	r3, [pc, #424]	@ (80054e8 <HAL_UART_MspInit+0x2b8>)
 800533e:	2200      	movs	r2, #0
 8005340:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005342:	4b69      	ldr	r3, [pc, #420]	@ (80054e8 <HAL_UART_MspInit+0x2b8>)
 8005344:	2200      	movs	r2, #0
 8005346:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005348:	4b67      	ldr	r3, [pc, #412]	@ (80054e8 <HAL_UART_MspInit+0x2b8>)
 800534a:	2200      	movs	r2, #0
 800534c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800534e:	4b66      	ldr	r3, [pc, #408]	@ (80054e8 <HAL_UART_MspInit+0x2b8>)
 8005350:	2200      	movs	r2, #0
 8005352:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005354:	4b64      	ldr	r3, [pc, #400]	@ (80054e8 <HAL_UART_MspInit+0x2b8>)
 8005356:	2200      	movs	r2, #0
 8005358:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800535a:	4863      	ldr	r0, [pc, #396]	@ (80054e8 <HAL_UART_MspInit+0x2b8>)
 800535c:	f002 fa4e 	bl	80077fc <HAL_DMA_Init>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8005366:	f7ff f80b 	bl	8004380 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a5e      	ldr	r2, [pc, #376]	@ (80054e8 <HAL_UART_MspInit+0x2b8>)
 800536e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005370:	4a5d      	ldr	r2, [pc, #372]	@ (80054e8 <HAL_UART_MspInit+0x2b8>)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005376:	2200      	movs	r2, #0
 8005378:	2100      	movs	r1, #0
 800537a:	2025      	movs	r0, #37	@ 0x25
 800537c:	f001 febc 	bl	80070f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005380:	2025      	movs	r0, #37	@ 0x25
 8005382:	f001 fed3 	bl	800712c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005386:	e0a4      	b.n	80054d2 <HAL_UART_MspInit+0x2a2>
  else if(uartHandle->Instance==USART2)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a58      	ldr	r2, [pc, #352]	@ (80054f0 <HAL_UART_MspInit+0x2c0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	f040 809f 	bne.w	80054d2 <HAL_UART_MspInit+0x2a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005394:	f04f 0202 	mov.w	r2, #2
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053a6:	f107 0320 	add.w	r3, r7, #32
 80053aa:	4618      	mov	r0, r3
 80053ac:	f009 fdb0 	bl	800ef10 <HAL_RCCEx_PeriphCLKConfig>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_UART_MspInit+0x18a>
      Error_Handler();
 80053b6:	f7fe ffe3 	bl	8004380 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80053ba:	4b49      	ldr	r3, [pc, #292]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 80053bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053c0:	4a47      	ldr	r2, [pc, #284]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 80053c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80053ca:	4b45      	ldr	r3, [pc, #276]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 80053cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053d8:	4b41      	ldr	r3, [pc, #260]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 80053da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053de:	4a40      	ldr	r2, [pc, #256]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80053e8:	4b3d      	ldr	r3, [pc, #244]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 80053ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053f6:	4b3a      	ldr	r3, [pc, #232]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 80053f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053fc:	4a38      	ldr	r2, [pc, #224]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 80053fe:	f043 0308 	orr.w	r3, r3, #8
 8005402:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005406:	4b36      	ldr	r3, [pc, #216]	@ (80054e0 <HAL_UART_MspInit+0x2b0>)
 8005408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART2_TX_Pin;
 8005414:	2304      	movs	r3, #4
 8005416:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800541a:	2302      	movs	r3, #2
 800541c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005420:	2300      	movs	r3, #0
 8005422:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005426:	2300      	movs	r3, #0
 8005428:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800542c:	2307      	movs	r3, #7
 800542e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(UART2_TX_GPIO_Port, &GPIO_InitStruct);
 8005432:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8005436:	4619      	mov	r1, r3
 8005438:	482a      	ldr	r0, [pc, #168]	@ (80054e4 <HAL_UART_MspInit+0x2b4>)
 800543a:	f005 fef9 	bl	800b230 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART2_RX_Pin;
 800543e:	2340      	movs	r3, #64	@ 0x40
 8005440:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005444:	2302      	movs	r3, #2
 8005446:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800544a:	2301      	movs	r3, #1
 800544c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005450:	2300      	movs	r3, #0
 8005452:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005456:	2307      	movs	r3, #7
 8005458:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(UART2_RX_GPIO_Port, &GPIO_InitStruct);
 800545c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8005460:	4619      	mov	r1, r3
 8005462:	4824      	ldr	r0, [pc, #144]	@ (80054f4 <HAL_UART_MspInit+0x2c4>)
 8005464:	f005 fee4 	bl	800b230 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream1;
 8005468:	4b23      	ldr	r3, [pc, #140]	@ (80054f8 <HAL_UART_MspInit+0x2c8>)
 800546a:	4a24      	ldr	r2, [pc, #144]	@ (80054fc <HAL_UART_MspInit+0x2cc>)
 800546c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800546e:	4b22      	ldr	r3, [pc, #136]	@ (80054f8 <HAL_UART_MspInit+0x2c8>)
 8005470:	222c      	movs	r2, #44	@ 0x2c
 8005472:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005474:	4b20      	ldr	r3, [pc, #128]	@ (80054f8 <HAL_UART_MspInit+0x2c8>)
 8005476:	2240      	movs	r2, #64	@ 0x40
 8005478:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800547a:	4b1f      	ldr	r3, [pc, #124]	@ (80054f8 <HAL_UART_MspInit+0x2c8>)
 800547c:	2200      	movs	r2, #0
 800547e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005480:	4b1d      	ldr	r3, [pc, #116]	@ (80054f8 <HAL_UART_MspInit+0x2c8>)
 8005482:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005486:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005488:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <HAL_UART_MspInit+0x2c8>)
 800548a:	2200      	movs	r2, #0
 800548c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800548e:	4b1a      	ldr	r3, [pc, #104]	@ (80054f8 <HAL_UART_MspInit+0x2c8>)
 8005490:	2200      	movs	r2, #0
 8005492:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005494:	4b18      	ldr	r3, [pc, #96]	@ (80054f8 <HAL_UART_MspInit+0x2c8>)
 8005496:	2200      	movs	r2, #0
 8005498:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800549a:	4b17      	ldr	r3, [pc, #92]	@ (80054f8 <HAL_UART_MspInit+0x2c8>)
 800549c:	2200      	movs	r2, #0
 800549e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054a0:	4b15      	ldr	r3, [pc, #84]	@ (80054f8 <HAL_UART_MspInit+0x2c8>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80054a6:	4814      	ldr	r0, [pc, #80]	@ (80054f8 <HAL_UART_MspInit+0x2c8>)
 80054a8:	f002 f9a8 	bl	80077fc <HAL_DMA_Init>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_UART_MspInit+0x286>
      Error_Handler();
 80054b2:	f7fe ff65 	bl	8004380 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a0f      	ldr	r2, [pc, #60]	@ (80054f8 <HAL_UART_MspInit+0x2c8>)
 80054ba:	67da      	str	r2, [r3, #124]	@ 0x7c
 80054bc:	4a0e      	ldr	r2, [pc, #56]	@ (80054f8 <HAL_UART_MspInit+0x2c8>)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80054c2:	2200      	movs	r2, #0
 80054c4:	2100      	movs	r1, #0
 80054c6:	2026      	movs	r0, #38	@ 0x26
 80054c8:	f001 fe16 	bl	80070f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80054cc:	2026      	movs	r0, #38	@ 0x26
 80054ce:	f001 fe2d 	bl	800712c <HAL_NVIC_EnableIRQ>
}
 80054d2:	bf00      	nop
 80054d4:	37f8      	adds	r7, #248	@ 0xf8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40011000 	.word	0x40011000
 80054e0:	58024400 	.word	0x58024400
 80054e4:	58020000 	.word	0x58020000
 80054e8:	24000f40 	.word	0x24000f40
 80054ec:	40020040 	.word	0x40020040
 80054f0:	40004400 	.word	0x40004400
 80054f4:	58020c00 	.word	0x58020c00
 80054f8:	24000fb8 	.word	0x24000fb8
 80054fc:	40020028 	.word	0x40020028

08005500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005500:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800553c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8005504:	f7ff fc20 	bl	8004d48 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005508:	f7ff fb7e 	bl	8004c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800550c:	480c      	ldr	r0, [pc, #48]	@ (8005540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800550e:	490d      	ldr	r1, [pc, #52]	@ (8005544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005510:	4a0d      	ldr	r2, [pc, #52]	@ (8005548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005514:	e002      	b.n	800551c <LoopCopyDataInit>

08005516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800551a:	3304      	adds	r3, #4

0800551c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800551c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800551e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005520:	d3f9      	bcc.n	8005516 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005522:	4a0a      	ldr	r2, [pc, #40]	@ (800554c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005524:	4c0a      	ldr	r4, [pc, #40]	@ (8005550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005528:	e001      	b.n	800552e <LoopFillZerobss>

0800552a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800552a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800552c:	3204      	adds	r2, #4

0800552e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800552e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005530:	d3fb      	bcc.n	800552a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005532:	f017 f9bd 	bl	801c8b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005536:	f7fe fb05 	bl	8003b44 <main>
  bx  lr
 800553a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800553c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005540:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005544:	24000778 	.word	0x24000778
  ldr r2, =_sidata
 8005548:	08021504 	.word	0x08021504
  ldr r2, =_sbss
 800554c:	24000778 	.word	0x24000778
  ldr r4, =_ebss
 8005550:	24002e8c 	.word	0x24002e8c

08005554 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005554:	e7fe      	b.n	8005554 <ADC3_IRQHandler>
	...

08005558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800555e:	2003      	movs	r0, #3
 8005560:	f001 fdbf 	bl	80070e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005564:	f009 fabc 	bl	800eae0 <HAL_RCC_GetSysClockFreq>
 8005568:	4602      	mov	r2, r0
 800556a:	4b15      	ldr	r3, [pc, #84]	@ (80055c0 <HAL_Init+0x68>)
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	0a1b      	lsrs	r3, r3, #8
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	4913      	ldr	r1, [pc, #76]	@ (80055c4 <HAL_Init+0x6c>)
 8005576:	5ccb      	ldrb	r3, [r1, r3]
 8005578:	f003 031f 	and.w	r3, r3, #31
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
 8005580:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005582:	4b0f      	ldr	r3, [pc, #60]	@ (80055c0 <HAL_Init+0x68>)
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	4a0e      	ldr	r2, [pc, #56]	@ (80055c4 <HAL_Init+0x6c>)
 800558c:	5cd3      	ldrb	r3, [r2, r3]
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	fa22 f303 	lsr.w	r3, r2, r3
 8005598:	4a0b      	ldr	r2, [pc, #44]	@ (80055c8 <HAL_Init+0x70>)
 800559a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800559c:	4a0b      	ldr	r2, [pc, #44]	@ (80055cc <HAL_Init+0x74>)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055a2:	200f      	movs	r0, #15
 80055a4:	f7ff f9f0 	bl	8004988 <HAL_InitTick>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e002      	b.n	80055b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80055b2:	f7ff f9cf 	bl	8004954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	58024400 	.word	0x58024400
 80055c4:	08021124 	.word	0x08021124
 80055c8:	24000084 	.word	0x24000084
 80055cc:	24000080 	.word	0x24000080

080055d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80055d4:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <HAL_IncTick+0x20>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <HAL_IncTick+0x24>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4413      	add	r3, r2
 80055e0:	4a04      	ldr	r2, [pc, #16]	@ (80055f4 <HAL_IncTick+0x24>)
 80055e2:	6013      	str	r3, [r2, #0]
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	2400008c 	.word	0x2400008c
 80055f4:	24001030 	.word	0x24001030

080055f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  return uwTick;
 80055fc:	4b03      	ldr	r3, [pc, #12]	@ (800560c <HAL_GetTick+0x14>)
 80055fe:	681b      	ldr	r3, [r3, #0]
}
 8005600:	4618      	mov	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	24001030 	.word	0x24001030

08005610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005618:	f7ff ffee 	bl	80055f8 <HAL_GetTick>
 800561c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d005      	beq.n	8005636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800562a:	4b0a      	ldr	r3, [pc, #40]	@ (8005654 <HAL_Delay+0x44>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005636:	bf00      	nop
 8005638:	f7ff ffde 	bl	80055f8 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	429a      	cmp	r2, r3
 8005646:	d8f7      	bhi.n	8005638 <HAL_Delay+0x28>
  {
  }
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	2400008c 	.word	0x2400008c

08005658 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800565c:	4b03      	ldr	r3, [pc, #12]	@ (800566c <HAL_GetREVID+0x14>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	0c1b      	lsrs	r3, r3, #16
}
 8005662:	4618      	mov	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	5c001000 	.word	0x5c001000

08005670 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800567a:	4b07      	ldr	r3, [pc, #28]	@ (8005698 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	43db      	mvns	r3, r3
 8005682:	401a      	ands	r2, r3
 8005684:	4904      	ldr	r1, [pc, #16]	@ (8005698 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	4313      	orrs	r3, r2
 800568a:	604b      	str	r3, [r1, #4]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	58000400 	.word	0x58000400

0800569c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	609a      	str	r2, [r3, #8]
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	609a      	str	r2, [r3, #8]
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005714:	2b00      	cmp	r3, #0
 8005716:	d107      	bne.n	8005728 <LL_ADC_SetChannelPreselection+0x24>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	0e9b      	lsrs	r3, r3, #26
 800571c:	f003 031f 	and.w	r3, r3, #31
 8005720:	2201      	movs	r2, #1
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	e015      	b.n	8005754 <LL_ADC_SetChannelPreselection+0x50>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	fa93 f3a3 	rbit	r3, r3
 8005732:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800573e:	2320      	movs	r3, #32
 8005740:	e003      	b.n	800574a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	fab3 f383 	clz	r3, r3
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	2201      	movs	r2, #1
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	69d2      	ldr	r2, [r2, #28]
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800576a:	b480      	push	{r7}
 800576c:	b087      	sub	sp, #28
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3360      	adds	r3, #96	@ 0x60
 800577c:	461a      	mov	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	430b      	orrs	r3, r1
 8005798:	431a      	orrs	r2, r3
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ca:	431a      	orrs	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	611a      	str	r2, [r3, #16]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3360      	adds	r3, #96	@ 0x60
 80057ec:	461a      	mov	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	431a      	orrs	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	601a      	str	r2, [r3, #0]
  }
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3330      	adds	r3, #48	@ 0x30
 8005848:	461a      	mov	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	0a1b      	lsrs	r3, r3, #8
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	f003 030c 	and.w	r3, r3, #12
 8005854:	4413      	add	r3, r2
 8005856:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	211f      	movs	r1, #31
 8005864:	fa01 f303 	lsl.w	r3, r1, r3
 8005868:	43db      	mvns	r3, r3
 800586a:	401a      	ands	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	0e9b      	lsrs	r3, r3, #26
 8005870:	f003 011f 	and.w	r1, r3, #31
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	431a      	orrs	r2, r3
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f023 0203 	bic.w	r2, r3, #3
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60da      	str	r2, [r3, #12]
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b087      	sub	sp, #28
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3314      	adds	r3, #20
 80058c6:	461a      	mov	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	0e5b      	lsrs	r3, r3, #25
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	f003 0304 	and.w	r3, r3, #4
 80058d2:	4413      	add	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	0d1b      	lsrs	r3, r3, #20
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	2107      	movs	r1, #7
 80058e4:	fa01 f303 	lsl.w	r3, r1, r3
 80058e8:	43db      	mvns	r3, r3
 80058ea:	401a      	ands	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	0d1b      	lsrs	r3, r3, #20
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	fa01 f303 	lsl.w	r3, r1, r3
 80058fa:	431a      	orrs	r2, r3
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005924:	43db      	mvns	r3, r3
 8005926:	401a      	ands	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f003 0318 	and.w	r3, r3, #24
 800592e:	4908      	ldr	r1, [pc, #32]	@ (8005950 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005930:	40d9      	lsrs	r1, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	400b      	ands	r3, r1
 8005936:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800593a:	431a      	orrs	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	000fffff 	.word	0x000fffff

08005954 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 031f 	and.w	r3, r3, #31
}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	4b04      	ldr	r3, [pc, #16]	@ (8005990 <LL_ADC_DisableDeepPowerDown+0x20>)
 800597e:	4013      	ands	r3, r2
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6093      	str	r3, [r2, #8]
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	5fffffc0 	.word	0x5fffffc0

08005994 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059a8:	d101      	bne.n	80059ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	4b05      	ldr	r3, [pc, #20]	@ (80059e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80059ca:	4013      	ands	r3, r2
 80059cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	6fffffc0 	.word	0x6fffffc0

080059e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059f8:	d101      	bne.n	80059fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	4b05      	ldr	r3, [pc, #20]	@ (8005a30 <LL_ADC_Enable+0x24>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	f043 0201 	orr.w	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	7fffffc0 	.word	0x7fffffc0

08005a34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	4b05      	ldr	r3, [pc, #20]	@ (8005a58 <LL_ADC_Disable+0x24>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	f043 0202 	orr.w	r2, r3, #2
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	7fffffc0 	.word	0x7fffffc0

08005a5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <LL_ADC_IsEnabled+0x18>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <LL_ADC_IsEnabled+0x1a>
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d101      	bne.n	8005a9a <LL_ADC_IsDisableOngoing+0x18>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <LL_ADC_IsDisableOngoing+0x1a>
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <LL_ADC_REG_StartConversion+0x24>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	f043 0204 	orr.w	r2, r3, #4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	7fffffc0 	.word	0x7fffffc0

08005ad0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	4b05      	ldr	r3, [pc, #20]	@ (8005af4 <LL_ADC_REG_StopConversion+0x24>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	f043 0210 	orr.w	r2, r3, #16
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	7fffffc0 	.word	0x7fffffc0

08005af8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d101      	bne.n	8005b10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e000      	b.n	8005b12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	4b05      	ldr	r3, [pc, #20]	@ (8005b44 <LL_ADC_INJ_StopConversion+0x24>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	f043 0220 	orr.w	r2, r3, #32
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	7fffffc0 	.word	0x7fffffc0

08005b48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d101      	bne.n	8005b60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b089      	sub	sp, #36	@ 0x24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e18f      	b.n	8005eaa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7fc fffd 	bl	8002b98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff feef 	bl	8005994 <LL_ADC_IsDeepPowerDownEnabled>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fed5 	bl	8005970 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff ff0a 	bl	80059e4 <LL_ADC_IsInternalRegulatorEnabled>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d114      	bne.n	8005c00 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff feee 	bl	80059bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005be0:	4b87      	ldr	r3, [pc, #540]	@ (8005e00 <HAL_ADC_Init+0x290>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	099b      	lsrs	r3, r3, #6
 8005be6:	4a87      	ldr	r2, [pc, #540]	@ (8005e04 <HAL_ADC_Init+0x294>)
 8005be8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bec:	099b      	lsrs	r3, r3, #6
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bf2:	e002      	b.n	8005bfa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1f9      	bne.n	8005bf4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff feed 	bl	80059e4 <LL_ADC_IsInternalRegulatorEnabled>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10d      	bne.n	8005c2c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c14:	f043 0210 	orr.w	r2, r3, #16
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c20:	f043 0201 	orr.w	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff ff61 	bl	8005af8 <LL_ADC_REG_IsConversionOngoing>
 8005c36:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 8129 	bne.w	8005e98 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f040 8125 	bne.w	8005e98 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c52:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005c56:	f043 0202 	orr.w	r2, r3, #2
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fefa 	bl	8005a5c <LL_ADC_IsEnabled>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d136      	bne.n	8005cdc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a65      	ldr	r2, [pc, #404]	@ (8005e08 <HAL_ADC_Init+0x298>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d004      	beq.n	8005c82 <HAL_ADC_Init+0x112>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a63      	ldr	r2, [pc, #396]	@ (8005e0c <HAL_ADC_Init+0x29c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d10e      	bne.n	8005ca0 <HAL_ADC_Init+0x130>
 8005c82:	4861      	ldr	r0, [pc, #388]	@ (8005e08 <HAL_ADC_Init+0x298>)
 8005c84:	f7ff feea 	bl	8005a5c <LL_ADC_IsEnabled>
 8005c88:	4604      	mov	r4, r0
 8005c8a:	4860      	ldr	r0, [pc, #384]	@ (8005e0c <HAL_ADC_Init+0x29c>)
 8005c8c:	f7ff fee6 	bl	8005a5c <LL_ADC_IsEnabled>
 8005c90:	4603      	mov	r3, r0
 8005c92:	4323      	orrs	r3, r4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	bf0c      	ite	eq
 8005c98:	2301      	moveq	r3, #1
 8005c9a:	2300      	movne	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	e008      	b.n	8005cb2 <HAL_ADC_Init+0x142>
 8005ca0:	485b      	ldr	r0, [pc, #364]	@ (8005e10 <HAL_ADC_Init+0x2a0>)
 8005ca2:	f7ff fedb 	bl	8005a5c <LL_ADC_IsEnabled>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	bf0c      	ite	eq
 8005cac:	2301      	moveq	r3, #1
 8005cae:	2300      	movne	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d012      	beq.n	8005cdc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a53      	ldr	r2, [pc, #332]	@ (8005e08 <HAL_ADC_Init+0x298>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d004      	beq.n	8005cca <HAL_ADC_Init+0x15a>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a51      	ldr	r2, [pc, #324]	@ (8005e0c <HAL_ADC_Init+0x29c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d101      	bne.n	8005cce <HAL_ADC_Init+0x15e>
 8005cca:	4a52      	ldr	r2, [pc, #328]	@ (8005e14 <HAL_ADC_Init+0x2a4>)
 8005ccc:	e000      	b.n	8005cd0 <HAL_ADC_Init+0x160>
 8005cce:	4a52      	ldr	r2, [pc, #328]	@ (8005e18 <HAL_ADC_Init+0x2a8>)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f7ff fce0 	bl	800569c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005cdc:	f7ff fcbc 	bl	8005658 <HAL_GetREVID>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d914      	bls.n	8005d14 <HAL_ADC_Init+0x1a4>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	2b10      	cmp	r3, #16
 8005cf0:	d110      	bne.n	8005d14 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	7d5b      	ldrb	r3, [r3, #21]
 8005cf6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005cfc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005d02:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	7f1b      	ldrb	r3, [r3, #28]
 8005d08:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005d0a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d0c:	f043 030c 	orr.w	r3, r3, #12
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	e00d      	b.n	8005d30 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	7d5b      	ldrb	r3, [r3, #21]
 8005d18:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d1e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005d24:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	7f1b      	ldrb	r3, [r3, #28]
 8005d2a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	7f1b      	ldrb	r3, [r3, #28]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d106      	bne.n	8005d46 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	045b      	lsls	r3, r3, #17
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d52:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	4b2c      	ldr	r3, [pc, #176]	@ (8005e1c <HAL_ADC_Init+0x2ac>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	69b9      	ldr	r1, [r7, #24]
 8005d72:	430b      	orrs	r3, r1
 8005d74:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff febc 	bl	8005af8 <LL_ADC_REG_IsConversionOngoing>
 8005d80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fede 	bl	8005b48 <LL_ADC_INJ_IsConversionOngoing>
 8005d8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d15f      	bne.n	8005e54 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d15c      	bne.n	8005e54 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	7d1b      	ldrb	r3, [r3, #20]
 8005d9e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8005da4:	4313      	orrs	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	4b1c      	ldr	r3, [pc, #112]	@ (8005e20 <HAL_ADC_Init+0x2b0>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6812      	ldr	r2, [r2, #0]
 8005db6:	69b9      	ldr	r1, [r7, #24]
 8005db8:	430b      	orrs	r3, r1
 8005dba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d130      	bne.n	8005e28 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dca:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	4b14      	ldr	r3, [pc, #80]	@ (8005e24 <HAL_ADC_Init+0x2b4>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005dda:	3a01      	subs	r2, #1
 8005ddc:	0411      	lsls	r1, r2, #16
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005de2:	4311      	orrs	r1, r2
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005de8:	4311      	orrs	r1, r2
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005dee:	430a      	orrs	r2, r1
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	611a      	str	r2, [r3, #16]
 8005dfc:	e01c      	b.n	8005e38 <HAL_ADC_Init+0x2c8>
 8005dfe:	bf00      	nop
 8005e00:	24000080 	.word	0x24000080
 8005e04:	053e2d63 	.word	0x053e2d63
 8005e08:	40022000 	.word	0x40022000
 8005e0c:	40022100 	.word	0x40022100
 8005e10:	58026000 	.word	0x58026000
 8005e14:	40022300 	.word	0x40022300
 8005e18:	58026300 	.word	0x58026300
 8005e1c:	fff0c003 	.word	0xfff0c003
 8005e20:	ffffbffc 	.word	0xffffbffc
 8005e24:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691a      	ldr	r2, [r3, #16]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0201 	bic.w	r2, r2, #1
 8005e36:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fe8a 	bl	8006b68 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d10c      	bne.n	8005e76 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e62:	f023 010f 	bic.w	r1, r3, #15
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	1e5a      	subs	r2, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e74:	e007      	b.n	8005e86 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 020f 	bic.w	r2, r2, #15
 8005e84:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	f043 0201 	orr.w	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	655a      	str	r2, [r3, #84]	@ 0x54
 8005e96:	e007      	b.n	8005ea8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9c:	f043 0210 	orr.w	r2, r3, #16
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ea8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3724      	adds	r7, #36	@ 0x24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd90      	pop	{r4, r7, pc}
 8005eb2:	bf00      	nop

08005eb4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a55      	ldr	r2, [pc, #340]	@ (800601c <HAL_ADC_Start_DMA+0x168>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d004      	beq.n	8005ed4 <HAL_ADC_Start_DMA+0x20>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a54      	ldr	r2, [pc, #336]	@ (8006020 <HAL_ADC_Start_DMA+0x16c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d101      	bne.n	8005ed8 <HAL_ADC_Start_DMA+0x24>
 8005ed4:	4b53      	ldr	r3, [pc, #332]	@ (8006024 <HAL_ADC_Start_DMA+0x170>)
 8005ed6:	e000      	b.n	8005eda <HAL_ADC_Start_DMA+0x26>
 8005ed8:	4b53      	ldr	r3, [pc, #332]	@ (8006028 <HAL_ADC_Start_DMA+0x174>)
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fd3a 	bl	8005954 <LL_ADC_GetMultimode>
 8005ee0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff fe06 	bl	8005af8 <LL_ADC_REG_IsConversionOngoing>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f040 808c 	bne.w	800600c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_ADC_Start_DMA+0x4e>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e087      	b.n	8006012 <HAL_ADC_Start_DMA+0x15e>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	d002      	beq.n	8005f1c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b09      	cmp	r3, #9
 8005f1a:	d170      	bne.n	8005ffe <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fca5 	bl	800686c <ADC_Enable>
 8005f22:	4603      	mov	r3, r0
 8005f24:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d163      	bne.n	8005ff4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f30:	4b3e      	ldr	r3, [pc, #248]	@ (800602c <HAL_ADC_Start_DMA+0x178>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a37      	ldr	r2, [pc, #220]	@ (8006020 <HAL_ADC_Start_DMA+0x16c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d002      	beq.n	8005f4c <HAL_ADC_Start_DMA+0x98>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	e000      	b.n	8005f4e <HAL_ADC_Start_DMA+0x9a>
 8005f4c:	4b33      	ldr	r3, [pc, #204]	@ (800601c <HAL_ADC_Start_DMA+0x168>)
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d002      	beq.n	8005f5c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d105      	bne.n	8005f68 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f78:	f023 0206 	bic.w	r2, r3, #6
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f80:	e002      	b.n	8005f88 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f8c:	4a28      	ldr	r2, [pc, #160]	@ (8006030 <HAL_ADC_Start_DMA+0x17c>)
 8005f8e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f94:	4a27      	ldr	r2, [pc, #156]	@ (8006034 <HAL_ADC_Start_DMA+0x180>)
 8005f96:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f9c:	4a26      	ldr	r2, [pc, #152]	@ (8006038 <HAL_ADC_Start_DMA+0x184>)
 8005f9e:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	221c      	movs	r2, #28
 8005fa6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0210 	orr.w	r2, r2, #16
 8005fbe:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	f7ff fc60 	bl	8005890 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3340      	adds	r3, #64	@ 0x40
 8005fda:	4619      	mov	r1, r3
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f001 ff68 	bl	8007eb4 <HAL_DMA_Start_IT>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff fd5b 	bl	8005aa8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005ff2:	e00d      	b.n	8006010 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8005ffc:	e008      	b.n	8006010 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800600a:	e001      	b.n	8006010 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800600c:	2302      	movs	r3, #2
 800600e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006010:	7dfb      	ldrb	r3, [r7, #23]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40022000 	.word	0x40022000
 8006020:	40022100 	.word	0x40022100
 8006024:	40022300 	.word	0x40022300
 8006028:	58026300 	.word	0x58026300
 800602c:	fffff0fe 	.word	0xfffff0fe
 8006030:	08006a3f 	.word	0x08006a3f
 8006034:	08006b17 	.word	0x08006b17
 8006038:	08006b33 	.word	0x08006b33

0800603c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_ADC_Stop_DMA+0x16>
 800604e:	2302      	movs	r3, #2
 8006050:	e04f      	b.n	80060f2 <HAL_ADC_Stop_DMA+0xb6>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800605a:	2103      	movs	r1, #3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fb49 	bl	80066f4 <ADC_ConversionStop>
 8006062:	4603      	mov	r3, r0
 8006064:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d13d      	bne.n	80060e8 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0203 	bic.w	r2, r2, #3
 800607a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006080:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d10f      	bne.n	80060aa <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800608e:	4618      	mov	r0, r3
 8006090:	f002 f97a 	bl	8008388 <HAL_DMA_Abort>
 8006094:	4603      	mov	r3, r0
 8006096:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006098:	7bfb      	ldrb	r3, [r7, #15]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0210 	bic.w	r2, r2, #16
 80060b8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d105      	bne.n	80060cc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fc5d 	bl	8006980 <ADC_Disable>
 80060c6:	4603      	mov	r3, r0
 80060c8:	73fb      	strb	r3, [r7, #15]
 80060ca:	e002      	b.n	80060d2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fc57 	bl	8006980 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d107      	bne.n	80060e8 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060dc:	4b07      	ldr	r3, [pc, #28]	@ (80060fc <HAL_ADC_Stop_DMA+0xc0>)
 80060de:	4013      	ands	r3, r2
 80060e0:	f043 0201 	orr.w	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	ffffeefe 	.word	0xffffeefe

08006100 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006114:	b590      	push	{r4, r7, lr}
 8006116:	b08d      	sub	sp, #52	@ 0x34
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	4a65      	ldr	r2, [pc, #404]	@ (80062c4 <HAL_ADC_ConfigChannel+0x1b0>)
 800612e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_ADC_ConfigChannel+0x2a>
 800613a:	2302      	movs	r3, #2
 800613c:	e2c7      	b.n	80066ce <HAL_ADC_ConfigChannel+0x5ba>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff fcd4 	bl	8005af8 <LL_ADC_REG_IsConversionOngoing>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	f040 82ac 	bne.w	80066b0 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	db2c      	blt.n	80061ba <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006168:	2b00      	cmp	r3, #0
 800616a:	d108      	bne.n	800617e <HAL_ADC_ConfigChannel+0x6a>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	0e9b      	lsrs	r3, r3, #26
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2201      	movs	r2, #1
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	e016      	b.n	80061ac <HAL_ADC_ConfigChannel+0x98>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	fa93 f3a3 	rbit	r3, r3
 800618a:	613b      	str	r3, [r7, #16]
  return result;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8006196:	2320      	movs	r3, #32
 8006198:	e003      	b.n	80061a2 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	fab3 f383 	clz	r3, r3
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	2201      	movs	r2, #1
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	69d1      	ldr	r1, [r2, #28]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6812      	ldr	r2, [r2, #0]
 80061b6:	430b      	orrs	r3, r1
 80061b8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	6859      	ldr	r1, [r3, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	f7ff fb36 	bl	8005838 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff fc91 	bl	8005af8 <LL_ADC_REG_IsConversionOngoing>
 80061d6:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fcb3 	bl	8005b48 <LL_ADC_INJ_IsConversionOngoing>
 80061e2:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80061e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f040 80b8 	bne.w	800635c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f040 80b4 	bne.w	800635c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	6819      	ldr	r1, [r3, #0]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	461a      	mov	r2, r3
 8006202:	f7ff fb58 	bl	80058b6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006206:	4b30      	ldr	r3, [pc, #192]	@ (80062c8 <HAL_ADC_ConfigChannel+0x1b4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800620e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006212:	d10b      	bne.n	800622c <HAL_ADC_ConfigChannel+0x118>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	695a      	ldr	r2, [r3, #20]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	089b      	lsrs	r3, r3, #2
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	e01d      	b.n	8006268 <HAL_ADC_ConfigChannel+0x154>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f003 0310 	and.w	r3, r3, #16
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10b      	bne.n	8006252 <HAL_ADC_ConfigChannel+0x13e>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	695a      	ldr	r2, [r3, #20]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	089b      	lsrs	r3, r3, #2
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	e00a      	b.n	8006268 <HAL_ADC_ConfigChannel+0x154>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	695a      	ldr	r2, [r3, #20]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	089b      	lsrs	r3, r3, #2
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b04      	cmp	r3, #4
 8006270:	d02c      	beq.n	80062cc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	6919      	ldr	r1, [r3, #16]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	f7ff fa73 	bl	800576a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6818      	ldr	r0, [r3, #0]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	6919      	ldr	r1, [r3, #16]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	7e5b      	ldrb	r3, [r3, #25]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d102      	bne.n	800629a <HAL_ADC_ConfigChannel+0x186>
 8006294:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006298:	e000      	b.n	800629c <HAL_ADC_ConfigChannel+0x188>
 800629a:	2300      	movs	r3, #0
 800629c:	461a      	mov	r2, r3
 800629e:	f7ff fa9d 	bl	80057dc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6818      	ldr	r0, [r3, #0]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	6919      	ldr	r1, [r3, #16]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	7e1b      	ldrb	r3, [r3, #24]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d102      	bne.n	80062b8 <HAL_ADC_ConfigChannel+0x1a4>
 80062b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80062b6:	e000      	b.n	80062ba <HAL_ADC_ConfigChannel+0x1a6>
 80062b8:	2300      	movs	r3, #0
 80062ba:	461a      	mov	r2, r3
 80062bc:	f7ff fa75 	bl	80057aa <LL_ADC_SetDataRightShift>
 80062c0:	e04c      	b.n	800635c <HAL_ADC_ConfigChannel+0x248>
 80062c2:	bf00      	nop
 80062c4:	47ff0000 	.word	0x47ff0000
 80062c8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	069b      	lsls	r3, r3, #26
 80062dc:	429a      	cmp	r2, r3
 80062de:	d107      	bne.n	80062f0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80062ee:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	069b      	lsls	r3, r3, #26
 8006300:	429a      	cmp	r2, r3
 8006302:	d107      	bne.n	8006314 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006312:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800631a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	069b      	lsls	r3, r3, #26
 8006324:	429a      	cmp	r2, r3
 8006326:	d107      	bne.n	8006338 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006336:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800633e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	069b      	lsls	r3, r3, #26
 8006348:	429a      	cmp	r2, r3
 800634a:	d107      	bne.n	800635c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800635a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff fb7b 	bl	8005a5c <LL_ADC_IsEnabled>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	f040 81aa 	bne.w	80066c2 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6819      	ldr	r1, [r3, #0]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	461a      	mov	r2, r3
 800637c:	f7ff fac6 	bl	800590c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4a87      	ldr	r2, [pc, #540]	@ (80065a4 <HAL_ADC_ConfigChannel+0x490>)
 8006386:	4293      	cmp	r3, r2
 8006388:	f040 809a 	bne.w	80064c0 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4984      	ldr	r1, [pc, #528]	@ (80065a8 <HAL_ADC_ConfigChannel+0x494>)
 8006396:	428b      	cmp	r3, r1
 8006398:	d147      	bne.n	800642a <HAL_ADC_ConfigChannel+0x316>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4983      	ldr	r1, [pc, #524]	@ (80065ac <HAL_ADC_ConfigChannel+0x498>)
 80063a0:	428b      	cmp	r3, r1
 80063a2:	d040      	beq.n	8006426 <HAL_ADC_ConfigChannel+0x312>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4981      	ldr	r1, [pc, #516]	@ (80065b0 <HAL_ADC_ConfigChannel+0x49c>)
 80063aa:	428b      	cmp	r3, r1
 80063ac:	d039      	beq.n	8006422 <HAL_ADC_ConfigChannel+0x30e>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4980      	ldr	r1, [pc, #512]	@ (80065b4 <HAL_ADC_ConfigChannel+0x4a0>)
 80063b4:	428b      	cmp	r3, r1
 80063b6:	d032      	beq.n	800641e <HAL_ADC_ConfigChannel+0x30a>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	497e      	ldr	r1, [pc, #504]	@ (80065b8 <HAL_ADC_ConfigChannel+0x4a4>)
 80063be:	428b      	cmp	r3, r1
 80063c0:	d02b      	beq.n	800641a <HAL_ADC_ConfigChannel+0x306>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	497d      	ldr	r1, [pc, #500]	@ (80065bc <HAL_ADC_ConfigChannel+0x4a8>)
 80063c8:	428b      	cmp	r3, r1
 80063ca:	d024      	beq.n	8006416 <HAL_ADC_ConfigChannel+0x302>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	497b      	ldr	r1, [pc, #492]	@ (80065c0 <HAL_ADC_ConfigChannel+0x4ac>)
 80063d2:	428b      	cmp	r3, r1
 80063d4:	d01d      	beq.n	8006412 <HAL_ADC_ConfigChannel+0x2fe>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	497a      	ldr	r1, [pc, #488]	@ (80065c4 <HAL_ADC_ConfigChannel+0x4b0>)
 80063dc:	428b      	cmp	r3, r1
 80063de:	d016      	beq.n	800640e <HAL_ADC_ConfigChannel+0x2fa>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4978      	ldr	r1, [pc, #480]	@ (80065c8 <HAL_ADC_ConfigChannel+0x4b4>)
 80063e6:	428b      	cmp	r3, r1
 80063e8:	d00f      	beq.n	800640a <HAL_ADC_ConfigChannel+0x2f6>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4977      	ldr	r1, [pc, #476]	@ (80065cc <HAL_ADC_ConfigChannel+0x4b8>)
 80063f0:	428b      	cmp	r3, r1
 80063f2:	d008      	beq.n	8006406 <HAL_ADC_ConfigChannel+0x2f2>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4975      	ldr	r1, [pc, #468]	@ (80065d0 <HAL_ADC_ConfigChannel+0x4bc>)
 80063fa:	428b      	cmp	r3, r1
 80063fc:	d101      	bne.n	8006402 <HAL_ADC_ConfigChannel+0x2ee>
 80063fe:	4b75      	ldr	r3, [pc, #468]	@ (80065d4 <HAL_ADC_ConfigChannel+0x4c0>)
 8006400:	e05a      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 8006402:	2300      	movs	r3, #0
 8006404:	e058      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 8006406:	4b74      	ldr	r3, [pc, #464]	@ (80065d8 <HAL_ADC_ConfigChannel+0x4c4>)
 8006408:	e056      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 800640a:	4b74      	ldr	r3, [pc, #464]	@ (80065dc <HAL_ADC_ConfigChannel+0x4c8>)
 800640c:	e054      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 800640e:	4b6e      	ldr	r3, [pc, #440]	@ (80065c8 <HAL_ADC_ConfigChannel+0x4b4>)
 8006410:	e052      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 8006412:	4b6c      	ldr	r3, [pc, #432]	@ (80065c4 <HAL_ADC_ConfigChannel+0x4b0>)
 8006414:	e050      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 8006416:	4b72      	ldr	r3, [pc, #456]	@ (80065e0 <HAL_ADC_ConfigChannel+0x4cc>)
 8006418:	e04e      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 800641a:	4b72      	ldr	r3, [pc, #456]	@ (80065e4 <HAL_ADC_ConfigChannel+0x4d0>)
 800641c:	e04c      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 800641e:	4b72      	ldr	r3, [pc, #456]	@ (80065e8 <HAL_ADC_ConfigChannel+0x4d4>)
 8006420:	e04a      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 8006422:	4b72      	ldr	r3, [pc, #456]	@ (80065ec <HAL_ADC_ConfigChannel+0x4d8>)
 8006424:	e048      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 8006426:	2301      	movs	r3, #1
 8006428:	e046      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4970      	ldr	r1, [pc, #448]	@ (80065f0 <HAL_ADC_ConfigChannel+0x4dc>)
 8006430:	428b      	cmp	r3, r1
 8006432:	d140      	bne.n	80064b6 <HAL_ADC_ConfigChannel+0x3a2>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	495c      	ldr	r1, [pc, #368]	@ (80065ac <HAL_ADC_ConfigChannel+0x498>)
 800643a:	428b      	cmp	r3, r1
 800643c:	d039      	beq.n	80064b2 <HAL_ADC_ConfigChannel+0x39e>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	495b      	ldr	r1, [pc, #364]	@ (80065b0 <HAL_ADC_ConfigChannel+0x49c>)
 8006444:	428b      	cmp	r3, r1
 8006446:	d032      	beq.n	80064ae <HAL_ADC_ConfigChannel+0x39a>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4959      	ldr	r1, [pc, #356]	@ (80065b4 <HAL_ADC_ConfigChannel+0x4a0>)
 800644e:	428b      	cmp	r3, r1
 8006450:	d02b      	beq.n	80064aa <HAL_ADC_ConfigChannel+0x396>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4958      	ldr	r1, [pc, #352]	@ (80065b8 <HAL_ADC_ConfigChannel+0x4a4>)
 8006458:	428b      	cmp	r3, r1
 800645a:	d024      	beq.n	80064a6 <HAL_ADC_ConfigChannel+0x392>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4956      	ldr	r1, [pc, #344]	@ (80065bc <HAL_ADC_ConfigChannel+0x4a8>)
 8006462:	428b      	cmp	r3, r1
 8006464:	d01d      	beq.n	80064a2 <HAL_ADC_ConfigChannel+0x38e>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4955      	ldr	r1, [pc, #340]	@ (80065c0 <HAL_ADC_ConfigChannel+0x4ac>)
 800646c:	428b      	cmp	r3, r1
 800646e:	d016      	beq.n	800649e <HAL_ADC_ConfigChannel+0x38a>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4953      	ldr	r1, [pc, #332]	@ (80065c4 <HAL_ADC_ConfigChannel+0x4b0>)
 8006476:	428b      	cmp	r3, r1
 8006478:	d00f      	beq.n	800649a <HAL_ADC_ConfigChannel+0x386>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4952      	ldr	r1, [pc, #328]	@ (80065c8 <HAL_ADC_ConfigChannel+0x4b4>)
 8006480:	428b      	cmp	r3, r1
 8006482:	d008      	beq.n	8006496 <HAL_ADC_ConfigChannel+0x382>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4951      	ldr	r1, [pc, #324]	@ (80065d0 <HAL_ADC_ConfigChannel+0x4bc>)
 800648a:	428b      	cmp	r3, r1
 800648c:	d101      	bne.n	8006492 <HAL_ADC_ConfigChannel+0x37e>
 800648e:	4b51      	ldr	r3, [pc, #324]	@ (80065d4 <HAL_ADC_ConfigChannel+0x4c0>)
 8006490:	e012      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 8006492:	2300      	movs	r3, #0
 8006494:	e010      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 8006496:	4b51      	ldr	r3, [pc, #324]	@ (80065dc <HAL_ADC_ConfigChannel+0x4c8>)
 8006498:	e00e      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 800649a:	4b4b      	ldr	r3, [pc, #300]	@ (80065c8 <HAL_ADC_ConfigChannel+0x4b4>)
 800649c:	e00c      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 800649e:	4b49      	ldr	r3, [pc, #292]	@ (80065c4 <HAL_ADC_ConfigChannel+0x4b0>)
 80064a0:	e00a      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 80064a2:	4b4f      	ldr	r3, [pc, #316]	@ (80065e0 <HAL_ADC_ConfigChannel+0x4cc>)
 80064a4:	e008      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 80064a6:	4b4f      	ldr	r3, [pc, #316]	@ (80065e4 <HAL_ADC_ConfigChannel+0x4d0>)
 80064a8:	e006      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 80064aa:	4b4f      	ldr	r3, [pc, #316]	@ (80065e8 <HAL_ADC_ConfigChannel+0x4d4>)
 80064ac:	e004      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 80064ae:	4b4f      	ldr	r3, [pc, #316]	@ (80065ec <HAL_ADC_ConfigChannel+0x4d8>)
 80064b0:	e002      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x3a4>
 80064b6:	2300      	movs	r3, #0
 80064b8:	4619      	mov	r1, r3
 80064ba:	4610      	mov	r0, r2
 80064bc:	f7ff f922 	bl	8005704 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f280 80fc 	bge.w	80066c2 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a36      	ldr	r2, [pc, #216]	@ (80065a8 <HAL_ADC_ConfigChannel+0x494>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d004      	beq.n	80064de <HAL_ADC_ConfigChannel+0x3ca>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a45      	ldr	r2, [pc, #276]	@ (80065f0 <HAL_ADC_ConfigChannel+0x4dc>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d101      	bne.n	80064e2 <HAL_ADC_ConfigChannel+0x3ce>
 80064de:	4b45      	ldr	r3, [pc, #276]	@ (80065f4 <HAL_ADC_ConfigChannel+0x4e0>)
 80064e0:	e000      	b.n	80064e4 <HAL_ADC_ConfigChannel+0x3d0>
 80064e2:	4b45      	ldr	r3, [pc, #276]	@ (80065f8 <HAL_ADC_ConfigChannel+0x4e4>)
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff f8ff 	bl	80056e8 <LL_ADC_GetCommonPathInternalCh>
 80064ea:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2d      	ldr	r2, [pc, #180]	@ (80065a8 <HAL_ADC_ConfigChannel+0x494>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_ADC_ConfigChannel+0x3ec>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a3d      	ldr	r2, [pc, #244]	@ (80065f0 <HAL_ADC_ConfigChannel+0x4dc>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d10e      	bne.n	800651e <HAL_ADC_ConfigChannel+0x40a>
 8006500:	4829      	ldr	r0, [pc, #164]	@ (80065a8 <HAL_ADC_ConfigChannel+0x494>)
 8006502:	f7ff faab 	bl	8005a5c <LL_ADC_IsEnabled>
 8006506:	4604      	mov	r4, r0
 8006508:	4839      	ldr	r0, [pc, #228]	@ (80065f0 <HAL_ADC_ConfigChannel+0x4dc>)
 800650a:	f7ff faa7 	bl	8005a5c <LL_ADC_IsEnabled>
 800650e:	4603      	mov	r3, r0
 8006510:	4323      	orrs	r3, r4
 8006512:	2b00      	cmp	r3, #0
 8006514:	bf0c      	ite	eq
 8006516:	2301      	moveq	r3, #1
 8006518:	2300      	movne	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	e008      	b.n	8006530 <HAL_ADC_ConfigChannel+0x41c>
 800651e:	4837      	ldr	r0, [pc, #220]	@ (80065fc <HAL_ADC_ConfigChannel+0x4e8>)
 8006520:	f7ff fa9c 	bl	8005a5c <LL_ADC_IsEnabled>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	bf0c      	ite	eq
 800652a:	2301      	moveq	r3, #1
 800652c:	2300      	movne	r3, #0
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 80b3 	beq.w	800669c <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a31      	ldr	r2, [pc, #196]	@ (8006600 <HAL_ADC_ConfigChannel+0x4ec>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d165      	bne.n	800660c <HAL_ADC_ConfigChannel+0x4f8>
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d160      	bne.n	800660c <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a2b      	ldr	r2, [pc, #172]	@ (80065fc <HAL_ADC_ConfigChannel+0x4e8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	f040 80b6 	bne.w	80066c2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a13      	ldr	r2, [pc, #76]	@ (80065a8 <HAL_ADC_ConfigChannel+0x494>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d004      	beq.n	800656a <HAL_ADC_ConfigChannel+0x456>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a22      	ldr	r2, [pc, #136]	@ (80065f0 <HAL_ADC_ConfigChannel+0x4dc>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d101      	bne.n	800656e <HAL_ADC_ConfigChannel+0x45a>
 800656a:	4a22      	ldr	r2, [pc, #136]	@ (80065f4 <HAL_ADC_ConfigChannel+0x4e0>)
 800656c:	e000      	b.n	8006570 <HAL_ADC_ConfigChannel+0x45c>
 800656e:	4a22      	ldr	r2, [pc, #136]	@ (80065f8 <HAL_ADC_ConfigChannel+0x4e4>)
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006576:	4619      	mov	r1, r3
 8006578:	4610      	mov	r0, r2
 800657a:	f7ff f8a2 	bl	80056c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800657e:	4b21      	ldr	r3, [pc, #132]	@ (8006604 <HAL_ADC_ConfigChannel+0x4f0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	099b      	lsrs	r3, r3, #6
 8006584:	4a20      	ldr	r2, [pc, #128]	@ (8006608 <HAL_ADC_ConfigChannel+0x4f4>)
 8006586:	fba2 2303 	umull	r2, r3, r2, r3
 800658a:	099b      	lsrs	r3, r3, #6
 800658c:	3301      	adds	r3, #1
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8006592:	e002      	b.n	800659a <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3b01      	subs	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1f9      	bne.n	8006594 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065a0:	e08f      	b.n	80066c2 <HAL_ADC_ConfigChannel+0x5ae>
 80065a2:	bf00      	nop
 80065a4:	47ff0000 	.word	0x47ff0000
 80065a8:	40022000 	.word	0x40022000
 80065ac:	04300002 	.word	0x04300002
 80065b0:	08600004 	.word	0x08600004
 80065b4:	0c900008 	.word	0x0c900008
 80065b8:	10c00010 	.word	0x10c00010
 80065bc:	14f00020 	.word	0x14f00020
 80065c0:	2a000400 	.word	0x2a000400
 80065c4:	2e300800 	.word	0x2e300800
 80065c8:	32601000 	.word	0x32601000
 80065cc:	43210000 	.word	0x43210000
 80065d0:	4b840000 	.word	0x4b840000
 80065d4:	4fb80000 	.word	0x4fb80000
 80065d8:	47520000 	.word	0x47520000
 80065dc:	36902000 	.word	0x36902000
 80065e0:	25b00200 	.word	0x25b00200
 80065e4:	21800100 	.word	0x21800100
 80065e8:	1d500080 	.word	0x1d500080
 80065ec:	19200040 	.word	0x19200040
 80065f0:	40022100 	.word	0x40022100
 80065f4:	40022300 	.word	0x40022300
 80065f8:	58026300 	.word	0x58026300
 80065fc:	58026000 	.word	0x58026000
 8006600:	cb840000 	.word	0xcb840000
 8006604:	24000080 	.word	0x24000080
 8006608:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a31      	ldr	r2, [pc, #196]	@ (80066d8 <HAL_ADC_ConfigChannel+0x5c4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d11e      	bne.n	8006654 <HAL_ADC_ConfigChannel+0x540>
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d119      	bne.n	8006654 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a2d      	ldr	r2, [pc, #180]	@ (80066dc <HAL_ADC_ConfigChannel+0x5c8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d14b      	bne.n	80066c2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a2c      	ldr	r2, [pc, #176]	@ (80066e0 <HAL_ADC_ConfigChannel+0x5cc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d004      	beq.n	800663e <HAL_ADC_ConfigChannel+0x52a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a2a      	ldr	r2, [pc, #168]	@ (80066e4 <HAL_ADC_ConfigChannel+0x5d0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d101      	bne.n	8006642 <HAL_ADC_ConfigChannel+0x52e>
 800663e:	4a2a      	ldr	r2, [pc, #168]	@ (80066e8 <HAL_ADC_ConfigChannel+0x5d4>)
 8006640:	e000      	b.n	8006644 <HAL_ADC_ConfigChannel+0x530>
 8006642:	4a2a      	ldr	r2, [pc, #168]	@ (80066ec <HAL_ADC_ConfigChannel+0x5d8>)
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800664a:	4619      	mov	r1, r3
 800664c:	4610      	mov	r0, r2
 800664e:	f7ff f838 	bl	80056c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006652:	e036      	b.n	80066c2 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a25      	ldr	r2, [pc, #148]	@ (80066f0 <HAL_ADC_ConfigChannel+0x5dc>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d131      	bne.n	80066c2 <HAL_ADC_ConfigChannel+0x5ae>
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d12c      	bne.n	80066c2 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1b      	ldr	r2, [pc, #108]	@ (80066dc <HAL_ADC_ConfigChannel+0x5c8>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d127      	bne.n	80066c2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1a      	ldr	r2, [pc, #104]	@ (80066e0 <HAL_ADC_ConfigChannel+0x5cc>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <HAL_ADC_ConfigChannel+0x572>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a18      	ldr	r2, [pc, #96]	@ (80066e4 <HAL_ADC_ConfigChannel+0x5d0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d101      	bne.n	800668a <HAL_ADC_ConfigChannel+0x576>
 8006686:	4a18      	ldr	r2, [pc, #96]	@ (80066e8 <HAL_ADC_ConfigChannel+0x5d4>)
 8006688:	e000      	b.n	800668c <HAL_ADC_ConfigChannel+0x578>
 800668a:	4a18      	ldr	r2, [pc, #96]	@ (80066ec <HAL_ADC_ConfigChannel+0x5d8>)
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f7ff f814 	bl	80056c2 <LL_ADC_SetCommonPathInternalCh>
 800669a:	e012      	b.n	80066c2 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a0:	f043 0220 	orr.w	r2, r3, #32
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80066ae:	e008      	b.n	80066c2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80066ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3734      	adds	r7, #52	@ 0x34
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd90      	pop	{r4, r7, pc}
 80066d6:	bf00      	nop
 80066d8:	c7520000 	.word	0xc7520000
 80066dc:	58026000 	.word	0x58026000
 80066e0:	40022000 	.word	0x40022000
 80066e4:	40022100 	.word	0x40022100
 80066e8:	40022300 	.word	0x40022300
 80066ec:	58026300 	.word	0x58026300
 80066f0:	cfb80000 	.word	0xcfb80000

080066f4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff f9f4 	bl	8005af8 <LL_ADC_REG_IsConversionOngoing>
 8006710:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff fa16 	bl	8005b48 <LL_ADC_INJ_IsConversionOngoing>
 800671c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8098 	beq.w	800685c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d02a      	beq.n	8006790 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	7d5b      	ldrb	r3, [r3, #21]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d126      	bne.n	8006790 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	7d1b      	ldrb	r3, [r3, #20]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d122      	bne.n	8006790 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800674a:	2301      	movs	r3, #1
 800674c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800674e:	e014      	b.n	800677a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	4a45      	ldr	r2, [pc, #276]	@ (8006868 <ADC_ConversionStop+0x174>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d90d      	bls.n	8006774 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675c:	f043 0210 	orr.w	r2, r3, #16
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006768:	f043 0201 	orr.w	r2, r3, #1
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e074      	b.n	800685e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	3301      	adds	r3, #1
 8006778:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006784:	2b40      	cmp	r3, #64	@ 0x40
 8006786:	d1e3      	bne.n	8006750 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2240      	movs	r2, #64	@ 0x40
 800678e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d014      	beq.n	80067c0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff f9ac 	bl	8005af8 <LL_ADC_REG_IsConversionOngoing>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00c      	beq.n	80067c0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff f969 	bl	8005a82 <LL_ADC_IsDisableOngoing>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff f988 	bl	8005ad0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d014      	beq.n	80067f0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff f9bc 	bl	8005b48 <LL_ADC_INJ_IsConversionOngoing>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00c      	beq.n	80067f0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff f951 	bl	8005a82 <LL_ADC_IsDisableOngoing>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d104      	bne.n	80067f0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff f998 	bl	8005b20 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d005      	beq.n	8006802 <ADC_ConversionStop+0x10e>
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d105      	bne.n	8006808 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80067fc:	230c      	movs	r3, #12
 80067fe:	617b      	str	r3, [r7, #20]
        break;
 8006800:	e005      	b.n	800680e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006802:	2308      	movs	r3, #8
 8006804:	617b      	str	r3, [r7, #20]
        break;
 8006806:	e002      	b.n	800680e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006808:	2304      	movs	r3, #4
 800680a:	617b      	str	r3, [r7, #20]
        break;
 800680c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800680e:	f7fe fef3 	bl	80055f8 <HAL_GetTick>
 8006812:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006814:	e01b      	b.n	800684e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006816:	f7fe feef 	bl	80055f8 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b05      	cmp	r3, #5
 8006822:	d914      	bls.n	800684e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	4013      	ands	r3, r2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00d      	beq.n	800684e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006836:	f043 0210 	orr.w	r2, r3, #16
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006842:	f043 0201 	orr.w	r2, r3, #1
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e007      	b.n	800685e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	4013      	ands	r3, r2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1dc      	bne.n	8006816 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	000cdbff 	.word	0x000cdbff

0800686c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff f8ef 	bl	8005a5c <LL_ADC_IsEnabled>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d16e      	bne.n	8006962 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	4b38      	ldr	r3, [pc, #224]	@ (800696c <ADC_Enable+0x100>)
 800688c:	4013      	ands	r3, r2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00d      	beq.n	80068ae <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006896:	f043 0210 	orr.w	r2, r3, #16
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a2:	f043 0201 	orr.w	r2, r3, #1
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e05a      	b.n	8006964 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff f8aa 	bl	8005a0c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80068b8:	f7fe fe9e 	bl	80055f8 <HAL_GetTick>
 80068bc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006970 <ADC_Enable+0x104>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <ADC_Enable+0x66>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a29      	ldr	r2, [pc, #164]	@ (8006974 <ADC_Enable+0x108>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d101      	bne.n	80068d6 <ADC_Enable+0x6a>
 80068d2:	4b29      	ldr	r3, [pc, #164]	@ (8006978 <ADC_Enable+0x10c>)
 80068d4:	e000      	b.n	80068d8 <ADC_Enable+0x6c>
 80068d6:	4b29      	ldr	r3, [pc, #164]	@ (800697c <ADC_Enable+0x110>)
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff f83b 	bl	8005954 <LL_ADC_GetMultimode>
 80068de:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a23      	ldr	r2, [pc, #140]	@ (8006974 <ADC_Enable+0x108>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d002      	beq.n	80068f0 <ADC_Enable+0x84>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	e000      	b.n	80068f2 <ADC_Enable+0x86>
 80068f0:	4b1f      	ldr	r3, [pc, #124]	@ (8006970 <ADC_Enable+0x104>)
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6812      	ldr	r2, [r2, #0]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d02c      	beq.n	8006954 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d130      	bne.n	8006962 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006900:	e028      	b.n	8006954 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff f8a8 	bl	8005a5c <LL_ADC_IsEnabled>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d104      	bne.n	800691c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff f878 	bl	8005a0c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800691c:	f7fe fe6c 	bl	80055f8 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d914      	bls.n	8006954 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b01      	cmp	r3, #1
 8006936:	d00d      	beq.n	8006954 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693c:	f043 0210 	orr.w	r2, r3, #16
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006948:	f043 0201 	orr.w	r2, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e007      	b.n	8006964 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b01      	cmp	r3, #1
 8006960:	d1cf      	bne.n	8006902 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	8000003f 	.word	0x8000003f
 8006970:	40022000 	.word	0x40022000
 8006974:	40022100 	.word	0x40022100
 8006978:	40022300 	.word	0x40022300
 800697c:	58026300 	.word	0x58026300

08006980 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff f878 	bl	8005a82 <LL_ADC_IsDisableOngoing>
 8006992:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff f85f 	bl	8005a5c <LL_ADC_IsEnabled>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d047      	beq.n	8006a34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d144      	bne.n	8006a34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 030d 	and.w	r3, r3, #13
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d10c      	bne.n	80069d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff f839 	bl	8005a34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2203      	movs	r2, #3
 80069c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80069ca:	f7fe fe15 	bl	80055f8 <HAL_GetTick>
 80069ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069d0:	e029      	b.n	8006a26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d6:	f043 0210 	orr.w	r2, r3, #16
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e2:	f043 0201 	orr.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e023      	b.n	8006a36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80069ee:	f7fe fe03 	bl	80055f8 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d914      	bls.n	8006a26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00d      	beq.n	8006a26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0e:	f043 0210 	orr.w	r2, r3, #16
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a1a:	f043 0201 	orr.w	r2, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e007      	b.n	8006a36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1dc      	bne.n	80069ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a50:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d14b      	bne.n	8006af0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0308 	and.w	r3, r3, #8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d021      	beq.n	8006ab6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fe fecb 	bl	8005812 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d032      	beq.n	8006ae8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d12b      	bne.n	8006ae8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d11f      	bne.n	8006ae8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aac:	f043 0201 	orr.w	r2, r3, #1
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	655a      	str	r2, [r3, #84]	@ 0x54
 8006ab4:	e018      	b.n	8006ae8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f003 0303 	and.w	r3, r3, #3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d111      	bne.n	8006ae8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d105      	bne.n	8006ae8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae0:	f043 0201 	orr.w	r2, r3, #1
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f7fc f8e3 	bl	8002cb4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006aee:	e00e      	b.n	8006b0e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f7fc f8ef 	bl	8002ce0 <HAL_ADC_ErrorCallback>
}
 8006b02:	e004      	b.n	8006b0e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff faeb 	bl	8006100 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b2a:	bf00      	nop
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b50:	f043 0204 	orr.w	r2, r3, #4
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7fc f8c1 	bl	8002ce0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b5e:	bf00      	nop
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a7a      	ldr	r2, [pc, #488]	@ (8006d60 <ADC_ConfigureBoostMode+0x1f8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d004      	beq.n	8006b84 <ADC_ConfigureBoostMode+0x1c>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a79      	ldr	r2, [pc, #484]	@ (8006d64 <ADC_ConfigureBoostMode+0x1fc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d109      	bne.n	8006b98 <ADC_ConfigureBoostMode+0x30>
 8006b84:	4b78      	ldr	r3, [pc, #480]	@ (8006d68 <ADC_ConfigureBoostMode+0x200>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	bf14      	ite	ne
 8006b90:	2301      	movne	r3, #1
 8006b92:	2300      	moveq	r3, #0
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	e008      	b.n	8006baa <ADC_ConfigureBoostMode+0x42>
 8006b98:	4b74      	ldr	r3, [pc, #464]	@ (8006d6c <ADC_ConfigureBoostMode+0x204>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	bf14      	ite	ne
 8006ba4:	2301      	movne	r3, #1
 8006ba6:	2300      	moveq	r3, #0
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01c      	beq.n	8006be8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006bae:	f008 f911 	bl	800edd4 <HAL_RCC_GetHCLKFreq>
 8006bb2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bbc:	d010      	beq.n	8006be0 <ADC_ConfigureBoostMode+0x78>
 8006bbe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bc2:	d873      	bhi.n	8006cac <ADC_ConfigureBoostMode+0x144>
 8006bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc8:	d002      	beq.n	8006bd0 <ADC_ConfigureBoostMode+0x68>
 8006bca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bce:	d16d      	bne.n	8006cac <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	0c1b      	lsrs	r3, r3, #16
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bdc:	60fb      	str	r3, [r7, #12]
        break;
 8006bde:	e068      	b.n	8006cb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	089b      	lsrs	r3, r3, #2
 8006be4:	60fb      	str	r3, [r7, #12]
        break;
 8006be6:	e064      	b.n	8006cb2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006be8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006bec:	f04f 0100 	mov.w	r1, #0
 8006bf0:	f009 fb98 	bl	8010324 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bf4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006bfe:	d051      	beq.n	8006ca4 <ADC_ConfigureBoostMode+0x13c>
 8006c00:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006c04:	d854      	bhi.n	8006cb0 <ADC_ConfigureBoostMode+0x148>
 8006c06:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006c0a:	d047      	beq.n	8006c9c <ADC_ConfigureBoostMode+0x134>
 8006c0c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006c10:	d84e      	bhi.n	8006cb0 <ADC_ConfigureBoostMode+0x148>
 8006c12:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006c16:	d03d      	beq.n	8006c94 <ADC_ConfigureBoostMode+0x12c>
 8006c18:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006c1c:	d848      	bhi.n	8006cb0 <ADC_ConfigureBoostMode+0x148>
 8006c1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c22:	d033      	beq.n	8006c8c <ADC_ConfigureBoostMode+0x124>
 8006c24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c28:	d842      	bhi.n	8006cb0 <ADC_ConfigureBoostMode+0x148>
 8006c2a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006c2e:	d029      	beq.n	8006c84 <ADC_ConfigureBoostMode+0x11c>
 8006c30:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006c34:	d83c      	bhi.n	8006cb0 <ADC_ConfigureBoostMode+0x148>
 8006c36:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c3a:	d01a      	beq.n	8006c72 <ADC_ConfigureBoostMode+0x10a>
 8006c3c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c40:	d836      	bhi.n	8006cb0 <ADC_ConfigureBoostMode+0x148>
 8006c42:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006c46:	d014      	beq.n	8006c72 <ADC_ConfigureBoostMode+0x10a>
 8006c48:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006c4c:	d830      	bhi.n	8006cb0 <ADC_ConfigureBoostMode+0x148>
 8006c4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c52:	d00e      	beq.n	8006c72 <ADC_ConfigureBoostMode+0x10a>
 8006c54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c58:	d82a      	bhi.n	8006cb0 <ADC_ConfigureBoostMode+0x148>
 8006c5a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c5e:	d008      	beq.n	8006c72 <ADC_ConfigureBoostMode+0x10a>
 8006c60:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c64:	d824      	bhi.n	8006cb0 <ADC_ConfigureBoostMode+0x148>
 8006c66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c6a:	d002      	beq.n	8006c72 <ADC_ConfigureBoostMode+0x10a>
 8006c6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c70:	d11e      	bne.n	8006cb0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	0c9b      	lsrs	r3, r3, #18
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c80:	60fb      	str	r3, [r7, #12]
        break;
 8006c82:	e016      	b.n	8006cb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	091b      	lsrs	r3, r3, #4
 8006c88:	60fb      	str	r3, [r7, #12]
        break;
 8006c8a:	e012      	b.n	8006cb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	095b      	lsrs	r3, r3, #5
 8006c90:	60fb      	str	r3, [r7, #12]
        break;
 8006c92:	e00e      	b.n	8006cb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	099b      	lsrs	r3, r3, #6
 8006c98:	60fb      	str	r3, [r7, #12]
        break;
 8006c9a:	e00a      	b.n	8006cb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	09db      	lsrs	r3, r3, #7
 8006ca0:	60fb      	str	r3, [r7, #12]
        break;
 8006ca2:	e006      	b.n	8006cb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	0a1b      	lsrs	r3, r3, #8
 8006ca8:	60fb      	str	r3, [r7, #12]
        break;
 8006caa:	e002      	b.n	8006cb2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006cac:	bf00      	nop
 8006cae:	e000      	b.n	8006cb2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006cb0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006cb2:	f7fe fcd1 	bl	8005658 <HAL_GetREVID>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d815      	bhi.n	8006cec <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8006d70 <ADC_ConfigureBoostMode+0x208>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d908      	bls.n	8006cda <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cd6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006cd8:	e03e      	b.n	8006d58 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ce8:	609a      	str	r2, [r3, #8]
}
 8006cea:	e035      	b.n	8006d58 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	085b      	lsrs	r3, r3, #1
 8006cf0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8006d74 <ADC_ConfigureBoostMode+0x20c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d808      	bhi.n	8006d0c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006d08:	609a      	str	r2, [r3, #8]
}
 8006d0a:	e025      	b.n	8006d58 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8006d78 <ADC_ConfigureBoostMode+0x210>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d80a      	bhi.n	8006d2a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d26:	609a      	str	r2, [r3, #8]
}
 8006d28:	e016      	b.n	8006d58 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4a13      	ldr	r2, [pc, #76]	@ (8006d7c <ADC_ConfigureBoostMode+0x214>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d80a      	bhi.n	8006d48 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d44:	609a      	str	r2, [r3, #8]
}
 8006d46:	e007      	b.n	8006d58 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006d56:	609a      	str	r2, [r3, #8]
}
 8006d58:	bf00      	nop
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40022000 	.word	0x40022000
 8006d64:	40022100 	.word	0x40022100
 8006d68:	40022300 	.word	0x40022300
 8006d6c:	58026300 	.word	0x58026300
 8006d70:	01312d00 	.word	0x01312d00
 8006d74:	005f5e10 	.word	0x005f5e10
 8006d78:	00bebc20 	.word	0x00bebc20
 8006d7c:	017d7840 	.word	0x017d7840

08006d80 <LL_ADC_IsEnabled>:
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <LL_ADC_IsEnabled+0x18>
 8006d94:	2301      	movs	r3, #1
 8006d96:	e000      	b.n	8006d9a <LL_ADC_IsEnabled+0x1a>
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <LL_ADC_REG_IsConversionOngoing>:
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d101      	bne.n	8006dbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e000      	b.n	8006dc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006dcc:	b590      	push	{r4, r7, lr}
 8006dce:	b09f      	sub	sp, #124	@ 0x7c
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d101      	bne.n	8006dea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006de6:	2302      	movs	r3, #2
 8006de8:	e0be      	b.n	8006f68 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006df2:	2300      	movs	r3, #0
 8006df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006df6:	2300      	movs	r3, #0
 8006df8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a5c      	ldr	r2, [pc, #368]	@ (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d102      	bne.n	8006e0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006e04:	4b5b      	ldr	r3, [pc, #364]	@ (8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006e06:	60bb      	str	r3, [r7, #8]
 8006e08:	e001      	b.n	8006e0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10b      	bne.n	8006e2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e18:	f043 0220 	orr.w	r2, r3, #32
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e09d      	b.n	8006f68 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff ffb9 	bl	8006da6 <LL_ADC_REG_IsConversionOngoing>
 8006e34:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff ffb3 	bl	8006da6 <LL_ADC_REG_IsConversionOngoing>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d17f      	bne.n	8006f46 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006e46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d17c      	bne.n	8006f46 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a47      	ldr	r2, [pc, #284]	@ (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a46      	ldr	r2, [pc, #280]	@ (8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d101      	bne.n	8006e64 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006e60:	4b45      	ldr	r3, [pc, #276]	@ (8006f78 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e62:	e000      	b.n	8006e66 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006e64:	4b45      	ldr	r3, [pc, #276]	@ (8006f7c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e66:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d039      	beq.n	8006ee4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e80:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a3a      	ldr	r2, [pc, #232]	@ (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d004      	beq.n	8006e96 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a38      	ldr	r2, [pc, #224]	@ (8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d10e      	bne.n	8006eb4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006e96:	4836      	ldr	r0, [pc, #216]	@ (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e98:	f7ff ff72 	bl	8006d80 <LL_ADC_IsEnabled>
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	4835      	ldr	r0, [pc, #212]	@ (8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006ea0:	f7ff ff6e 	bl	8006d80 <LL_ADC_IsEnabled>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	4323      	orrs	r3, r4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	bf0c      	ite	eq
 8006eac:	2301      	moveq	r3, #1
 8006eae:	2300      	movne	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	e008      	b.n	8006ec6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006eb4:	4832      	ldr	r0, [pc, #200]	@ (8006f80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006eb6:	f7ff ff63 	bl	8006d80 <LL_ADC_IsEnabled>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d047      	beq.n	8006f5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ecc:	689a      	ldr	r2, [r3, #8]
 8006ece:	4b2d      	ldr	r3, [pc, #180]	@ (8006f84 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	6811      	ldr	r1, [r2, #0]
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	6892      	ldr	r2, [r2, #8]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	431a      	orrs	r2, r3
 8006ede:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ee2:	e03a      	b.n	8006f5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006eec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d004      	beq.n	8006f04 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a1d      	ldr	r2, [pc, #116]	@ (8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d10e      	bne.n	8006f22 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006f04:	481a      	ldr	r0, [pc, #104]	@ (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f06:	f7ff ff3b 	bl	8006d80 <LL_ADC_IsEnabled>
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	4819      	ldr	r0, [pc, #100]	@ (8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f0e:	f7ff ff37 	bl	8006d80 <LL_ADC_IsEnabled>
 8006f12:	4603      	mov	r3, r0
 8006f14:	4323      	orrs	r3, r4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bf0c      	ite	eq
 8006f1a:	2301      	moveq	r3, #1
 8006f1c:	2300      	movne	r3, #0
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	e008      	b.n	8006f34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006f22:	4817      	ldr	r0, [pc, #92]	@ (8006f80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006f24:	f7ff ff2c 	bl	8006d80 <LL_ADC_IsEnabled>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	bf0c      	ite	eq
 8006f2e:	2301      	moveq	r3, #1
 8006f30:	2300      	movne	r3, #0
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d010      	beq.n	8006f5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	4b11      	ldr	r3, [pc, #68]	@ (8006f84 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006f3e:	4013      	ands	r3, r2
 8006f40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f42:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f44:	e009      	b.n	8006f5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f4a:	f043 0220 	orr.w	r2, r3, #32
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8006f58:	e000      	b.n	8006f5c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f5a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8006f64:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	377c      	adds	r7, #124	@ 0x7c
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd90      	pop	{r4, r7, pc}
 8006f70:	40022000 	.word	0x40022000
 8006f74:	40022100 	.word	0x40022100
 8006f78:	40022300 	.word	0x40022300
 8006f7c:	58026300 	.word	0x58026300
 8006f80:	58026000 	.word	0x58026000
 8006f84:	fffff0e0 	.word	0xfffff0e0

08006f88 <__NVIC_SetPriorityGrouping>:
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f98:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006fb0:	4b06      	ldr	r3, [pc, #24]	@ (8006fcc <__NVIC_SetPriorityGrouping+0x44>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fb6:	4a04      	ldr	r2, [pc, #16]	@ (8006fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	60d3      	str	r3, [r2, #12]
}
 8006fbc:	bf00      	nop
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	e000ed00 	.word	0xe000ed00
 8006fcc:	05fa0000 	.word	0x05fa0000

08006fd0 <__NVIC_GetPriorityGrouping>:
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fd4:	4b04      	ldr	r3, [pc, #16]	@ (8006fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	0a1b      	lsrs	r3, r3, #8
 8006fda:	f003 0307 	and.w	r3, r3, #7
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	e000ed00 	.word	0xe000ed00

08006fec <__NVIC_EnableIRQ>:
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	db0b      	blt.n	8007016 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ffe:	88fb      	ldrh	r3, [r7, #6]
 8007000:	f003 021f 	and.w	r2, r3, #31
 8007004:	4907      	ldr	r1, [pc, #28]	@ (8007024 <__NVIC_EnableIRQ+0x38>)
 8007006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	2001      	movs	r0, #1
 800700e:	fa00 f202 	lsl.w	r2, r0, r2
 8007012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007016:	bf00      	nop
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	e000e100 	.word	0xe000e100

08007028 <__NVIC_SetPriority>:
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	6039      	str	r1, [r7, #0]
 8007032:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007038:	2b00      	cmp	r3, #0
 800703a:	db0a      	blt.n	8007052 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	b2da      	uxtb	r2, r3
 8007040:	490c      	ldr	r1, [pc, #48]	@ (8007074 <__NVIC_SetPriority+0x4c>)
 8007042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007046:	0112      	lsls	r2, r2, #4
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	440b      	add	r3, r1
 800704c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007050:	e00a      	b.n	8007068 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	b2da      	uxtb	r2, r3
 8007056:	4908      	ldr	r1, [pc, #32]	@ (8007078 <__NVIC_SetPriority+0x50>)
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	3b04      	subs	r3, #4
 8007060:	0112      	lsls	r2, r2, #4
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	440b      	add	r3, r1
 8007066:	761a      	strb	r2, [r3, #24]
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	e000e100 	.word	0xe000e100
 8007078:	e000ed00 	.word	0xe000ed00

0800707c <NVIC_EncodePriority>:
{
 800707c:	b480      	push	{r7}
 800707e:	b089      	sub	sp, #36	@ 0x24
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f003 0307 	and.w	r3, r3, #7
 800708e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	f1c3 0307 	rsb	r3, r3, #7
 8007096:	2b04      	cmp	r3, #4
 8007098:	bf28      	it	cs
 800709a:	2304      	movcs	r3, #4
 800709c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	3304      	adds	r3, #4
 80070a2:	2b06      	cmp	r3, #6
 80070a4:	d902      	bls.n	80070ac <NVIC_EncodePriority+0x30>
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	3b03      	subs	r3, #3
 80070aa:	e000      	b.n	80070ae <NVIC_EncodePriority+0x32>
 80070ac:	2300      	movs	r3, #0
 80070ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070b0:	f04f 32ff 	mov.w	r2, #4294967295
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ba:	43da      	mvns	r2, r3
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	401a      	ands	r2, r3
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070c4:	f04f 31ff 	mov.w	r1, #4294967295
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	fa01 f303 	lsl.w	r3, r1, r3
 80070ce:	43d9      	mvns	r1, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070d4:	4313      	orrs	r3, r2
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3724      	adds	r7, #36	@ 0x24
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b082      	sub	sp, #8
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7ff ff4c 	bl	8006f88 <__NVIC_SetPriorityGrouping>
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007106:	f7ff ff63 	bl	8006fd0 <__NVIC_GetPriorityGrouping>
 800710a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	68b9      	ldr	r1, [r7, #8]
 8007110:	6978      	ldr	r0, [r7, #20]
 8007112:	f7ff ffb3 	bl	800707c <NVIC_EncodePriority>
 8007116:	4602      	mov	r2, r0
 8007118:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800711c:	4611      	mov	r1, r2
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff ff82 	bl	8007028 <__NVIC_SetPriority>
}
 8007124:	bf00      	nop
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff ff56 	bl	8006fec <__NVIC_EnableIRQ>
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800714c:	f3bf 8f5f 	dmb	sy
}
 8007150:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007152:	4b07      	ldr	r3, [pc, #28]	@ (8007170 <HAL_MPU_Disable+0x28>)
 8007154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007156:	4a06      	ldr	r2, [pc, #24]	@ (8007170 <HAL_MPU_Disable+0x28>)
 8007158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800715c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800715e:	4b05      	ldr	r3, [pc, #20]	@ (8007174 <HAL_MPU_Disable+0x2c>)
 8007160:	2200      	movs	r2, #0
 8007162:	605a      	str	r2, [r3, #4]
}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	e000ed00 	.word	0xe000ed00
 8007174:	e000ed90 	.word	0xe000ed90

08007178 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007180:	4a0b      	ldr	r2, [pc, #44]	@ (80071b0 <HAL_MPU_Enable+0x38>)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f043 0301 	orr.w	r3, r3, #1
 8007188:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800718a:	4b0a      	ldr	r3, [pc, #40]	@ (80071b4 <HAL_MPU_Enable+0x3c>)
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	4a09      	ldr	r2, [pc, #36]	@ (80071b4 <HAL_MPU_Enable+0x3c>)
 8007190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007194:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007196:	f3bf 8f4f 	dsb	sy
}
 800719a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800719c:	f3bf 8f6f 	isb	sy
}
 80071a0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	e000ed90 	.word	0xe000ed90
 80071b4:	e000ed00 	.word	0xe000ed00

080071b8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	785a      	ldrb	r2, [r3, #1]
 80071c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007234 <HAL_MPU_ConfigRegion+0x7c>)
 80071c6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80071c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007234 <HAL_MPU_ConfigRegion+0x7c>)
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	4a19      	ldr	r2, [pc, #100]	@ (8007234 <HAL_MPU_ConfigRegion+0x7c>)
 80071ce:	f023 0301 	bic.w	r3, r3, #1
 80071d2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80071d4:	4a17      	ldr	r2, [pc, #92]	@ (8007234 <HAL_MPU_ConfigRegion+0x7c>)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7b1b      	ldrb	r3, [r3, #12]
 80071e0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	7adb      	ldrb	r3, [r3, #11]
 80071e6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80071e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	7a9b      	ldrb	r3, [r3, #10]
 80071ee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80071f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	7b5b      	ldrb	r3, [r3, #13]
 80071f6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80071f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	7b9b      	ldrb	r3, [r3, #14]
 80071fe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007200:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7bdb      	ldrb	r3, [r3, #15]
 8007206:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007208:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7a5b      	ldrb	r3, [r3, #9]
 800720e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007210:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7a1b      	ldrb	r3, [r3, #8]
 8007216:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007218:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	7812      	ldrb	r2, [r2, #0]
 800721e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007220:	4a04      	ldr	r2, [pc, #16]	@ (8007234 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007222:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007224:	6113      	str	r3, [r2, #16]
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	e000ed90 	.word	0xe000ed90

08007238 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e069      	b.n	800731e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fb fe32 	bl	8002ec0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6819      	ldr	r1, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	4b2a      	ldr	r3, [pc, #168]	@ (8007328 <HAL_DCMI_Init+0xf0>)
 800727e:	400b      	ands	r3, r1
 8007280:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6819      	ldr	r1, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8007296:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80072a2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80072ae:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80072ba:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80072c6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d112      	bne.n	80072fe <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	7f1b      	ldrb	r3, [r3, #28]
 80072dc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	7f5b      	ldrb	r3, [r3, #29]
 80072e2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80072e4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	7f9b      	ldrb	r3, [r3, #30]
 80072ea:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80072ec:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	7fdb      	ldrb	r3, [r3, #31]
 80072f4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80072fa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80072fc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f042 021e 	orr.w	r2, r2, #30
 800730c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	ffe0f007 	.word	0xffe0f007

0800732c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af02      	add	r7, sp, #8
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_DCMI_Start_DMA+0x1c>
 8007344:	2302      	movs	r3, #2
 8007346:	e0ab      	b.n	80074a0 <HAL_DCMI_Start_DMA+0x174>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007366:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0202 	bic.w	r2, r2, #2
 8007376:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6819      	ldr	r1, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	430a      	orrs	r2, r1
 8007386:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800738c:	4a46      	ldr	r2, [pc, #280]	@ (80074a8 <HAL_DCMI_Start_DMA+0x17c>)
 800738e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007394:	4a45      	ldr	r2, [pc, #276]	@ (80074ac <HAL_DCMI_Start_DMA+0x180>)
 8007396:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800739c:	2200      	movs	r2, #0
 800739e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073be:	d219      	bcs.n	80073f4 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3328      	adds	r3, #40	@ 0x28
 80073ca:	4619      	mov	r1, r3
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	f000 fd70 	bl	8007eb4 <HAL_DMA_Start_IT>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d055      	beq.n	8007486 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2240      	movs	r2, #64	@ 0x40
 80073de:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e055      	b.n	80074a0 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073f8:	4a2b      	ldr	r2, [pc, #172]	@ (80074a8 <HAL_DCMI_Start_DMA+0x17c>)
 80073fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800740e:	e009      	b.n	8007424 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007414:	085a      	lsrs	r2, r3, #1
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741e:	005a      	lsls	r2, r3, #1
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800742c:	d2f0      	bcs.n	8007410 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007432:	1e9a      	subs	r2, r3, #2
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	4413      	add	r3, r2
 800744a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3328      	adds	r3, #40	@ 0x28
 8007456:	4619      	mov	r1, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	f003 fa35 	bl	800a8d0 <HAL_DMAEx_MultiBufferStart_IT>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00c      	beq.n	8007486 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2240      	movs	r2, #64	@ 0x40
 8007470:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e00c      	b.n	80074a0 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f042 0201 	orr.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	0800769d 	.word	0x0800769d
 80074ac:	080077c3 	.word	0x080077c3

080074b0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80074b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007568 <HAL_DCMI_Stop+0xb8>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a2b      	ldr	r2, [pc, #172]	@ (800756c <HAL_DCMI_Stop+0xbc>)
 80074be:	fba2 2303 	umull	r2, r3, r2, r3
 80074c2:	0a5b      	lsrs	r3, r3, #9
 80074c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80074c8:	fb02 f303 	mul.w	r3, r2, r3
 80074cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_DCMI_Stop+0x30>
 80074dc:	2302      	movs	r3, #2
 80074de:	e03f      	b.n	8007560 <HAL_DCMI_Stop+0xb0>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0201 	bic.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3b01      	subs	r3, #1
 8007504:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d108      	bne.n	800751e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007510:	f043 0220 	orr.w	r2, r3, #32
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	72fb      	strb	r3, [r7, #11]
      break;
 800751c:	e006      	b.n	800752c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e9      	bne.n	8007500 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800753a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007540:	4618      	mov	r0, r3
 8007542:	f000 ff21 	bl	8008388 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 800755e:	7afb      	ldrb	r3, [r7, #11]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	24000080 	.word	0x24000080
 800756c:	10624dd3 	.word	0x10624dd3

08007570 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f003 0304 	and.w	r3, r3, #4
 8007586:	2b00      	cmp	r3, #0
 8007588:	d016      	beq.n	80075b8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2204      	movs	r2, #4
 8007590:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007596:	f043 0202 	orr.w	r2, r3, #2
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2204      	movs	r2, #4
 80075a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075aa:	4a31      	ldr	r2, [pc, #196]	@ (8007670 <HAL_DCMI_IRQHandler+0x100>)
 80075ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 fa06 	bl	80089c4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d016      	beq.n	80075f0 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2202      	movs	r2, #2
 80075c8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ce:	f043 0201 	orr.w	r2, r3, #1
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2204      	movs	r2, #4
 80075da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075e2:	4a23      	ldr	r2, [pc, #140]	@ (8007670 <HAL_DCMI_IRQHandler+0x100>)
 80075e4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ea:	4618      	mov	r0, r3
 80075ec:	f001 f9ea 	bl	80089c4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f003 0310 	and.w	r3, r3, #16
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d006      	beq.n	8007608 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2210      	movs	r2, #16
 8007600:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f840 	bl	8007688 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f003 0308 	and.w	r3, r3, #8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d006      	beq.n	8007620 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2208      	movs	r2, #8
 8007618:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7fb f8e6 	bl	80027ec <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d01d      	beq.n	8007666 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b02      	cmp	r3, #2
 8007636:	d107      	bne.n	8007648 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 021e 	bic.w	r2, r2, #30
 8007646:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 0201 	bic.w	r2, r2, #1
 8007656:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2201      	movs	r2, #1
 800765e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fb f8f7 	bl	8002854 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	080077c3 	.word	0x080077c3

08007674 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d043      	beq.n	800773a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076be:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d118      	bne.n	80076fe <DCMI_DMAXferCplt+0x62>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d015      	beq.n	80076fe <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e4:	00da      	lsls	r2, r3, #3
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	4413      	add	r3, r2
 80076ea:	2200      	movs	r2, #0
 80076ec:	4619      	mov	r1, r3
 80076ee:	f003 fc4d 	bl	800af8c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f6:	1e5a      	subs	r2, r3, #1
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80076fc:	e044      	b.n	8007788 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d13c      	bne.n	8007788 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007720:	00da      	lsls	r2, r3, #3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	4413      	add	r3, r2
 8007726:	2201      	movs	r2, #1
 8007728:	4619      	mov	r1, r3
 800772a:	f003 fc2f 	bl	800af8c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007732:	1e5a      	subs	r2, r3, #1
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	639a      	str	r2, [r3, #56]	@ 0x38
 8007738:	e026      	b.n	8007788 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d006      	beq.n	8007758 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007754:	60da      	str	r2, [r3, #12]
 8007756:	e017      	b.n	8007788 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10f      	bne.n	8007788 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800776c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007772:	0099      	lsls	r1, r3, #2
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	440a      	add	r2, r1
 800777e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007790:	429a      	cmp	r2, r3
 8007792:	d112      	bne.n	80077ba <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0201 	orr.w	r2, r2, #1
 80077a2:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d103      	bne.n	80077ba <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 80077ba:	bf00      	nop
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ce:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d009      	beq.n	80077ee <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f7ff ff40 	bl	8007674 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80077f4:	bf00      	nop
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007804:	f7fd fef8 	bl	80055f8 <HAL_GetTick>
 8007808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e316      	b.n	8007e42 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a66      	ldr	r2, [pc, #408]	@ (80079b4 <HAL_DMA_Init+0x1b8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d04a      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a65      	ldr	r2, [pc, #404]	@ (80079b8 <HAL_DMA_Init+0x1bc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d045      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a63      	ldr	r2, [pc, #396]	@ (80079bc <HAL_DMA_Init+0x1c0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d040      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a62      	ldr	r2, [pc, #392]	@ (80079c0 <HAL_DMA_Init+0x1c4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d03b      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a60      	ldr	r2, [pc, #384]	@ (80079c4 <HAL_DMA_Init+0x1c8>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d036      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a5f      	ldr	r2, [pc, #380]	@ (80079c8 <HAL_DMA_Init+0x1cc>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d031      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a5d      	ldr	r2, [pc, #372]	@ (80079cc <HAL_DMA_Init+0x1d0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d02c      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a5c      	ldr	r2, [pc, #368]	@ (80079d0 <HAL_DMA_Init+0x1d4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d027      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a5a      	ldr	r2, [pc, #360]	@ (80079d4 <HAL_DMA_Init+0x1d8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d022      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a59      	ldr	r2, [pc, #356]	@ (80079d8 <HAL_DMA_Init+0x1dc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d01d      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a57      	ldr	r2, [pc, #348]	@ (80079dc <HAL_DMA_Init+0x1e0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d018      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a56      	ldr	r2, [pc, #344]	@ (80079e0 <HAL_DMA_Init+0x1e4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d013      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a54      	ldr	r2, [pc, #336]	@ (80079e4 <HAL_DMA_Init+0x1e8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00e      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a53      	ldr	r2, [pc, #332]	@ (80079e8 <HAL_DMA_Init+0x1ec>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d009      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a51      	ldr	r2, [pc, #324]	@ (80079ec <HAL_DMA_Init+0x1f0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d004      	beq.n	80078b4 <HAL_DMA_Init+0xb8>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a50      	ldr	r2, [pc, #320]	@ (80079f0 <HAL_DMA_Init+0x1f4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d101      	bne.n	80078b8 <HAL_DMA_Init+0xbc>
 80078b4:	2301      	movs	r3, #1
 80078b6:	e000      	b.n	80078ba <HAL_DMA_Init+0xbe>
 80078b8:	2300      	movs	r3, #0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 813b 	beq.w	8007b36 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a37      	ldr	r2, [pc, #220]	@ (80079b4 <HAL_DMA_Init+0x1b8>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d04a      	beq.n	8007970 <HAL_DMA_Init+0x174>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a36      	ldr	r2, [pc, #216]	@ (80079b8 <HAL_DMA_Init+0x1bc>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d045      	beq.n	8007970 <HAL_DMA_Init+0x174>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a34      	ldr	r2, [pc, #208]	@ (80079bc <HAL_DMA_Init+0x1c0>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d040      	beq.n	8007970 <HAL_DMA_Init+0x174>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a33      	ldr	r2, [pc, #204]	@ (80079c0 <HAL_DMA_Init+0x1c4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d03b      	beq.n	8007970 <HAL_DMA_Init+0x174>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a31      	ldr	r2, [pc, #196]	@ (80079c4 <HAL_DMA_Init+0x1c8>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d036      	beq.n	8007970 <HAL_DMA_Init+0x174>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a30      	ldr	r2, [pc, #192]	@ (80079c8 <HAL_DMA_Init+0x1cc>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d031      	beq.n	8007970 <HAL_DMA_Init+0x174>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a2e      	ldr	r2, [pc, #184]	@ (80079cc <HAL_DMA_Init+0x1d0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d02c      	beq.n	8007970 <HAL_DMA_Init+0x174>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a2d      	ldr	r2, [pc, #180]	@ (80079d0 <HAL_DMA_Init+0x1d4>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d027      	beq.n	8007970 <HAL_DMA_Init+0x174>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a2b      	ldr	r2, [pc, #172]	@ (80079d4 <HAL_DMA_Init+0x1d8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d022      	beq.n	8007970 <HAL_DMA_Init+0x174>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a2a      	ldr	r2, [pc, #168]	@ (80079d8 <HAL_DMA_Init+0x1dc>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d01d      	beq.n	8007970 <HAL_DMA_Init+0x174>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a28      	ldr	r2, [pc, #160]	@ (80079dc <HAL_DMA_Init+0x1e0>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d018      	beq.n	8007970 <HAL_DMA_Init+0x174>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a27      	ldr	r2, [pc, #156]	@ (80079e0 <HAL_DMA_Init+0x1e4>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d013      	beq.n	8007970 <HAL_DMA_Init+0x174>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a25      	ldr	r2, [pc, #148]	@ (80079e4 <HAL_DMA_Init+0x1e8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00e      	beq.n	8007970 <HAL_DMA_Init+0x174>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a24      	ldr	r2, [pc, #144]	@ (80079e8 <HAL_DMA_Init+0x1ec>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d009      	beq.n	8007970 <HAL_DMA_Init+0x174>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a22      	ldr	r2, [pc, #136]	@ (80079ec <HAL_DMA_Init+0x1f0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d004      	beq.n	8007970 <HAL_DMA_Init+0x174>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a21      	ldr	r2, [pc, #132]	@ (80079f0 <HAL_DMA_Init+0x1f4>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d108      	bne.n	8007982 <HAL_DMA_Init+0x186>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0201 	bic.w	r2, r2, #1
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	e007      	b.n	8007992 <HAL_DMA_Init+0x196>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 0201 	bic.w	r2, r2, #1
 8007990:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007992:	e02f      	b.n	80079f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007994:	f7fd fe30 	bl	80055f8 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b05      	cmp	r3, #5
 80079a0:	d928      	bls.n	80079f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2203      	movs	r2, #3
 80079ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e246      	b.n	8007e42 <HAL_DMA_Init+0x646>
 80079b4:	40020010 	.word	0x40020010
 80079b8:	40020028 	.word	0x40020028
 80079bc:	40020040 	.word	0x40020040
 80079c0:	40020058 	.word	0x40020058
 80079c4:	40020070 	.word	0x40020070
 80079c8:	40020088 	.word	0x40020088
 80079cc:	400200a0 	.word	0x400200a0
 80079d0:	400200b8 	.word	0x400200b8
 80079d4:	40020410 	.word	0x40020410
 80079d8:	40020428 	.word	0x40020428
 80079dc:	40020440 	.word	0x40020440
 80079e0:	40020458 	.word	0x40020458
 80079e4:	40020470 	.word	0x40020470
 80079e8:	40020488 	.word	0x40020488
 80079ec:	400204a0 	.word	0x400204a0
 80079f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1c8      	bne.n	8007994 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	4b83      	ldr	r3, [pc, #524]	@ (8007c1c <HAL_DMA_Init+0x420>)
 8007a0e:	4013      	ands	r3, r2
 8007a10:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007a1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a26:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a32:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d107      	bne.n	8007a58 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a50:	4313      	orrs	r3, r2
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007a58:	4b71      	ldr	r3, [pc, #452]	@ (8007c20 <HAL_DMA_Init+0x424>)
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	4b71      	ldr	r3, [pc, #452]	@ (8007c24 <HAL_DMA_Init+0x428>)
 8007a5e:	4013      	ands	r3, r2
 8007a60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a64:	d328      	bcc.n	8007ab8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2b28      	cmp	r3, #40	@ 0x28
 8007a6c:	d903      	bls.n	8007a76 <HAL_DMA_Init+0x27a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a74:	d917      	bls.n	8007aa6 <HAL_DMA_Init+0x2aa>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a7c:	d903      	bls.n	8007a86 <HAL_DMA_Init+0x28a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b42      	cmp	r3, #66	@ 0x42
 8007a84:	d90f      	bls.n	8007aa6 <HAL_DMA_Init+0x2aa>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b46      	cmp	r3, #70	@ 0x46
 8007a8c:	d903      	bls.n	8007a96 <HAL_DMA_Init+0x29a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b48      	cmp	r3, #72	@ 0x48
 8007a94:	d907      	bls.n	8007aa6 <HAL_DMA_Init+0x2aa>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2b4e      	cmp	r3, #78	@ 0x4e
 8007a9c:	d905      	bls.n	8007aaa <HAL_DMA_Init+0x2ae>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b52      	cmp	r3, #82	@ 0x52
 8007aa4:	d801      	bhi.n	8007aaa <HAL_DMA_Init+0x2ae>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <HAL_DMA_Init+0x2b0>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ab6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f023 0307 	bic.w	r3, r3, #7
 8007ace:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d117      	bne.n	8007b12 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00e      	beq.n	8007b12 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f002 fb3f 	bl	800a178 <DMA_CheckFifoParam>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d008      	beq.n	8007b12 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2240      	movs	r2, #64	@ 0x40
 8007b04:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e197      	b.n	8007e42 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f002 fa7a 	bl	800a014 <DMA_CalcBaseAndBitshift>
 8007b20:	4603      	mov	r3, r0
 8007b22:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b28:	f003 031f 	and.w	r3, r3, #31
 8007b2c:	223f      	movs	r2, #63	@ 0x3f
 8007b2e:	409a      	lsls	r2, r3
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	609a      	str	r2, [r3, #8]
 8007b34:	e0cd      	b.n	8007cd2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a3b      	ldr	r2, [pc, #236]	@ (8007c28 <HAL_DMA_Init+0x42c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d022      	beq.n	8007b86 <HAL_DMA_Init+0x38a>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a39      	ldr	r2, [pc, #228]	@ (8007c2c <HAL_DMA_Init+0x430>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d01d      	beq.n	8007b86 <HAL_DMA_Init+0x38a>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a38      	ldr	r2, [pc, #224]	@ (8007c30 <HAL_DMA_Init+0x434>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d018      	beq.n	8007b86 <HAL_DMA_Init+0x38a>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a36      	ldr	r2, [pc, #216]	@ (8007c34 <HAL_DMA_Init+0x438>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d013      	beq.n	8007b86 <HAL_DMA_Init+0x38a>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a35      	ldr	r2, [pc, #212]	@ (8007c38 <HAL_DMA_Init+0x43c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00e      	beq.n	8007b86 <HAL_DMA_Init+0x38a>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a33      	ldr	r2, [pc, #204]	@ (8007c3c <HAL_DMA_Init+0x440>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d009      	beq.n	8007b86 <HAL_DMA_Init+0x38a>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a32      	ldr	r2, [pc, #200]	@ (8007c40 <HAL_DMA_Init+0x444>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d004      	beq.n	8007b86 <HAL_DMA_Init+0x38a>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a30      	ldr	r2, [pc, #192]	@ (8007c44 <HAL_DMA_Init+0x448>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d101      	bne.n	8007b8a <HAL_DMA_Init+0x38e>
 8007b86:	2301      	movs	r3, #1
 8007b88:	e000      	b.n	8007b8c <HAL_DMA_Init+0x390>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 8097 	beq.w	8007cc0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a24      	ldr	r2, [pc, #144]	@ (8007c28 <HAL_DMA_Init+0x42c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d021      	beq.n	8007be0 <HAL_DMA_Init+0x3e4>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a22      	ldr	r2, [pc, #136]	@ (8007c2c <HAL_DMA_Init+0x430>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d01c      	beq.n	8007be0 <HAL_DMA_Init+0x3e4>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a21      	ldr	r2, [pc, #132]	@ (8007c30 <HAL_DMA_Init+0x434>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d017      	beq.n	8007be0 <HAL_DMA_Init+0x3e4>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8007c34 <HAL_DMA_Init+0x438>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d012      	beq.n	8007be0 <HAL_DMA_Init+0x3e4>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8007c38 <HAL_DMA_Init+0x43c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d00d      	beq.n	8007be0 <HAL_DMA_Init+0x3e4>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8007c3c <HAL_DMA_Init+0x440>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d008      	beq.n	8007be0 <HAL_DMA_Init+0x3e4>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8007c40 <HAL_DMA_Init+0x444>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d003      	beq.n	8007be0 <HAL_DMA_Init+0x3e4>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a19      	ldr	r2, [pc, #100]	@ (8007c44 <HAL_DMA_Init+0x448>)
 8007bde:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4b13      	ldr	r3, [pc, #76]	@ (8007c48 <HAL_DMA_Init+0x44c>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	2b40      	cmp	r3, #64	@ 0x40
 8007c06:	d021      	beq.n	8007c4c <HAL_DMA_Init+0x450>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	2b80      	cmp	r3, #128	@ 0x80
 8007c0e:	d102      	bne.n	8007c16 <HAL_DMA_Init+0x41a>
 8007c10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007c14:	e01b      	b.n	8007c4e <HAL_DMA_Init+0x452>
 8007c16:	2300      	movs	r3, #0
 8007c18:	e019      	b.n	8007c4e <HAL_DMA_Init+0x452>
 8007c1a:	bf00      	nop
 8007c1c:	fe10803f 	.word	0xfe10803f
 8007c20:	5c001000 	.word	0x5c001000
 8007c24:	ffff0000 	.word	0xffff0000
 8007c28:	58025408 	.word	0x58025408
 8007c2c:	5802541c 	.word	0x5802541c
 8007c30:	58025430 	.word	0x58025430
 8007c34:	58025444 	.word	0x58025444
 8007c38:	58025458 	.word	0x58025458
 8007c3c:	5802546c 	.word	0x5802546c
 8007c40:	58025480 	.word	0x58025480
 8007c44:	58025494 	.word	0x58025494
 8007c48:	fffe000f 	.word	0xfffe000f
 8007c4c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	68d2      	ldr	r2, [r2, #12]
 8007c52:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007c54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007c5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007c64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007c6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007c74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007c7c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	4b6e      	ldr	r3, [pc, #440]	@ (8007e4c <HAL_DMA_Init+0x650>)
 8007c94:	4413      	add	r3, r2
 8007c96:	4a6e      	ldr	r2, [pc, #440]	@ (8007e50 <HAL_DMA_Init+0x654>)
 8007c98:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9c:	091b      	lsrs	r3, r3, #4
 8007c9e:	009a      	lsls	r2, r3, #2
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f002 f9b5 	bl	800a014 <DMA_CalcBaseAndBitshift>
 8007caa:	4603      	mov	r3, r0
 8007cac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cb2:	f003 031f 	and.w	r3, r3, #31
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	409a      	lsls	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	605a      	str	r2, [r3, #4]
 8007cbe:	e008      	b.n	8007cd2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2240      	movs	r2, #64	@ 0x40
 8007cc4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2203      	movs	r2, #3
 8007cca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e0b7      	b.n	8007e42 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a5f      	ldr	r2, [pc, #380]	@ (8007e54 <HAL_DMA_Init+0x658>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d072      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a5d      	ldr	r2, [pc, #372]	@ (8007e58 <HAL_DMA_Init+0x65c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d06d      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a5c      	ldr	r2, [pc, #368]	@ (8007e5c <HAL_DMA_Init+0x660>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d068      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a5a      	ldr	r2, [pc, #360]	@ (8007e60 <HAL_DMA_Init+0x664>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d063      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a59      	ldr	r2, [pc, #356]	@ (8007e64 <HAL_DMA_Init+0x668>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d05e      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a57      	ldr	r2, [pc, #348]	@ (8007e68 <HAL_DMA_Init+0x66c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d059      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a56      	ldr	r2, [pc, #344]	@ (8007e6c <HAL_DMA_Init+0x670>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d054      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a54      	ldr	r2, [pc, #336]	@ (8007e70 <HAL_DMA_Init+0x674>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d04f      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a53      	ldr	r2, [pc, #332]	@ (8007e74 <HAL_DMA_Init+0x678>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d04a      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a51      	ldr	r2, [pc, #324]	@ (8007e78 <HAL_DMA_Init+0x67c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d045      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a50      	ldr	r2, [pc, #320]	@ (8007e7c <HAL_DMA_Init+0x680>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d040      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a4e      	ldr	r2, [pc, #312]	@ (8007e80 <HAL_DMA_Init+0x684>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d03b      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a4d      	ldr	r2, [pc, #308]	@ (8007e84 <HAL_DMA_Init+0x688>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d036      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a4b      	ldr	r2, [pc, #300]	@ (8007e88 <HAL_DMA_Init+0x68c>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d031      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a4a      	ldr	r2, [pc, #296]	@ (8007e8c <HAL_DMA_Init+0x690>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d02c      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a48      	ldr	r2, [pc, #288]	@ (8007e90 <HAL_DMA_Init+0x694>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d027      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a47      	ldr	r2, [pc, #284]	@ (8007e94 <HAL_DMA_Init+0x698>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d022      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a45      	ldr	r2, [pc, #276]	@ (8007e98 <HAL_DMA_Init+0x69c>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d01d      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a44      	ldr	r2, [pc, #272]	@ (8007e9c <HAL_DMA_Init+0x6a0>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d018      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a42      	ldr	r2, [pc, #264]	@ (8007ea0 <HAL_DMA_Init+0x6a4>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d013      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a41      	ldr	r2, [pc, #260]	@ (8007ea4 <HAL_DMA_Init+0x6a8>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d00e      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a3f      	ldr	r2, [pc, #252]	@ (8007ea8 <HAL_DMA_Init+0x6ac>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d009      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a3e      	ldr	r2, [pc, #248]	@ (8007eac <HAL_DMA_Init+0x6b0>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d004      	beq.n	8007dc2 <HAL_DMA_Init+0x5c6>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a3c      	ldr	r2, [pc, #240]	@ (8007eb0 <HAL_DMA_Init+0x6b4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d101      	bne.n	8007dc6 <HAL_DMA_Init+0x5ca>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e000      	b.n	8007dc8 <HAL_DMA_Init+0x5cc>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d032      	beq.n	8007e32 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f002 fa4f 	bl	800a270 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	2b80      	cmp	r3, #128	@ 0x80
 8007dd8:	d102      	bne.n	8007de0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007de8:	b2d2      	uxtb	r2, r2
 8007dea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007df4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d010      	beq.n	8007e20 <HAL_DMA_Init+0x624>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	2b08      	cmp	r3, #8
 8007e04:	d80c      	bhi.n	8007e20 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f002 facc 	bl	800a3a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e1c:	605a      	str	r2, [r3, #4]
 8007e1e:	e008      	b.n	8007e32 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	a7fdabf8 	.word	0xa7fdabf8
 8007e50:	cccccccd 	.word	0xcccccccd
 8007e54:	40020010 	.word	0x40020010
 8007e58:	40020028 	.word	0x40020028
 8007e5c:	40020040 	.word	0x40020040
 8007e60:	40020058 	.word	0x40020058
 8007e64:	40020070 	.word	0x40020070
 8007e68:	40020088 	.word	0x40020088
 8007e6c:	400200a0 	.word	0x400200a0
 8007e70:	400200b8 	.word	0x400200b8
 8007e74:	40020410 	.word	0x40020410
 8007e78:	40020428 	.word	0x40020428
 8007e7c:	40020440 	.word	0x40020440
 8007e80:	40020458 	.word	0x40020458
 8007e84:	40020470 	.word	0x40020470
 8007e88:	40020488 	.word	0x40020488
 8007e8c:	400204a0 	.word	0x400204a0
 8007e90:	400204b8 	.word	0x400204b8
 8007e94:	58025408 	.word	0x58025408
 8007e98:	5802541c 	.word	0x5802541c
 8007e9c:	58025430 	.word	0x58025430
 8007ea0:	58025444 	.word	0x58025444
 8007ea4:	58025458 	.word	0x58025458
 8007ea8:	5802546c 	.word	0x5802546c
 8007eac:	58025480 	.word	0x58025480
 8007eb0:	58025494 	.word	0x58025494

08007eb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e226      	b.n	800831e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d101      	bne.n	8007ede <HAL_DMA_Start_IT+0x2a>
 8007eda:	2302      	movs	r3, #2
 8007edc:	e21f      	b.n	800831e <HAL_DMA_Start_IT+0x46a>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	f040 820a 	bne.w	8008308 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a68      	ldr	r2, [pc, #416]	@ (80080a8 <HAL_DMA_Start_IT+0x1f4>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d04a      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a66      	ldr	r2, [pc, #408]	@ (80080ac <HAL_DMA_Start_IT+0x1f8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d045      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a65      	ldr	r2, [pc, #404]	@ (80080b0 <HAL_DMA_Start_IT+0x1fc>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d040      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a63      	ldr	r2, [pc, #396]	@ (80080b4 <HAL_DMA_Start_IT+0x200>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d03b      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a62      	ldr	r2, [pc, #392]	@ (80080b8 <HAL_DMA_Start_IT+0x204>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d036      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a60      	ldr	r2, [pc, #384]	@ (80080bc <HAL_DMA_Start_IT+0x208>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d031      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a5f      	ldr	r2, [pc, #380]	@ (80080c0 <HAL_DMA_Start_IT+0x20c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d02c      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a5d      	ldr	r2, [pc, #372]	@ (80080c4 <HAL_DMA_Start_IT+0x210>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d027      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a5c      	ldr	r2, [pc, #368]	@ (80080c8 <HAL_DMA_Start_IT+0x214>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d022      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a5a      	ldr	r2, [pc, #360]	@ (80080cc <HAL_DMA_Start_IT+0x218>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d01d      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a59      	ldr	r2, [pc, #356]	@ (80080d0 <HAL_DMA_Start_IT+0x21c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d018      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a57      	ldr	r2, [pc, #348]	@ (80080d4 <HAL_DMA_Start_IT+0x220>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d013      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a56      	ldr	r2, [pc, #344]	@ (80080d8 <HAL_DMA_Start_IT+0x224>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00e      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a54      	ldr	r2, [pc, #336]	@ (80080dc <HAL_DMA_Start_IT+0x228>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d009      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a53      	ldr	r2, [pc, #332]	@ (80080e0 <HAL_DMA_Start_IT+0x22c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d004      	beq.n	8007fa2 <HAL_DMA_Start_IT+0xee>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a51      	ldr	r2, [pc, #324]	@ (80080e4 <HAL_DMA_Start_IT+0x230>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d108      	bne.n	8007fb4 <HAL_DMA_Start_IT+0x100>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0201 	bic.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	e007      	b.n	8007fc4 <HAL_DMA_Start_IT+0x110>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0201 	bic.w	r2, r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	68b9      	ldr	r1, [r7, #8]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f001 fe76 	bl	8009cbc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a34      	ldr	r2, [pc, #208]	@ (80080a8 <HAL_DMA_Start_IT+0x1f4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d04a      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a33      	ldr	r2, [pc, #204]	@ (80080ac <HAL_DMA_Start_IT+0x1f8>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d045      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a31      	ldr	r2, [pc, #196]	@ (80080b0 <HAL_DMA_Start_IT+0x1fc>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d040      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a30      	ldr	r2, [pc, #192]	@ (80080b4 <HAL_DMA_Start_IT+0x200>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d03b      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a2e      	ldr	r2, [pc, #184]	@ (80080b8 <HAL_DMA_Start_IT+0x204>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d036      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a2d      	ldr	r2, [pc, #180]	@ (80080bc <HAL_DMA_Start_IT+0x208>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d031      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a2b      	ldr	r2, [pc, #172]	@ (80080c0 <HAL_DMA_Start_IT+0x20c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d02c      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a2a      	ldr	r2, [pc, #168]	@ (80080c4 <HAL_DMA_Start_IT+0x210>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d027      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a28      	ldr	r2, [pc, #160]	@ (80080c8 <HAL_DMA_Start_IT+0x214>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d022      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a27      	ldr	r2, [pc, #156]	@ (80080cc <HAL_DMA_Start_IT+0x218>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d01d      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a25      	ldr	r2, [pc, #148]	@ (80080d0 <HAL_DMA_Start_IT+0x21c>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d018      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a24      	ldr	r2, [pc, #144]	@ (80080d4 <HAL_DMA_Start_IT+0x220>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d013      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a22      	ldr	r2, [pc, #136]	@ (80080d8 <HAL_DMA_Start_IT+0x224>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d00e      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a21      	ldr	r2, [pc, #132]	@ (80080dc <HAL_DMA_Start_IT+0x228>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d009      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a1f      	ldr	r2, [pc, #124]	@ (80080e0 <HAL_DMA_Start_IT+0x22c>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d004      	beq.n	8008070 <HAL_DMA_Start_IT+0x1bc>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a1e      	ldr	r2, [pc, #120]	@ (80080e4 <HAL_DMA_Start_IT+0x230>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d101      	bne.n	8008074 <HAL_DMA_Start_IT+0x1c0>
 8008070:	2301      	movs	r3, #1
 8008072:	e000      	b.n	8008076 <HAL_DMA_Start_IT+0x1c2>
 8008074:	2300      	movs	r3, #0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d036      	beq.n	80080e8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f023 021e 	bic.w	r2, r3, #30
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0216 	orr.w	r2, r2, #22
 800808c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d03e      	beq.n	8008114 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f042 0208 	orr.w	r2, r2, #8
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	e035      	b.n	8008114 <HAL_DMA_Start_IT+0x260>
 80080a8:	40020010 	.word	0x40020010
 80080ac:	40020028 	.word	0x40020028
 80080b0:	40020040 	.word	0x40020040
 80080b4:	40020058 	.word	0x40020058
 80080b8:	40020070 	.word	0x40020070
 80080bc:	40020088 	.word	0x40020088
 80080c0:	400200a0 	.word	0x400200a0
 80080c4:	400200b8 	.word	0x400200b8
 80080c8:	40020410 	.word	0x40020410
 80080cc:	40020428 	.word	0x40020428
 80080d0:	40020440 	.word	0x40020440
 80080d4:	40020458 	.word	0x40020458
 80080d8:	40020470 	.word	0x40020470
 80080dc:	40020488 	.word	0x40020488
 80080e0:	400204a0 	.word	0x400204a0
 80080e4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f023 020e 	bic.w	r2, r3, #14
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f042 020a 	orr.w	r2, r2, #10
 80080fa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008100:	2b00      	cmp	r3, #0
 8008102:	d007      	beq.n	8008114 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0204 	orr.w	r2, r2, #4
 8008112:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a83      	ldr	r2, [pc, #524]	@ (8008328 <HAL_DMA_Start_IT+0x474>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d072      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a82      	ldr	r2, [pc, #520]	@ (800832c <HAL_DMA_Start_IT+0x478>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d06d      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a80      	ldr	r2, [pc, #512]	@ (8008330 <HAL_DMA_Start_IT+0x47c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d068      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a7f      	ldr	r2, [pc, #508]	@ (8008334 <HAL_DMA_Start_IT+0x480>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d063      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a7d      	ldr	r2, [pc, #500]	@ (8008338 <HAL_DMA_Start_IT+0x484>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d05e      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a7c      	ldr	r2, [pc, #496]	@ (800833c <HAL_DMA_Start_IT+0x488>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d059      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a7a      	ldr	r2, [pc, #488]	@ (8008340 <HAL_DMA_Start_IT+0x48c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d054      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a79      	ldr	r2, [pc, #484]	@ (8008344 <HAL_DMA_Start_IT+0x490>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d04f      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a77      	ldr	r2, [pc, #476]	@ (8008348 <HAL_DMA_Start_IT+0x494>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d04a      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a76      	ldr	r2, [pc, #472]	@ (800834c <HAL_DMA_Start_IT+0x498>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d045      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a74      	ldr	r2, [pc, #464]	@ (8008350 <HAL_DMA_Start_IT+0x49c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d040      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a73      	ldr	r2, [pc, #460]	@ (8008354 <HAL_DMA_Start_IT+0x4a0>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d03b      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a71      	ldr	r2, [pc, #452]	@ (8008358 <HAL_DMA_Start_IT+0x4a4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d036      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a70      	ldr	r2, [pc, #448]	@ (800835c <HAL_DMA_Start_IT+0x4a8>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d031      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a6e      	ldr	r2, [pc, #440]	@ (8008360 <HAL_DMA_Start_IT+0x4ac>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d02c      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a6d      	ldr	r2, [pc, #436]	@ (8008364 <HAL_DMA_Start_IT+0x4b0>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d027      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a6b      	ldr	r2, [pc, #428]	@ (8008368 <HAL_DMA_Start_IT+0x4b4>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d022      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a6a      	ldr	r2, [pc, #424]	@ (800836c <HAL_DMA_Start_IT+0x4b8>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d01d      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a68      	ldr	r2, [pc, #416]	@ (8008370 <HAL_DMA_Start_IT+0x4bc>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d018      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a67      	ldr	r2, [pc, #412]	@ (8008374 <HAL_DMA_Start_IT+0x4c0>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d013      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a65      	ldr	r2, [pc, #404]	@ (8008378 <HAL_DMA_Start_IT+0x4c4>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d00e      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a64      	ldr	r2, [pc, #400]	@ (800837c <HAL_DMA_Start_IT+0x4c8>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d009      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a62      	ldr	r2, [pc, #392]	@ (8008380 <HAL_DMA_Start_IT+0x4cc>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d004      	beq.n	8008204 <HAL_DMA_Start_IT+0x350>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a61      	ldr	r2, [pc, #388]	@ (8008384 <HAL_DMA_Start_IT+0x4d0>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d101      	bne.n	8008208 <HAL_DMA_Start_IT+0x354>
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <HAL_DMA_Start_IT+0x356>
 8008208:	2300      	movs	r3, #0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d01a      	beq.n	8008244 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d007      	beq.n	800822c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008226:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800822a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008230:	2b00      	cmp	r3, #0
 8008232:	d007      	beq.n	8008244 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800823e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008242:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a37      	ldr	r2, [pc, #220]	@ (8008328 <HAL_DMA_Start_IT+0x474>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d04a      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a36      	ldr	r2, [pc, #216]	@ (800832c <HAL_DMA_Start_IT+0x478>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d045      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a34      	ldr	r2, [pc, #208]	@ (8008330 <HAL_DMA_Start_IT+0x47c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d040      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a33      	ldr	r2, [pc, #204]	@ (8008334 <HAL_DMA_Start_IT+0x480>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d03b      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a31      	ldr	r2, [pc, #196]	@ (8008338 <HAL_DMA_Start_IT+0x484>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d036      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a30      	ldr	r2, [pc, #192]	@ (800833c <HAL_DMA_Start_IT+0x488>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d031      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a2e      	ldr	r2, [pc, #184]	@ (8008340 <HAL_DMA_Start_IT+0x48c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d02c      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a2d      	ldr	r2, [pc, #180]	@ (8008344 <HAL_DMA_Start_IT+0x490>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d027      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a2b      	ldr	r2, [pc, #172]	@ (8008348 <HAL_DMA_Start_IT+0x494>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d022      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a2a      	ldr	r2, [pc, #168]	@ (800834c <HAL_DMA_Start_IT+0x498>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d01d      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a28      	ldr	r2, [pc, #160]	@ (8008350 <HAL_DMA_Start_IT+0x49c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d018      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a27      	ldr	r2, [pc, #156]	@ (8008354 <HAL_DMA_Start_IT+0x4a0>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d013      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a25      	ldr	r2, [pc, #148]	@ (8008358 <HAL_DMA_Start_IT+0x4a4>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00e      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a24      	ldr	r2, [pc, #144]	@ (800835c <HAL_DMA_Start_IT+0x4a8>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d009      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a22      	ldr	r2, [pc, #136]	@ (8008360 <HAL_DMA_Start_IT+0x4ac>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d004      	beq.n	80082e4 <HAL_DMA_Start_IT+0x430>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a21      	ldr	r2, [pc, #132]	@ (8008364 <HAL_DMA_Start_IT+0x4b0>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d108      	bne.n	80082f6 <HAL_DMA_Start_IT+0x442>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0201 	orr.w	r2, r2, #1
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	e012      	b.n	800831c <HAL_DMA_Start_IT+0x468>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0201 	orr.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	e009      	b.n	800831c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800830e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800831c:	7dfb      	ldrb	r3, [r7, #23]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	40020010 	.word	0x40020010
 800832c:	40020028 	.word	0x40020028
 8008330:	40020040 	.word	0x40020040
 8008334:	40020058 	.word	0x40020058
 8008338:	40020070 	.word	0x40020070
 800833c:	40020088 	.word	0x40020088
 8008340:	400200a0 	.word	0x400200a0
 8008344:	400200b8 	.word	0x400200b8
 8008348:	40020410 	.word	0x40020410
 800834c:	40020428 	.word	0x40020428
 8008350:	40020440 	.word	0x40020440
 8008354:	40020458 	.word	0x40020458
 8008358:	40020470 	.word	0x40020470
 800835c:	40020488 	.word	0x40020488
 8008360:	400204a0 	.word	0x400204a0
 8008364:	400204b8 	.word	0x400204b8
 8008368:	58025408 	.word	0x58025408
 800836c:	5802541c 	.word	0x5802541c
 8008370:	58025430 	.word	0x58025430
 8008374:	58025444 	.word	0x58025444
 8008378:	58025458 	.word	0x58025458
 800837c:	5802546c 	.word	0x5802546c
 8008380:	58025480 	.word	0x58025480
 8008384:	58025494 	.word	0x58025494

08008388 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008390:	f7fd f932 	bl	80055f8 <HAL_GetTick>
 8008394:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d101      	bne.n	80083a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e2dc      	b.n	800895a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d008      	beq.n	80083be <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2280      	movs	r2, #128	@ 0x80
 80083b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e2cd      	b.n	800895a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a76      	ldr	r2, [pc, #472]	@ (800859c <HAL_DMA_Abort+0x214>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d04a      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a74      	ldr	r2, [pc, #464]	@ (80085a0 <HAL_DMA_Abort+0x218>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d045      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a73      	ldr	r2, [pc, #460]	@ (80085a4 <HAL_DMA_Abort+0x21c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d040      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a71      	ldr	r2, [pc, #452]	@ (80085a8 <HAL_DMA_Abort+0x220>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d03b      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a70      	ldr	r2, [pc, #448]	@ (80085ac <HAL_DMA_Abort+0x224>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d036      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a6e      	ldr	r2, [pc, #440]	@ (80085b0 <HAL_DMA_Abort+0x228>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d031      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a6d      	ldr	r2, [pc, #436]	@ (80085b4 <HAL_DMA_Abort+0x22c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d02c      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a6b      	ldr	r2, [pc, #428]	@ (80085b8 <HAL_DMA_Abort+0x230>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d027      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a6a      	ldr	r2, [pc, #424]	@ (80085bc <HAL_DMA_Abort+0x234>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d022      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a68      	ldr	r2, [pc, #416]	@ (80085c0 <HAL_DMA_Abort+0x238>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d01d      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a67      	ldr	r2, [pc, #412]	@ (80085c4 <HAL_DMA_Abort+0x23c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d018      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a65      	ldr	r2, [pc, #404]	@ (80085c8 <HAL_DMA_Abort+0x240>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d013      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a64      	ldr	r2, [pc, #400]	@ (80085cc <HAL_DMA_Abort+0x244>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d00e      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a62      	ldr	r2, [pc, #392]	@ (80085d0 <HAL_DMA_Abort+0x248>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d009      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a61      	ldr	r2, [pc, #388]	@ (80085d4 <HAL_DMA_Abort+0x24c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d004      	beq.n	800845e <HAL_DMA_Abort+0xd6>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a5f      	ldr	r2, [pc, #380]	@ (80085d8 <HAL_DMA_Abort+0x250>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d101      	bne.n	8008462 <HAL_DMA_Abort+0xda>
 800845e:	2301      	movs	r3, #1
 8008460:	e000      	b.n	8008464 <HAL_DMA_Abort+0xdc>
 8008462:	2300      	movs	r3, #0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d013      	beq.n	8008490 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 021e 	bic.w	r2, r2, #30
 8008476:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	695a      	ldr	r2, [r3, #20]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008486:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	617b      	str	r3, [r7, #20]
 800848e:	e00a      	b.n	80084a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 020e 	bic.w	r2, r2, #14
 800849e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a3c      	ldr	r2, [pc, #240]	@ (800859c <HAL_DMA_Abort+0x214>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d072      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a3a      	ldr	r2, [pc, #232]	@ (80085a0 <HAL_DMA_Abort+0x218>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d06d      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a39      	ldr	r2, [pc, #228]	@ (80085a4 <HAL_DMA_Abort+0x21c>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d068      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a37      	ldr	r2, [pc, #220]	@ (80085a8 <HAL_DMA_Abort+0x220>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d063      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a36      	ldr	r2, [pc, #216]	@ (80085ac <HAL_DMA_Abort+0x224>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d05e      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a34      	ldr	r2, [pc, #208]	@ (80085b0 <HAL_DMA_Abort+0x228>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d059      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a33      	ldr	r2, [pc, #204]	@ (80085b4 <HAL_DMA_Abort+0x22c>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d054      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a31      	ldr	r2, [pc, #196]	@ (80085b8 <HAL_DMA_Abort+0x230>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d04f      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a30      	ldr	r2, [pc, #192]	@ (80085bc <HAL_DMA_Abort+0x234>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d04a      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a2e      	ldr	r2, [pc, #184]	@ (80085c0 <HAL_DMA_Abort+0x238>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d045      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a2d      	ldr	r2, [pc, #180]	@ (80085c4 <HAL_DMA_Abort+0x23c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d040      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a2b      	ldr	r2, [pc, #172]	@ (80085c8 <HAL_DMA_Abort+0x240>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d03b      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a2a      	ldr	r2, [pc, #168]	@ (80085cc <HAL_DMA_Abort+0x244>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d036      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a28      	ldr	r2, [pc, #160]	@ (80085d0 <HAL_DMA_Abort+0x248>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d031      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a27      	ldr	r2, [pc, #156]	@ (80085d4 <HAL_DMA_Abort+0x24c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d02c      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a25      	ldr	r2, [pc, #148]	@ (80085d8 <HAL_DMA_Abort+0x250>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d027      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a24      	ldr	r2, [pc, #144]	@ (80085dc <HAL_DMA_Abort+0x254>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d022      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a22      	ldr	r2, [pc, #136]	@ (80085e0 <HAL_DMA_Abort+0x258>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d01d      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a21      	ldr	r2, [pc, #132]	@ (80085e4 <HAL_DMA_Abort+0x25c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d018      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a1f      	ldr	r2, [pc, #124]	@ (80085e8 <HAL_DMA_Abort+0x260>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d013      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a1e      	ldr	r2, [pc, #120]	@ (80085ec <HAL_DMA_Abort+0x264>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d00e      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a1c      	ldr	r2, [pc, #112]	@ (80085f0 <HAL_DMA_Abort+0x268>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d009      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a1b      	ldr	r2, [pc, #108]	@ (80085f4 <HAL_DMA_Abort+0x26c>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d004      	beq.n	8008596 <HAL_DMA_Abort+0x20e>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a19      	ldr	r2, [pc, #100]	@ (80085f8 <HAL_DMA_Abort+0x270>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d132      	bne.n	80085fc <HAL_DMA_Abort+0x274>
 8008596:	2301      	movs	r3, #1
 8008598:	e031      	b.n	80085fe <HAL_DMA_Abort+0x276>
 800859a:	bf00      	nop
 800859c:	40020010 	.word	0x40020010
 80085a0:	40020028 	.word	0x40020028
 80085a4:	40020040 	.word	0x40020040
 80085a8:	40020058 	.word	0x40020058
 80085ac:	40020070 	.word	0x40020070
 80085b0:	40020088 	.word	0x40020088
 80085b4:	400200a0 	.word	0x400200a0
 80085b8:	400200b8 	.word	0x400200b8
 80085bc:	40020410 	.word	0x40020410
 80085c0:	40020428 	.word	0x40020428
 80085c4:	40020440 	.word	0x40020440
 80085c8:	40020458 	.word	0x40020458
 80085cc:	40020470 	.word	0x40020470
 80085d0:	40020488 	.word	0x40020488
 80085d4:	400204a0 	.word	0x400204a0
 80085d8:	400204b8 	.word	0x400204b8
 80085dc:	58025408 	.word	0x58025408
 80085e0:	5802541c 	.word	0x5802541c
 80085e4:	58025430 	.word	0x58025430
 80085e8:	58025444 	.word	0x58025444
 80085ec:	58025458 	.word	0x58025458
 80085f0:	5802546c 	.word	0x5802546c
 80085f4:	58025480 	.word	0x58025480
 80085f8:	58025494 	.word	0x58025494
 80085fc:	2300      	movs	r3, #0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d007      	beq.n	8008612 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800860c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008610:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a6d      	ldr	r2, [pc, #436]	@ (80087cc <HAL_DMA_Abort+0x444>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d04a      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a6b      	ldr	r2, [pc, #428]	@ (80087d0 <HAL_DMA_Abort+0x448>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d045      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a6a      	ldr	r2, [pc, #424]	@ (80087d4 <HAL_DMA_Abort+0x44c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d040      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a68      	ldr	r2, [pc, #416]	@ (80087d8 <HAL_DMA_Abort+0x450>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d03b      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a67      	ldr	r2, [pc, #412]	@ (80087dc <HAL_DMA_Abort+0x454>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d036      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a65      	ldr	r2, [pc, #404]	@ (80087e0 <HAL_DMA_Abort+0x458>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d031      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a64      	ldr	r2, [pc, #400]	@ (80087e4 <HAL_DMA_Abort+0x45c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d02c      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a62      	ldr	r2, [pc, #392]	@ (80087e8 <HAL_DMA_Abort+0x460>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d027      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a61      	ldr	r2, [pc, #388]	@ (80087ec <HAL_DMA_Abort+0x464>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d022      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a5f      	ldr	r2, [pc, #380]	@ (80087f0 <HAL_DMA_Abort+0x468>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d01d      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a5e      	ldr	r2, [pc, #376]	@ (80087f4 <HAL_DMA_Abort+0x46c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d018      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a5c      	ldr	r2, [pc, #368]	@ (80087f8 <HAL_DMA_Abort+0x470>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d013      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a5b      	ldr	r2, [pc, #364]	@ (80087fc <HAL_DMA_Abort+0x474>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00e      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a59      	ldr	r2, [pc, #356]	@ (8008800 <HAL_DMA_Abort+0x478>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d009      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a58      	ldr	r2, [pc, #352]	@ (8008804 <HAL_DMA_Abort+0x47c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d004      	beq.n	80086b2 <HAL_DMA_Abort+0x32a>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a56      	ldr	r2, [pc, #344]	@ (8008808 <HAL_DMA_Abort+0x480>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d108      	bne.n	80086c4 <HAL_DMA_Abort+0x33c>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 0201 	bic.w	r2, r2, #1
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	e007      	b.n	80086d4 <HAL_DMA_Abort+0x34c>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 0201 	bic.w	r2, r2, #1
 80086d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80086d4:	e013      	b.n	80086fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80086d6:	f7fc ff8f 	bl	80055f8 <HAL_GetTick>
 80086da:	4602      	mov	r2, r0
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	2b05      	cmp	r3, #5
 80086e2:	d90c      	bls.n	80086fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2220      	movs	r2, #32
 80086e8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2203      	movs	r2, #3
 80086ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e12d      	b.n	800895a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e5      	bne.n	80086d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a2f      	ldr	r2, [pc, #188]	@ (80087cc <HAL_DMA_Abort+0x444>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d04a      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a2d      	ldr	r2, [pc, #180]	@ (80087d0 <HAL_DMA_Abort+0x448>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d045      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a2c      	ldr	r2, [pc, #176]	@ (80087d4 <HAL_DMA_Abort+0x44c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d040      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a2a      	ldr	r2, [pc, #168]	@ (80087d8 <HAL_DMA_Abort+0x450>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d03b      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a29      	ldr	r2, [pc, #164]	@ (80087dc <HAL_DMA_Abort+0x454>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d036      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a27      	ldr	r2, [pc, #156]	@ (80087e0 <HAL_DMA_Abort+0x458>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d031      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a26      	ldr	r2, [pc, #152]	@ (80087e4 <HAL_DMA_Abort+0x45c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d02c      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a24      	ldr	r2, [pc, #144]	@ (80087e8 <HAL_DMA_Abort+0x460>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d027      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a23      	ldr	r2, [pc, #140]	@ (80087ec <HAL_DMA_Abort+0x464>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d022      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a21      	ldr	r2, [pc, #132]	@ (80087f0 <HAL_DMA_Abort+0x468>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d01d      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a20      	ldr	r2, [pc, #128]	@ (80087f4 <HAL_DMA_Abort+0x46c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d018      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a1e      	ldr	r2, [pc, #120]	@ (80087f8 <HAL_DMA_Abort+0x470>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d013      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a1d      	ldr	r2, [pc, #116]	@ (80087fc <HAL_DMA_Abort+0x474>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d00e      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a1b      	ldr	r2, [pc, #108]	@ (8008800 <HAL_DMA_Abort+0x478>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d009      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a1a      	ldr	r2, [pc, #104]	@ (8008804 <HAL_DMA_Abort+0x47c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d004      	beq.n	80087aa <HAL_DMA_Abort+0x422>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a18      	ldr	r2, [pc, #96]	@ (8008808 <HAL_DMA_Abort+0x480>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d101      	bne.n	80087ae <HAL_DMA_Abort+0x426>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <HAL_DMA_Abort+0x428>
 80087ae:	2300      	movs	r3, #0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d02b      	beq.n	800880c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087b8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087be:	f003 031f 	and.w	r3, r3, #31
 80087c2:	223f      	movs	r2, #63	@ 0x3f
 80087c4:	409a      	lsls	r2, r3
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	609a      	str	r2, [r3, #8]
 80087ca:	e02a      	b.n	8008822 <HAL_DMA_Abort+0x49a>
 80087cc:	40020010 	.word	0x40020010
 80087d0:	40020028 	.word	0x40020028
 80087d4:	40020040 	.word	0x40020040
 80087d8:	40020058 	.word	0x40020058
 80087dc:	40020070 	.word	0x40020070
 80087e0:	40020088 	.word	0x40020088
 80087e4:	400200a0 	.word	0x400200a0
 80087e8:	400200b8 	.word	0x400200b8
 80087ec:	40020410 	.word	0x40020410
 80087f0:	40020428 	.word	0x40020428
 80087f4:	40020440 	.word	0x40020440
 80087f8:	40020458 	.word	0x40020458
 80087fc:	40020470 	.word	0x40020470
 8008800:	40020488 	.word	0x40020488
 8008804:	400204a0 	.word	0x400204a0
 8008808:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008810:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008816:	f003 031f 	and.w	r3, r3, #31
 800881a:	2201      	movs	r2, #1
 800881c:	409a      	lsls	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a4f      	ldr	r2, [pc, #316]	@ (8008964 <HAL_DMA_Abort+0x5dc>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d072      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a4d      	ldr	r2, [pc, #308]	@ (8008968 <HAL_DMA_Abort+0x5e0>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d06d      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a4c      	ldr	r2, [pc, #304]	@ (800896c <HAL_DMA_Abort+0x5e4>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d068      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a4a      	ldr	r2, [pc, #296]	@ (8008970 <HAL_DMA_Abort+0x5e8>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d063      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a49      	ldr	r2, [pc, #292]	@ (8008974 <HAL_DMA_Abort+0x5ec>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d05e      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a47      	ldr	r2, [pc, #284]	@ (8008978 <HAL_DMA_Abort+0x5f0>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d059      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a46      	ldr	r2, [pc, #280]	@ (800897c <HAL_DMA_Abort+0x5f4>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d054      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a44      	ldr	r2, [pc, #272]	@ (8008980 <HAL_DMA_Abort+0x5f8>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d04f      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a43      	ldr	r2, [pc, #268]	@ (8008984 <HAL_DMA_Abort+0x5fc>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d04a      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a41      	ldr	r2, [pc, #260]	@ (8008988 <HAL_DMA_Abort+0x600>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d045      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a40      	ldr	r2, [pc, #256]	@ (800898c <HAL_DMA_Abort+0x604>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d040      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a3e      	ldr	r2, [pc, #248]	@ (8008990 <HAL_DMA_Abort+0x608>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d03b      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a3d      	ldr	r2, [pc, #244]	@ (8008994 <HAL_DMA_Abort+0x60c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d036      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a3b      	ldr	r2, [pc, #236]	@ (8008998 <HAL_DMA_Abort+0x610>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d031      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a3a      	ldr	r2, [pc, #232]	@ (800899c <HAL_DMA_Abort+0x614>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d02c      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a38      	ldr	r2, [pc, #224]	@ (80089a0 <HAL_DMA_Abort+0x618>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d027      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a37      	ldr	r2, [pc, #220]	@ (80089a4 <HAL_DMA_Abort+0x61c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d022      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a35      	ldr	r2, [pc, #212]	@ (80089a8 <HAL_DMA_Abort+0x620>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d01d      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a34      	ldr	r2, [pc, #208]	@ (80089ac <HAL_DMA_Abort+0x624>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d018      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a32      	ldr	r2, [pc, #200]	@ (80089b0 <HAL_DMA_Abort+0x628>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d013      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a31      	ldr	r2, [pc, #196]	@ (80089b4 <HAL_DMA_Abort+0x62c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d00e      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a2f      	ldr	r2, [pc, #188]	@ (80089b8 <HAL_DMA_Abort+0x630>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d009      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a2e      	ldr	r2, [pc, #184]	@ (80089bc <HAL_DMA_Abort+0x634>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d004      	beq.n	8008912 <HAL_DMA_Abort+0x58a>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a2c      	ldr	r2, [pc, #176]	@ (80089c0 <HAL_DMA_Abort+0x638>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d101      	bne.n	8008916 <HAL_DMA_Abort+0x58e>
 8008912:	2301      	movs	r3, #1
 8008914:	e000      	b.n	8008918 <HAL_DMA_Abort+0x590>
 8008916:	2300      	movs	r3, #0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d015      	beq.n	8008948 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008924:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00c      	beq.n	8008948 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800893c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008946:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	40020010 	.word	0x40020010
 8008968:	40020028 	.word	0x40020028
 800896c:	40020040 	.word	0x40020040
 8008970:	40020058 	.word	0x40020058
 8008974:	40020070 	.word	0x40020070
 8008978:	40020088 	.word	0x40020088
 800897c:	400200a0 	.word	0x400200a0
 8008980:	400200b8 	.word	0x400200b8
 8008984:	40020410 	.word	0x40020410
 8008988:	40020428 	.word	0x40020428
 800898c:	40020440 	.word	0x40020440
 8008990:	40020458 	.word	0x40020458
 8008994:	40020470 	.word	0x40020470
 8008998:	40020488 	.word	0x40020488
 800899c:	400204a0 	.word	0x400204a0
 80089a0:	400204b8 	.word	0x400204b8
 80089a4:	58025408 	.word	0x58025408
 80089a8:	5802541c 	.word	0x5802541c
 80089ac:	58025430 	.word	0x58025430
 80089b0:	58025444 	.word	0x58025444
 80089b4:	58025458 	.word	0x58025458
 80089b8:	5802546c 	.word	0x5802546c
 80089bc:	58025480 	.word	0x58025480
 80089c0:	58025494 	.word	0x58025494

080089c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e237      	b.n	8008e46 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d004      	beq.n	80089ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2280      	movs	r2, #128	@ 0x80
 80089e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e22c      	b.n	8008e46 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a5c      	ldr	r2, [pc, #368]	@ (8008b64 <HAL_DMA_Abort_IT+0x1a0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d04a      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a5b      	ldr	r2, [pc, #364]	@ (8008b68 <HAL_DMA_Abort_IT+0x1a4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d045      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a59      	ldr	r2, [pc, #356]	@ (8008b6c <HAL_DMA_Abort_IT+0x1a8>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d040      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a58      	ldr	r2, [pc, #352]	@ (8008b70 <HAL_DMA_Abort_IT+0x1ac>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d03b      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a56      	ldr	r2, [pc, #344]	@ (8008b74 <HAL_DMA_Abort_IT+0x1b0>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d036      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a55      	ldr	r2, [pc, #340]	@ (8008b78 <HAL_DMA_Abort_IT+0x1b4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d031      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a53      	ldr	r2, [pc, #332]	@ (8008b7c <HAL_DMA_Abort_IT+0x1b8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d02c      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a52      	ldr	r2, [pc, #328]	@ (8008b80 <HAL_DMA_Abort_IT+0x1bc>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d027      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a50      	ldr	r2, [pc, #320]	@ (8008b84 <HAL_DMA_Abort_IT+0x1c0>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d022      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a4f      	ldr	r2, [pc, #316]	@ (8008b88 <HAL_DMA_Abort_IT+0x1c4>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d01d      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a4d      	ldr	r2, [pc, #308]	@ (8008b8c <HAL_DMA_Abort_IT+0x1c8>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d018      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a4c      	ldr	r2, [pc, #304]	@ (8008b90 <HAL_DMA_Abort_IT+0x1cc>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d013      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a4a      	ldr	r2, [pc, #296]	@ (8008b94 <HAL_DMA_Abort_IT+0x1d0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00e      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a49      	ldr	r2, [pc, #292]	@ (8008b98 <HAL_DMA_Abort_IT+0x1d4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d009      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a47      	ldr	r2, [pc, #284]	@ (8008b9c <HAL_DMA_Abort_IT+0x1d8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d004      	beq.n	8008a8c <HAL_DMA_Abort_IT+0xc8>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a46      	ldr	r2, [pc, #280]	@ (8008ba0 <HAL_DMA_Abort_IT+0x1dc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d101      	bne.n	8008a90 <HAL_DMA_Abort_IT+0xcc>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e000      	b.n	8008a92 <HAL_DMA_Abort_IT+0xce>
 8008a90:	2300      	movs	r3, #0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f000 8086 	beq.w	8008ba4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2204      	movs	r2, #4
 8008a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8008b64 <HAL_DMA_Abort_IT+0x1a0>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d04a      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a2e      	ldr	r2, [pc, #184]	@ (8008b68 <HAL_DMA_Abort_IT+0x1a4>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d045      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8008b6c <HAL_DMA_Abort_IT+0x1a8>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d040      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8008b70 <HAL_DMA_Abort_IT+0x1ac>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d03b      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a29      	ldr	r2, [pc, #164]	@ (8008b74 <HAL_DMA_Abort_IT+0x1b0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d036      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a28      	ldr	r2, [pc, #160]	@ (8008b78 <HAL_DMA_Abort_IT+0x1b4>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d031      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a26      	ldr	r2, [pc, #152]	@ (8008b7c <HAL_DMA_Abort_IT+0x1b8>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d02c      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a25      	ldr	r2, [pc, #148]	@ (8008b80 <HAL_DMA_Abort_IT+0x1bc>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d027      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a23      	ldr	r2, [pc, #140]	@ (8008b84 <HAL_DMA_Abort_IT+0x1c0>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d022      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a22      	ldr	r2, [pc, #136]	@ (8008b88 <HAL_DMA_Abort_IT+0x1c4>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d01d      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a20      	ldr	r2, [pc, #128]	@ (8008b8c <HAL_DMA_Abort_IT+0x1c8>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d018      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a1f      	ldr	r2, [pc, #124]	@ (8008b90 <HAL_DMA_Abort_IT+0x1cc>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d013      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008b94 <HAL_DMA_Abort_IT+0x1d0>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00e      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a1c      	ldr	r2, [pc, #112]	@ (8008b98 <HAL_DMA_Abort_IT+0x1d4>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d009      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a1a      	ldr	r2, [pc, #104]	@ (8008b9c <HAL_DMA_Abort_IT+0x1d8>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d004      	beq.n	8008b40 <HAL_DMA_Abort_IT+0x17c>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a19      	ldr	r2, [pc, #100]	@ (8008ba0 <HAL_DMA_Abort_IT+0x1dc>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d108      	bne.n	8008b52 <HAL_DMA_Abort_IT+0x18e>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f022 0201 	bic.w	r2, r2, #1
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	e178      	b.n	8008e44 <HAL_DMA_Abort_IT+0x480>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f022 0201 	bic.w	r2, r2, #1
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	e16f      	b.n	8008e44 <HAL_DMA_Abort_IT+0x480>
 8008b64:	40020010 	.word	0x40020010
 8008b68:	40020028 	.word	0x40020028
 8008b6c:	40020040 	.word	0x40020040
 8008b70:	40020058 	.word	0x40020058
 8008b74:	40020070 	.word	0x40020070
 8008b78:	40020088 	.word	0x40020088
 8008b7c:	400200a0 	.word	0x400200a0
 8008b80:	400200b8 	.word	0x400200b8
 8008b84:	40020410 	.word	0x40020410
 8008b88:	40020428 	.word	0x40020428
 8008b8c:	40020440 	.word	0x40020440
 8008b90:	40020458 	.word	0x40020458
 8008b94:	40020470 	.word	0x40020470
 8008b98:	40020488 	.word	0x40020488
 8008b9c:	400204a0 	.word	0x400204a0
 8008ba0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 020e 	bic.w	r2, r2, #14
 8008bb2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a6c      	ldr	r2, [pc, #432]	@ (8008d6c <HAL_DMA_Abort_IT+0x3a8>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d04a      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a6b      	ldr	r2, [pc, #428]	@ (8008d70 <HAL_DMA_Abort_IT+0x3ac>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d045      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a69      	ldr	r2, [pc, #420]	@ (8008d74 <HAL_DMA_Abort_IT+0x3b0>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d040      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a68      	ldr	r2, [pc, #416]	@ (8008d78 <HAL_DMA_Abort_IT+0x3b4>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d03b      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a66      	ldr	r2, [pc, #408]	@ (8008d7c <HAL_DMA_Abort_IT+0x3b8>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d036      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a65      	ldr	r2, [pc, #404]	@ (8008d80 <HAL_DMA_Abort_IT+0x3bc>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d031      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a63      	ldr	r2, [pc, #396]	@ (8008d84 <HAL_DMA_Abort_IT+0x3c0>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d02c      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a62      	ldr	r2, [pc, #392]	@ (8008d88 <HAL_DMA_Abort_IT+0x3c4>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d027      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a60      	ldr	r2, [pc, #384]	@ (8008d8c <HAL_DMA_Abort_IT+0x3c8>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d022      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a5f      	ldr	r2, [pc, #380]	@ (8008d90 <HAL_DMA_Abort_IT+0x3cc>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d01d      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8008d94 <HAL_DMA_Abort_IT+0x3d0>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d018      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a5c      	ldr	r2, [pc, #368]	@ (8008d98 <HAL_DMA_Abort_IT+0x3d4>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d013      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a5a      	ldr	r2, [pc, #360]	@ (8008d9c <HAL_DMA_Abort_IT+0x3d8>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d00e      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a59      	ldr	r2, [pc, #356]	@ (8008da0 <HAL_DMA_Abort_IT+0x3dc>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d009      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a57      	ldr	r2, [pc, #348]	@ (8008da4 <HAL_DMA_Abort_IT+0x3e0>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d004      	beq.n	8008c54 <HAL_DMA_Abort_IT+0x290>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a56      	ldr	r2, [pc, #344]	@ (8008da8 <HAL_DMA_Abort_IT+0x3e4>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d108      	bne.n	8008c66 <HAL_DMA_Abort_IT+0x2a2>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f022 0201 	bic.w	r2, r2, #1
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	e007      	b.n	8008c76 <HAL_DMA_Abort_IT+0x2b2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0201 	bic.w	r2, r2, #1
 8008c74:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a3c      	ldr	r2, [pc, #240]	@ (8008d6c <HAL_DMA_Abort_IT+0x3a8>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d072      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a3a      	ldr	r2, [pc, #232]	@ (8008d70 <HAL_DMA_Abort_IT+0x3ac>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d06d      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a39      	ldr	r2, [pc, #228]	@ (8008d74 <HAL_DMA_Abort_IT+0x3b0>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d068      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a37      	ldr	r2, [pc, #220]	@ (8008d78 <HAL_DMA_Abort_IT+0x3b4>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d063      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a36      	ldr	r2, [pc, #216]	@ (8008d7c <HAL_DMA_Abort_IT+0x3b8>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d05e      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a34      	ldr	r2, [pc, #208]	@ (8008d80 <HAL_DMA_Abort_IT+0x3bc>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d059      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a33      	ldr	r2, [pc, #204]	@ (8008d84 <HAL_DMA_Abort_IT+0x3c0>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d054      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a31      	ldr	r2, [pc, #196]	@ (8008d88 <HAL_DMA_Abort_IT+0x3c4>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d04f      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a30      	ldr	r2, [pc, #192]	@ (8008d8c <HAL_DMA_Abort_IT+0x3c8>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d04a      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8008d90 <HAL_DMA_Abort_IT+0x3cc>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d045      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a2d      	ldr	r2, [pc, #180]	@ (8008d94 <HAL_DMA_Abort_IT+0x3d0>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d040      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8008d98 <HAL_DMA_Abort_IT+0x3d4>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d03b      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8008d9c <HAL_DMA_Abort_IT+0x3d8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d036      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a28      	ldr	r2, [pc, #160]	@ (8008da0 <HAL_DMA_Abort_IT+0x3dc>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d031      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a27      	ldr	r2, [pc, #156]	@ (8008da4 <HAL_DMA_Abort_IT+0x3e0>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d02c      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a25      	ldr	r2, [pc, #148]	@ (8008da8 <HAL_DMA_Abort_IT+0x3e4>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d027      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a24      	ldr	r2, [pc, #144]	@ (8008dac <HAL_DMA_Abort_IT+0x3e8>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d022      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a22      	ldr	r2, [pc, #136]	@ (8008db0 <HAL_DMA_Abort_IT+0x3ec>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d01d      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a21      	ldr	r2, [pc, #132]	@ (8008db4 <HAL_DMA_Abort_IT+0x3f0>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d018      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a1f      	ldr	r2, [pc, #124]	@ (8008db8 <HAL_DMA_Abort_IT+0x3f4>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d013      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a1e      	ldr	r2, [pc, #120]	@ (8008dbc <HAL_DMA_Abort_IT+0x3f8>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d00e      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8008dc0 <HAL_DMA_Abort_IT+0x3fc>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d009      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a1b      	ldr	r2, [pc, #108]	@ (8008dc4 <HAL_DMA_Abort_IT+0x400>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d004      	beq.n	8008d66 <HAL_DMA_Abort_IT+0x3a2>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a19      	ldr	r2, [pc, #100]	@ (8008dc8 <HAL_DMA_Abort_IT+0x404>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d132      	bne.n	8008dcc <HAL_DMA_Abort_IT+0x408>
 8008d66:	2301      	movs	r3, #1
 8008d68:	e031      	b.n	8008dce <HAL_DMA_Abort_IT+0x40a>
 8008d6a:	bf00      	nop
 8008d6c:	40020010 	.word	0x40020010
 8008d70:	40020028 	.word	0x40020028
 8008d74:	40020040 	.word	0x40020040
 8008d78:	40020058 	.word	0x40020058
 8008d7c:	40020070 	.word	0x40020070
 8008d80:	40020088 	.word	0x40020088
 8008d84:	400200a0 	.word	0x400200a0
 8008d88:	400200b8 	.word	0x400200b8
 8008d8c:	40020410 	.word	0x40020410
 8008d90:	40020428 	.word	0x40020428
 8008d94:	40020440 	.word	0x40020440
 8008d98:	40020458 	.word	0x40020458
 8008d9c:	40020470 	.word	0x40020470
 8008da0:	40020488 	.word	0x40020488
 8008da4:	400204a0 	.word	0x400204a0
 8008da8:	400204b8 	.word	0x400204b8
 8008dac:	58025408 	.word	0x58025408
 8008db0:	5802541c 	.word	0x5802541c
 8008db4:	58025430 	.word	0x58025430
 8008db8:	58025444 	.word	0x58025444
 8008dbc:	58025458 	.word	0x58025458
 8008dc0:	5802546c 	.word	0x5802546c
 8008dc4:	58025480 	.word	0x58025480
 8008dc8:	58025494 	.word	0x58025494
 8008dcc:	2300      	movs	r3, #0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d028      	beq.n	8008e24 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008de0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008de6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dec:	f003 031f 	and.w	r3, r3, #31
 8008df0:	2201      	movs	r2, #1
 8008df2:	409a      	lsls	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008e00:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00c      	beq.n	8008e24 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e18:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008e22:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop

08008e50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08a      	sub	sp, #40	@ 0x28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008e5c:	4b67      	ldr	r3, [pc, #412]	@ (8008ffc <HAL_DMA_IRQHandler+0x1ac>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a67      	ldr	r2, [pc, #412]	@ (8009000 <HAL_DMA_IRQHandler+0x1b0>)
 8008e62:	fba2 2303 	umull	r2, r3, r2, r3
 8008e66:	0a9b      	lsrs	r3, r3, #10
 8008e68:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a5f      	ldr	r2, [pc, #380]	@ (8009004 <HAL_DMA_IRQHandler+0x1b4>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d04a      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a5d      	ldr	r2, [pc, #372]	@ (8009008 <HAL_DMA_IRQHandler+0x1b8>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d045      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a5c      	ldr	r2, [pc, #368]	@ (800900c <HAL_DMA_IRQHandler+0x1bc>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d040      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a5a      	ldr	r2, [pc, #360]	@ (8009010 <HAL_DMA_IRQHandler+0x1c0>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d03b      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a59      	ldr	r2, [pc, #356]	@ (8009014 <HAL_DMA_IRQHandler+0x1c4>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d036      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a57      	ldr	r2, [pc, #348]	@ (8009018 <HAL_DMA_IRQHandler+0x1c8>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d031      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a56      	ldr	r2, [pc, #344]	@ (800901c <HAL_DMA_IRQHandler+0x1cc>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d02c      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a54      	ldr	r2, [pc, #336]	@ (8009020 <HAL_DMA_IRQHandler+0x1d0>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d027      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a53      	ldr	r2, [pc, #332]	@ (8009024 <HAL_DMA_IRQHandler+0x1d4>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d022      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a51      	ldr	r2, [pc, #324]	@ (8009028 <HAL_DMA_IRQHandler+0x1d8>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d01d      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a50      	ldr	r2, [pc, #320]	@ (800902c <HAL_DMA_IRQHandler+0x1dc>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d018      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a4e      	ldr	r2, [pc, #312]	@ (8009030 <HAL_DMA_IRQHandler+0x1e0>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d013      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a4d      	ldr	r2, [pc, #308]	@ (8009034 <HAL_DMA_IRQHandler+0x1e4>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d00e      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a4b      	ldr	r2, [pc, #300]	@ (8009038 <HAL_DMA_IRQHandler+0x1e8>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d009      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a4a      	ldr	r2, [pc, #296]	@ (800903c <HAL_DMA_IRQHandler+0x1ec>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d004      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xd2>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a48      	ldr	r2, [pc, #288]	@ (8009040 <HAL_DMA_IRQHandler+0x1f0>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d101      	bne.n	8008f26 <HAL_DMA_IRQHandler+0xd6>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e000      	b.n	8008f28 <HAL_DMA_IRQHandler+0xd8>
 8008f26:	2300      	movs	r3, #0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 842b 	beq.w	8009784 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f32:	f003 031f 	and.w	r3, r3, #31
 8008f36:	2208      	movs	r2, #8
 8008f38:	409a      	lsls	r2, r3
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 80a2 	beq.w	8009088 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a2e      	ldr	r2, [pc, #184]	@ (8009004 <HAL_DMA_IRQHandler+0x1b4>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d04a      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a2d      	ldr	r2, [pc, #180]	@ (8009008 <HAL_DMA_IRQHandler+0x1b8>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d045      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800900c <HAL_DMA_IRQHandler+0x1bc>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d040      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a2a      	ldr	r2, [pc, #168]	@ (8009010 <HAL_DMA_IRQHandler+0x1c0>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d03b      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a28      	ldr	r2, [pc, #160]	@ (8009014 <HAL_DMA_IRQHandler+0x1c4>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d036      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a27      	ldr	r2, [pc, #156]	@ (8009018 <HAL_DMA_IRQHandler+0x1c8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d031      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a25      	ldr	r2, [pc, #148]	@ (800901c <HAL_DMA_IRQHandler+0x1cc>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d02c      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a24      	ldr	r2, [pc, #144]	@ (8009020 <HAL_DMA_IRQHandler+0x1d0>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d027      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a22      	ldr	r2, [pc, #136]	@ (8009024 <HAL_DMA_IRQHandler+0x1d4>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d022      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a21      	ldr	r2, [pc, #132]	@ (8009028 <HAL_DMA_IRQHandler+0x1d8>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d01d      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a1f      	ldr	r2, [pc, #124]	@ (800902c <HAL_DMA_IRQHandler+0x1dc>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d018      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8009030 <HAL_DMA_IRQHandler+0x1e0>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d013      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8009034 <HAL_DMA_IRQHandler+0x1e4>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d00e      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a1b      	ldr	r2, [pc, #108]	@ (8009038 <HAL_DMA_IRQHandler+0x1e8>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d009      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a19      	ldr	r2, [pc, #100]	@ (800903c <HAL_DMA_IRQHandler+0x1ec>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d004      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x194>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a18      	ldr	r2, [pc, #96]	@ (8009040 <HAL_DMA_IRQHandler+0x1f0>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d12f      	bne.n	8009044 <HAL_DMA_IRQHandler+0x1f4>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	bf14      	ite	ne
 8008ff2:	2301      	movne	r3, #1
 8008ff4:	2300      	moveq	r3, #0
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	e02e      	b.n	8009058 <HAL_DMA_IRQHandler+0x208>
 8008ffa:	bf00      	nop
 8008ffc:	24000080 	.word	0x24000080
 8009000:	1b4e81b5 	.word	0x1b4e81b5
 8009004:	40020010 	.word	0x40020010
 8009008:	40020028 	.word	0x40020028
 800900c:	40020040 	.word	0x40020040
 8009010:	40020058 	.word	0x40020058
 8009014:	40020070 	.word	0x40020070
 8009018:	40020088 	.word	0x40020088
 800901c:	400200a0 	.word	0x400200a0
 8009020:	400200b8 	.word	0x400200b8
 8009024:	40020410 	.word	0x40020410
 8009028:	40020428 	.word	0x40020428
 800902c:	40020440 	.word	0x40020440
 8009030:	40020458 	.word	0x40020458
 8009034:	40020470 	.word	0x40020470
 8009038:	40020488 	.word	0x40020488
 800903c:	400204a0 	.word	0x400204a0
 8009040:	400204b8 	.word	0x400204b8
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0308 	and.w	r3, r3, #8
 800904e:	2b00      	cmp	r3, #0
 8009050:	bf14      	ite	ne
 8009052:	2301      	movne	r3, #1
 8009054:	2300      	moveq	r3, #0
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b00      	cmp	r3, #0
 800905a:	d015      	beq.n	8009088 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f022 0204 	bic.w	r2, r2, #4
 800906a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009070:	f003 031f 	and.w	r3, r3, #31
 8009074:	2208      	movs	r2, #8
 8009076:	409a      	lsls	r2, r3
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009080:	f043 0201 	orr.w	r2, r3, #1
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800908c:	f003 031f 	and.w	r3, r3, #31
 8009090:	69ba      	ldr	r2, [r7, #24]
 8009092:	fa22 f303 	lsr.w	r3, r2, r3
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	2b00      	cmp	r3, #0
 800909c:	d06e      	beq.n	800917c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a69      	ldr	r2, [pc, #420]	@ (8009248 <HAL_DMA_IRQHandler+0x3f8>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d04a      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a67      	ldr	r2, [pc, #412]	@ (800924c <HAL_DMA_IRQHandler+0x3fc>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d045      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a66      	ldr	r2, [pc, #408]	@ (8009250 <HAL_DMA_IRQHandler+0x400>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d040      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a64      	ldr	r2, [pc, #400]	@ (8009254 <HAL_DMA_IRQHandler+0x404>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d03b      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a63      	ldr	r2, [pc, #396]	@ (8009258 <HAL_DMA_IRQHandler+0x408>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d036      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a61      	ldr	r2, [pc, #388]	@ (800925c <HAL_DMA_IRQHandler+0x40c>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d031      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a60      	ldr	r2, [pc, #384]	@ (8009260 <HAL_DMA_IRQHandler+0x410>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d02c      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a5e      	ldr	r2, [pc, #376]	@ (8009264 <HAL_DMA_IRQHandler+0x414>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d027      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a5d      	ldr	r2, [pc, #372]	@ (8009268 <HAL_DMA_IRQHandler+0x418>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d022      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a5b      	ldr	r2, [pc, #364]	@ (800926c <HAL_DMA_IRQHandler+0x41c>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d01d      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a5a      	ldr	r2, [pc, #360]	@ (8009270 <HAL_DMA_IRQHandler+0x420>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d018      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a58      	ldr	r2, [pc, #352]	@ (8009274 <HAL_DMA_IRQHandler+0x424>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d013      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a57      	ldr	r2, [pc, #348]	@ (8009278 <HAL_DMA_IRQHandler+0x428>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d00e      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a55      	ldr	r2, [pc, #340]	@ (800927c <HAL_DMA_IRQHandler+0x42c>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d009      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a54      	ldr	r2, [pc, #336]	@ (8009280 <HAL_DMA_IRQHandler+0x430>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d004      	beq.n	800913e <HAL_DMA_IRQHandler+0x2ee>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a52      	ldr	r2, [pc, #328]	@ (8009284 <HAL_DMA_IRQHandler+0x434>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d10a      	bne.n	8009154 <HAL_DMA_IRQHandler+0x304>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009148:	2b00      	cmp	r3, #0
 800914a:	bf14      	ite	ne
 800914c:	2301      	movne	r3, #1
 800914e:	2300      	moveq	r3, #0
 8009150:	b2db      	uxtb	r3, r3
 8009152:	e003      	b.n	800915c <HAL_DMA_IRQHandler+0x30c>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2300      	movs	r3, #0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00d      	beq.n	800917c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009164:	f003 031f 	and.w	r3, r3, #31
 8009168:	2201      	movs	r2, #1
 800916a:	409a      	lsls	r2, r3
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009174:	f043 0202 	orr.w	r2, r3, #2
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009180:	f003 031f 	and.w	r3, r3, #31
 8009184:	2204      	movs	r2, #4
 8009186:	409a      	lsls	r2, r3
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	4013      	ands	r3, r2
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 808f 	beq.w	80092b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a2c      	ldr	r2, [pc, #176]	@ (8009248 <HAL_DMA_IRQHandler+0x3f8>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d04a      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a2a      	ldr	r2, [pc, #168]	@ (800924c <HAL_DMA_IRQHandler+0x3fc>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d045      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a29      	ldr	r2, [pc, #164]	@ (8009250 <HAL_DMA_IRQHandler+0x400>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d040      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a27      	ldr	r2, [pc, #156]	@ (8009254 <HAL_DMA_IRQHandler+0x404>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d03b      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a26      	ldr	r2, [pc, #152]	@ (8009258 <HAL_DMA_IRQHandler+0x408>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d036      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a24      	ldr	r2, [pc, #144]	@ (800925c <HAL_DMA_IRQHandler+0x40c>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d031      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a23      	ldr	r2, [pc, #140]	@ (8009260 <HAL_DMA_IRQHandler+0x410>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d02c      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a21      	ldr	r2, [pc, #132]	@ (8009264 <HAL_DMA_IRQHandler+0x414>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d027      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a20      	ldr	r2, [pc, #128]	@ (8009268 <HAL_DMA_IRQHandler+0x418>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d022      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a1e      	ldr	r2, [pc, #120]	@ (800926c <HAL_DMA_IRQHandler+0x41c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d01d      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a1d      	ldr	r2, [pc, #116]	@ (8009270 <HAL_DMA_IRQHandler+0x420>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d018      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a1b      	ldr	r2, [pc, #108]	@ (8009274 <HAL_DMA_IRQHandler+0x424>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d013      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a1a      	ldr	r2, [pc, #104]	@ (8009278 <HAL_DMA_IRQHandler+0x428>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d00e      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a18      	ldr	r2, [pc, #96]	@ (800927c <HAL_DMA_IRQHandler+0x42c>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d009      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a17      	ldr	r2, [pc, #92]	@ (8009280 <HAL_DMA_IRQHandler+0x430>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d004      	beq.n	8009232 <HAL_DMA_IRQHandler+0x3e2>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a15      	ldr	r2, [pc, #84]	@ (8009284 <HAL_DMA_IRQHandler+0x434>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d12a      	bne.n	8009288 <HAL_DMA_IRQHandler+0x438>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0302 	and.w	r3, r3, #2
 800923c:	2b00      	cmp	r3, #0
 800923e:	bf14      	ite	ne
 8009240:	2301      	movne	r3, #1
 8009242:	2300      	moveq	r3, #0
 8009244:	b2db      	uxtb	r3, r3
 8009246:	e023      	b.n	8009290 <HAL_DMA_IRQHandler+0x440>
 8009248:	40020010 	.word	0x40020010
 800924c:	40020028 	.word	0x40020028
 8009250:	40020040 	.word	0x40020040
 8009254:	40020058 	.word	0x40020058
 8009258:	40020070 	.word	0x40020070
 800925c:	40020088 	.word	0x40020088
 8009260:	400200a0 	.word	0x400200a0
 8009264:	400200b8 	.word	0x400200b8
 8009268:	40020410 	.word	0x40020410
 800926c:	40020428 	.word	0x40020428
 8009270:	40020440 	.word	0x40020440
 8009274:	40020458 	.word	0x40020458
 8009278:	40020470 	.word	0x40020470
 800927c:	40020488 	.word	0x40020488
 8009280:	400204a0 	.word	0x400204a0
 8009284:	400204b8 	.word	0x400204b8
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2300      	movs	r3, #0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00d      	beq.n	80092b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009298:	f003 031f 	and.w	r3, r3, #31
 800929c:	2204      	movs	r2, #4
 800929e:	409a      	lsls	r2, r3
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092a8:	f043 0204 	orr.w	r2, r3, #4
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092b4:	f003 031f 	and.w	r3, r3, #31
 80092b8:	2210      	movs	r2, #16
 80092ba:	409a      	lsls	r2, r3
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	4013      	ands	r3, r2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 80a6 	beq.w	8009412 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a85      	ldr	r2, [pc, #532]	@ (80094e0 <HAL_DMA_IRQHandler+0x690>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d04a      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a83      	ldr	r2, [pc, #524]	@ (80094e4 <HAL_DMA_IRQHandler+0x694>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d045      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a82      	ldr	r2, [pc, #520]	@ (80094e8 <HAL_DMA_IRQHandler+0x698>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d040      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a80      	ldr	r2, [pc, #512]	@ (80094ec <HAL_DMA_IRQHandler+0x69c>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d03b      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a7f      	ldr	r2, [pc, #508]	@ (80094f0 <HAL_DMA_IRQHandler+0x6a0>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d036      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a7d      	ldr	r2, [pc, #500]	@ (80094f4 <HAL_DMA_IRQHandler+0x6a4>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d031      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a7c      	ldr	r2, [pc, #496]	@ (80094f8 <HAL_DMA_IRQHandler+0x6a8>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d02c      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a7a      	ldr	r2, [pc, #488]	@ (80094fc <HAL_DMA_IRQHandler+0x6ac>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d027      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a79      	ldr	r2, [pc, #484]	@ (8009500 <HAL_DMA_IRQHandler+0x6b0>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d022      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a77      	ldr	r2, [pc, #476]	@ (8009504 <HAL_DMA_IRQHandler+0x6b4>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d01d      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a76      	ldr	r2, [pc, #472]	@ (8009508 <HAL_DMA_IRQHandler+0x6b8>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d018      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a74      	ldr	r2, [pc, #464]	@ (800950c <HAL_DMA_IRQHandler+0x6bc>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d013      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a73      	ldr	r2, [pc, #460]	@ (8009510 <HAL_DMA_IRQHandler+0x6c0>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00e      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a71      	ldr	r2, [pc, #452]	@ (8009514 <HAL_DMA_IRQHandler+0x6c4>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d009      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a70      	ldr	r2, [pc, #448]	@ (8009518 <HAL_DMA_IRQHandler+0x6c8>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d004      	beq.n	8009366 <HAL_DMA_IRQHandler+0x516>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a6e      	ldr	r2, [pc, #440]	@ (800951c <HAL_DMA_IRQHandler+0x6cc>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d10a      	bne.n	800937c <HAL_DMA_IRQHandler+0x52c>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0308 	and.w	r3, r3, #8
 8009370:	2b00      	cmp	r3, #0
 8009372:	bf14      	ite	ne
 8009374:	2301      	movne	r3, #1
 8009376:	2300      	moveq	r3, #0
 8009378:	b2db      	uxtb	r3, r3
 800937a:	e009      	b.n	8009390 <HAL_DMA_IRQHandler+0x540>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0304 	and.w	r3, r3, #4
 8009386:	2b00      	cmp	r3, #0
 8009388:	bf14      	ite	ne
 800938a:	2301      	movne	r3, #1
 800938c:	2300      	moveq	r3, #0
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b00      	cmp	r3, #0
 8009392:	d03e      	beq.n	8009412 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009398:	f003 031f 	and.w	r3, r3, #31
 800939c:	2210      	movs	r2, #16
 800939e:	409a      	lsls	r2, r3
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d018      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d108      	bne.n	80093d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d024      	beq.n	8009412 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	4798      	blx	r3
 80093d0:	e01f      	b.n	8009412 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d01b      	beq.n	8009412 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	4798      	blx	r3
 80093e2:	e016      	b.n	8009412 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d107      	bne.n	8009402 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f022 0208 	bic.w	r2, r2, #8
 8009400:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009416:	f003 031f 	and.w	r3, r3, #31
 800941a:	2220      	movs	r2, #32
 800941c:	409a      	lsls	r2, r3
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	4013      	ands	r3, r2
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 8110 	beq.w	8009648 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a2c      	ldr	r2, [pc, #176]	@ (80094e0 <HAL_DMA_IRQHandler+0x690>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d04a      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a2b      	ldr	r2, [pc, #172]	@ (80094e4 <HAL_DMA_IRQHandler+0x694>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d045      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a29      	ldr	r2, [pc, #164]	@ (80094e8 <HAL_DMA_IRQHandler+0x698>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d040      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a28      	ldr	r2, [pc, #160]	@ (80094ec <HAL_DMA_IRQHandler+0x69c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d03b      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a26      	ldr	r2, [pc, #152]	@ (80094f0 <HAL_DMA_IRQHandler+0x6a0>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d036      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a25      	ldr	r2, [pc, #148]	@ (80094f4 <HAL_DMA_IRQHandler+0x6a4>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d031      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a23      	ldr	r2, [pc, #140]	@ (80094f8 <HAL_DMA_IRQHandler+0x6a8>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d02c      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a22      	ldr	r2, [pc, #136]	@ (80094fc <HAL_DMA_IRQHandler+0x6ac>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d027      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a20      	ldr	r2, [pc, #128]	@ (8009500 <HAL_DMA_IRQHandler+0x6b0>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d022      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a1f      	ldr	r2, [pc, #124]	@ (8009504 <HAL_DMA_IRQHandler+0x6b4>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d01d      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a1d      	ldr	r2, [pc, #116]	@ (8009508 <HAL_DMA_IRQHandler+0x6b8>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d018      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a1c      	ldr	r2, [pc, #112]	@ (800950c <HAL_DMA_IRQHandler+0x6bc>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d013      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a1a      	ldr	r2, [pc, #104]	@ (8009510 <HAL_DMA_IRQHandler+0x6c0>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d00e      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a19      	ldr	r2, [pc, #100]	@ (8009514 <HAL_DMA_IRQHandler+0x6c4>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d009      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a17      	ldr	r2, [pc, #92]	@ (8009518 <HAL_DMA_IRQHandler+0x6c8>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d004      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x678>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a16      	ldr	r2, [pc, #88]	@ (800951c <HAL_DMA_IRQHandler+0x6cc>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d12b      	bne.n	8009520 <HAL_DMA_IRQHandler+0x6d0>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0310 	and.w	r3, r3, #16
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	bf14      	ite	ne
 80094d6:	2301      	movne	r3, #1
 80094d8:	2300      	moveq	r3, #0
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	e02a      	b.n	8009534 <HAL_DMA_IRQHandler+0x6e4>
 80094de:	bf00      	nop
 80094e0:	40020010 	.word	0x40020010
 80094e4:	40020028 	.word	0x40020028
 80094e8:	40020040 	.word	0x40020040
 80094ec:	40020058 	.word	0x40020058
 80094f0:	40020070 	.word	0x40020070
 80094f4:	40020088 	.word	0x40020088
 80094f8:	400200a0 	.word	0x400200a0
 80094fc:	400200b8 	.word	0x400200b8
 8009500:	40020410 	.word	0x40020410
 8009504:	40020428 	.word	0x40020428
 8009508:	40020440 	.word	0x40020440
 800950c:	40020458 	.word	0x40020458
 8009510:	40020470 	.word	0x40020470
 8009514:	40020488 	.word	0x40020488
 8009518:	400204a0 	.word	0x400204a0
 800951c:	400204b8 	.word	0x400204b8
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b00      	cmp	r3, #0
 800952c:	bf14      	ite	ne
 800952e:	2301      	movne	r3, #1
 8009530:	2300      	moveq	r3, #0
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 8087 	beq.w	8009648 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800953e:	f003 031f 	and.w	r3, r3, #31
 8009542:	2220      	movs	r2, #32
 8009544:	409a      	lsls	r2, r3
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b04      	cmp	r3, #4
 8009554:	d139      	bne.n	80095ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f022 0216 	bic.w	r2, r2, #22
 8009564:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695a      	ldr	r2, [r3, #20]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009574:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800957a:	2b00      	cmp	r3, #0
 800957c:	d103      	bne.n	8009586 <HAL_DMA_IRQHandler+0x736>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009582:	2b00      	cmp	r3, #0
 8009584:	d007      	beq.n	8009596 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f022 0208 	bic.w	r2, r2, #8
 8009594:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800959a:	f003 031f 	and.w	r3, r3, #31
 800959e:	223f      	movs	r2, #63	@ 0x3f
 80095a0:	409a      	lsls	r2, r3
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 834a 	beq.w	8009c54 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	4798      	blx	r3
          }
          return;
 80095c8:	e344      	b.n	8009c54 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d018      	beq.n	800960a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d108      	bne.n	80095f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d02c      	beq.n	8009648 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	4798      	blx	r3
 80095f6:	e027      	b.n	8009648 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d023      	beq.n	8009648 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	4798      	blx	r3
 8009608:	e01e      	b.n	8009648 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10f      	bne.n	8009638 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f022 0210 	bic.w	r2, r2, #16
 8009626:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800963c:	2b00      	cmp	r3, #0
 800963e:	d003      	beq.n	8009648 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 8306 	beq.w	8009c5e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 8088 	beq.w	8009770 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2204      	movs	r2, #4
 8009664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a7a      	ldr	r2, [pc, #488]	@ (8009858 <HAL_DMA_IRQHandler+0xa08>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d04a      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a79      	ldr	r2, [pc, #484]	@ (800985c <HAL_DMA_IRQHandler+0xa0c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d045      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a77      	ldr	r2, [pc, #476]	@ (8009860 <HAL_DMA_IRQHandler+0xa10>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d040      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a76      	ldr	r2, [pc, #472]	@ (8009864 <HAL_DMA_IRQHandler+0xa14>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d03b      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a74      	ldr	r2, [pc, #464]	@ (8009868 <HAL_DMA_IRQHandler+0xa18>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d036      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a73      	ldr	r2, [pc, #460]	@ (800986c <HAL_DMA_IRQHandler+0xa1c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d031      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a71      	ldr	r2, [pc, #452]	@ (8009870 <HAL_DMA_IRQHandler+0xa20>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d02c      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a70      	ldr	r2, [pc, #448]	@ (8009874 <HAL_DMA_IRQHandler+0xa24>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d027      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a6e      	ldr	r2, [pc, #440]	@ (8009878 <HAL_DMA_IRQHandler+0xa28>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d022      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a6d      	ldr	r2, [pc, #436]	@ (800987c <HAL_DMA_IRQHandler+0xa2c>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d01d      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a6b      	ldr	r2, [pc, #428]	@ (8009880 <HAL_DMA_IRQHandler+0xa30>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d018      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a6a      	ldr	r2, [pc, #424]	@ (8009884 <HAL_DMA_IRQHandler+0xa34>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d013      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a68      	ldr	r2, [pc, #416]	@ (8009888 <HAL_DMA_IRQHandler+0xa38>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d00e      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a67      	ldr	r2, [pc, #412]	@ (800988c <HAL_DMA_IRQHandler+0xa3c>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d009      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a65      	ldr	r2, [pc, #404]	@ (8009890 <HAL_DMA_IRQHandler+0xa40>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d004      	beq.n	8009708 <HAL_DMA_IRQHandler+0x8b8>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a64      	ldr	r2, [pc, #400]	@ (8009894 <HAL_DMA_IRQHandler+0xa44>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d108      	bne.n	800971a <HAL_DMA_IRQHandler+0x8ca>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0201 	bic.w	r2, r2, #1
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	e007      	b.n	800972a <HAL_DMA_IRQHandler+0x8da>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f022 0201 	bic.w	r2, r2, #1
 8009728:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	3301      	adds	r3, #1
 800972e:	60fb      	str	r3, [r7, #12]
 8009730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009732:	429a      	cmp	r2, r3
 8009734:	d307      	bcc.n	8009746 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1f2      	bne.n	800972a <HAL_DMA_IRQHandler+0x8da>
 8009744:	e000      	b.n	8009748 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009746:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	d004      	beq.n	8009760 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2203      	movs	r2, #3
 800975a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800975e:	e003      	b.n	8009768 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 8272 	beq.w	8009c5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	4798      	blx	r3
 8009782:	e26c      	b.n	8009c5e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a43      	ldr	r2, [pc, #268]	@ (8009898 <HAL_DMA_IRQHandler+0xa48>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d022      	beq.n	80097d4 <HAL_DMA_IRQHandler+0x984>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a42      	ldr	r2, [pc, #264]	@ (800989c <HAL_DMA_IRQHandler+0xa4c>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d01d      	beq.n	80097d4 <HAL_DMA_IRQHandler+0x984>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a40      	ldr	r2, [pc, #256]	@ (80098a0 <HAL_DMA_IRQHandler+0xa50>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d018      	beq.n	80097d4 <HAL_DMA_IRQHandler+0x984>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a3f      	ldr	r2, [pc, #252]	@ (80098a4 <HAL_DMA_IRQHandler+0xa54>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d013      	beq.n	80097d4 <HAL_DMA_IRQHandler+0x984>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a3d      	ldr	r2, [pc, #244]	@ (80098a8 <HAL_DMA_IRQHandler+0xa58>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d00e      	beq.n	80097d4 <HAL_DMA_IRQHandler+0x984>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a3c      	ldr	r2, [pc, #240]	@ (80098ac <HAL_DMA_IRQHandler+0xa5c>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d009      	beq.n	80097d4 <HAL_DMA_IRQHandler+0x984>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a3a      	ldr	r2, [pc, #232]	@ (80098b0 <HAL_DMA_IRQHandler+0xa60>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d004      	beq.n	80097d4 <HAL_DMA_IRQHandler+0x984>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a39      	ldr	r2, [pc, #228]	@ (80098b4 <HAL_DMA_IRQHandler+0xa64>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d101      	bne.n	80097d8 <HAL_DMA_IRQHandler+0x988>
 80097d4:	2301      	movs	r3, #1
 80097d6:	e000      	b.n	80097da <HAL_DMA_IRQHandler+0x98a>
 80097d8:	2300      	movs	r3, #0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 823f 	beq.w	8009c5e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097ec:	f003 031f 	and.w	r3, r3, #31
 80097f0:	2204      	movs	r2, #4
 80097f2:	409a      	lsls	r2, r3
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	4013      	ands	r3, r2
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80cd 	beq.w	8009998 <HAL_DMA_IRQHandler+0xb48>
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	f003 0304 	and.w	r3, r3, #4
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 80c7 	beq.w	8009998 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800980e:	f003 031f 	and.w	r3, r3, #31
 8009812:	2204      	movs	r2, #4
 8009814:	409a      	lsls	r2, r3
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009820:	2b00      	cmp	r3, #0
 8009822:	d049      	beq.n	80098b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d109      	bne.n	8009842 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009832:	2b00      	cmp	r3, #0
 8009834:	f000 8210 	beq.w	8009c58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009840:	e20a      	b.n	8009c58 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	f000 8206 	beq.w	8009c58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009854:	e200      	b.n	8009c58 <HAL_DMA_IRQHandler+0xe08>
 8009856:	bf00      	nop
 8009858:	40020010 	.word	0x40020010
 800985c:	40020028 	.word	0x40020028
 8009860:	40020040 	.word	0x40020040
 8009864:	40020058 	.word	0x40020058
 8009868:	40020070 	.word	0x40020070
 800986c:	40020088 	.word	0x40020088
 8009870:	400200a0 	.word	0x400200a0
 8009874:	400200b8 	.word	0x400200b8
 8009878:	40020410 	.word	0x40020410
 800987c:	40020428 	.word	0x40020428
 8009880:	40020440 	.word	0x40020440
 8009884:	40020458 	.word	0x40020458
 8009888:	40020470 	.word	0x40020470
 800988c:	40020488 	.word	0x40020488
 8009890:	400204a0 	.word	0x400204a0
 8009894:	400204b8 	.word	0x400204b8
 8009898:	58025408 	.word	0x58025408
 800989c:	5802541c 	.word	0x5802541c
 80098a0:	58025430 	.word	0x58025430
 80098a4:	58025444 	.word	0x58025444
 80098a8:	58025458 	.word	0x58025458
 80098ac:	5802546c 	.word	0x5802546c
 80098b0:	58025480 	.word	0x58025480
 80098b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	f003 0320 	and.w	r3, r3, #32
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d160      	bne.n	8009984 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a7f      	ldr	r2, [pc, #508]	@ (8009ac4 <HAL_DMA_IRQHandler+0xc74>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d04a      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a7d      	ldr	r2, [pc, #500]	@ (8009ac8 <HAL_DMA_IRQHandler+0xc78>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d045      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a7c      	ldr	r2, [pc, #496]	@ (8009acc <HAL_DMA_IRQHandler+0xc7c>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d040      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a7a      	ldr	r2, [pc, #488]	@ (8009ad0 <HAL_DMA_IRQHandler+0xc80>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d03b      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a79      	ldr	r2, [pc, #484]	@ (8009ad4 <HAL_DMA_IRQHandler+0xc84>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d036      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a77      	ldr	r2, [pc, #476]	@ (8009ad8 <HAL_DMA_IRQHandler+0xc88>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d031      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a76      	ldr	r2, [pc, #472]	@ (8009adc <HAL_DMA_IRQHandler+0xc8c>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d02c      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a74      	ldr	r2, [pc, #464]	@ (8009ae0 <HAL_DMA_IRQHandler+0xc90>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d027      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a73      	ldr	r2, [pc, #460]	@ (8009ae4 <HAL_DMA_IRQHandler+0xc94>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d022      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a71      	ldr	r2, [pc, #452]	@ (8009ae8 <HAL_DMA_IRQHandler+0xc98>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d01d      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a70      	ldr	r2, [pc, #448]	@ (8009aec <HAL_DMA_IRQHandler+0xc9c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d018      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a6e      	ldr	r2, [pc, #440]	@ (8009af0 <HAL_DMA_IRQHandler+0xca0>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d013      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a6d      	ldr	r2, [pc, #436]	@ (8009af4 <HAL_DMA_IRQHandler+0xca4>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d00e      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a6b      	ldr	r2, [pc, #428]	@ (8009af8 <HAL_DMA_IRQHandler+0xca8>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d009      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a6a      	ldr	r2, [pc, #424]	@ (8009afc <HAL_DMA_IRQHandler+0xcac>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d004      	beq.n	8009962 <HAL_DMA_IRQHandler+0xb12>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a68      	ldr	r2, [pc, #416]	@ (8009b00 <HAL_DMA_IRQHandler+0xcb0>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d108      	bne.n	8009974 <HAL_DMA_IRQHandler+0xb24>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 0208 	bic.w	r2, r2, #8
 8009970:	601a      	str	r2, [r3, #0]
 8009972:	e007      	b.n	8009984 <HAL_DMA_IRQHandler+0xb34>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 0204 	bic.w	r2, r2, #4
 8009982:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009988:	2b00      	cmp	r3, #0
 800998a:	f000 8165 	beq.w	8009c58 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009996:	e15f      	b.n	8009c58 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800999c:	f003 031f 	and.w	r3, r3, #31
 80099a0:	2202      	movs	r2, #2
 80099a2:	409a      	lsls	r2, r3
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	4013      	ands	r3, r2
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f000 80c5 	beq.w	8009b38 <HAL_DMA_IRQHandler+0xce8>
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f003 0302 	and.w	r3, r3, #2
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 80bf 	beq.w	8009b38 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099be:	f003 031f 	and.w	r3, r3, #31
 80099c2:	2202      	movs	r2, #2
 80099c4:	409a      	lsls	r2, r3
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d018      	beq.n	8009a06 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d109      	bne.n	80099f2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f000 813a 	beq.w	8009c5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099f0:	e134      	b.n	8009c5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f000 8130 	beq.w	8009c5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a04:	e12a      	b.n	8009c5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	f003 0320 	and.w	r3, r3, #32
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f040 8089 	bne.w	8009b24 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a2b      	ldr	r2, [pc, #172]	@ (8009ac4 <HAL_DMA_IRQHandler+0xc74>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d04a      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a29      	ldr	r2, [pc, #164]	@ (8009ac8 <HAL_DMA_IRQHandler+0xc78>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d045      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a28      	ldr	r2, [pc, #160]	@ (8009acc <HAL_DMA_IRQHandler+0xc7c>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d040      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a26      	ldr	r2, [pc, #152]	@ (8009ad0 <HAL_DMA_IRQHandler+0xc80>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d03b      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a25      	ldr	r2, [pc, #148]	@ (8009ad4 <HAL_DMA_IRQHandler+0xc84>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d036      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a23      	ldr	r2, [pc, #140]	@ (8009ad8 <HAL_DMA_IRQHandler+0xc88>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d031      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a22      	ldr	r2, [pc, #136]	@ (8009adc <HAL_DMA_IRQHandler+0xc8c>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d02c      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a20      	ldr	r2, [pc, #128]	@ (8009ae0 <HAL_DMA_IRQHandler+0xc90>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d027      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a1f      	ldr	r2, [pc, #124]	@ (8009ae4 <HAL_DMA_IRQHandler+0xc94>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d022      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a1d      	ldr	r2, [pc, #116]	@ (8009ae8 <HAL_DMA_IRQHandler+0xc98>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d01d      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8009aec <HAL_DMA_IRQHandler+0xc9c>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d018      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a1a      	ldr	r2, [pc, #104]	@ (8009af0 <HAL_DMA_IRQHandler+0xca0>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d013      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a19      	ldr	r2, [pc, #100]	@ (8009af4 <HAL_DMA_IRQHandler+0xca4>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d00e      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a17      	ldr	r2, [pc, #92]	@ (8009af8 <HAL_DMA_IRQHandler+0xca8>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d009      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a16      	ldr	r2, [pc, #88]	@ (8009afc <HAL_DMA_IRQHandler+0xcac>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d004      	beq.n	8009ab2 <HAL_DMA_IRQHandler+0xc62>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a14      	ldr	r2, [pc, #80]	@ (8009b00 <HAL_DMA_IRQHandler+0xcb0>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d128      	bne.n	8009b04 <HAL_DMA_IRQHandler+0xcb4>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f022 0214 	bic.w	r2, r2, #20
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	e027      	b.n	8009b14 <HAL_DMA_IRQHandler+0xcc4>
 8009ac4:	40020010 	.word	0x40020010
 8009ac8:	40020028 	.word	0x40020028
 8009acc:	40020040 	.word	0x40020040
 8009ad0:	40020058 	.word	0x40020058
 8009ad4:	40020070 	.word	0x40020070
 8009ad8:	40020088 	.word	0x40020088
 8009adc:	400200a0 	.word	0x400200a0
 8009ae0:	400200b8 	.word	0x400200b8
 8009ae4:	40020410 	.word	0x40020410
 8009ae8:	40020428 	.word	0x40020428
 8009aec:	40020440 	.word	0x40020440
 8009af0:	40020458 	.word	0x40020458
 8009af4:	40020470 	.word	0x40020470
 8009af8:	40020488 	.word	0x40020488
 8009afc:	400204a0 	.word	0x400204a0
 8009b00:	400204b8 	.word	0x400204b8
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f022 020a 	bic.w	r2, r2, #10
 8009b12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f000 8097 	beq.w	8009c5c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b36:	e091      	b.n	8009c5c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b3c:	f003 031f 	and.w	r3, r3, #31
 8009b40:	2208      	movs	r2, #8
 8009b42:	409a      	lsls	r2, r3
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	4013      	ands	r3, r2
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 8088 	beq.w	8009c5e <HAL_DMA_IRQHandler+0xe0e>
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	f003 0308 	and.w	r3, r3, #8
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 8082 	beq.w	8009c5e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a41      	ldr	r2, [pc, #260]	@ (8009c64 <HAL_DMA_IRQHandler+0xe14>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d04a      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a3f      	ldr	r2, [pc, #252]	@ (8009c68 <HAL_DMA_IRQHandler+0xe18>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d045      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a3e      	ldr	r2, [pc, #248]	@ (8009c6c <HAL_DMA_IRQHandler+0xe1c>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d040      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a3c      	ldr	r2, [pc, #240]	@ (8009c70 <HAL_DMA_IRQHandler+0xe20>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d03b      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a3b      	ldr	r2, [pc, #236]	@ (8009c74 <HAL_DMA_IRQHandler+0xe24>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d036      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a39      	ldr	r2, [pc, #228]	@ (8009c78 <HAL_DMA_IRQHandler+0xe28>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d031      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a38      	ldr	r2, [pc, #224]	@ (8009c7c <HAL_DMA_IRQHandler+0xe2c>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d02c      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a36      	ldr	r2, [pc, #216]	@ (8009c80 <HAL_DMA_IRQHandler+0xe30>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d027      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a35      	ldr	r2, [pc, #212]	@ (8009c84 <HAL_DMA_IRQHandler+0xe34>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d022      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a33      	ldr	r2, [pc, #204]	@ (8009c88 <HAL_DMA_IRQHandler+0xe38>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d01d      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a32      	ldr	r2, [pc, #200]	@ (8009c8c <HAL_DMA_IRQHandler+0xe3c>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d018      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a30      	ldr	r2, [pc, #192]	@ (8009c90 <HAL_DMA_IRQHandler+0xe40>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d013      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8009c94 <HAL_DMA_IRQHandler+0xe44>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d00e      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a2d      	ldr	r2, [pc, #180]	@ (8009c98 <HAL_DMA_IRQHandler+0xe48>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d009      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a2c      	ldr	r2, [pc, #176]	@ (8009c9c <HAL_DMA_IRQHandler+0xe4c>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d004      	beq.n	8009bfa <HAL_DMA_IRQHandler+0xdaa>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a2a      	ldr	r2, [pc, #168]	@ (8009ca0 <HAL_DMA_IRQHandler+0xe50>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d108      	bne.n	8009c0c <HAL_DMA_IRQHandler+0xdbc>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 021c 	bic.w	r2, r2, #28
 8009c08:	601a      	str	r2, [r3, #0]
 8009c0a:	e007      	b.n	8009c1c <HAL_DMA_IRQHandler+0xdcc>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f022 020e 	bic.w	r2, r2, #14
 8009c1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c20:	f003 031f 	and.w	r3, r3, #31
 8009c24:	2201      	movs	r2, #1
 8009c26:	409a      	lsls	r2, r3
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d009      	beq.n	8009c5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	4798      	blx	r3
 8009c52:	e004      	b.n	8009c5e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009c54:	bf00      	nop
 8009c56:	e002      	b.n	8009c5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c58:	bf00      	nop
 8009c5a:	e000      	b.n	8009c5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009c5e:	3728      	adds	r7, #40	@ 0x28
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	40020010 	.word	0x40020010
 8009c68:	40020028 	.word	0x40020028
 8009c6c:	40020040 	.word	0x40020040
 8009c70:	40020058 	.word	0x40020058
 8009c74:	40020070 	.word	0x40020070
 8009c78:	40020088 	.word	0x40020088
 8009c7c:	400200a0 	.word	0x400200a0
 8009c80:	400200b8 	.word	0x400200b8
 8009c84:	40020410 	.word	0x40020410
 8009c88:	40020428 	.word	0x40020428
 8009c8c:	40020440 	.word	0x40020440
 8009c90:	40020458 	.word	0x40020458
 8009c94:	40020470 	.word	0x40020470
 8009c98:	40020488 	.word	0x40020488
 8009c9c:	400204a0 	.word	0x400204a0
 8009ca0:	400204b8 	.word	0x400204b8

08009ca4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
 8009cc8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cd4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a7f      	ldr	r2, [pc, #508]	@ (8009ed8 <DMA_SetConfig+0x21c>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d072      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a7d      	ldr	r2, [pc, #500]	@ (8009edc <DMA_SetConfig+0x220>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d06d      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a7c      	ldr	r2, [pc, #496]	@ (8009ee0 <DMA_SetConfig+0x224>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d068      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a7a      	ldr	r2, [pc, #488]	@ (8009ee4 <DMA_SetConfig+0x228>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d063      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a79      	ldr	r2, [pc, #484]	@ (8009ee8 <DMA_SetConfig+0x22c>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d05e      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a77      	ldr	r2, [pc, #476]	@ (8009eec <DMA_SetConfig+0x230>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d059      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a76      	ldr	r2, [pc, #472]	@ (8009ef0 <DMA_SetConfig+0x234>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d054      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a74      	ldr	r2, [pc, #464]	@ (8009ef4 <DMA_SetConfig+0x238>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d04f      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a73      	ldr	r2, [pc, #460]	@ (8009ef8 <DMA_SetConfig+0x23c>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d04a      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a71      	ldr	r2, [pc, #452]	@ (8009efc <DMA_SetConfig+0x240>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d045      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a70      	ldr	r2, [pc, #448]	@ (8009f00 <DMA_SetConfig+0x244>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d040      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a6e      	ldr	r2, [pc, #440]	@ (8009f04 <DMA_SetConfig+0x248>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d03b      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a6d      	ldr	r2, [pc, #436]	@ (8009f08 <DMA_SetConfig+0x24c>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d036      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a6b      	ldr	r2, [pc, #428]	@ (8009f0c <DMA_SetConfig+0x250>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d031      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a6a      	ldr	r2, [pc, #424]	@ (8009f10 <DMA_SetConfig+0x254>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d02c      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a68      	ldr	r2, [pc, #416]	@ (8009f14 <DMA_SetConfig+0x258>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d027      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a67      	ldr	r2, [pc, #412]	@ (8009f18 <DMA_SetConfig+0x25c>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d022      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a65      	ldr	r2, [pc, #404]	@ (8009f1c <DMA_SetConfig+0x260>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d01d      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a64      	ldr	r2, [pc, #400]	@ (8009f20 <DMA_SetConfig+0x264>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d018      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a62      	ldr	r2, [pc, #392]	@ (8009f24 <DMA_SetConfig+0x268>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d013      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a61      	ldr	r2, [pc, #388]	@ (8009f28 <DMA_SetConfig+0x26c>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d00e      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a5f      	ldr	r2, [pc, #380]	@ (8009f2c <DMA_SetConfig+0x270>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d009      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a5e      	ldr	r2, [pc, #376]	@ (8009f30 <DMA_SetConfig+0x274>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d004      	beq.n	8009dc6 <DMA_SetConfig+0x10a>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a5c      	ldr	r2, [pc, #368]	@ (8009f34 <DMA_SetConfig+0x278>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d101      	bne.n	8009dca <DMA_SetConfig+0x10e>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e000      	b.n	8009dcc <DMA_SetConfig+0x110>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00d      	beq.n	8009dec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009dd8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d004      	beq.n	8009dec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009dea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a39      	ldr	r2, [pc, #228]	@ (8009ed8 <DMA_SetConfig+0x21c>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d04a      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a38      	ldr	r2, [pc, #224]	@ (8009edc <DMA_SetConfig+0x220>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d045      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a36      	ldr	r2, [pc, #216]	@ (8009ee0 <DMA_SetConfig+0x224>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d040      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a35      	ldr	r2, [pc, #212]	@ (8009ee4 <DMA_SetConfig+0x228>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d03b      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a33      	ldr	r2, [pc, #204]	@ (8009ee8 <DMA_SetConfig+0x22c>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d036      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a32      	ldr	r2, [pc, #200]	@ (8009eec <DMA_SetConfig+0x230>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d031      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a30      	ldr	r2, [pc, #192]	@ (8009ef0 <DMA_SetConfig+0x234>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d02c      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a2f      	ldr	r2, [pc, #188]	@ (8009ef4 <DMA_SetConfig+0x238>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d027      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a2d      	ldr	r2, [pc, #180]	@ (8009ef8 <DMA_SetConfig+0x23c>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d022      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8009efc <DMA_SetConfig+0x240>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d01d      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a2a      	ldr	r2, [pc, #168]	@ (8009f00 <DMA_SetConfig+0x244>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d018      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a29      	ldr	r2, [pc, #164]	@ (8009f04 <DMA_SetConfig+0x248>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d013      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a27      	ldr	r2, [pc, #156]	@ (8009f08 <DMA_SetConfig+0x24c>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d00e      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a26      	ldr	r2, [pc, #152]	@ (8009f0c <DMA_SetConfig+0x250>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d009      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a24      	ldr	r2, [pc, #144]	@ (8009f10 <DMA_SetConfig+0x254>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d004      	beq.n	8009e8c <DMA_SetConfig+0x1d0>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a23      	ldr	r2, [pc, #140]	@ (8009f14 <DMA_SetConfig+0x258>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d101      	bne.n	8009e90 <DMA_SetConfig+0x1d4>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e000      	b.n	8009e92 <DMA_SetConfig+0x1d6>
 8009e90:	2300      	movs	r3, #0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d059      	beq.n	8009f4a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e9a:	f003 031f 	and.w	r3, r3, #31
 8009e9e:	223f      	movs	r2, #63	@ 0x3f
 8009ea0:	409a      	lsls	r2, r3
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009eb4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	2b40      	cmp	r3, #64	@ 0x40
 8009ec4:	d138      	bne.n	8009f38 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009ed6:	e086      	b.n	8009fe6 <DMA_SetConfig+0x32a>
 8009ed8:	40020010 	.word	0x40020010
 8009edc:	40020028 	.word	0x40020028
 8009ee0:	40020040 	.word	0x40020040
 8009ee4:	40020058 	.word	0x40020058
 8009ee8:	40020070 	.word	0x40020070
 8009eec:	40020088 	.word	0x40020088
 8009ef0:	400200a0 	.word	0x400200a0
 8009ef4:	400200b8 	.word	0x400200b8
 8009ef8:	40020410 	.word	0x40020410
 8009efc:	40020428 	.word	0x40020428
 8009f00:	40020440 	.word	0x40020440
 8009f04:	40020458 	.word	0x40020458
 8009f08:	40020470 	.word	0x40020470
 8009f0c:	40020488 	.word	0x40020488
 8009f10:	400204a0 	.word	0x400204a0
 8009f14:	400204b8 	.word	0x400204b8
 8009f18:	58025408 	.word	0x58025408
 8009f1c:	5802541c 	.word	0x5802541c
 8009f20:	58025430 	.word	0x58025430
 8009f24:	58025444 	.word	0x58025444
 8009f28:	58025458 	.word	0x58025458
 8009f2c:	5802546c 	.word	0x5802546c
 8009f30:	58025480 	.word	0x58025480
 8009f34:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	60da      	str	r2, [r3, #12]
}
 8009f48:	e04d      	b.n	8009fe6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a29      	ldr	r2, [pc, #164]	@ (8009ff4 <DMA_SetConfig+0x338>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d022      	beq.n	8009f9a <DMA_SetConfig+0x2de>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a27      	ldr	r2, [pc, #156]	@ (8009ff8 <DMA_SetConfig+0x33c>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d01d      	beq.n	8009f9a <DMA_SetConfig+0x2de>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a26      	ldr	r2, [pc, #152]	@ (8009ffc <DMA_SetConfig+0x340>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d018      	beq.n	8009f9a <DMA_SetConfig+0x2de>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a24      	ldr	r2, [pc, #144]	@ (800a000 <DMA_SetConfig+0x344>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d013      	beq.n	8009f9a <DMA_SetConfig+0x2de>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a23      	ldr	r2, [pc, #140]	@ (800a004 <DMA_SetConfig+0x348>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d00e      	beq.n	8009f9a <DMA_SetConfig+0x2de>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a21      	ldr	r2, [pc, #132]	@ (800a008 <DMA_SetConfig+0x34c>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d009      	beq.n	8009f9a <DMA_SetConfig+0x2de>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a20      	ldr	r2, [pc, #128]	@ (800a00c <DMA_SetConfig+0x350>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d004      	beq.n	8009f9a <DMA_SetConfig+0x2de>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a1e      	ldr	r2, [pc, #120]	@ (800a010 <DMA_SetConfig+0x354>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d101      	bne.n	8009f9e <DMA_SetConfig+0x2e2>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e000      	b.n	8009fa0 <DMA_SetConfig+0x2e4>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d020      	beq.n	8009fe6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fa8:	f003 031f 	and.w	r3, r3, #31
 8009fac:	2201      	movs	r2, #1
 8009fae:	409a      	lsls	r2, r3
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	2b40      	cmp	r3, #64	@ 0x40
 8009fc2:	d108      	bne.n	8009fd6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	60da      	str	r2, [r3, #12]
}
 8009fd4:	e007      	b.n	8009fe6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	60da      	str	r2, [r3, #12]
}
 8009fe6:	bf00      	nop
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	58025408 	.word	0x58025408
 8009ff8:	5802541c 	.word	0x5802541c
 8009ffc:	58025430 	.word	0x58025430
 800a000:	58025444 	.word	0x58025444
 800a004:	58025458 	.word	0x58025458
 800a008:	5802546c 	.word	0x5802546c
 800a00c:	58025480 	.word	0x58025480
 800a010:	58025494 	.word	0x58025494

0800a014 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a42      	ldr	r2, [pc, #264]	@ (800a12c <DMA_CalcBaseAndBitshift+0x118>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d04a      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a41      	ldr	r2, [pc, #260]	@ (800a130 <DMA_CalcBaseAndBitshift+0x11c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d045      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a3f      	ldr	r2, [pc, #252]	@ (800a134 <DMA_CalcBaseAndBitshift+0x120>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d040      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a3e      	ldr	r2, [pc, #248]	@ (800a138 <DMA_CalcBaseAndBitshift+0x124>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d03b      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a3c      	ldr	r2, [pc, #240]	@ (800a13c <DMA_CalcBaseAndBitshift+0x128>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d036      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a3b      	ldr	r2, [pc, #236]	@ (800a140 <DMA_CalcBaseAndBitshift+0x12c>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d031      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a39      	ldr	r2, [pc, #228]	@ (800a144 <DMA_CalcBaseAndBitshift+0x130>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d02c      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a38      	ldr	r2, [pc, #224]	@ (800a148 <DMA_CalcBaseAndBitshift+0x134>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d027      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a36      	ldr	r2, [pc, #216]	@ (800a14c <DMA_CalcBaseAndBitshift+0x138>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d022      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a35      	ldr	r2, [pc, #212]	@ (800a150 <DMA_CalcBaseAndBitshift+0x13c>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d01d      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a33      	ldr	r2, [pc, #204]	@ (800a154 <DMA_CalcBaseAndBitshift+0x140>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d018      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a32      	ldr	r2, [pc, #200]	@ (800a158 <DMA_CalcBaseAndBitshift+0x144>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d013      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a30      	ldr	r2, [pc, #192]	@ (800a15c <DMA_CalcBaseAndBitshift+0x148>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d00e      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a2f      	ldr	r2, [pc, #188]	@ (800a160 <DMA_CalcBaseAndBitshift+0x14c>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d009      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a2d      	ldr	r2, [pc, #180]	@ (800a164 <DMA_CalcBaseAndBitshift+0x150>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d004      	beq.n	800a0bc <DMA_CalcBaseAndBitshift+0xa8>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a2c      	ldr	r2, [pc, #176]	@ (800a168 <DMA_CalcBaseAndBitshift+0x154>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d101      	bne.n	800a0c0 <DMA_CalcBaseAndBitshift+0xac>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e000      	b.n	800a0c2 <DMA_CalcBaseAndBitshift+0xae>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d024      	beq.n	800a110 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	3b10      	subs	r3, #16
 800a0ce:	4a27      	ldr	r2, [pc, #156]	@ (800a16c <DMA_CalcBaseAndBitshift+0x158>)
 800a0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d4:	091b      	lsrs	r3, r3, #4
 800a0d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f003 0307 	and.w	r3, r3, #7
 800a0de:	4a24      	ldr	r2, [pc, #144]	@ (800a170 <DMA_CalcBaseAndBitshift+0x15c>)
 800a0e0:	5cd3      	ldrb	r3, [r2, r3]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d908      	bls.n	800a100 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	4b1f      	ldr	r3, [pc, #124]	@ (800a174 <DMA_CalcBaseAndBitshift+0x160>)
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	1d1a      	adds	r2, r3, #4
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	659a      	str	r2, [r3, #88]	@ 0x58
 800a0fe:	e00d      	b.n	800a11c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	461a      	mov	r2, r3
 800a106:	4b1b      	ldr	r3, [pc, #108]	@ (800a174 <DMA_CalcBaseAndBitshift+0x160>)
 800a108:	4013      	ands	r3, r2
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a10e:	e005      	b.n	800a11c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800a120:	4618      	mov	r0, r3
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	40020010 	.word	0x40020010
 800a130:	40020028 	.word	0x40020028
 800a134:	40020040 	.word	0x40020040
 800a138:	40020058 	.word	0x40020058
 800a13c:	40020070 	.word	0x40020070
 800a140:	40020088 	.word	0x40020088
 800a144:	400200a0 	.word	0x400200a0
 800a148:	400200b8 	.word	0x400200b8
 800a14c:	40020410 	.word	0x40020410
 800a150:	40020428 	.word	0x40020428
 800a154:	40020440 	.word	0x40020440
 800a158:	40020458 	.word	0x40020458
 800a15c:	40020470 	.word	0x40020470
 800a160:	40020488 	.word	0x40020488
 800a164:	400204a0 	.word	0x400204a0
 800a168:	400204b8 	.word	0x400204b8
 800a16c:	aaaaaaab 	.word	0xaaaaaaab
 800a170:	08021134 	.word	0x08021134
 800a174:	fffffc00 	.word	0xfffffc00

0800a178 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d120      	bne.n	800a1ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a190:	2b03      	cmp	r3, #3
 800a192:	d858      	bhi.n	800a246 <DMA_CheckFifoParam+0xce>
 800a194:	a201      	add	r2, pc, #4	@ (adr r2, 800a19c <DMA_CheckFifoParam+0x24>)
 800a196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19a:	bf00      	nop
 800a19c:	0800a1ad 	.word	0x0800a1ad
 800a1a0:	0800a1bf 	.word	0x0800a1bf
 800a1a4:	0800a1ad 	.word	0x0800a1ad
 800a1a8:	0800a247 	.word	0x0800a247
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d048      	beq.n	800a24a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a1bc:	e045      	b.n	800a24a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800a1c6:	d142      	bne.n	800a24e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a1cc:	e03f      	b.n	800a24e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1d6:	d123      	bne.n	800a220 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d838      	bhi.n	800a252 <DMA_CheckFifoParam+0xda>
 800a1e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a1e8 <DMA_CheckFifoParam+0x70>)
 800a1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e6:	bf00      	nop
 800a1e8:	0800a1f9 	.word	0x0800a1f9
 800a1ec:	0800a1ff 	.word	0x0800a1ff
 800a1f0:	0800a1f9 	.word	0x0800a1f9
 800a1f4:	0800a211 	.word	0x0800a211
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	73fb      	strb	r3, [r7, #15]
        break;
 800a1fc:	e030      	b.n	800a260 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a202:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d025      	beq.n	800a256 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a20e:	e022      	b.n	800a256 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a214:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800a218:	d11f      	bne.n	800a25a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a21e:	e01c      	b.n	800a25a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a224:	2b02      	cmp	r3, #2
 800a226:	d902      	bls.n	800a22e <DMA_CheckFifoParam+0xb6>
 800a228:	2b03      	cmp	r3, #3
 800a22a:	d003      	beq.n	800a234 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a22c:	e018      	b.n	800a260 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	73fb      	strb	r3, [r7, #15]
        break;
 800a232:	e015      	b.n	800a260 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a238:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00e      	beq.n	800a25e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	73fb      	strb	r3, [r7, #15]
    break;
 800a244:	e00b      	b.n	800a25e <DMA_CheckFifoParam+0xe6>
        break;
 800a246:	bf00      	nop
 800a248:	e00a      	b.n	800a260 <DMA_CheckFifoParam+0xe8>
        break;
 800a24a:	bf00      	nop
 800a24c:	e008      	b.n	800a260 <DMA_CheckFifoParam+0xe8>
        break;
 800a24e:	bf00      	nop
 800a250:	e006      	b.n	800a260 <DMA_CheckFifoParam+0xe8>
        break;
 800a252:	bf00      	nop
 800a254:	e004      	b.n	800a260 <DMA_CheckFifoParam+0xe8>
        break;
 800a256:	bf00      	nop
 800a258:	e002      	b.n	800a260 <DMA_CheckFifoParam+0xe8>
        break;
 800a25a:	bf00      	nop
 800a25c:	e000      	b.n	800a260 <DMA_CheckFifoParam+0xe8>
    break;
 800a25e:	bf00      	nop
    }
  }

  return status;
 800a260:	7bfb      	ldrb	r3, [r7, #15]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop

0800a270 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a38      	ldr	r2, [pc, #224]	@ (800a364 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d022      	beq.n	800a2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a36      	ldr	r2, [pc, #216]	@ (800a368 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d01d      	beq.n	800a2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a35      	ldr	r2, [pc, #212]	@ (800a36c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d018      	beq.n	800a2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a33      	ldr	r2, [pc, #204]	@ (800a370 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d013      	beq.n	800a2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a32      	ldr	r2, [pc, #200]	@ (800a374 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d00e      	beq.n	800a2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a30      	ldr	r2, [pc, #192]	@ (800a378 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d009      	beq.n	800a2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a2f      	ldr	r2, [pc, #188]	@ (800a37c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d004      	beq.n	800a2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a2d      	ldr	r2, [pc, #180]	@ (800a380 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d101      	bne.n	800a2d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e000      	b.n	800a2d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d01a      	beq.n	800a30e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	3b08      	subs	r3, #8
 800a2e0:	4a28      	ldr	r2, [pc, #160]	@ (800a384 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e6:	091b      	lsrs	r3, r3, #4
 800a2e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	4b26      	ldr	r3, [pc, #152]	@ (800a388 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a2ee:	4413      	add	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a24      	ldr	r2, [pc, #144]	@ (800a38c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a2fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f003 031f 	and.w	r3, r3, #31
 800a304:	2201      	movs	r2, #1
 800a306:	409a      	lsls	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a30c:	e024      	b.n	800a358 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	b2db      	uxtb	r3, r3
 800a314:	3b10      	subs	r3, #16
 800a316:	4a1e      	ldr	r2, [pc, #120]	@ (800a390 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a318:	fba2 2303 	umull	r2, r3, r2, r3
 800a31c:	091b      	lsrs	r3, r3, #4
 800a31e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	4a1c      	ldr	r2, [pc, #112]	@ (800a394 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d806      	bhi.n	800a336 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	4a1b      	ldr	r2, [pc, #108]	@ (800a398 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d902      	bls.n	800a336 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	3308      	adds	r3, #8
 800a334:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	4b18      	ldr	r3, [pc, #96]	@ (800a39c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a33a:	4413      	add	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	461a      	mov	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a16      	ldr	r2, [pc, #88]	@ (800a3a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a348:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f003 031f 	and.w	r3, r3, #31
 800a350:	2201      	movs	r2, #1
 800a352:	409a      	lsls	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a358:	bf00      	nop
 800a35a:	3714      	adds	r7, #20
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr
 800a364:	58025408 	.word	0x58025408
 800a368:	5802541c 	.word	0x5802541c
 800a36c:	58025430 	.word	0x58025430
 800a370:	58025444 	.word	0x58025444
 800a374:	58025458 	.word	0x58025458
 800a378:	5802546c 	.word	0x5802546c
 800a37c:	58025480 	.word	0x58025480
 800a380:	58025494 	.word	0x58025494
 800a384:	cccccccd 	.word	0xcccccccd
 800a388:	16009600 	.word	0x16009600
 800a38c:	58025880 	.word	0x58025880
 800a390:	aaaaaaab 	.word	0xaaaaaaab
 800a394:	400204b8 	.word	0x400204b8
 800a398:	4002040f 	.word	0x4002040f
 800a39c:	10008200 	.word	0x10008200
 800a3a0:	40020880 	.word	0x40020880

0800a3a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d04a      	beq.n	800a450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2b08      	cmp	r3, #8
 800a3be:	d847      	bhi.n	800a450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a25      	ldr	r2, [pc, #148]	@ (800a45c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d022      	beq.n	800a410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a24      	ldr	r2, [pc, #144]	@ (800a460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d01d      	beq.n	800a410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a22      	ldr	r2, [pc, #136]	@ (800a464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d018      	beq.n	800a410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a21      	ldr	r2, [pc, #132]	@ (800a468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d013      	beq.n	800a410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a1f      	ldr	r2, [pc, #124]	@ (800a46c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d00e      	beq.n	800a410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a1e      	ldr	r2, [pc, #120]	@ (800a470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d009      	beq.n	800a410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a1c      	ldr	r2, [pc, #112]	@ (800a474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d004      	beq.n	800a410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a1b      	ldr	r2, [pc, #108]	@ (800a478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d101      	bne.n	800a414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a410:	2301      	movs	r3, #1
 800a412:	e000      	b.n	800a416 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a414:	2300      	movs	r3, #0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00a      	beq.n	800a430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	4b17      	ldr	r3, [pc, #92]	@ (800a47c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a41e:	4413      	add	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	461a      	mov	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a15      	ldr	r2, [pc, #84]	@ (800a480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a42c:	671a      	str	r2, [r3, #112]	@ 0x70
 800a42e:	e009      	b.n	800a444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4b14      	ldr	r3, [pc, #80]	@ (800a484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a434:	4413      	add	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	461a      	mov	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a11      	ldr	r2, [pc, #68]	@ (800a488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a442:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	3b01      	subs	r3, #1
 800a448:	2201      	movs	r2, #1
 800a44a:	409a      	lsls	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800a450:	bf00      	nop
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	58025408 	.word	0x58025408
 800a460:	5802541c 	.word	0x5802541c
 800a464:	58025430 	.word	0x58025430
 800a468:	58025444 	.word	0x58025444
 800a46c:	58025458 	.word	0x58025458
 800a470:	5802546c 	.word	0x5802546c
 800a474:	58025480 	.word	0x58025480
 800a478:	58025494 	.word	0x58025494
 800a47c:	1600963f 	.word	0x1600963f
 800a480:	58025940 	.word	0x58025940
 800a484:	1000823f 	.word	0x1000823f
 800a488:	40020940 	.word	0x40020940

0800a48c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e04f      	b.n	800a53e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d106      	bne.n	800a4b8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7f8 fe98 	bl	80031e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	4b20      	ldr	r3, [pc, #128]	@ (800a548 <HAL_DMA2D_Init+0xbc>)
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	6851      	ldr	r1, [r2, #4]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	69d2      	ldr	r2, [r2, #28]
 800a4d2:	4311      	orrs	r1, r2
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	6812      	ldr	r2, [r2, #0]
 800a4d8:	430b      	orrs	r3, r1
 800a4da:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a54c <HAL_DMA2D_Init+0xc0>)
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	6891      	ldr	r1, [r2, #8]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	6992      	ldr	r2, [r2, #24]
 800a4ee:	4311      	orrs	r1, r2
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	6812      	ldr	r2, [r2, #0]
 800a4f4:	430b      	orrs	r3, r1
 800a4f6:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a4fe:	4b14      	ldr	r3, [pc, #80]	@ (800a550 <HAL_DMA2D_Init+0xc4>)
 800a500:	4013      	ands	r3, r2
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	68d1      	ldr	r1, [r2, #12]
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	6812      	ldr	r2, [r2, #0]
 800a50a:	430b      	orrs	r3, r1
 800a50c:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a514:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	051a      	lsls	r2, r3, #20
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	055b      	lsls	r3, r3, #21
 800a524:	431a      	orrs	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	430a      	orrs	r2, r1
 800a52c:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	fff8ffbf 	.word	0xfff8ffbf
 800a54c:	fffffef8 	.word	0xfffffef8
 800a550:	ffff0000 	.word	0xffff0000

0800a554 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	d026      	beq.n	800a5c4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d021      	beq.n	800a5c4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a58e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a594:	f043 0201 	orr.w	r2, r3, #1
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2204      	movs	r2, #4
 800a5a8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d003      	beq.n	800a5c4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f003 0320 	and.w	r3, r3, #32
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d026      	beq.n	800a61c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d021      	beq.n	800a61c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a5e6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5f4:	f043 0202 	orr.w	r2, r3, #2
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2204      	movs	r2, #4
 800a600:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a610:	2b00      	cmp	r3, #0
 800a612:	d003      	beq.n	800a61c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f003 0308 	and.w	r3, r3, #8
 800a622:	2b00      	cmp	r3, #0
 800a624:	d026      	beq.n	800a674 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d021      	beq.n	800a674 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a63e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2208      	movs	r2, #8
 800a646:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a64c:	f043 0204 	orr.w	r2, r3, #4
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2204      	movs	r2, #4
 800a658:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d003      	beq.n	800a674 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f003 0304 	and.w	r3, r3, #4
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d013      	beq.n	800a6a6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00e      	beq.n	800a6a6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a696:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2204      	movs	r2, #4
 800a69e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f853 	bl	800a74c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d024      	beq.n	800a6fa <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d01f      	beq.n	800a6fa <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a6c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f003 0310 	and.w	r3, r3, #16
 800a700:	2b00      	cmp	r3, #0
 800a702:	d01f      	beq.n	800a744 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d01a      	beq.n	800a744 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a71c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2210      	movs	r2, #16
 800a724:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2201      	movs	r2, #1
 800a732:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f80e 	bl	800a760 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800a744:	bf00      	nop
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800a774:	b480      	push	{r7}
 800a776:	b087      	sub	sp, #28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800a790:	2b01      	cmp	r3, #1
 800a792:	d101      	bne.n	800a798 <HAL_DMA2D_ConfigLayer+0x24>
 800a794:	2302      	movs	r3, #2
 800a796:	e092      	b.n	800a8be <HAL_DMA2D_ConfigLayer+0x14a>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	00db      	lsls	r3, r3, #3
 800a7ae:	1a9b      	subs	r3, r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	3328      	adds	r3, #40	@ 0x28
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	685a      	ldr	r2, [r3, #4]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	041b      	lsls	r3, r3, #16
 800a7c4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a7cc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800a7d8:	4b3c      	ldr	r3, [pc, #240]	@ (800a8cc <HAL_DMA2D_ConfigLayer+0x158>)
 800a7da:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	2b0a      	cmp	r3, #10
 800a7e2:	d003      	beq.n	800a7ec <HAL_DMA2D_ConfigLayer+0x78>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	2b09      	cmp	r3, #9
 800a7ea:	d107      	bne.n	800a7fc <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	613b      	str	r3, [r7, #16]
 800a7fa:	e005      	b.n	800a808 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	061b      	lsls	r3, r3, #24
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	4313      	orrs	r3, r2
 800a806:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d120      	bne.n	800a850 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	43db      	mvns	r3, r3
 800a818:	ea02 0103 	and.w	r1, r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	430a      	orrs	r2, r1
 800a824:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	6812      	ldr	r2, [r2, #0]
 800a82e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	2b0a      	cmp	r3, #10
 800a836:	d003      	beq.n	800a840 <HAL_DMA2D_ConfigLayer+0xcc>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	2b09      	cmp	r3, #9
 800a83e:	d135      	bne.n	800a8ac <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	68da      	ldr	r2, [r3, #12]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800a84c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a84e:	e02d      	b.n	800a8ac <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	2b0b      	cmp	r3, #11
 800a856:	d109      	bne.n	800a86c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	049b      	lsls	r3, r3, #18
 800a85e:	693a      	ldr	r2, [r7, #16]
 800a860:	4313      	orrs	r3, r2
 800a862:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800a86a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	69da      	ldr	r2, [r3, #28]
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	43db      	mvns	r3, r3
 800a876:	ea02 0103 	and.w	r1, r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	430a      	orrs	r2, r1
 800a882:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	6812      	ldr	r2, [r2, #0]
 800a88c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	2b0a      	cmp	r3, #10
 800a894:	d003      	beq.n	800a89e <HAL_DMA2D_ConfigLayer+0x12a>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	2b09      	cmp	r3, #9
 800a89c:	d106      	bne.n	800a8ac <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	68da      	ldr	r2, [r3, #12]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800a8aa:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	371c      	adds	r7, #28
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	ff33000f 	.word	0xff33000f

0800a8d0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
 800a8dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	2b80      	cmp	r3, #128	@ 0x80
 800a8e8:	d105      	bne.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a8f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e315      	b.n	800af22 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d101      	bne.n	800a904 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 800a900:	2302      	movs	r3, #2
 800a902:	e30e      	b.n	800af22 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b01      	cmp	r3, #1
 800a916:	f040 82fd 	bne.w	800af14 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2202      	movs	r2, #2
 800a91e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a82      	ldr	r2, [pc, #520]	@ (800ab38 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d04a      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a81      	ldr	r2, [pc, #516]	@ (800ab3c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d045      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a7f      	ldr	r2, [pc, #508]	@ (800ab40 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d040      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a7e      	ldr	r2, [pc, #504]	@ (800ab44 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d03b      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a7c      	ldr	r2, [pc, #496]	@ (800ab48 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d036      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a7b      	ldr	r2, [pc, #492]	@ (800ab4c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d031      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a79      	ldr	r2, [pc, #484]	@ (800ab50 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d02c      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a78      	ldr	r2, [pc, #480]	@ (800ab54 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d027      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a76      	ldr	r2, [pc, #472]	@ (800ab58 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d022      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a75      	ldr	r2, [pc, #468]	@ (800ab5c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d01d      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a73      	ldr	r2, [pc, #460]	@ (800ab60 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d018      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a72      	ldr	r2, [pc, #456]	@ (800ab64 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d013      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a70      	ldr	r2, [pc, #448]	@ (800ab68 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d00e      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a6f      	ldr	r2, [pc, #444]	@ (800ab6c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d009      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a6d      	ldr	r2, [pc, #436]	@ (800ab70 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d004      	beq.n	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a6c      	ldr	r2, [pc, #432]	@ (800ab74 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d101      	bne.n	800a9cc <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e000      	b.n	800a9ce <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d018      	beq.n	800aa04 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a9e0:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9ee:	3308      	adds	r3, #8
 800a9f0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9f6:	f003 031f 	and.w	r3, r3, #31
 800a9fa:	223f      	movs	r2, #63	@ 0x3f
 800a9fc:	409a      	lsls	r2, r3
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	601a      	str	r2, [r3, #0]
 800aa02:	e018      	b.n	800aa36 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6819      	ldr	r1, [r3, #0]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	f248 0320 	movw	r3, #32800	@ 0x8020
 800aa12:	430b      	orrs	r3, r1
 800aa14:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa22:	3304      	adds	r3, #4
 800aa24:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa2a:	f003 031f 	and.w	r3, r3, #31
 800aa2e:	2201      	movs	r2, #1
 800aa30:	409a      	lsls	r2, r3
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	68b9      	ldr	r1, [r7, #8]
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 fb41 	bl	800b0c4 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a3c      	ldr	r2, [pc, #240]	@ (800ab38 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d072      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a3a      	ldr	r2, [pc, #232]	@ (800ab3c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d06d      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a39      	ldr	r2, [pc, #228]	@ (800ab40 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d068      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a37      	ldr	r2, [pc, #220]	@ (800ab44 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d063      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a36      	ldr	r2, [pc, #216]	@ (800ab48 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d05e      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a34      	ldr	r2, [pc, #208]	@ (800ab4c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d059      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a33      	ldr	r2, [pc, #204]	@ (800ab50 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d054      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a31      	ldr	r2, [pc, #196]	@ (800ab54 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d04f      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a30      	ldr	r2, [pc, #192]	@ (800ab58 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d04a      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a2e      	ldr	r2, [pc, #184]	@ (800ab5c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d045      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a2d      	ldr	r2, [pc, #180]	@ (800ab60 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d040      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a2b      	ldr	r2, [pc, #172]	@ (800ab64 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d03b      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a2a      	ldr	r2, [pc, #168]	@ (800ab68 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d036      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a28      	ldr	r2, [pc, #160]	@ (800ab6c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d031      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a27      	ldr	r2, [pc, #156]	@ (800ab70 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d02c      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a25      	ldr	r2, [pc, #148]	@ (800ab74 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d027      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a24      	ldr	r2, [pc, #144]	@ (800ab78 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d022      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a22      	ldr	r2, [pc, #136]	@ (800ab7c <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d01d      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a21      	ldr	r2, [pc, #132]	@ (800ab80 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d018      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a1f      	ldr	r2, [pc, #124]	@ (800ab84 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d013      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a1e      	ldr	r2, [pc, #120]	@ (800ab88 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d00e      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a1c      	ldr	r2, [pc, #112]	@ (800ab8c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d009      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a1b      	ldr	r2, [pc, #108]	@ (800ab90 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d004      	beq.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a19      	ldr	r2, [pc, #100]	@ (800ab94 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d132      	bne.n	800ab98 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e031      	b.n	800ab9a <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800ab36:	bf00      	nop
 800ab38:	40020010 	.word	0x40020010
 800ab3c:	40020028 	.word	0x40020028
 800ab40:	40020040 	.word	0x40020040
 800ab44:	40020058 	.word	0x40020058
 800ab48:	40020070 	.word	0x40020070
 800ab4c:	40020088 	.word	0x40020088
 800ab50:	400200a0 	.word	0x400200a0
 800ab54:	400200b8 	.word	0x400200b8
 800ab58:	40020410 	.word	0x40020410
 800ab5c:	40020428 	.word	0x40020428
 800ab60:	40020440 	.word	0x40020440
 800ab64:	40020458 	.word	0x40020458
 800ab68:	40020470 	.word	0x40020470
 800ab6c:	40020488 	.word	0x40020488
 800ab70:	400204a0 	.word	0x400204a0
 800ab74:	400204b8 	.word	0x400204b8
 800ab78:	58025408 	.word	0x58025408
 800ab7c:	5802541c 	.word	0x5802541c
 800ab80:	58025430 	.word	0x58025430
 800ab84:	58025444 	.word	0x58025444
 800ab88:	58025458 	.word	0x58025458
 800ab8c:	5802546c 	.word	0x5802546c
 800ab90:	58025480 	.word	0x58025480
 800ab94:	58025494 	.word	0x58025494
 800ab98:	2300      	movs	r3, #0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00d      	beq.n	800abba <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800aba6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abac:	2b00      	cmp	r3, #0
 800abae:	d004      	beq.n	800abba <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800abb8:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a3b      	ldr	r2, [pc, #236]	@ (800acac <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d04a      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a39      	ldr	r2, [pc, #228]	@ (800acb0 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d045      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a38      	ldr	r2, [pc, #224]	@ (800acb4 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d040      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a36      	ldr	r2, [pc, #216]	@ (800acb8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d03b      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a35      	ldr	r2, [pc, #212]	@ (800acbc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d036      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a33      	ldr	r2, [pc, #204]	@ (800acc0 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d031      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a32      	ldr	r2, [pc, #200]	@ (800acc4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d02c      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a30      	ldr	r2, [pc, #192]	@ (800acc8 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d027      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a2f      	ldr	r2, [pc, #188]	@ (800accc <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d022      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a2d      	ldr	r2, [pc, #180]	@ (800acd0 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d01d      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a2c      	ldr	r2, [pc, #176]	@ (800acd4 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d018      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a2a      	ldr	r2, [pc, #168]	@ (800acd8 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d013      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a29      	ldr	r2, [pc, #164]	@ (800acdc <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d00e      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a27      	ldr	r2, [pc, #156]	@ (800ace0 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d009      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a26      	ldr	r2, [pc, #152]	@ (800ace4 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d004      	beq.n	800ac5a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a24      	ldr	r2, [pc, #144]	@ (800ace8 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d101      	bne.n	800ac5e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e000      	b.n	800ac60 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d043      	beq.n	800acec <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f023 021e 	bic.w	r2, r3, #30
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f042 0216 	orr.w	r2, r2, #22
 800ac76:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	695a      	ldr	r2, [r3, #20]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ac86:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d103      	bne.n	800ac98 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d043      	beq.n	800ad20 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f042 0208 	orr.w	r2, r2, #8
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	e03a      	b.n	800ad20 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 800acaa:	bf00      	nop
 800acac:	40020010 	.word	0x40020010
 800acb0:	40020028 	.word	0x40020028
 800acb4:	40020040 	.word	0x40020040
 800acb8:	40020058 	.word	0x40020058
 800acbc:	40020070 	.word	0x40020070
 800acc0:	40020088 	.word	0x40020088
 800acc4:	400200a0 	.word	0x400200a0
 800acc8:	400200b8 	.word	0x400200b8
 800accc:	40020410 	.word	0x40020410
 800acd0:	40020428 	.word	0x40020428
 800acd4:	40020440 	.word	0x40020440
 800acd8:	40020458 	.word	0x40020458
 800acdc:	40020470 	.word	0x40020470
 800ace0:	40020488 	.word	0x40020488
 800ace4:	400204a0 	.word	0x400204a0
 800ace8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f023 020e 	bic.w	r2, r3, #14
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f042 020a 	orr.w	r2, r2, #10
 800acfe:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d103      	bne.n	800ad10 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d007      	beq.n	800ad20 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f042 0204 	orr.w	r2, r2, #4
 800ad1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a81      	ldr	r2, [pc, #516]	@ (800af2c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d072      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a80      	ldr	r2, [pc, #512]	@ (800af30 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d06d      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a7e      	ldr	r2, [pc, #504]	@ (800af34 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d068      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a7d      	ldr	r2, [pc, #500]	@ (800af38 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d063      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a7b      	ldr	r2, [pc, #492]	@ (800af3c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d05e      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a7a      	ldr	r2, [pc, #488]	@ (800af40 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d059      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a78      	ldr	r2, [pc, #480]	@ (800af44 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d054      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a77      	ldr	r2, [pc, #476]	@ (800af48 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d04f      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a75      	ldr	r2, [pc, #468]	@ (800af4c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d04a      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a74      	ldr	r2, [pc, #464]	@ (800af50 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d045      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a72      	ldr	r2, [pc, #456]	@ (800af54 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d040      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a71      	ldr	r2, [pc, #452]	@ (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d03b      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a6f      	ldr	r2, [pc, #444]	@ (800af5c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d036      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a6e      	ldr	r2, [pc, #440]	@ (800af60 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d031      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a6c      	ldr	r2, [pc, #432]	@ (800af64 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d02c      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a6b      	ldr	r2, [pc, #428]	@ (800af68 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d027      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a69      	ldr	r2, [pc, #420]	@ (800af6c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d022      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a68      	ldr	r2, [pc, #416]	@ (800af70 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d01d      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a66      	ldr	r2, [pc, #408]	@ (800af74 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d018      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a65      	ldr	r2, [pc, #404]	@ (800af78 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d013      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a63      	ldr	r2, [pc, #396]	@ (800af7c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d00e      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a62      	ldr	r2, [pc, #392]	@ (800af80 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d009      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a60      	ldr	r2, [pc, #384]	@ (800af84 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d004      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a5f      	ldr	r2, [pc, #380]	@ (800af88 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d101      	bne.n	800ae14 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 800ae10:	2301      	movs	r3, #1
 800ae12:	e000      	b.n	800ae16 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 800ae14:	2300      	movs	r3, #0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d01a      	beq.n	800ae50 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d007      	beq.n	800ae38 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d007      	beq.n	800ae50 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a35      	ldr	r2, [pc, #212]	@ (800af2c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d04a      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a34      	ldr	r2, [pc, #208]	@ (800af30 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d045      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a32      	ldr	r2, [pc, #200]	@ (800af34 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d040      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a31      	ldr	r2, [pc, #196]	@ (800af38 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d03b      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a2f      	ldr	r2, [pc, #188]	@ (800af3c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d036      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a2e      	ldr	r2, [pc, #184]	@ (800af40 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d031      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a2c      	ldr	r2, [pc, #176]	@ (800af44 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d02c      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a2b      	ldr	r2, [pc, #172]	@ (800af48 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d027      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a29      	ldr	r2, [pc, #164]	@ (800af4c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d022      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a28      	ldr	r2, [pc, #160]	@ (800af50 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d01d      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a26      	ldr	r2, [pc, #152]	@ (800af54 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d018      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a25      	ldr	r2, [pc, #148]	@ (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d013      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a23      	ldr	r2, [pc, #140]	@ (800af5c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d00e      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a22      	ldr	r2, [pc, #136]	@ (800af60 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d009      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a20      	ldr	r2, [pc, #128]	@ (800af64 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d004      	beq.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a1f      	ldr	r2, [pc, #124]	@ (800af68 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d108      	bne.n	800af02 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f042 0201 	orr.w	r2, r2, #1
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	e00e      	b.n	800af20 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f042 0201 	orr.w	r2, r2, #1
 800af10:	601a      	str	r2, [r3, #0]
 800af12:	e005      	b.n	800af20 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800af20:	7dfb      	ldrb	r3, [r7, #23]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3718      	adds	r7, #24
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	40020010 	.word	0x40020010
 800af30:	40020028 	.word	0x40020028
 800af34:	40020040 	.word	0x40020040
 800af38:	40020058 	.word	0x40020058
 800af3c:	40020070 	.word	0x40020070
 800af40:	40020088 	.word	0x40020088
 800af44:	400200a0 	.word	0x400200a0
 800af48:	400200b8 	.word	0x400200b8
 800af4c:	40020410 	.word	0x40020410
 800af50:	40020428 	.word	0x40020428
 800af54:	40020440 	.word	0x40020440
 800af58:	40020458 	.word	0x40020458
 800af5c:	40020470 	.word	0x40020470
 800af60:	40020488 	.word	0x40020488
 800af64:	400204a0 	.word	0x400204a0
 800af68:	400204b8 	.word	0x400204b8
 800af6c:	58025408 	.word	0x58025408
 800af70:	5802541c 	.word	0x5802541c
 800af74:	58025430 	.word	0x58025430
 800af78:	58025444 	.word	0x58025444
 800af7c:	58025458 	.word	0x58025458
 800af80:	5802546c 	.word	0x5802546c
 800af84:	58025480 	.word	0x58025480
 800af88:	58025494 	.word	0x58025494

0800af8c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	4613      	mov	r3, r2
 800af98:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a39      	ldr	r2, [pc, #228]	@ (800b084 <HAL_DMAEx_ChangeMemory+0xf8>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d04a      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a37      	ldr	r2, [pc, #220]	@ (800b088 <HAL_DMAEx_ChangeMemory+0xfc>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d045      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a36      	ldr	r2, [pc, #216]	@ (800b08c <HAL_DMAEx_ChangeMemory+0x100>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d040      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a34      	ldr	r2, [pc, #208]	@ (800b090 <HAL_DMAEx_ChangeMemory+0x104>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d03b      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a33      	ldr	r2, [pc, #204]	@ (800b094 <HAL_DMAEx_ChangeMemory+0x108>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d036      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a31      	ldr	r2, [pc, #196]	@ (800b098 <HAL_DMAEx_ChangeMemory+0x10c>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d031      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a30      	ldr	r2, [pc, #192]	@ (800b09c <HAL_DMAEx_ChangeMemory+0x110>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d02c      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a2e      	ldr	r2, [pc, #184]	@ (800b0a0 <HAL_DMAEx_ChangeMemory+0x114>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d027      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a2d      	ldr	r2, [pc, #180]	@ (800b0a4 <HAL_DMAEx_ChangeMemory+0x118>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d022      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a2b      	ldr	r2, [pc, #172]	@ (800b0a8 <HAL_DMAEx_ChangeMemory+0x11c>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d01d      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a2a      	ldr	r2, [pc, #168]	@ (800b0ac <HAL_DMAEx_ChangeMemory+0x120>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d018      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a28      	ldr	r2, [pc, #160]	@ (800b0b0 <HAL_DMAEx_ChangeMemory+0x124>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d013      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a27      	ldr	r2, [pc, #156]	@ (800b0b4 <HAL_DMAEx_ChangeMemory+0x128>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d00e      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a25      	ldr	r2, [pc, #148]	@ (800b0b8 <HAL_DMAEx_ChangeMemory+0x12c>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d009      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a24      	ldr	r2, [pc, #144]	@ (800b0bc <HAL_DMAEx_ChangeMemory+0x130>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d004      	beq.n	800b03a <HAL_DMAEx_ChangeMemory+0xae>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a22      	ldr	r2, [pc, #136]	@ (800b0c0 <HAL_DMAEx_ChangeMemory+0x134>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d101      	bne.n	800b03e <HAL_DMAEx_ChangeMemory+0xb2>
 800b03a:	2301      	movs	r3, #1
 800b03c:	e000      	b.n	800b040 <HAL_DMAEx_ChangeMemory+0xb4>
 800b03e:	2300      	movs	r3, #0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00c      	beq.n	800b05e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 800b044:	79fb      	ldrb	r3, [r7, #7]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d104      	bne.n	800b054 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	60da      	str	r2, [r3, #12]
 800b052:	e010      	b.n	800b076 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	611a      	str	r2, [r3, #16]
 800b05c:	e00b      	b.n	800b076 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d104      	bne.n	800b06e <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	60da      	str	r2, [r3, #12]
 800b06c:	e003      	b.n	800b076 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	40020010 	.word	0x40020010
 800b088:	40020028 	.word	0x40020028
 800b08c:	40020040 	.word	0x40020040
 800b090:	40020058 	.word	0x40020058
 800b094:	40020070 	.word	0x40020070
 800b098:	40020088 	.word	0x40020088
 800b09c:	400200a0 	.word	0x400200a0
 800b0a0:	400200b8 	.word	0x400200b8
 800b0a4:	40020410 	.word	0x40020410
 800b0a8:	40020428 	.word	0x40020428
 800b0ac:	40020440 	.word	0x40020440
 800b0b0:	40020458 	.word	0x40020458
 800b0b4:	40020470 	.word	0x40020470
 800b0b8:	40020488 	.word	0x40020488
 800b0bc:	400204a0 	.word	0x400204a0
 800b0c0:	400204b8 	.word	0x400204b8

0800b0c4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a46      	ldr	r2, [pc, #280]	@ (800b1f0 <DMA_MultiBufferSetConfig+0x12c>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d04a      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a44      	ldr	r2, [pc, #272]	@ (800b1f4 <DMA_MultiBufferSetConfig+0x130>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d045      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a43      	ldr	r2, [pc, #268]	@ (800b1f8 <DMA_MultiBufferSetConfig+0x134>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d040      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a41      	ldr	r2, [pc, #260]	@ (800b1fc <DMA_MultiBufferSetConfig+0x138>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d03b      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a40      	ldr	r2, [pc, #256]	@ (800b200 <DMA_MultiBufferSetConfig+0x13c>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d036      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a3e      	ldr	r2, [pc, #248]	@ (800b204 <DMA_MultiBufferSetConfig+0x140>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d031      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a3d      	ldr	r2, [pc, #244]	@ (800b208 <DMA_MultiBufferSetConfig+0x144>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d02c      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a3b      	ldr	r2, [pc, #236]	@ (800b20c <DMA_MultiBufferSetConfig+0x148>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d027      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a3a      	ldr	r2, [pc, #232]	@ (800b210 <DMA_MultiBufferSetConfig+0x14c>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d022      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a38      	ldr	r2, [pc, #224]	@ (800b214 <DMA_MultiBufferSetConfig+0x150>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d01d      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a37      	ldr	r2, [pc, #220]	@ (800b218 <DMA_MultiBufferSetConfig+0x154>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d018      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a35      	ldr	r2, [pc, #212]	@ (800b21c <DMA_MultiBufferSetConfig+0x158>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d013      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a34      	ldr	r2, [pc, #208]	@ (800b220 <DMA_MultiBufferSetConfig+0x15c>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d00e      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a32      	ldr	r2, [pc, #200]	@ (800b224 <DMA_MultiBufferSetConfig+0x160>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d009      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a31      	ldr	r2, [pc, #196]	@ (800b228 <DMA_MultiBufferSetConfig+0x164>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d004      	beq.n	800b172 <DMA_MultiBufferSetConfig+0xae>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a2f      	ldr	r2, [pc, #188]	@ (800b22c <DMA_MultiBufferSetConfig+0x168>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d101      	bne.n	800b176 <DMA_MultiBufferSetConfig+0xb2>
 800b172:	2301      	movs	r3, #1
 800b174:	e000      	b.n	800b178 <DMA_MultiBufferSetConfig+0xb4>
 800b176:	2300      	movs	r3, #0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d019      	beq.n	800b1b0 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	2b40      	cmp	r3, #64	@ 0x40
 800b18a:	d108      	bne.n	800b19e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 800b19c:	e021      	b.n	800b1e2 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	60da      	str	r2, [r3, #12]
}
 800b1ae:	e018      	b.n	800b1e2 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	2b40      	cmp	r3, #64	@ 0x40
 800b1be:	d108      	bne.n	800b1d2 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	60da      	str	r2, [r3, #12]
}
 800b1d0:	e007      	b.n	800b1e2 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	60da      	str	r2, [r3, #12]
}
 800b1e2:	bf00      	nop
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	40020010 	.word	0x40020010
 800b1f4:	40020028 	.word	0x40020028
 800b1f8:	40020040 	.word	0x40020040
 800b1fc:	40020058 	.word	0x40020058
 800b200:	40020070 	.word	0x40020070
 800b204:	40020088 	.word	0x40020088
 800b208:	400200a0 	.word	0x400200a0
 800b20c:	400200b8 	.word	0x400200b8
 800b210:	40020410 	.word	0x40020410
 800b214:	40020428 	.word	0x40020428
 800b218:	40020440 	.word	0x40020440
 800b21c:	40020458 	.word	0x40020458
 800b220:	40020470 	.word	0x40020470
 800b224:	40020488 	.word	0x40020488
 800b228:	400204a0 	.word	0x400204a0
 800b22c:	400204b8 	.word	0x400204b8

0800b230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800b230:	b480      	push	{r7}
 800b232:	b089      	sub	sp, #36	@ 0x24
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b23a:	2300      	movs	r3, #0
 800b23c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b23e:	4b89      	ldr	r3, [pc, #548]	@ (800b464 <HAL_GPIO_Init+0x234>)
 800b240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b242:	e194      	b.n	800b56e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	2101      	movs	r1, #1
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	fa01 f303 	lsl.w	r3, r1, r3
 800b250:	4013      	ands	r3, r2
 800b252:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	2b00      	cmp	r3, #0
 800b258:	f000 8186 	beq.w	800b568 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	f003 0303 	and.w	r3, r3, #3
 800b264:	2b01      	cmp	r3, #1
 800b266:	d005      	beq.n	800b274 <HAL_GPIO_Init+0x44>
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	f003 0303 	and.w	r3, r3, #3
 800b270:	2b02      	cmp	r3, #2
 800b272:	d130      	bne.n	800b2d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	005b      	lsls	r3, r3, #1
 800b27e:	2203      	movs	r2, #3
 800b280:	fa02 f303 	lsl.w	r3, r2, r3
 800b284:	43db      	mvns	r3, r3
 800b286:	69ba      	ldr	r2, [r7, #24]
 800b288:	4013      	ands	r3, r2
 800b28a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	68da      	ldr	r2, [r3, #12]
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	005b      	lsls	r3, r3, #1
 800b294:	fa02 f303 	lsl.w	r3, r2, r3
 800b298:	69ba      	ldr	r2, [r7, #24]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	69ba      	ldr	r2, [r7, #24]
 800b2a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b2:	43db      	mvns	r3, r3
 800b2b4:	69ba      	ldr	r2, [r7, #24]
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	091b      	lsrs	r3, r3, #4
 800b2c0:	f003 0201 	and.w	r2, r3, #1
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ca:	69ba      	ldr	r2, [r7, #24]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	69ba      	ldr	r2, [r7, #24]
 800b2d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d017      	beq.n	800b312 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	005b      	lsls	r3, r3, #1
 800b2ec:	2203      	movs	r2, #3
 800b2ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f2:	43db      	mvns	r3, r3
 800b2f4:	69ba      	ldr	r2, [r7, #24]
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	689a      	ldr	r2, [r3, #8]
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	005b      	lsls	r3, r3, #1
 800b302:	fa02 f303 	lsl.w	r3, r2, r3
 800b306:	69ba      	ldr	r2, [r7, #24]
 800b308:	4313      	orrs	r3, r2
 800b30a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	69ba      	ldr	r2, [r7, #24]
 800b310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	f003 0303 	and.w	r3, r3, #3
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d123      	bne.n	800b366 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	08da      	lsrs	r2, r3, #3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	3208      	adds	r2, #8
 800b326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b32a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	f003 0307 	and.w	r3, r3, #7
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	220f      	movs	r2, #15
 800b336:	fa02 f303 	lsl.w	r3, r2, r3
 800b33a:	43db      	mvns	r3, r3
 800b33c:	69ba      	ldr	r2, [r7, #24]
 800b33e:	4013      	ands	r3, r2
 800b340:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	691a      	ldr	r2, [r3, #16]
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	f003 0307 	and.w	r3, r3, #7
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	fa02 f303 	lsl.w	r3, r2, r3
 800b352:	69ba      	ldr	r2, [r7, #24]
 800b354:	4313      	orrs	r3, r2
 800b356:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	08da      	lsrs	r2, r3, #3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3208      	adds	r2, #8
 800b360:	69b9      	ldr	r1, [r7, #24]
 800b362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	005b      	lsls	r3, r3, #1
 800b370:	2203      	movs	r2, #3
 800b372:	fa02 f303 	lsl.w	r3, r2, r3
 800b376:	43db      	mvns	r3, r3
 800b378:	69ba      	ldr	r2, [r7, #24]
 800b37a:	4013      	ands	r3, r2
 800b37c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	f003 0203 	and.w	r2, r3, #3
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	005b      	lsls	r3, r3, #1
 800b38a:	fa02 f303 	lsl.w	r3, r2, r3
 800b38e:	69ba      	ldr	r2, [r7, #24]
 800b390:	4313      	orrs	r3, r2
 800b392:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	69ba      	ldr	r2, [r7, #24]
 800b398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f000 80e0 	beq.w	800b568 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b3a8:	4b2f      	ldr	r3, [pc, #188]	@ (800b468 <HAL_GPIO_Init+0x238>)
 800b3aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b3ae:	4a2e      	ldr	r2, [pc, #184]	@ (800b468 <HAL_GPIO_Init+0x238>)
 800b3b0:	f043 0302 	orr.w	r3, r3, #2
 800b3b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b3b8:	4b2b      	ldr	r3, [pc, #172]	@ (800b468 <HAL_GPIO_Init+0x238>)
 800b3ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b3be:	f003 0302 	and.w	r3, r3, #2
 800b3c2:	60fb      	str	r3, [r7, #12]
 800b3c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b3c6:	4a29      	ldr	r2, [pc, #164]	@ (800b46c <HAL_GPIO_Init+0x23c>)
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	089b      	lsrs	r3, r3, #2
 800b3cc:	3302      	adds	r3, #2
 800b3ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	f003 0303 	and.w	r3, r3, #3
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	220f      	movs	r2, #15
 800b3de:	fa02 f303 	lsl.w	r3, r2, r3
 800b3e2:	43db      	mvns	r3, r3
 800b3e4:	69ba      	ldr	r2, [r7, #24]
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a20      	ldr	r2, [pc, #128]	@ (800b470 <HAL_GPIO_Init+0x240>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d052      	beq.n	800b498 <HAL_GPIO_Init+0x268>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a1f      	ldr	r2, [pc, #124]	@ (800b474 <HAL_GPIO_Init+0x244>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d031      	beq.n	800b45e <HAL_GPIO_Init+0x22e>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a1e      	ldr	r2, [pc, #120]	@ (800b478 <HAL_GPIO_Init+0x248>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d02b      	beq.n	800b45a <HAL_GPIO_Init+0x22a>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a1d      	ldr	r2, [pc, #116]	@ (800b47c <HAL_GPIO_Init+0x24c>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d025      	beq.n	800b456 <HAL_GPIO_Init+0x226>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a1c      	ldr	r2, [pc, #112]	@ (800b480 <HAL_GPIO_Init+0x250>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d01f      	beq.n	800b452 <HAL_GPIO_Init+0x222>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a1b      	ldr	r2, [pc, #108]	@ (800b484 <HAL_GPIO_Init+0x254>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d019      	beq.n	800b44e <HAL_GPIO_Init+0x21e>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a1a      	ldr	r2, [pc, #104]	@ (800b488 <HAL_GPIO_Init+0x258>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d013      	beq.n	800b44a <HAL_GPIO_Init+0x21a>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a19      	ldr	r2, [pc, #100]	@ (800b48c <HAL_GPIO_Init+0x25c>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d00d      	beq.n	800b446 <HAL_GPIO_Init+0x216>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a18      	ldr	r2, [pc, #96]	@ (800b490 <HAL_GPIO_Init+0x260>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d007      	beq.n	800b442 <HAL_GPIO_Init+0x212>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a17      	ldr	r2, [pc, #92]	@ (800b494 <HAL_GPIO_Init+0x264>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d101      	bne.n	800b43e <HAL_GPIO_Init+0x20e>
 800b43a:	2309      	movs	r3, #9
 800b43c:	e02d      	b.n	800b49a <HAL_GPIO_Init+0x26a>
 800b43e:	230a      	movs	r3, #10
 800b440:	e02b      	b.n	800b49a <HAL_GPIO_Init+0x26a>
 800b442:	2308      	movs	r3, #8
 800b444:	e029      	b.n	800b49a <HAL_GPIO_Init+0x26a>
 800b446:	2307      	movs	r3, #7
 800b448:	e027      	b.n	800b49a <HAL_GPIO_Init+0x26a>
 800b44a:	2306      	movs	r3, #6
 800b44c:	e025      	b.n	800b49a <HAL_GPIO_Init+0x26a>
 800b44e:	2305      	movs	r3, #5
 800b450:	e023      	b.n	800b49a <HAL_GPIO_Init+0x26a>
 800b452:	2304      	movs	r3, #4
 800b454:	e021      	b.n	800b49a <HAL_GPIO_Init+0x26a>
 800b456:	2303      	movs	r3, #3
 800b458:	e01f      	b.n	800b49a <HAL_GPIO_Init+0x26a>
 800b45a:	2302      	movs	r3, #2
 800b45c:	e01d      	b.n	800b49a <HAL_GPIO_Init+0x26a>
 800b45e:	2301      	movs	r3, #1
 800b460:	e01b      	b.n	800b49a <HAL_GPIO_Init+0x26a>
 800b462:	bf00      	nop
 800b464:	58000080 	.word	0x58000080
 800b468:	58024400 	.word	0x58024400
 800b46c:	58000400 	.word	0x58000400
 800b470:	58020000 	.word	0x58020000
 800b474:	58020400 	.word	0x58020400
 800b478:	58020800 	.word	0x58020800
 800b47c:	58020c00 	.word	0x58020c00
 800b480:	58021000 	.word	0x58021000
 800b484:	58021400 	.word	0x58021400
 800b488:	58021800 	.word	0x58021800
 800b48c:	58021c00 	.word	0x58021c00
 800b490:	58022000 	.word	0x58022000
 800b494:	58022400 	.word	0x58022400
 800b498:	2300      	movs	r3, #0
 800b49a:	69fa      	ldr	r2, [r7, #28]
 800b49c:	f002 0203 	and.w	r2, r2, #3
 800b4a0:	0092      	lsls	r2, r2, #2
 800b4a2:	4093      	lsls	r3, r2
 800b4a4:	69ba      	ldr	r2, [r7, #24]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b4aa:	4938      	ldr	r1, [pc, #224]	@ (800b58c <HAL_GPIO_Init+0x35c>)
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	089b      	lsrs	r3, r3, #2
 800b4b0:	3302      	adds	r3, #2
 800b4b2:	69ba      	ldr	r2, [r7, #24]
 800b4b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b4b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	43db      	mvns	r3, r3
 800b4c4:	69ba      	ldr	r2, [r7, #24]
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d003      	beq.n	800b4de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b4d6:	69ba      	ldr	r2, [r7, #24]
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b4de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b4e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	43db      	mvns	r3, r3
 800b4f2:	69ba      	ldr	r2, [r7, #24]
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b500:	2b00      	cmp	r3, #0
 800b502:	d003      	beq.n	800b50c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b504:	69ba      	ldr	r2, [r7, #24]
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	4313      	orrs	r3, r2
 800b50a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b50c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	43db      	mvns	r3, r3
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	4013      	ands	r3, r2
 800b522:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d003      	beq.n	800b538 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b530:	69ba      	ldr	r2, [r7, #24]
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	4313      	orrs	r3, r2
 800b536:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	69ba      	ldr	r2, [r7, #24]
 800b53c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	43db      	mvns	r3, r3
 800b548:	69ba      	ldr	r2, [r7, #24]
 800b54a:	4013      	ands	r3, r2
 800b54c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b556:	2b00      	cmp	r3, #0
 800b558:	d003      	beq.n	800b562 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b55a:	69ba      	ldr	r2, [r7, #24]
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	4313      	orrs	r3, r2
 800b560:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	69ba      	ldr	r2, [r7, #24]
 800b566:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	3301      	adds	r3, #1
 800b56c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	fa22 f303 	lsr.w	r3, r2, r3
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f47f ae63 	bne.w	800b244 <HAL_GPIO_Init+0x14>
  }
}
 800b57e:	bf00      	nop
 800b580:	bf00      	nop
 800b582:	3724      	adds	r7, #36	@ 0x24
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr
 800b58c:	58000400 	.word	0x58000400

0800b590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	807b      	strh	r3, [r7, #2]
 800b59c:	4613      	mov	r3, r2
 800b59e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b5a0:	787b      	ldrb	r3, [r7, #1]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d003      	beq.n	800b5ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b5a6:	887a      	ldrh	r2, [r7, #2]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b5ac:	e003      	b.n	800b5b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b5ae:	887b      	ldrh	r3, [r7, #2]
 800b5b0:	041a      	lsls	r2, r3, #16
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	619a      	str	r2, [r3, #24]
}
 800b5b6:	bf00      	nop
 800b5b8:	370c      	adds	r7, #12
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b085      	sub	sp, #20
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	695b      	ldr	r3, [r3, #20]
 800b5d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b5d4:	887a      	ldrh	r2, [r7, #2]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	4013      	ands	r3, r2
 800b5da:	041a      	lsls	r2, r3, #16
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	43d9      	mvns	r1, r3
 800b5e0:	887b      	ldrh	r3, [r7, #2]
 800b5e2:	400b      	ands	r3, r1
 800b5e4:	431a      	orrs	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	619a      	str	r2, [r3, #24]
}
 800b5ea:	bf00      	nop
 800b5ec:	3714      	adds	r7, #20
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
	...

0800b5f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	e08b      	b.n	800b722 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b00      	cmp	r3, #0
 800b614:	d106      	bne.n	800b624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7f8 f954 	bl	80038cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2224      	movs	r2, #36	@ 0x24
 800b628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f022 0201 	bic.w	r2, r2, #1
 800b63a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b648:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	689a      	ldr	r2, [r3, #8]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b658:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d107      	bne.n	800b672 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	689a      	ldr	r2, [r3, #8]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b66e:	609a      	str	r2, [r3, #8]
 800b670:	e006      	b.n	800b680 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	689a      	ldr	r2, [r3, #8]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b67e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	2b02      	cmp	r3, #2
 800b686:	d108      	bne.n	800b69a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	685a      	ldr	r2, [r3, #4]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b696:	605a      	str	r2, [r3, #4]
 800b698:	e007      	b.n	800b6aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	685a      	ldr	r2, [r3, #4]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b6a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	6859      	ldr	r1, [r3, #4]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b72c <HAL_I2C_Init+0x134>)
 800b6b6:	430b      	orrs	r3, r1
 800b6b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68da      	ldr	r2, [r3, #12]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b6c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	691a      	ldr	r2, [r3, #16]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	695b      	ldr	r3, [r3, #20]
 800b6d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	69d9      	ldr	r1, [r3, #28]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6a1a      	ldr	r2, [r3, #32]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f042 0201 	orr.w	r2, r2, #1
 800b702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2220      	movs	r2, #32
 800b70e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	02008000 	.word	0x02008000

0800b730 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b088      	sub	sp, #32
 800b734:	af02      	add	r7, sp, #8
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	607a      	str	r2, [r7, #4]
 800b73a:	461a      	mov	r2, r3
 800b73c:	460b      	mov	r3, r1
 800b73e:	817b      	strh	r3, [r7, #10]
 800b740:	4613      	mov	r3, r2
 800b742:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b20      	cmp	r3, #32
 800b74e:	f040 80fd 	bne.w	800b94c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d101      	bne.n	800b760 <HAL_I2C_Master_Transmit+0x30>
 800b75c:	2302      	movs	r3, #2
 800b75e:	e0f6      	b.n	800b94e <HAL_I2C_Master_Transmit+0x21e>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b768:	f7f9 ff46 	bl	80055f8 <HAL_GetTick>
 800b76c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	2319      	movs	r3, #25
 800b774:	2201      	movs	r2, #1
 800b776:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f000 fc78 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e0e1      	b.n	800b94e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2221      	movs	r2, #33	@ 0x21
 800b78e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2210      	movs	r2, #16
 800b796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2200      	movs	r2, #0
 800b79e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	893a      	ldrh	r2, [r7, #8]
 800b7aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	2bff      	cmp	r3, #255	@ 0xff
 800b7ba:	d906      	bls.n	800b7ca <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	22ff      	movs	r2, #255	@ 0xff
 800b7c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b7c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b7c6:	617b      	str	r3, [r7, #20]
 800b7c8:	e007      	b.n	800b7da <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b7d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b7d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d024      	beq.n	800b82c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e6:	781a      	ldrb	r2, [r3, #0]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7f2:	1c5a      	adds	r2, r3, #1
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	3b01      	subs	r3, #1
 800b800:	b29a      	uxth	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b80a:	3b01      	subs	r3, #1
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b816:	b2db      	uxtb	r3, r3
 800b818:	3301      	adds	r3, #1
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	8979      	ldrh	r1, [r7, #10]
 800b81e:	4b4e      	ldr	r3, [pc, #312]	@ (800b958 <HAL_I2C_Master_Transmit+0x228>)
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f000 fe73 	bl	800c510 <I2C_TransferConfig>
 800b82a:	e066      	b.n	800b8fa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b830:	b2da      	uxtb	r2, r3
 800b832:	8979      	ldrh	r1, [r7, #10]
 800b834:	4b48      	ldr	r3, [pc, #288]	@ (800b958 <HAL_I2C_Master_Transmit+0x228>)
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f000 fe68 	bl	800c510 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800b840:	e05b      	b.n	800b8fa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b842:	693a      	ldr	r2, [r7, #16]
 800b844:	6a39      	ldr	r1, [r7, #32]
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f000 fc6b 	bl	800c122 <I2C_WaitOnTXISFlagUntilTimeout>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d001      	beq.n	800b856 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	e07b      	b.n	800b94e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b85a:	781a      	ldrb	r2, [r3, #0]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b866:	1c5a      	adds	r2, r3, #1
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b870:	b29b      	uxth	r3, r3
 800b872:	3b01      	subs	r3, #1
 800b874:	b29a      	uxth	r2, r3
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b87e:	3b01      	subs	r3, #1
 800b880:	b29a      	uxth	r2, r3
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d034      	beq.n	800b8fa <HAL_I2C_Master_Transmit+0x1ca>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b894:	2b00      	cmp	r3, #0
 800b896:	d130      	bne.n	800b8fa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	2180      	movs	r1, #128	@ 0x80
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f000 fbe4 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e04d      	b.n	800b94e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	2bff      	cmp	r3, #255	@ 0xff
 800b8ba:	d90e      	bls.n	800b8da <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	22ff      	movs	r2, #255	@ 0xff
 800b8c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8c6:	b2da      	uxtb	r2, r3
 800b8c8:	8979      	ldrh	r1, [r7, #10]
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f000 fe1c 	bl	800c510 <I2C_TransferConfig>
 800b8d8:	e00f      	b.n	800b8fa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8e8:	b2da      	uxtb	r2, r3
 800b8ea:	8979      	ldrh	r1, [r7, #10]
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f000 fe0b 	bl	800c510 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	2b00      	cmp	r3, #0
 800b902:	d19e      	bne.n	800b842 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	6a39      	ldr	r1, [r7, #32]
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f000 fc51 	bl	800c1b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800b914:	2301      	movs	r3, #1
 800b916:	e01a      	b.n	800b94e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2220      	movs	r2, #32
 800b91e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6859      	ldr	r1, [r3, #4]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	4b0c      	ldr	r3, [pc, #48]	@ (800b95c <HAL_I2C_Master_Transmit+0x22c>)
 800b92c:	400b      	ands	r3, r1
 800b92e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2220      	movs	r2, #32
 800b934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b948:	2300      	movs	r3, #0
 800b94a:	e000      	b.n	800b94e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800b94c:	2302      	movs	r3, #2
  }
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3718      	adds	r7, #24
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	80002000 	.word	0x80002000
 800b95c:	fe00e800 	.word	0xfe00e800

0800b960 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b088      	sub	sp, #32
 800b964:	af02      	add	r7, sp, #8
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	607a      	str	r2, [r7, #4]
 800b96a:	461a      	mov	r2, r3
 800b96c:	460b      	mov	r3, r1
 800b96e:	817b      	strh	r3, [r7, #10]
 800b970:	4613      	mov	r3, r2
 800b972:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2b20      	cmp	r3, #32
 800b97e:	f040 80db 	bne.w	800bb38 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d101      	bne.n	800b990 <HAL_I2C_Master_Receive+0x30>
 800b98c:	2302      	movs	r3, #2
 800b98e:	e0d4      	b.n	800bb3a <HAL_I2C_Master_Receive+0x1da>
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b998:	f7f9 fe2e 	bl	80055f8 <HAL_GetTick>
 800b99c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	2319      	movs	r3, #25
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f000 fb60 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e0bf      	b.n	800bb3a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2222      	movs	r2, #34	@ 0x22
 800b9be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2210      	movs	r2, #16
 800b9c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	893a      	ldrh	r2, [r7, #8]
 800b9da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	2bff      	cmp	r3, #255	@ 0xff
 800b9ea:	d90e      	bls.n	800ba0a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	22ff      	movs	r2, #255	@ 0xff
 800b9f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	8979      	ldrh	r1, [r7, #10]
 800b9fa:	4b52      	ldr	r3, [pc, #328]	@ (800bb44 <HAL_I2C_Master_Receive+0x1e4>)
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f000 fd84 	bl	800c510 <I2C_TransferConfig>
 800ba08:	e06d      	b.n	800bae6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	8979      	ldrh	r1, [r7, #10]
 800ba1c:	4b49      	ldr	r3, [pc, #292]	@ (800bb44 <HAL_I2C_Master_Receive+0x1e4>)
 800ba1e:	9300      	str	r3, [sp, #0]
 800ba20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f000 fd73 	bl	800c510 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800ba2a:	e05c      	b.n	800bae6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	6a39      	ldr	r1, [r7, #32]
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f000 fc01 	bl	800c238 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d001      	beq.n	800ba40 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e07c      	b.n	800bb3a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba4a:	b2d2      	uxtb	r2, r2
 800ba4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba52:	1c5a      	adds	r2, r3, #1
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d034      	beq.n	800bae6 <HAL_I2C_Master_Receive+0x186>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d130      	bne.n	800bae6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	6a3b      	ldr	r3, [r7, #32]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	2180      	movs	r1, #128	@ 0x80
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f000 faee 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e04d      	b.n	800bb3a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	2bff      	cmp	r3, #255	@ 0xff
 800baa6:	d90e      	bls.n	800bac6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	22ff      	movs	r2, #255	@ 0xff
 800baac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	8979      	ldrh	r1, [r7, #10]
 800bab6:	2300      	movs	r3, #0
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f000 fd26 	bl	800c510 <I2C_TransferConfig>
 800bac4:	e00f      	b.n	800bae6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800baca:	b29a      	uxth	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bad4:	b2da      	uxtb	r2, r3
 800bad6:	8979      	ldrh	r1, [r7, #10]
 800bad8:	2300      	movs	r3, #0
 800bada:	9300      	str	r3, [sp, #0]
 800badc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f000 fd15 	bl	800c510 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800baea:	b29b      	uxth	r3, r3
 800baec:	2b00      	cmp	r3, #0
 800baee:	d19d      	bne.n	800ba2c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800baf0:	697a      	ldr	r2, [r7, #20]
 800baf2:	6a39      	ldr	r1, [r7, #32]
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f000 fb5b 	bl	800c1b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	e01a      	b.n	800bb3a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2220      	movs	r2, #32
 800bb0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6859      	ldr	r1, [r3, #4]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	4b0c      	ldr	r3, [pc, #48]	@ (800bb48 <HAL_I2C_Master_Receive+0x1e8>)
 800bb18:	400b      	ands	r3, r1
 800bb1a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2220      	movs	r2, #32
 800bb20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	e000      	b.n	800bb3a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800bb38:	2302      	movs	r3, #2
  }
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	80002400 	.word	0x80002400
 800bb48:	fe00e800 	.word	0xfe00e800

0800bb4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	af02      	add	r7, sp, #8
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	4608      	mov	r0, r1
 800bb56:	4611      	mov	r1, r2
 800bb58:	461a      	mov	r2, r3
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	817b      	strh	r3, [r7, #10]
 800bb5e:	460b      	mov	r3, r1
 800bb60:	813b      	strh	r3, [r7, #8]
 800bb62:	4613      	mov	r3, r2
 800bb64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b20      	cmp	r3, #32
 800bb70:	f040 80f9 	bne.w	800bd66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb74:	6a3b      	ldr	r3, [r7, #32]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d002      	beq.n	800bb80 <HAL_I2C_Mem_Write+0x34>
 800bb7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d105      	bne.n	800bb8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bb86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e0ed      	b.n	800bd68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d101      	bne.n	800bb9a <HAL_I2C_Mem_Write+0x4e>
 800bb96:	2302      	movs	r3, #2
 800bb98:	e0e6      	b.n	800bd68 <HAL_I2C_Mem_Write+0x21c>
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bba2:	f7f9 fd29 	bl	80055f8 <HAL_GetTick>
 800bba6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	2319      	movs	r3, #25
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f000 fa5b 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d001      	beq.n	800bbc4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e0d1      	b.n	800bd68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2221      	movs	r2, #33	@ 0x21
 800bbc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2240      	movs	r2, #64	@ 0x40
 800bbd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6a3a      	ldr	r2, [r7, #32]
 800bbde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bbe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bbec:	88f8      	ldrh	r0, [r7, #6]
 800bbee:	893a      	ldrh	r2, [r7, #8]
 800bbf0:	8979      	ldrh	r1, [r7, #10]
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	9301      	str	r3, [sp, #4]
 800bbf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f000 f9bf 	bl	800bf80 <I2C_RequestMemoryWrite>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d005      	beq.n	800bc14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800bc10:	2301      	movs	r3, #1
 800bc12:	e0a9      	b.n	800bd68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	2bff      	cmp	r3, #255	@ 0xff
 800bc1c:	d90e      	bls.n	800bc3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	22ff      	movs	r2, #255	@ 0xff
 800bc22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	8979      	ldrh	r1, [r7, #10]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f000 fc6b 	bl	800c510 <I2C_TransferConfig>
 800bc3a:	e00f      	b.n	800bc5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc4a:	b2da      	uxtb	r2, r3
 800bc4c:	8979      	ldrh	r1, [r7, #10]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f000 fc5a 	bl	800c510 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f000 fa5e 	bl	800c122 <I2C_WaitOnTXISFlagUntilTimeout>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e07b      	b.n	800bd68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc74:	781a      	ldrb	r2, [r3, #0]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc80:	1c5a      	adds	r2, r3, #1
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d034      	beq.n	800bd14 <HAL_I2C_Mem_Write+0x1c8>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d130      	bne.n	800bd14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcb8:	2200      	movs	r2, #0
 800bcba:	2180      	movs	r1, #128	@ 0x80
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f000 f9d7 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d001      	beq.n	800bccc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e04d      	b.n	800bd68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	2bff      	cmp	r3, #255	@ 0xff
 800bcd4:	d90e      	bls.n	800bcf4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	22ff      	movs	r2, #255	@ 0xff
 800bcda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	8979      	ldrh	r1, [r7, #10]
 800bce4:	2300      	movs	r3, #0
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f000 fc0f 	bl	800c510 <I2C_TransferConfig>
 800bcf2:	e00f      	b.n	800bd14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	8979      	ldrh	r1, [r7, #10]
 800bd06:	2300      	movs	r3, #0
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	f000 fbfe 	bl	800c510 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d19e      	bne.n	800bc5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd1e:	697a      	ldr	r2, [r7, #20]
 800bd20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f000 fa44 	bl	800c1b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e01a      	b.n	800bd68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2220      	movs	r2, #32
 800bd38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	6859      	ldr	r1, [r3, #4]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	4b0a      	ldr	r3, [pc, #40]	@ (800bd70 <HAL_I2C_Mem_Write+0x224>)
 800bd46:	400b      	ands	r3, r1
 800bd48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2220      	movs	r2, #32
 800bd4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2200      	movs	r2, #0
 800bd56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	e000      	b.n	800bd68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bd66:	2302      	movs	r3, #2
  }
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3718      	adds	r7, #24
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	fe00e800 	.word	0xfe00e800

0800bd74 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b08a      	sub	sp, #40	@ 0x28
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	607a      	str	r2, [r7, #4]
 800bd7e:	603b      	str	r3, [r7, #0]
 800bd80:	460b      	mov	r3, r1
 800bd82:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800bd84:	2300      	movs	r3, #0
 800bd86:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	2b20      	cmp	r3, #32
 800bd96:	f040 80e9 	bne.w	800bf6c <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	699b      	ldr	r3, [r3, #24]
 800bda0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bda4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bda8:	d101      	bne.n	800bdae <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 800bdaa:	2302      	movs	r3, #2
 800bdac:	e0df      	b.n	800bf6e <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d101      	bne.n	800bdbc <HAL_I2C_IsDeviceReady+0x48>
 800bdb8:	2302      	movs	r3, #2
 800bdba:	e0d8      	b.n	800bf6e <HAL_I2C_IsDeviceReady+0x1fa>
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2224      	movs	r2, #36	@ 0x24
 800bdc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d105      	bne.n	800bde6 <HAL_I2C_IsDeviceReady+0x72>
 800bdda:	897b      	ldrh	r3, [r7, #10]
 800bddc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bde0:	4b65      	ldr	r3, [pc, #404]	@ (800bf78 <HAL_I2C_IsDeviceReady+0x204>)
 800bde2:	4313      	orrs	r3, r2
 800bde4:	e004      	b.n	800bdf0 <HAL_I2C_IsDeviceReady+0x7c>
 800bde6:	897b      	ldrh	r3, [r7, #10]
 800bde8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bdec:	4b63      	ldr	r3, [pc, #396]	@ (800bf7c <HAL_I2C_IsDeviceReady+0x208>)
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	6812      	ldr	r2, [r2, #0]
 800bdf4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800bdf6:	f7f9 fbff 	bl	80055f8 <HAL_GetTick>
 800bdfa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	f003 0320 	and.w	r3, r3, #32
 800be06:	2b20      	cmp	r3, #32
 800be08:	bf0c      	ite	eq
 800be0a:	2301      	moveq	r3, #1
 800be0c:	2300      	movne	r3, #0
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	699b      	ldr	r3, [r3, #24]
 800be18:	f003 0310 	and.w	r3, r3, #16
 800be1c:	2b10      	cmp	r3, #16
 800be1e:	bf0c      	ite	eq
 800be20:	2301      	moveq	r3, #1
 800be22:	2300      	movne	r3, #0
 800be24:	b2db      	uxtb	r3, r3
 800be26:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800be28:	e034      	b.n	800be94 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be30:	d01a      	beq.n	800be68 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800be32:	f7f9 fbe1 	bl	80055f8 <HAL_GetTick>
 800be36:	4602      	mov	r2, r0
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	683a      	ldr	r2, [r7, #0]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d302      	bcc.n	800be48 <HAL_I2C_IsDeviceReady+0xd4>
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10f      	bne.n	800be68 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2220      	movs	r2, #32
 800be4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be54:	f043 0220 	orr.w	r2, r3, #32
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800be64:	2301      	movs	r3, #1
 800be66:	e082      	b.n	800bf6e <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	699b      	ldr	r3, [r3, #24]
 800be6e:	f003 0320 	and.w	r3, r3, #32
 800be72:	2b20      	cmp	r3, #32
 800be74:	bf0c      	ite	eq
 800be76:	2301      	moveq	r3, #1
 800be78:	2300      	movne	r3, #0
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	f003 0310 	and.w	r3, r3, #16
 800be88:	2b10      	cmp	r3, #16
 800be8a:	bf0c      	ite	eq
 800be8c:	2301      	moveq	r3, #1
 800be8e:	2300      	movne	r3, #0
 800be90:	b2db      	uxtb	r3, r3
 800be92:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800be94:	7fbb      	ldrb	r3, [r7, #30]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d102      	bne.n	800bea0 <HAL_I2C_IsDeviceReady+0x12c>
 800be9a:	7f7b      	ldrb	r3, [r7, #29]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d0c4      	beq.n	800be2a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	699b      	ldr	r3, [r3, #24]
 800bea6:	f003 0310 	and.w	r3, r3, #16
 800beaa:	2b10      	cmp	r3, #16
 800beac:	d027      	beq.n	800befe <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2200      	movs	r2, #0
 800beb6:	2120      	movs	r1, #32
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f000 f8d9 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00e      	beq.n	800bee2 <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bec8:	2b04      	cmp	r3, #4
 800beca:	d107      	bne.n	800bedc <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2220      	movs	r2, #32
 800bed2:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2200      	movs	r2, #0
 800bed8:	645a      	str	r2, [r3, #68]	@ 0x44
 800beda:	e026      	b.n	800bf2a <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 800bedc:	2301      	movs	r3, #1
 800bede:	77fb      	strb	r3, [r7, #31]
 800bee0:	e023      	b.n	800bf2a <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2220      	movs	r2, #32
 800bee8:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2220      	movs	r2, #32
 800beee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 800befa:	2300      	movs	r3, #0
 800befc:	e037      	b.n	800bf6e <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2210      	movs	r2, #16
 800bf04:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2120      	movs	r1, #32
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f000 f8ad 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	77fb      	strb	r3, [r7, #31]
 800bf20:	e003      	b.n	800bf2a <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2220      	movs	r2, #32
 800bf28:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d904      	bls.n	800bf42 <HAL_I2C_IsDeviceReady+0x1ce>
 800bf38:	7ffb      	ldrb	r3, [r7, #31]
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d101      	bne.n	800bf42 <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	f63f af43 	bhi.w	800bdd2 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2220      	movs	r2, #32
 800bf50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf58:	f043 0220 	orr.w	r2, r3, #32
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e000      	b.n	800bf6e <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 800bf6c:	2302      	movs	r3, #2
  }
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3720      	adds	r7, #32
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	02002000 	.word	0x02002000
 800bf7c:	02002800 	.word	0x02002800

0800bf80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af02      	add	r7, sp, #8
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	4608      	mov	r0, r1
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	4603      	mov	r3, r0
 800bf90:	817b      	strh	r3, [r7, #10]
 800bf92:	460b      	mov	r3, r1
 800bf94:	813b      	strh	r3, [r7, #8]
 800bf96:	4613      	mov	r3, r2
 800bf98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bf9a:	88fb      	ldrh	r3, [r7, #6]
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	8979      	ldrh	r1, [r7, #10]
 800bfa0:	4b20      	ldr	r3, [pc, #128]	@ (800c024 <I2C_RequestMemoryWrite+0xa4>)
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f000 fab1 	bl	800c510 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfae:	69fa      	ldr	r2, [r7, #28]
 800bfb0:	69b9      	ldr	r1, [r7, #24]
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f000 f8b5 	bl	800c122 <I2C_WaitOnTXISFlagUntilTimeout>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d001      	beq.n	800bfc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e02c      	b.n	800c01c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bfc2:	88fb      	ldrh	r3, [r7, #6]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d105      	bne.n	800bfd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bfc8:	893b      	ldrh	r3, [r7, #8]
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	629a      	str	r2, [r3, #40]	@ 0x28
 800bfd2:	e015      	b.n	800c000 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bfd4:	893b      	ldrh	r3, [r7, #8]
 800bfd6:	0a1b      	lsrs	r3, r3, #8
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfe2:	69fa      	ldr	r2, [r7, #28]
 800bfe4:	69b9      	ldr	r1, [r7, #24]
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f000 f89b 	bl	800c122 <I2C_WaitOnTXISFlagUntilTimeout>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	e012      	b.n	800c01c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bff6:	893b      	ldrh	r3, [r7, #8]
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	2200      	movs	r2, #0
 800c008:	2180      	movs	r1, #128	@ 0x80
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f000 f830 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d001      	beq.n	800c01a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	e000      	b.n	800c01c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3710      	adds	r7, #16
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	80002000 	.word	0x80002000

0800c028 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	f003 0302 	and.w	r3, r3, #2
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d103      	bne.n	800c046 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2200      	movs	r2, #0
 800c044:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	2b01      	cmp	r3, #1
 800c052:	d007      	beq.n	800c064 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	699a      	ldr	r2, [r3, #24]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f042 0201 	orr.w	r2, r2, #1
 800c062:	619a      	str	r2, [r3, #24]
  }
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	603b      	str	r3, [r7, #0]
 800c07c:	4613      	mov	r3, r2
 800c07e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c080:	e03b      	b.n	800c0fa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c082:	69ba      	ldr	r2, [r7, #24]
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f000 f962 	bl	800c350 <I2C_IsErrorOccurred>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d001      	beq.n	800c096 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800c092:	2301      	movs	r3, #1
 800c094:	e041      	b.n	800c11a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09c:	d02d      	beq.n	800c0fa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c09e:	f7f9 faab 	bl	80055f8 <HAL_GetTick>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	1ad3      	subs	r3, r2, r3
 800c0a8:	683a      	ldr	r2, [r7, #0]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d302      	bcc.n	800c0b4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d122      	bne.n	800c0fa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	699a      	ldr	r2, [r3, #24]
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	4013      	ands	r3, r2
 800c0be:	68ba      	ldr	r2, [r7, #8]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	bf0c      	ite	eq
 800c0c4:	2301      	moveq	r3, #1
 800c0c6:	2300      	movne	r3, #0
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	79fb      	ldrb	r3, [r7, #7]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d113      	bne.n	800c0fa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0d6:	f043 0220 	orr.w	r2, r3, #32
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2220      	movs	r2, #32
 800c0e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e00f      	b.n	800c11a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	699a      	ldr	r2, [r3, #24]
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	4013      	ands	r3, r2
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	429a      	cmp	r2, r3
 800c108:	bf0c      	ite	eq
 800c10a:	2301      	moveq	r3, #1
 800c10c:	2300      	movne	r3, #0
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	461a      	mov	r2, r3
 800c112:	79fb      	ldrb	r3, [r7, #7]
 800c114:	429a      	cmp	r2, r3
 800c116:	d0b4      	beq.n	800c082 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b084      	sub	sp, #16
 800c126:	af00      	add	r7, sp, #0
 800c128:	60f8      	str	r0, [r7, #12]
 800c12a:	60b9      	str	r1, [r7, #8]
 800c12c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c12e:	e033      	b.n	800c198 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	68b9      	ldr	r1, [r7, #8]
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f000 f90b 	bl	800c350 <I2C_IsErrorOccurred>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d001      	beq.n	800c144 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	e031      	b.n	800c1a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14a:	d025      	beq.n	800c198 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c14c:	f7f9 fa54 	bl	80055f8 <HAL_GetTick>
 800c150:	4602      	mov	r2, r0
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	68ba      	ldr	r2, [r7, #8]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d302      	bcc.n	800c162 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d11a      	bne.n	800c198 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	699b      	ldr	r3, [r3, #24]
 800c168:	f003 0302 	and.w	r3, r3, #2
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d013      	beq.n	800c198 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c174:	f043 0220 	orr.w	r2, r3, #32
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2220      	movs	r2, #32
 800c180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2200      	movs	r2, #0
 800c188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800c194:	2301      	movs	r3, #1
 800c196:	e007      	b.n	800c1a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	699b      	ldr	r3, [r3, #24]
 800c19e:	f003 0302 	and.w	r3, r3, #2
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d1c4      	bne.n	800c130 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c1bc:	e02f      	b.n	800c21e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	68b9      	ldr	r1, [r7, #8]
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f000 f8c4 	bl	800c350 <I2C_IsErrorOccurred>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d001      	beq.n	800c1d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e02d      	b.n	800c22e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1d2:	f7f9 fa11 	bl	80055f8 <HAL_GetTick>
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	1ad3      	subs	r3, r2, r3
 800c1dc:	68ba      	ldr	r2, [r7, #8]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d302      	bcc.n	800c1e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d11a      	bne.n	800c21e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	699b      	ldr	r3, [r3, #24]
 800c1ee:	f003 0320 	and.w	r3, r3, #32
 800c1f2:	2b20      	cmp	r3, #32
 800c1f4:	d013      	beq.n	800c21e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1fa:	f043 0220 	orr.w	r2, r3, #32
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2220      	movs	r2, #32
 800c206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2200      	movs	r2, #0
 800c216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	e007      	b.n	800c22e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	699b      	ldr	r3, [r3, #24]
 800c224:	f003 0320 	and.w	r3, r3, #32
 800c228:	2b20      	cmp	r3, #32
 800c22a:	d1c8      	bne.n	800c1be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
	...

0800c238 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800c248:	e071      	b.n	800c32e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	68b9      	ldr	r1, [r7, #8]
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f000 f87e 	bl	800c350 <I2C_IsErrorOccurred>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d001      	beq.n	800c25e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800c25a:	2301      	movs	r3, #1
 800c25c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	699b      	ldr	r3, [r3, #24]
 800c264:	f003 0320 	and.w	r3, r3, #32
 800c268:	2b20      	cmp	r3, #32
 800c26a:	d13b      	bne.n	800c2e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800c26c:	7dfb      	ldrb	r3, [r7, #23]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d138      	bne.n	800c2e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	699b      	ldr	r3, [r3, #24]
 800c278:	f003 0304 	and.w	r3, r3, #4
 800c27c:	2b04      	cmp	r3, #4
 800c27e:	d105      	bne.n	800c28c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c284:	2b00      	cmp	r3, #0
 800c286:	d001      	beq.n	800c28c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	699b      	ldr	r3, [r3, #24]
 800c292:	f003 0310 	and.w	r3, r3, #16
 800c296:	2b10      	cmp	r3, #16
 800c298:	d121      	bne.n	800c2de <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2210      	movs	r2, #16
 800c2a0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2204      	movs	r2, #4
 800c2a6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2220      	movs	r2, #32
 800c2ae:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	6859      	ldr	r1, [r3, #4]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	4b24      	ldr	r3, [pc, #144]	@ (800c34c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800c2bc:	400b      	ands	r3, r1
 800c2be:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2220      	movs	r2, #32
 800c2c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	75fb      	strb	r3, [r7, #23]
 800c2dc:	e002      	b.n	800c2e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800c2e4:	f7f9 f988 	bl	80055f8 <HAL_GetTick>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d302      	bcc.n	800c2fa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d119      	bne.n	800c32e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800c2fa:	7dfb      	ldrb	r3, [r7, #23]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d116      	bne.n	800c32e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	699b      	ldr	r3, [r3, #24]
 800c306:	f003 0304 	and.w	r3, r3, #4
 800c30a:	2b04      	cmp	r3, #4
 800c30c:	d00f      	beq.n	800c32e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c312:	f043 0220 	orr.w	r2, r3, #32
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2220      	movs	r2, #32
 800c31e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2200      	movs	r2, #0
 800c326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800c32a:	2301      	movs	r3, #1
 800c32c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	699b      	ldr	r3, [r3, #24]
 800c334:	f003 0304 	and.w	r3, r3, #4
 800c338:	2b04      	cmp	r3, #4
 800c33a:	d002      	beq.n	800c342 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800c33c:	7dfb      	ldrb	r3, [r7, #23]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d083      	beq.n	800c24a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800c342:	7dfb      	ldrb	r3, [r7, #23]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3718      	adds	r7, #24
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	fe00e800 	.word	0xfe00e800

0800c350 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b08a      	sub	sp, #40	@ 0x28
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c35c:	2300      	movs	r3, #0
 800c35e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	699b      	ldr	r3, [r3, #24]
 800c368:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	f003 0310 	and.w	r3, r3, #16
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d068      	beq.n	800c44e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2210      	movs	r2, #16
 800c382:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c384:	e049      	b.n	800c41a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c38c:	d045      	beq.n	800c41a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c38e:	f7f9 f933 	bl	80055f8 <HAL_GetTick>
 800c392:	4602      	mov	r2, r0
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	1ad3      	subs	r3, r2, r3
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d302      	bcc.n	800c3a4 <I2C_IsErrorOccurred+0x54>
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d13a      	bne.n	800c41a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c3ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c3c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c3c6:	d121      	bne.n	800c40c <I2C_IsErrorOccurred+0xbc>
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c3ce:	d01d      	beq.n	800c40c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c3d0:	7cfb      	ldrb	r3, [r7, #19]
 800c3d2:	2b20      	cmp	r3, #32
 800c3d4:	d01a      	beq.n	800c40c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c3e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c3e6:	f7f9 f907 	bl	80055f8 <HAL_GetTick>
 800c3ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c3ec:	e00e      	b.n	800c40c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c3ee:	f7f9 f903 	bl	80055f8 <HAL_GetTick>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	1ad3      	subs	r3, r2, r3
 800c3f8:	2b19      	cmp	r3, #25
 800c3fa:	d907      	bls.n	800c40c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c3fc:	6a3b      	ldr	r3, [r7, #32]
 800c3fe:	f043 0320 	orr.w	r3, r3, #32
 800c402:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800c40a:	e006      	b.n	800c41a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	f003 0320 	and.w	r3, r3, #32
 800c416:	2b20      	cmp	r3, #32
 800c418:	d1e9      	bne.n	800c3ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	699b      	ldr	r3, [r3, #24]
 800c420:	f003 0320 	and.w	r3, r3, #32
 800c424:	2b20      	cmp	r3, #32
 800c426:	d003      	beq.n	800c430 <I2C_IsErrorOccurred+0xe0>
 800c428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d0aa      	beq.n	800c386 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c434:	2b00      	cmp	r3, #0
 800c436:	d103      	bne.n	800c440 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2220      	movs	r2, #32
 800c43e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c440:	6a3b      	ldr	r3, [r7, #32]
 800c442:	f043 0304 	orr.w	r3, r3, #4
 800c446:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c448:	2301      	movs	r3, #1
 800c44a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00b      	beq.n	800c478 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c460:	6a3b      	ldr	r3, [r7, #32]
 800c462:	f043 0301 	orr.w	r3, r3, #1
 800c466:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c470:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00b      	beq.n	800c49a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	f043 0308 	orr.w	r3, r3, #8
 800c488:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c492:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00b      	beq.n	800c4bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	f043 0302 	orr.w	r3, r3, #2
 800c4aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800c4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d01c      	beq.n	800c4fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f7ff fdaf 	bl	800c028 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	6859      	ldr	r1, [r3, #4]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	4b0d      	ldr	r3, [pc, #52]	@ (800c50c <I2C_IsErrorOccurred+0x1bc>)
 800c4d6:	400b      	ands	r3, r1
 800c4d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4de:	6a3b      	ldr	r3, [r7, #32]
 800c4e0:	431a      	orrs	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2220      	movs	r2, #32
 800c4ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800c4fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c502:	4618      	mov	r0, r3
 800c504:	3728      	adds	r7, #40	@ 0x28
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	fe00e800 	.word	0xfe00e800

0800c510 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c510:	b480      	push	{r7}
 800c512:	b087      	sub	sp, #28
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	607b      	str	r3, [r7, #4]
 800c51a:	460b      	mov	r3, r1
 800c51c:	817b      	strh	r3, [r7, #10]
 800c51e:	4613      	mov	r3, r2
 800c520:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c522:	897b      	ldrh	r3, [r7, #10]
 800c524:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c528:	7a7b      	ldrb	r3, [r7, #9]
 800c52a:	041b      	lsls	r3, r3, #16
 800c52c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c530:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c536:	6a3b      	ldr	r3, [r7, #32]
 800c538:	4313      	orrs	r3, r2
 800c53a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c53e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	685a      	ldr	r2, [r3, #4]
 800c546:	6a3b      	ldr	r3, [r7, #32]
 800c548:	0d5b      	lsrs	r3, r3, #21
 800c54a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800c54e:	4b08      	ldr	r3, [pc, #32]	@ (800c570 <I2C_TransferConfig+0x60>)
 800c550:	430b      	orrs	r3, r1
 800c552:	43db      	mvns	r3, r3
 800c554:	ea02 0103 	and.w	r1, r2, r3
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	697a      	ldr	r2, [r7, #20]
 800c55e:	430a      	orrs	r2, r1
 800c560:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c562:	bf00      	nop
 800c564:	371c      	adds	r7, #28
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	03ff63ff 	.word	0x03ff63ff

0800c574 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b20      	cmp	r3, #32
 800c588:	d138      	bne.n	800c5fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c590:	2b01      	cmp	r3, #1
 800c592:	d101      	bne.n	800c598 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c594:	2302      	movs	r3, #2
 800c596:	e032      	b.n	800c5fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2224      	movs	r2, #36	@ 0x24
 800c5a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f022 0201 	bic.w	r2, r2, #1
 800c5b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c5c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6819      	ldr	r1, [r3, #0]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	683a      	ldr	r2, [r7, #0]
 800c5d4:	430a      	orrs	r2, r1
 800c5d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f042 0201 	orr.w	r2, r2, #1
 800c5e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2220      	movs	r2, #32
 800c5ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	e000      	b.n	800c5fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c5fc:	2302      	movs	r3, #2
  }
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c60a:	b480      	push	{r7}
 800c60c:	b085      	sub	sp, #20
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
 800c612:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	2b20      	cmp	r3, #32
 800c61e:	d139      	bne.n	800c694 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c626:	2b01      	cmp	r3, #1
 800c628:	d101      	bne.n	800c62e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c62a:	2302      	movs	r3, #2
 800c62c:	e033      	b.n	800c696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2224      	movs	r2, #36	@ 0x24
 800c63a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f022 0201 	bic.w	r2, r2, #1
 800c64c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c65c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	021b      	lsls	r3, r3, #8
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	4313      	orrs	r3, r2
 800c666:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f042 0201 	orr.w	r2, r2, #1
 800c67e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2220      	movs	r2, #32
 800c684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c690:	2300      	movs	r3, #0
 800c692:	e000      	b.n	800c696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c694:	2302      	movs	r3, #2
  }
}
 800c696:	4618      	mov	r0, r3
 800c698:	3714      	adds	r7, #20
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr

0800c6a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b086      	sub	sp, #24
 800c6a6:	af02      	add	r7, sp, #8
 800c6a8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d101      	bne.n	800c6b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e0fe      	b.n	800c8b2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d106      	bne.n	800c6ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f00d ff83 	bl	801a5d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2203      	movs	r2, #3
 800c6d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f00a fad3 	bl	8016c86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6818      	ldr	r0, [r3, #0]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	7c1a      	ldrb	r2, [r3, #16]
 800c6e8:	f88d 2000 	strb.w	r2, [sp]
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c6f0:	f00a f9a4 	bl	8016a3c <USB_CoreInit>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d005      	beq.n	800c706 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2202      	movs	r2, #2
 800c6fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e0d5      	b.n	800c8b2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2100      	movs	r1, #0
 800c70c:	4618      	mov	r0, r3
 800c70e:	f00a facb 	bl	8016ca8 <USB_SetCurrentMode>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d005      	beq.n	800c724 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2202      	movs	r2, #2
 800c71c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c720:	2301      	movs	r3, #1
 800c722:	e0c6      	b.n	800c8b2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c724:	2300      	movs	r3, #0
 800c726:	73fb      	strb	r3, [r7, #15]
 800c728:	e04a      	b.n	800c7c0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c72a:	7bfa      	ldrb	r2, [r7, #15]
 800c72c:	6879      	ldr	r1, [r7, #4]
 800c72e:	4613      	mov	r3, r2
 800c730:	00db      	lsls	r3, r3, #3
 800c732:	4413      	add	r3, r2
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	440b      	add	r3, r1
 800c738:	3315      	adds	r3, #21
 800c73a:	2201      	movs	r2, #1
 800c73c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c73e:	7bfa      	ldrb	r2, [r7, #15]
 800c740:	6879      	ldr	r1, [r7, #4]
 800c742:	4613      	mov	r3, r2
 800c744:	00db      	lsls	r3, r3, #3
 800c746:	4413      	add	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	440b      	add	r3, r1
 800c74c:	3314      	adds	r3, #20
 800c74e:	7bfa      	ldrb	r2, [r7, #15]
 800c750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c752:	7bfa      	ldrb	r2, [r7, #15]
 800c754:	7bfb      	ldrb	r3, [r7, #15]
 800c756:	b298      	uxth	r0, r3
 800c758:	6879      	ldr	r1, [r7, #4]
 800c75a:	4613      	mov	r3, r2
 800c75c:	00db      	lsls	r3, r3, #3
 800c75e:	4413      	add	r3, r2
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	440b      	add	r3, r1
 800c764:	332e      	adds	r3, #46	@ 0x2e
 800c766:	4602      	mov	r2, r0
 800c768:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c76a:	7bfa      	ldrb	r2, [r7, #15]
 800c76c:	6879      	ldr	r1, [r7, #4]
 800c76e:	4613      	mov	r3, r2
 800c770:	00db      	lsls	r3, r3, #3
 800c772:	4413      	add	r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	440b      	add	r3, r1
 800c778:	3318      	adds	r3, #24
 800c77a:	2200      	movs	r2, #0
 800c77c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c77e:	7bfa      	ldrb	r2, [r7, #15]
 800c780:	6879      	ldr	r1, [r7, #4]
 800c782:	4613      	mov	r3, r2
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	4413      	add	r3, r2
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	440b      	add	r3, r1
 800c78c:	331c      	adds	r3, #28
 800c78e:	2200      	movs	r2, #0
 800c790:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c792:	7bfa      	ldrb	r2, [r7, #15]
 800c794:	6879      	ldr	r1, [r7, #4]
 800c796:	4613      	mov	r3, r2
 800c798:	00db      	lsls	r3, r3, #3
 800c79a:	4413      	add	r3, r2
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	440b      	add	r3, r1
 800c7a0:	3320      	adds	r3, #32
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c7a6:	7bfa      	ldrb	r2, [r7, #15]
 800c7a8:	6879      	ldr	r1, [r7, #4]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	00db      	lsls	r3, r3, #3
 800c7ae:	4413      	add	r3, r2
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	440b      	add	r3, r1
 800c7b4:	3324      	adds	r3, #36	@ 0x24
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c7ba:	7bfb      	ldrb	r3, [r7, #15]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	73fb      	strb	r3, [r7, #15]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	791b      	ldrb	r3, [r3, #4]
 800c7c4:	7bfa      	ldrb	r2, [r7, #15]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d3af      	bcc.n	800c72a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	73fb      	strb	r3, [r7, #15]
 800c7ce:	e044      	b.n	800c85a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c7d0:	7bfa      	ldrb	r2, [r7, #15]
 800c7d2:	6879      	ldr	r1, [r7, #4]
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	00db      	lsls	r3, r3, #3
 800c7d8:	4413      	add	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	440b      	add	r3, r1
 800c7de:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c7e6:	7bfa      	ldrb	r2, [r7, #15]
 800c7e8:	6879      	ldr	r1, [r7, #4]
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	00db      	lsls	r3, r3, #3
 800c7ee:	4413      	add	r3, r2
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	440b      	add	r3, r1
 800c7f4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800c7f8:	7bfa      	ldrb	r2, [r7, #15]
 800c7fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c7fc:	7bfa      	ldrb	r2, [r7, #15]
 800c7fe:	6879      	ldr	r1, [r7, #4]
 800c800:	4613      	mov	r3, r2
 800c802:	00db      	lsls	r3, r3, #3
 800c804:	4413      	add	r3, r2
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	440b      	add	r3, r1
 800c80a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c80e:	2200      	movs	r2, #0
 800c810:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c812:	7bfa      	ldrb	r2, [r7, #15]
 800c814:	6879      	ldr	r1, [r7, #4]
 800c816:	4613      	mov	r3, r2
 800c818:	00db      	lsls	r3, r3, #3
 800c81a:	4413      	add	r3, r2
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	440b      	add	r3, r1
 800c820:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c824:	2200      	movs	r2, #0
 800c826:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c828:	7bfa      	ldrb	r2, [r7, #15]
 800c82a:	6879      	ldr	r1, [r7, #4]
 800c82c:	4613      	mov	r3, r2
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	4413      	add	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	440b      	add	r3, r1
 800c836:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c83a:	2200      	movs	r2, #0
 800c83c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c83e:	7bfa      	ldrb	r2, [r7, #15]
 800c840:	6879      	ldr	r1, [r7, #4]
 800c842:	4613      	mov	r3, r2
 800c844:	00db      	lsls	r3, r3, #3
 800c846:	4413      	add	r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	440b      	add	r3, r1
 800c84c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c850:	2200      	movs	r2, #0
 800c852:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c854:	7bfb      	ldrb	r3, [r7, #15]
 800c856:	3301      	adds	r3, #1
 800c858:	73fb      	strb	r3, [r7, #15]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	791b      	ldrb	r3, [r3, #4]
 800c85e:	7bfa      	ldrb	r2, [r7, #15]
 800c860:	429a      	cmp	r2, r3
 800c862:	d3b5      	bcc.n	800c7d0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6818      	ldr	r0, [r3, #0]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	7c1a      	ldrb	r2, [r3, #16]
 800c86c:	f88d 2000 	strb.w	r2, [sp]
 800c870:	3304      	adds	r3, #4
 800c872:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c874:	f00a fa64 	bl	8016d40 <USB_DevInit>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d005      	beq.n	800c88a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2202      	movs	r2, #2
 800c882:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	e013      	b.n	800c8b2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	7b1b      	ldrb	r3, [r3, #12]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d102      	bne.n	800c8a6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f001 f96f 	bl	800db84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f00b faa7 	bl	8017dfe <USB_DevDisconnect>

  return HAL_OK;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b084      	sub	sp, #16
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d101      	bne.n	800c8d6 <HAL_PCD_Start+0x1c>
 800c8d2:	2302      	movs	r3, #2
 800c8d4:	e022      	b.n	800c91c <HAL_PCD_Start+0x62>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d009      	beq.n	800c8fe <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d105      	bne.n	800c8fe <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8f6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4618      	mov	r0, r3
 800c904:	f00a f9ae 	bl	8016c64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f00b fa55 	bl	8017dbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c924:	b590      	push	{r4, r7, lr}
 800c926:	b08d      	sub	sp, #52	@ 0x34
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c932:	6a3b      	ldr	r3, [r7, #32]
 800c934:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f00b fb13 	bl	8017f66 <USB_GetMode>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	f040 84b9 	bne.w	800d2ba <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4618      	mov	r0, r3
 800c94e:	f00b fa77 	bl	8017e40 <USB_ReadInterrupts>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 84af 	beq.w	800d2b8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	0a1b      	lsrs	r3, r3, #8
 800c964:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4618      	mov	r0, r3
 800c974:	f00b fa64 	bl	8017e40 <USB_ReadInterrupts>
 800c978:	4603      	mov	r3, r0
 800c97a:	f003 0302 	and.w	r3, r3, #2
 800c97e:	2b02      	cmp	r3, #2
 800c980:	d107      	bne.n	800c992 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	695a      	ldr	r2, [r3, #20]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f002 0202 	and.w	r2, r2, #2
 800c990:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4618      	mov	r0, r3
 800c998:	f00b fa52 	bl	8017e40 <USB_ReadInterrupts>
 800c99c:	4603      	mov	r3, r0
 800c99e:	f003 0310 	and.w	r3, r3, #16
 800c9a2:	2b10      	cmp	r3, #16
 800c9a4:	d161      	bne.n	800ca6a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	699a      	ldr	r2, [r3, #24]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f022 0210 	bic.w	r2, r2, #16
 800c9b4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800c9b6:	6a3b      	ldr	r3, [r7, #32]
 800c9b8:	6a1b      	ldr	r3, [r3, #32]
 800c9ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	f003 020f 	and.w	r2, r3, #15
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	00db      	lsls	r3, r3, #3
 800c9c6:	4413      	add	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	3304      	adds	r3, #4
 800c9d4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c9dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c9e0:	d124      	bne.n	800ca2c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c9e2:	69ba      	ldr	r2, [r7, #24]
 800c9e4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800c9e8:	4013      	ands	r3, r2
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d035      	beq.n	800ca5a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	091b      	lsrs	r3, r3, #4
 800c9f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c9f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	461a      	mov	r2, r3
 800ca00:	6a38      	ldr	r0, [r7, #32]
 800ca02:	f00b f889 	bl	8017b18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	68da      	ldr	r2, [r3, #12]
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	091b      	lsrs	r3, r3, #4
 800ca0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca12:	441a      	add	r2, r3
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	695a      	ldr	r2, [r3, #20]
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	091b      	lsrs	r3, r3, #4
 800ca20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca24:	441a      	add	r2, r3
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	615a      	str	r2, [r3, #20]
 800ca2a:	e016      	b.n	800ca5a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800ca32:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ca36:	d110      	bne.n	800ca5a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ca3e:	2208      	movs	r2, #8
 800ca40:	4619      	mov	r1, r3
 800ca42:	6a38      	ldr	r0, [r7, #32]
 800ca44:	f00b f868 	bl	8017b18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	695a      	ldr	r2, [r3, #20]
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	091b      	lsrs	r3, r3, #4
 800ca50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca54:	441a      	add	r2, r3
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	699a      	ldr	r2, [r3, #24]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f042 0210 	orr.w	r2, r2, #16
 800ca68:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f00b f9e6 	bl	8017e40 <USB_ReadInterrupts>
 800ca74:	4603      	mov	r3, r0
 800ca76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ca7a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ca7e:	f040 80a7 	bne.w	800cbd0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800ca82:	2300      	movs	r3, #0
 800ca84:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f00b f9eb 	bl	8017e66 <USB_ReadDevAllOutEpInterrupt>
 800ca90:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800ca92:	e099      	b.n	800cbc8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800ca94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca96:	f003 0301 	and.w	r3, r3, #1
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f000 808e 	beq.w	800cbbc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800caa6:	b2d2      	uxtb	r2, r2
 800caa8:	4611      	mov	r1, r2
 800caaa:	4618      	mov	r0, r3
 800caac:	f00b fa0f 	bl	8017ece <USB_ReadDevOutEPInterrupt>
 800cab0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	f003 0301 	and.w	r3, r3, #1
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00c      	beq.n	800cad6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	015a      	lsls	r2, r3, #5
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	4413      	add	r3, r2
 800cac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cac8:	461a      	mov	r2, r3
 800caca:	2301      	movs	r3, #1
 800cacc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800cace:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 fed1 	bl	800d878 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	f003 0308 	and.w	r3, r3, #8
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00c      	beq.n	800cafa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae2:	015a      	lsls	r2, r3, #5
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	4413      	add	r3, r2
 800cae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800caec:	461a      	mov	r2, r3
 800caee:	2308      	movs	r3, #8
 800caf0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800caf2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 ffa7 	bl	800da48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	f003 0310 	and.w	r3, r3, #16
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d008      	beq.n	800cb16 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800cb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb06:	015a      	lsls	r2, r3, #5
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb10:	461a      	mov	r2, r3
 800cb12:	2310      	movs	r3, #16
 800cb14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	f003 0302 	and.w	r3, r3, #2
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d030      	beq.n	800cb82 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800cb20:	6a3b      	ldr	r3, [r7, #32]
 800cb22:	695b      	ldr	r3, [r3, #20]
 800cb24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb28:	2b80      	cmp	r3, #128	@ 0x80
 800cb2a:	d109      	bne.n	800cb40 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	69fa      	ldr	r2, [r7, #28]
 800cb36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cb3e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800cb40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb42:	4613      	mov	r3, r2
 800cb44:	00db      	lsls	r3, r3, #3
 800cb46:	4413      	add	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	4413      	add	r3, r2
 800cb52:	3304      	adds	r3, #4
 800cb54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	78db      	ldrb	r3, [r3, #3]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d108      	bne.n	800cb70 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	2200      	movs	r2, #0
 800cb62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	4619      	mov	r1, r3
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f00d fe66 	bl	801a83c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800cb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb72:	015a      	lsls	r2, r3, #5
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	4413      	add	r3, r2
 800cb78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	2302      	movs	r3, #2
 800cb80:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	f003 0320 	and.w	r3, r3, #32
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d008      	beq.n	800cb9e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8e:	015a      	lsls	r2, r3, #5
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	4413      	add	r3, r2
 800cb94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb98:	461a      	mov	r2, r3
 800cb9a:	2320      	movs	r3, #32
 800cb9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d009      	beq.n	800cbbc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800cba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbaa:	015a      	lsls	r2, r3, #5
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	4413      	add	r3, r2
 800cbb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cbba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800cbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc4:	085b      	lsrs	r3, r3, #1
 800cbc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800cbc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f47f af62 	bne.w	800ca94 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f00b f933 	bl	8017e40 <USB_ReadInterrupts>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cbe0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cbe4:	f040 80db 	bne.w	800cd9e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f00b f954 	bl	8017e9a <USB_ReadDevAllInEpInterrupt>
 800cbf2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800cbf8:	e0cd      	b.n	800cd96 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800cbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbfc:	f003 0301 	and.w	r3, r3, #1
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f000 80c2 	beq.w	800cd8a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc0c:	b2d2      	uxtb	r2, r2
 800cc0e:	4611      	mov	r1, r2
 800cc10:	4618      	mov	r0, r3
 800cc12:	f00b f97a 	bl	8017f0a <USB_ReadDevInEPInterrupt>
 800cc16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	f003 0301 	and.w	r3, r3, #1
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d057      	beq.n	800ccd2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc24:	f003 030f 	and.w	r3, r3, #15
 800cc28:	2201      	movs	r2, #1
 800cc2a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc2e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	43db      	mvns	r3, r3
 800cc3c:	69f9      	ldr	r1, [r7, #28]
 800cc3e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cc42:	4013      	ands	r3, r2
 800cc44:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800cc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc48:	015a      	lsls	r2, r3, #5
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc52:	461a      	mov	r2, r3
 800cc54:	2301      	movs	r3, #1
 800cc56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	799b      	ldrb	r3, [r3, #6]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d132      	bne.n	800ccc6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800cc60:	6879      	ldr	r1, [r7, #4]
 800cc62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc64:	4613      	mov	r3, r2
 800cc66:	00db      	lsls	r3, r3, #3
 800cc68:	4413      	add	r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	440b      	add	r3, r1
 800cc6e:	3320      	adds	r3, #32
 800cc70:	6819      	ldr	r1, [r3, #0]
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc76:	4613      	mov	r3, r2
 800cc78:	00db      	lsls	r3, r3, #3
 800cc7a:	4413      	add	r3, r2
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	4403      	add	r3, r0
 800cc80:	331c      	adds	r3, #28
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4419      	add	r1, r3
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	00db      	lsls	r3, r3, #3
 800cc8e:	4413      	add	r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4403      	add	r3, r0
 800cc94:	3320      	adds	r3, #32
 800cc96:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800cc98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d113      	bne.n	800ccc6 <HAL_PCD_IRQHandler+0x3a2>
 800cc9e:	6879      	ldr	r1, [r7, #4]
 800cca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cca2:	4613      	mov	r3, r2
 800cca4:	00db      	lsls	r3, r3, #3
 800cca6:	4413      	add	r3, r2
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	440b      	add	r3, r1
 800ccac:	3324      	adds	r3, #36	@ 0x24
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d108      	bne.n	800ccc6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6818      	ldr	r0, [r3, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	2101      	movs	r1, #1
 800ccc2:	f00b f983 	bl	8017fcc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800ccc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	4619      	mov	r1, r3
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f00d fd30 	bl	801a732 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	f003 0308 	and.w	r3, r3, #8
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d008      	beq.n	800ccee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccde:	015a      	lsls	r2, r3, #5
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	4413      	add	r3, r2
 800cce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cce8:	461a      	mov	r2, r3
 800ccea:	2308      	movs	r3, #8
 800ccec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	f003 0310 	and.w	r3, r3, #16
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d008      	beq.n	800cd0a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfa:	015a      	lsls	r2, r3, #5
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	4413      	add	r3, r2
 800cd00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd04:	461a      	mov	r2, r3
 800cd06:	2310      	movs	r3, #16
 800cd08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d008      	beq.n	800cd26 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd16:	015a      	lsls	r2, r3, #5
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd20:	461a      	mov	r2, r3
 800cd22:	2340      	movs	r3, #64	@ 0x40
 800cd24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	f003 0302 	and.w	r3, r3, #2
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d023      	beq.n	800cd78 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800cd30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd32:	6a38      	ldr	r0, [r7, #32]
 800cd34:	f00a f962 	bl	8016ffc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800cd38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	00db      	lsls	r3, r3, #3
 800cd3e:	4413      	add	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	3310      	adds	r3, #16
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	4413      	add	r3, r2
 800cd48:	3304      	adds	r3, #4
 800cd4a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	78db      	ldrb	r3, [r3, #3]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d108      	bne.n	800cd66 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	2200      	movs	r2, #0
 800cd58:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	4619      	mov	r1, r3
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f00d fd7d 	bl	801a860 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800cd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd68:	015a      	lsls	r2, r3, #5
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd72:	461a      	mov	r2, r3
 800cd74:	2302      	movs	r3, #2
 800cd76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d003      	beq.n	800cd8a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800cd82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 fcea 	bl	800d75e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800cd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd92:	085b      	lsrs	r3, r3, #1
 800cd94:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800cd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f47f af2e 	bne.w	800cbfa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4618      	mov	r0, r3
 800cda4:	f00b f84c 	bl	8017e40 <USB_ReadInterrupts>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cdae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cdb2:	d122      	bne.n	800cdfa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	69fa      	ldr	r2, [r7, #28]
 800cdbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cdc2:	f023 0301 	bic.w	r3, r3, #1
 800cdc6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d108      	bne.n	800cde4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cdda:	2100      	movs	r1, #0
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 fef5 	bl	800dbcc <HAL_PCDEx_LPM_Callback>
 800cde2:	e002      	b.n	800cdea <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f00d fd1b 	bl	801a820 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	695a      	ldr	r2, [r3, #20]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800cdf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f00b f81e 	bl	8017e40 <USB_ReadInterrupts>
 800ce04:	4603      	mov	r3, r0
 800ce06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce0e:	d112      	bne.n	800ce36 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	f003 0301 	and.w	r3, r3, #1
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d102      	bne.n	800ce26 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f00d fcd7 	bl	801a7d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	695a      	ldr	r2, [r3, #20]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800ce34:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f00b f800 	bl	8017e40 <USB_ReadInterrupts>
 800ce40:	4603      	mov	r3, r0
 800ce42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce4a:	d121      	bne.n	800ce90 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	695a      	ldr	r2, [r3, #20]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800ce5a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d111      	bne.n	800ce8a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2201      	movs	r2, #1
 800ce6a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce74:	089b      	lsrs	r3, r3, #2
 800ce76:	f003 020f 	and.w	r2, r3, #15
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ce80:	2101      	movs	r1, #1
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 fea2 	bl	800dbcc <HAL_PCDEx_LPM_Callback>
 800ce88:	e002      	b.n	800ce90 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f00d fca2 	bl	801a7d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4618      	mov	r0, r3
 800ce96:	f00a ffd3 	bl	8017e40 <USB_ReadInterrupts>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cea4:	f040 80b7 	bne.w	800d016 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	69fa      	ldr	r2, [r7, #28]
 800ceb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ceb6:	f023 0301 	bic.w	r3, r3, #1
 800ceba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2110      	movs	r1, #16
 800cec2:	4618      	mov	r0, r3
 800cec4:	f00a f89a 	bl	8016ffc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cec8:	2300      	movs	r3, #0
 800ceca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cecc:	e046      	b.n	800cf5c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced0:	015a      	lsls	r2, r3, #5
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	4413      	add	r3, r2
 800ced6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ceda:	461a      	mov	r2, r3
 800cedc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cee0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cee4:	015a      	lsls	r2, r3, #5
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	4413      	add	r3, r2
 800ceea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cef2:	0151      	lsls	r1, r2, #5
 800cef4:	69fa      	ldr	r2, [r7, #28]
 800cef6:	440a      	add	r2, r1
 800cef8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cefc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cf00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cf02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf04:	015a      	lsls	r2, r3, #5
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	4413      	add	r3, r2
 800cf0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf0e:	461a      	mov	r2, r3
 800cf10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cf14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cf16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf18:	015a      	lsls	r2, r3, #5
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf26:	0151      	lsls	r1, r2, #5
 800cf28:	69fa      	ldr	r2, [r7, #28]
 800cf2a:	440a      	add	r2, r1
 800cf2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cf30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cf34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cf36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf38:	015a      	lsls	r2, r3, #5
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf46:	0151      	lsls	r1, r2, #5
 800cf48:	69fa      	ldr	r2, [r7, #28]
 800cf4a:	440a      	add	r2, r1
 800cf4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cf50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cf54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cf56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf58:	3301      	adds	r3, #1
 800cf5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	791b      	ldrb	r3, [r3, #4]
 800cf60:	461a      	mov	r2, r3
 800cf62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d3b2      	bcc.n	800cece <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf6e:	69db      	ldr	r3, [r3, #28]
 800cf70:	69fa      	ldr	r2, [r7, #28]
 800cf72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cf76:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800cf7a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	7bdb      	ldrb	r3, [r3, #15]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d016      	beq.n	800cfb2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf8e:	69fa      	ldr	r2, [r7, #28]
 800cf90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cf94:	f043 030b 	orr.w	r3, r3, #11
 800cf98:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfa4:	69fa      	ldr	r2, [r7, #28]
 800cfa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cfaa:	f043 030b 	orr.w	r3, r3, #11
 800cfae:	6453      	str	r3, [r2, #68]	@ 0x44
 800cfb0:	e015      	b.n	800cfde <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfb8:	695a      	ldr	r2, [r3, #20]
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	f242 032b 	movw	r3, #8235	@ 0x202b
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	69fa      	ldr	r2, [r7, #28]
 800cfd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cfd8:	f043 030b 	orr.w	r3, r3, #11
 800cfdc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	69fa      	ldr	r2, [r7, #28]
 800cfe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cfec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800cff0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6818      	ldr	r0, [r3, #0]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d000:	461a      	mov	r2, r3
 800d002:	f00a ffe3 	bl	8017fcc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	695a      	ldr	r2, [r3, #20]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800d014:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f00a ff10 	bl	8017e40 <USB_ReadInterrupts>
 800d020:	4603      	mov	r3, r0
 800d022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d02a:	d123      	bne.n	800d074 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4618      	mov	r0, r3
 800d032:	f00a ffa7 	bl	8017f84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f00a f857 	bl	80170ee <USB_GetDevSpeed>
 800d040:	4603      	mov	r3, r0
 800d042:	461a      	mov	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681c      	ldr	r4, [r3, #0]
 800d04c:	f001 fec2 	bl	800edd4 <HAL_RCC_GetHCLKFreq>
 800d050:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d056:	461a      	mov	r2, r3
 800d058:	4620      	mov	r0, r4
 800d05a:	f009 fd61 	bl	8016b20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f00d fb8f 	bl	801a782 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	695a      	ldr	r2, [r3, #20]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800d072:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4618      	mov	r0, r3
 800d07a:	f00a fee1 	bl	8017e40 <USB_ReadInterrupts>
 800d07e:	4603      	mov	r3, r0
 800d080:	f003 0308 	and.w	r3, r3, #8
 800d084:	2b08      	cmp	r3, #8
 800d086:	d10a      	bne.n	800d09e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f00d fb6c 	bl	801a766 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	695a      	ldr	r2, [r3, #20]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f002 0208 	and.w	r2, r2, #8
 800d09c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f00a fecc 	bl	8017e40 <USB_ReadInterrupts>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0ae:	2b80      	cmp	r3, #128	@ 0x80
 800d0b0:	d123      	bne.n	800d0fa <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800d0b2:	6a3b      	ldr	r3, [r7, #32]
 800d0b4:	699b      	ldr	r3, [r3, #24]
 800d0b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d0ba:	6a3b      	ldr	r3, [r7, #32]
 800d0bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d0be:	2301      	movs	r3, #1
 800d0c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0c2:	e014      	b.n	800d0ee <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800d0c4:	6879      	ldr	r1, [r7, #4]
 800d0c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	00db      	lsls	r3, r3, #3
 800d0cc:	4413      	add	r3, r2
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	440b      	add	r3, r1
 800d0d2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d105      	bne.n	800d0e8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800d0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 fb0a 	bl	800d6fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	791b      	ldrb	r3, [r3, #4]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d3e4      	bcc.n	800d0c4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f00a fe9e 	bl	8017e40 <USB_ReadInterrupts>
 800d104:	4603      	mov	r3, r0
 800d106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d10a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d10e:	d13c      	bne.n	800d18a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d110:	2301      	movs	r3, #1
 800d112:	627b      	str	r3, [r7, #36]	@ 0x24
 800d114:	e02b      	b.n	800d16e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800d116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d118:	015a      	lsls	r2, r3, #5
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	4413      	add	r3, r2
 800d11e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800d126:	6879      	ldr	r1, [r7, #4]
 800d128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d12a:	4613      	mov	r3, r2
 800d12c:	00db      	lsls	r3, r3, #3
 800d12e:	4413      	add	r3, r2
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	440b      	add	r3, r1
 800d134:	3318      	adds	r3, #24
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d115      	bne.n	800d168 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800d13c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800d13e:	2b00      	cmp	r3, #0
 800d140:	da12      	bge.n	800d168 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800d142:	6879      	ldr	r1, [r7, #4]
 800d144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d146:	4613      	mov	r3, r2
 800d148:	00db      	lsls	r3, r3, #3
 800d14a:	4413      	add	r3, r2
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	440b      	add	r3, r1
 800d150:	3317      	adds	r3, #23
 800d152:	2201      	movs	r2, #1
 800d154:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800d156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	4619      	mov	r1, r3
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 faca 	bl	800d6fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d16a:	3301      	adds	r3, #1
 800d16c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	791b      	ldrb	r3, [r3, #4]
 800d172:	461a      	mov	r2, r3
 800d174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d176:	4293      	cmp	r3, r2
 800d178:	d3cd      	bcc.n	800d116 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	695a      	ldr	r2, [r3, #20]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800d188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4618      	mov	r0, r3
 800d190:	f00a fe56 	bl	8017e40 <USB_ReadInterrupts>
 800d194:	4603      	mov	r3, r0
 800d196:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d19a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d19e:	d156      	bne.n	800d24e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1a4:	e045      	b.n	800d232 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800d1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a8:	015a      	lsls	r2, r3, #5
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800d1b6:	6879      	ldr	r1, [r7, #4]
 800d1b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	00db      	lsls	r3, r3, #3
 800d1be:	4413      	add	r3, r2
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	440b      	add	r3, r1
 800d1c4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d12e      	bne.n	800d22c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800d1ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	da2b      	bge.n	800d22c <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	0c1a      	lsrs	r2, r3, #16
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800d1de:	4053      	eors	r3, r2
 800d1e0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d121      	bne.n	800d22c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800d1e8:	6879      	ldr	r1, [r7, #4]
 800d1ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	00db      	lsls	r3, r3, #3
 800d1f0:	4413      	add	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	440b      	add	r3, r1
 800d1f6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800d1fe:	6a3b      	ldr	r3, [r7, #32]
 800d200:	699b      	ldr	r3, [r3, #24]
 800d202:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d206:	6a3b      	ldr	r3, [r7, #32]
 800d208:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800d20a:	6a3b      	ldr	r3, [r7, #32]
 800d20c:	695b      	ldr	r3, [r3, #20]
 800d20e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d212:	2b00      	cmp	r3, #0
 800d214:	d10a      	bne.n	800d22c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	69fa      	ldr	r2, [r7, #28]
 800d220:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d224:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d228:	6053      	str	r3, [r2, #4]
            break;
 800d22a:	e008      	b.n	800d23e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22e:	3301      	adds	r3, #1
 800d230:	627b      	str	r3, [r7, #36]	@ 0x24
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	791b      	ldrb	r3, [r3, #4]
 800d236:	461a      	mov	r2, r3
 800d238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d3b3      	bcc.n	800d1a6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	695a      	ldr	r2, [r3, #20]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800d24c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4618      	mov	r0, r3
 800d254:	f00a fdf4 	bl	8017e40 <USB_ReadInterrupts>
 800d258:	4603      	mov	r3, r0
 800d25a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d25e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d262:	d10a      	bne.n	800d27a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f00d fb0d 	bl	801a884 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	695a      	ldr	r2, [r3, #20]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800d278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4618      	mov	r0, r3
 800d280:	f00a fdde 	bl	8017e40 <USB_ReadInterrupts>
 800d284:	4603      	mov	r3, r0
 800d286:	f003 0304 	and.w	r3, r3, #4
 800d28a:	2b04      	cmp	r3, #4
 800d28c:	d115      	bne.n	800d2ba <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	f003 0304 	and.w	r3, r3, #4
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d002      	beq.n	800d2a6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f00d fafd 	bl	801a8a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	6859      	ldr	r1, [r3, #4]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	69ba      	ldr	r2, [r7, #24]
 800d2b2:	430a      	orrs	r2, r1
 800d2b4:	605a      	str	r2, [r3, #4]
 800d2b6:	e000      	b.n	800d2ba <HAL_PCD_IRQHandler+0x996>
      return;
 800d2b8:	bf00      	nop
    }
  }
}
 800d2ba:	3734      	adds	r7, #52	@ 0x34
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd90      	pop	{r4, r7, pc}

0800d2c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d101      	bne.n	800d2da <HAL_PCD_SetAddress+0x1a>
 800d2d6:	2302      	movs	r3, #2
 800d2d8:	e012      	b.n	800d300 <HAL_PCD_SetAddress+0x40>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	78fa      	ldrb	r2, [r7, #3]
 800d2e6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	78fa      	ldrb	r2, [r7, #3]
 800d2ee:	4611      	mov	r1, r2
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f00a fd3d 	bl	8017d70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	4608      	mov	r0, r1
 800d312:	4611      	mov	r1, r2
 800d314:	461a      	mov	r2, r3
 800d316:	4603      	mov	r3, r0
 800d318:	70fb      	strb	r3, [r7, #3]
 800d31a:	460b      	mov	r3, r1
 800d31c:	803b      	strh	r3, [r7, #0]
 800d31e:	4613      	mov	r3, r2
 800d320:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800d322:	2300      	movs	r3, #0
 800d324:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	da0f      	bge.n	800d34e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d32e:	78fb      	ldrb	r3, [r7, #3]
 800d330:	f003 020f 	and.w	r2, r3, #15
 800d334:	4613      	mov	r3, r2
 800d336:	00db      	lsls	r3, r3, #3
 800d338:	4413      	add	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	3310      	adds	r3, #16
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	4413      	add	r3, r2
 800d342:	3304      	adds	r3, #4
 800d344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2201      	movs	r2, #1
 800d34a:	705a      	strb	r2, [r3, #1]
 800d34c:	e00f      	b.n	800d36e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d34e:	78fb      	ldrb	r3, [r7, #3]
 800d350:	f003 020f 	and.w	r2, r3, #15
 800d354:	4613      	mov	r3, r2
 800d356:	00db      	lsls	r3, r3, #3
 800d358:	4413      	add	r3, r2
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	4413      	add	r3, r2
 800d364:	3304      	adds	r3, #4
 800d366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2200      	movs	r2, #0
 800d36c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d36e:	78fb      	ldrb	r3, [r7, #3]
 800d370:	f003 030f 	and.w	r3, r3, #15
 800d374:	b2da      	uxtb	r2, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800d37a:	883b      	ldrh	r3, [r7, #0]
 800d37c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	78ba      	ldrb	r2, [r7, #2]
 800d388:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	785b      	ldrb	r3, [r3, #1]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d004      	beq.n	800d39c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	461a      	mov	r2, r3
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d39c:	78bb      	ldrb	r3, [r7, #2]
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	d102      	bne.n	800d3a8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d101      	bne.n	800d3b6 <HAL_PCD_EP_Open+0xae>
 800d3b2:	2302      	movs	r3, #2
 800d3b4:	e00e      	b.n	800d3d4 <HAL_PCD_EP_Open+0xcc>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	68f9      	ldr	r1, [r7, #12]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f009 feb7 	bl	8017138 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800d3d2:	7afb      	ldrb	r3, [r7, #11]
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3710      	adds	r7, #16
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d3e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	da0f      	bge.n	800d410 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d3f0:	78fb      	ldrb	r3, [r7, #3]
 800d3f2:	f003 020f 	and.w	r2, r3, #15
 800d3f6:	4613      	mov	r3, r2
 800d3f8:	00db      	lsls	r3, r3, #3
 800d3fa:	4413      	add	r3, r2
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	3310      	adds	r3, #16
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	4413      	add	r3, r2
 800d404:	3304      	adds	r3, #4
 800d406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2201      	movs	r2, #1
 800d40c:	705a      	strb	r2, [r3, #1]
 800d40e:	e00f      	b.n	800d430 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d410:	78fb      	ldrb	r3, [r7, #3]
 800d412:	f003 020f 	and.w	r2, r3, #15
 800d416:	4613      	mov	r3, r2
 800d418:	00db      	lsls	r3, r3, #3
 800d41a:	4413      	add	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	4413      	add	r3, r2
 800d426:	3304      	adds	r3, #4
 800d428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800d430:	78fb      	ldrb	r3, [r7, #3]
 800d432:	f003 030f 	and.w	r3, r3, #15
 800d436:	b2da      	uxtb	r2, r3
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d442:	2b01      	cmp	r3, #1
 800d444:	d101      	bne.n	800d44a <HAL_PCD_EP_Close+0x6e>
 800d446:	2302      	movs	r3, #2
 800d448:	e00e      	b.n	800d468 <HAL_PCD_EP_Close+0x8c>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2201      	movs	r2, #1
 800d44e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	68f9      	ldr	r1, [r7, #12]
 800d458:	4618      	mov	r0, r3
 800d45a:	f009 fef5 	bl	8017248 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	607a      	str	r2, [r7, #4]
 800d47a:	603b      	str	r3, [r7, #0]
 800d47c:	460b      	mov	r3, r1
 800d47e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d480:	7afb      	ldrb	r3, [r7, #11]
 800d482:	f003 020f 	and.w	r2, r3, #15
 800d486:	4613      	mov	r3, r2
 800d488:	00db      	lsls	r3, r3, #3
 800d48a:	4413      	add	r3, r2
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d492:	68fa      	ldr	r2, [r7, #12]
 800d494:	4413      	add	r3, r2
 800d496:	3304      	adds	r3, #4
 800d498:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	683a      	ldr	r2, [r7, #0]
 800d4a4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d4b2:	7afb      	ldrb	r3, [r7, #11]
 800d4b4:	f003 030f 	and.w	r3, r3, #15
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	799b      	ldrb	r3, [r3, #6]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d102      	bne.n	800d4cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6818      	ldr	r0, [r3, #0]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	799b      	ldrb	r3, [r3, #6]
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	6979      	ldr	r1, [r7, #20]
 800d4d8:	f009 ff92 	bl	8017400 <USB_EPStartXfer>

  return HAL_OK;
 800d4dc:	2300      	movs	r3, #0
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3718      	adds	r7, #24
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}

0800d4e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800d4e6:	b480      	push	{r7}
 800d4e8:	b083      	sub	sp, #12
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d4f2:	78fb      	ldrb	r3, [r7, #3]
 800d4f4:	f003 020f 	and.w	r2, r3, #15
 800d4f8:	6879      	ldr	r1, [r7, #4]
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	00db      	lsls	r3, r3, #3
 800d4fe:	4413      	add	r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	440b      	add	r3, r1
 800d504:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800d508:	681b      	ldr	r3, [r3, #0]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	370c      	adds	r7, #12
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr

0800d516 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b086      	sub	sp, #24
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	60f8      	str	r0, [r7, #12]
 800d51e:	607a      	str	r2, [r7, #4]
 800d520:	603b      	str	r3, [r7, #0]
 800d522:	460b      	mov	r3, r1
 800d524:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d526:	7afb      	ldrb	r3, [r7, #11]
 800d528:	f003 020f 	and.w	r2, r3, #15
 800d52c:	4613      	mov	r3, r2
 800d52e:	00db      	lsls	r3, r3, #3
 800d530:	4413      	add	r3, r2
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	3310      	adds	r3, #16
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	4413      	add	r3, r2
 800d53a:	3304      	adds	r3, #4
 800d53c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	683a      	ldr	r2, [r7, #0]
 800d548:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	2200      	movs	r2, #0
 800d54e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	2201      	movs	r2, #1
 800d554:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d556:	7afb      	ldrb	r3, [r7, #11]
 800d558:	f003 030f 	and.w	r3, r3, #15
 800d55c:	b2da      	uxtb	r2, r3
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	799b      	ldrb	r3, [r3, #6]
 800d566:	2b01      	cmp	r3, #1
 800d568:	d102      	bne.n	800d570 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	6818      	ldr	r0, [r3, #0]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	799b      	ldrb	r3, [r3, #6]
 800d578:	461a      	mov	r2, r3
 800d57a:	6979      	ldr	r1, [r7, #20]
 800d57c:	f009 ff40 	bl	8017400 <USB_EPStartXfer>

  return HAL_OK;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3718      	adds	r7, #24
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b084      	sub	sp, #16
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
 800d592:	460b      	mov	r3, r1
 800d594:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d596:	78fb      	ldrb	r3, [r7, #3]
 800d598:	f003 030f 	and.w	r3, r3, #15
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	7912      	ldrb	r2, [r2, #4]
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d901      	bls.n	800d5a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	e04f      	b.n	800d648 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d5a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	da0f      	bge.n	800d5d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d5b0:	78fb      	ldrb	r3, [r7, #3]
 800d5b2:	f003 020f 	and.w	r2, r3, #15
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	00db      	lsls	r3, r3, #3
 800d5ba:	4413      	add	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	3310      	adds	r3, #16
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	705a      	strb	r2, [r3, #1]
 800d5ce:	e00d      	b.n	800d5ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d5d0:	78fa      	ldrb	r2, [r7, #3]
 800d5d2:	4613      	mov	r3, r2
 800d5d4:	00db      	lsls	r3, r3, #3
 800d5d6:	4413      	add	r3, r2
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d5f2:	78fb      	ldrb	r3, [r7, #3]
 800d5f4:	f003 030f 	and.w	r3, r3, #15
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d604:	2b01      	cmp	r3, #1
 800d606:	d101      	bne.n	800d60c <HAL_PCD_EP_SetStall+0x82>
 800d608:	2302      	movs	r3, #2
 800d60a:	e01d      	b.n	800d648 <HAL_PCD_EP_SetStall+0xbe>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68f9      	ldr	r1, [r7, #12]
 800d61a:	4618      	mov	r0, r3
 800d61c:	f00a fad4 	bl	8017bc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d620:	78fb      	ldrb	r3, [r7, #3]
 800d622:	f003 030f 	and.w	r3, r3, #15
 800d626:	2b00      	cmp	r3, #0
 800d628:	d109      	bne.n	800d63e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6818      	ldr	r0, [r3, #0]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	7999      	ldrb	r1, [r3, #6]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d638:	461a      	mov	r2, r3
 800d63a:	f00a fcc7 	bl	8017fcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	460b      	mov	r3, r1
 800d65a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d65c:	78fb      	ldrb	r3, [r7, #3]
 800d65e:	f003 030f 	and.w	r3, r3, #15
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	7912      	ldrb	r2, [r2, #4]
 800d666:	4293      	cmp	r3, r2
 800d668:	d901      	bls.n	800d66e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d66a:	2301      	movs	r3, #1
 800d66c:	e042      	b.n	800d6f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d66e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d672:	2b00      	cmp	r3, #0
 800d674:	da0f      	bge.n	800d696 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d676:	78fb      	ldrb	r3, [r7, #3]
 800d678:	f003 020f 	and.w	r2, r3, #15
 800d67c:	4613      	mov	r3, r2
 800d67e:	00db      	lsls	r3, r3, #3
 800d680:	4413      	add	r3, r2
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	3310      	adds	r3, #16
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	4413      	add	r3, r2
 800d68a:	3304      	adds	r3, #4
 800d68c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2201      	movs	r2, #1
 800d692:	705a      	strb	r2, [r3, #1]
 800d694:	e00f      	b.n	800d6b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d696:	78fb      	ldrb	r3, [r7, #3]
 800d698:	f003 020f 	and.w	r2, r3, #15
 800d69c:	4613      	mov	r3, r2
 800d69e:	00db      	lsls	r3, r3, #3
 800d6a0:	4413      	add	r3, r2
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	3304      	adds	r3, #4
 800d6ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d6bc:	78fb      	ldrb	r3, [r7, #3]
 800d6be:	f003 030f 	and.w	r3, r3, #15
 800d6c2:	b2da      	uxtb	r2, r3
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d101      	bne.n	800d6d6 <HAL_PCD_EP_ClrStall+0x86>
 800d6d2:	2302      	movs	r3, #2
 800d6d4:	e00e      	b.n	800d6f4 <HAL_PCD_EP_ClrStall+0xa4>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2201      	movs	r2, #1
 800d6da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	68f9      	ldr	r1, [r7, #12]
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f00a fadd 	bl	8017ca4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d6f2:	2300      	movs	r3, #0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b084      	sub	sp, #16
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	460b      	mov	r3, r1
 800d706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800d708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	da0c      	bge.n	800d72a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d710:	78fb      	ldrb	r3, [r7, #3]
 800d712:	f003 020f 	and.w	r2, r3, #15
 800d716:	4613      	mov	r3, r2
 800d718:	00db      	lsls	r3, r3, #3
 800d71a:	4413      	add	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	3310      	adds	r3, #16
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	4413      	add	r3, r2
 800d724:	3304      	adds	r3, #4
 800d726:	60fb      	str	r3, [r7, #12]
 800d728:	e00c      	b.n	800d744 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d72a:	78fb      	ldrb	r3, [r7, #3]
 800d72c:	f003 020f 	and.w	r2, r3, #15
 800d730:	4613      	mov	r3, r2
 800d732:	00db      	lsls	r3, r3, #3
 800d734:	4413      	add	r3, r2
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	4413      	add	r3, r2
 800d740:	3304      	adds	r3, #4
 800d742:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	68f9      	ldr	r1, [r7, #12]
 800d74a:	4618      	mov	r0, r3
 800d74c:	f00a f8fc 	bl	8017948 <USB_EPStopXfer>
 800d750:	4603      	mov	r3, r0
 800d752:	72fb      	strb	r3, [r7, #11]

  return ret;
 800d754:	7afb      	ldrb	r3, [r7, #11]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b08a      	sub	sp, #40	@ 0x28
 800d762:	af02      	add	r7, sp, #8
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	4613      	mov	r3, r2
 800d776:	00db      	lsls	r3, r3, #3
 800d778:	4413      	add	r3, r2
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	3310      	adds	r3, #16
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	4413      	add	r3, r2
 800d782:	3304      	adds	r3, #4
 800d784:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	695a      	ldr	r2, [r3, #20]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	691b      	ldr	r3, [r3, #16]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d901      	bls.n	800d796 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d792:	2301      	movs	r3, #1
 800d794:	e06b      	b.n	800d86e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	691a      	ldr	r2, [r3, #16]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	695b      	ldr	r3, [r3, #20]
 800d79e:	1ad3      	subs	r3, r2, r3
 800d7a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	69fa      	ldr	r2, [r7, #28]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d902      	bls.n	800d7b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	3303      	adds	r3, #3
 800d7b6:	089b      	lsrs	r3, r3, #2
 800d7b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d7ba:	e02a      	b.n	800d812 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	691a      	ldr	r2, [r3, #16]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	695b      	ldr	r3, [r3, #20]
 800d7c4:	1ad3      	subs	r3, r2, r3
 800d7c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	689b      	ldr	r3, [r3, #8]
 800d7cc:	69fa      	ldr	r2, [r7, #28]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d902      	bls.n	800d7d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	689b      	ldr	r3, [r3, #8]
 800d7d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	3303      	adds	r3, #3
 800d7dc:	089b      	lsrs	r3, r3, #2
 800d7de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	68d9      	ldr	r1, [r3, #12]
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	b2da      	uxtb	r2, r3
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	6978      	ldr	r0, [r7, #20]
 800d7f6:	f00a f951 	bl	8017a9c <USB_WritePacket>

    ep->xfer_buff  += len;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	68da      	ldr	r2, [r3, #12]
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	441a      	add	r2, r3
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	695a      	ldr	r2, [r3, #20]
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	441a      	add	r2, r3
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	015a      	lsls	r2, r3, #5
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	4413      	add	r3, r2
 800d81a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d81e:	699b      	ldr	r3, [r3, #24]
 800d820:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d822:	69ba      	ldr	r2, [r7, #24]
 800d824:	429a      	cmp	r2, r3
 800d826:	d809      	bhi.n	800d83c <PCD_WriteEmptyTxFifo+0xde>
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	695a      	ldr	r2, [r3, #20]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d830:	429a      	cmp	r2, r3
 800d832:	d203      	bcs.n	800d83c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	691b      	ldr	r3, [r3, #16]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d1bf      	bne.n	800d7bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	691a      	ldr	r2, [r3, #16]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	695b      	ldr	r3, [r3, #20]
 800d844:	429a      	cmp	r2, r3
 800d846:	d811      	bhi.n	800d86c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	f003 030f 	and.w	r3, r3, #15
 800d84e:	2201      	movs	r2, #1
 800d850:	fa02 f303 	lsl.w	r3, r2, r3
 800d854:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d85c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	43db      	mvns	r3, r3
 800d862:	6939      	ldr	r1, [r7, #16]
 800d864:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d868:	4013      	ands	r3, r2
 800d86a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800d86c:	2300      	movs	r3, #0
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3720      	adds	r7, #32
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
	...

0800d878 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b088      	sub	sp, #32
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	333c      	adds	r3, #60	@ 0x3c
 800d890:	3304      	adds	r3, #4
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	015a      	lsls	r2, r3, #5
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	4413      	add	r3, r2
 800d89e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	799b      	ldrb	r3, [r3, #6]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d17b      	bne.n	800d9a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	f003 0308 	and.w	r3, r3, #8
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d015      	beq.n	800d8e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	4a61      	ldr	r2, [pc, #388]	@ (800da40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	f240 80b9 	bls.w	800da34 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	f000 80b3 	beq.w	800da34 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	015a      	lsls	r2, r3, #5
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8da:	461a      	mov	r2, r3
 800d8dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d8e0:	6093      	str	r3, [r2, #8]
 800d8e2:	e0a7      	b.n	800da34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	f003 0320 	and.w	r3, r3, #32
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d009      	beq.n	800d902 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	015a      	lsls	r2, r3, #5
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	2320      	movs	r3, #32
 800d8fe:	6093      	str	r3, [r2, #8]
 800d900:	e098      	b.n	800da34 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f040 8093 	bne.w	800da34 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	4a4b      	ldr	r2, [pc, #300]	@ (800da40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d90f      	bls.n	800d936 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00a      	beq.n	800d936 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	015a      	lsls	r2, r3, #5
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	4413      	add	r3, r2
 800d928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d92c:	461a      	mov	r2, r3
 800d92e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d932:	6093      	str	r3, [r2, #8]
 800d934:	e07e      	b.n	800da34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800d936:	683a      	ldr	r2, [r7, #0]
 800d938:	4613      	mov	r3, r2
 800d93a:	00db      	lsls	r3, r3, #3
 800d93c:	4413      	add	r3, r2
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	4413      	add	r3, r2
 800d948:	3304      	adds	r3, #4
 800d94a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6a1a      	ldr	r2, [r3, #32]
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	0159      	lsls	r1, r3, #5
 800d954:	69bb      	ldr	r3, [r7, #24]
 800d956:	440b      	add	r3, r1
 800d958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d95c:	691b      	ldr	r3, [r3, #16]
 800d95e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d962:	1ad2      	subs	r2, r2, r3
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d114      	bne.n	800d998 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d109      	bne.n	800d98a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6818      	ldr	r0, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d980:	461a      	mov	r2, r3
 800d982:	2101      	movs	r1, #1
 800d984:	f00a fb22 	bl	8017fcc <USB_EP0_OutStart>
 800d988:	e006      	b.n	800d998 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	68da      	ldr	r2, [r3, #12]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	695b      	ldr	r3, [r3, #20]
 800d992:	441a      	add	r2, r3
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	4619      	mov	r1, r3
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f00c feac 	bl	801a6fc <HAL_PCD_DataOutStageCallback>
 800d9a4:	e046      	b.n	800da34 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	4a26      	ldr	r2, [pc, #152]	@ (800da44 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d124      	bne.n	800d9f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d00a      	beq.n	800d9ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	015a      	lsls	r2, r3, #5
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	4413      	add	r3, r2
 800d9c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9ca:	6093      	str	r3, [r2, #8]
 800d9cc:	e032      	b.n	800da34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	f003 0320 	and.w	r3, r3, #32
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d008      	beq.n	800d9ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	015a      	lsls	r2, r3, #5
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	4413      	add	r3, r2
 800d9e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	2320      	movs	r3, #32
 800d9e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f00c fe83 	bl	801a6fc <HAL_PCD_DataOutStageCallback>
 800d9f6:	e01d      	b.n	800da34 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d114      	bne.n	800da28 <PCD_EP_OutXfrComplete_int+0x1b0>
 800d9fe:	6879      	ldr	r1, [r7, #4]
 800da00:	683a      	ldr	r2, [r7, #0]
 800da02:	4613      	mov	r3, r2
 800da04:	00db      	lsls	r3, r3, #3
 800da06:	4413      	add	r3, r2
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	440b      	add	r3, r1
 800da0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d108      	bne.n	800da28 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6818      	ldr	r0, [r3, #0]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800da20:	461a      	mov	r2, r3
 800da22:	2100      	movs	r1, #0
 800da24:	f00a fad2 	bl	8017fcc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	4619      	mov	r1, r3
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f00c fe64 	bl	801a6fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800da34:	2300      	movs	r3, #0
}
 800da36:	4618      	mov	r0, r3
 800da38:	3720      	adds	r7, #32
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	4f54300a 	.word	0x4f54300a
 800da44:	4f54310a 	.word	0x4f54310a

0800da48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	333c      	adds	r3, #60	@ 0x3c
 800da60:	3304      	adds	r3, #4
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	015a      	lsls	r2, r3, #5
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	4413      	add	r3, r2
 800da6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	4a15      	ldr	r2, [pc, #84]	@ (800dad0 <PCD_EP_OutSetupPacket_int+0x88>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d90e      	bls.n	800da9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800da84:	2b00      	cmp	r3, #0
 800da86:	d009      	beq.n	800da9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	015a      	lsls	r2, r3, #5
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	4413      	add	r3, r2
 800da90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da94:	461a      	mov	r2, r3
 800da96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f00c fe1b 	bl	801a6d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	4a0a      	ldr	r2, [pc, #40]	@ (800dad0 <PCD_EP_OutSetupPacket_int+0x88>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d90c      	bls.n	800dac4 <PCD_EP_OutSetupPacket_int+0x7c>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	799b      	ldrb	r3, [r3, #6]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d108      	bne.n	800dac4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6818      	ldr	r0, [r3, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dabc:	461a      	mov	r2, r3
 800dabe:	2101      	movs	r1, #1
 800dac0:	f00a fa84 	bl	8017fcc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3718      	adds	r7, #24
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	4f54300a 	.word	0x4f54300a

0800dad4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b085      	sub	sp, #20
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	460b      	mov	r3, r1
 800dade:	70fb      	strb	r3, [r7, #3]
 800dae0:	4613      	mov	r3, r2
 800dae2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800daec:	78fb      	ldrb	r3, [r7, #3]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d107      	bne.n	800db02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800daf2:	883b      	ldrh	r3, [r7, #0]
 800daf4:	0419      	lsls	r1, r3, #16
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	68ba      	ldr	r2, [r7, #8]
 800dafc:	430a      	orrs	r2, r1
 800dafe:	629a      	str	r2, [r3, #40]	@ 0x28
 800db00:	e028      	b.n	800db54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db08:	0c1b      	lsrs	r3, r3, #16
 800db0a:	68ba      	ldr	r2, [r7, #8]
 800db0c:	4413      	add	r3, r2
 800db0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800db10:	2300      	movs	r3, #0
 800db12:	73fb      	strb	r3, [r7, #15]
 800db14:	e00d      	b.n	800db32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	7bfb      	ldrb	r3, [r7, #15]
 800db1c:	3340      	adds	r3, #64	@ 0x40
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	4413      	add	r3, r2
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	0c1b      	lsrs	r3, r3, #16
 800db26:	68ba      	ldr	r2, [r7, #8]
 800db28:	4413      	add	r3, r2
 800db2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800db2c:	7bfb      	ldrb	r3, [r7, #15]
 800db2e:	3301      	adds	r3, #1
 800db30:	73fb      	strb	r3, [r7, #15]
 800db32:	7bfa      	ldrb	r2, [r7, #15]
 800db34:	78fb      	ldrb	r3, [r7, #3]
 800db36:	3b01      	subs	r3, #1
 800db38:	429a      	cmp	r2, r3
 800db3a:	d3ec      	bcc.n	800db16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800db3c:	883b      	ldrh	r3, [r7, #0]
 800db3e:	0418      	lsls	r0, r3, #16
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6819      	ldr	r1, [r3, #0]
 800db44:	78fb      	ldrb	r3, [r7, #3]
 800db46:	3b01      	subs	r3, #1
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	4302      	orrs	r2, r0
 800db4c:	3340      	adds	r3, #64	@ 0x40
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	440b      	add	r3, r1
 800db52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800db54:	2300      	movs	r3, #0
}
 800db56:	4618      	mov	r0, r3
 800db58:	3714      	adds	r7, #20
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr

0800db62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800db62:	b480      	push	{r7}
 800db64:	b083      	sub	sp, #12
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
 800db6a:	460b      	mov	r3, r1
 800db6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	887a      	ldrh	r2, [r7, #2]
 800db74:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800db76:	2300      	movs	r3, #0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	370c      	adds	r7, #12
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800db84:	b480      	push	{r7}
 800db86:	b085      	sub	sp, #20
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2201      	movs	r2, #1
 800db96:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	699b      	ldr	r3, [r3, #24]
 800dba6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dbb2:	4b05      	ldr	r3, [pc, #20]	@ (800dbc8 <HAL_PCDEx_ActivateLPM+0x44>)
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	68fa      	ldr	r2, [r7, #12]
 800dbb8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800dbba:	2300      	movs	r3, #0
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3714      	adds	r7, #20
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr
 800dbc8:	10000003 	.word	0x10000003

0800dbcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b083      	sub	sp, #12
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800dbd8:	bf00      	nop
 800dbda:	370c      	adds	r7, #12
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800dbec:	4b19      	ldr	r3, [pc, #100]	@ (800dc54 <HAL_PWREx_ConfigSupply+0x70>)
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	f003 0304 	and.w	r3, r3, #4
 800dbf4:	2b04      	cmp	r3, #4
 800dbf6:	d00a      	beq.n	800dc0e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800dbf8:	4b16      	ldr	r3, [pc, #88]	@ (800dc54 <HAL_PWREx_ConfigSupply+0x70>)
 800dbfa:	68db      	ldr	r3, [r3, #12]
 800dbfc:	f003 0307 	and.w	r3, r3, #7
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d001      	beq.n	800dc0a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800dc06:	2301      	movs	r3, #1
 800dc08:	e01f      	b.n	800dc4a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	e01d      	b.n	800dc4a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800dc0e:	4b11      	ldr	r3, [pc, #68]	@ (800dc54 <HAL_PWREx_ConfigSupply+0x70>)
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	f023 0207 	bic.w	r2, r3, #7
 800dc16:	490f      	ldr	r1, [pc, #60]	@ (800dc54 <HAL_PWREx_ConfigSupply+0x70>)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800dc1e:	f7f7 fceb 	bl	80055f8 <HAL_GetTick>
 800dc22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800dc24:	e009      	b.n	800dc3a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800dc26:	f7f7 fce7 	bl	80055f8 <HAL_GetTick>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dc34:	d901      	bls.n	800dc3a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	e007      	b.n	800dc4a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800dc3a:	4b06      	ldr	r3, [pc, #24]	@ (800dc54 <HAL_PWREx_ConfigSupply+0x70>)
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dc42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc46:	d1ee      	bne.n	800dc26 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800dc48:	2300      	movs	r3, #0
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	58024800 	.word	0x58024800

0800dc58 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800dc5c:	4b05      	ldr	r3, [pc, #20]	@ (800dc74 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	4a04      	ldr	r2, [pc, #16]	@ (800dc74 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800dc62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dc66:	60d3      	str	r3, [r2, #12]
}
 800dc68:	bf00      	nop
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	58024800 	.word	0x58024800

0800dc78 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b086      	sub	sp, #24
 800dc7c:	af02      	add	r7, sp, #8
 800dc7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800dc80:	f7f7 fcba 	bl	80055f8 <HAL_GetTick>
 800dc84:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d101      	bne.n	800dc90 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	e05f      	b.n	800dd50 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d107      	bne.n	800dcac <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f7f6 fba1 	bl	80043e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800dca2:	f241 3188 	movw	r1, #5000	@ 0x1388
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 f85a 	bl	800dd60 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	689b      	ldr	r3, [r3, #8]
 800dcba:	3b01      	subs	r3, #1
 800dcbc:	021a      	lsls	r2, r3, #8
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	430a      	orrs	r2, r1
 800dcc4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	2120      	movs	r1, #32
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f852 	bl	800dd7c <QSPI_WaitFlagStateUntilTimeout>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800dcdc:	7afb      	ldrb	r3, [r7, #11]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d135      	bne.n	800dd4e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	4b1b      	ldr	r3, [pc, #108]	@ (800dd58 <HAL_QSPI_Init+0xe0>)
 800dcea:	4013      	ands	r3, r2
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	6852      	ldr	r2, [r2, #4]
 800dcf0:	0611      	lsls	r1, r2, #24
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	68d2      	ldr	r2, [r2, #12]
 800dcf6:	4311      	orrs	r1, r2
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	69d2      	ldr	r2, [r2, #28]
 800dcfc:	4311      	orrs	r1, r2
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	6a12      	ldr	r2, [r2, #32]
 800dd02:	4311      	orrs	r1, r2
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	6812      	ldr	r2, [r2, #0]
 800dd08:	430b      	orrs	r3, r1
 800dd0a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	685a      	ldr	r2, [r3, #4]
 800dd12:	4b12      	ldr	r3, [pc, #72]	@ (800dd5c <HAL_QSPI_Init+0xe4>)
 800dd14:	4013      	ands	r3, r2
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	6912      	ldr	r2, [r2, #16]
 800dd1a:	0411      	lsls	r1, r2, #16
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	6952      	ldr	r2, [r2, #20]
 800dd20:	4311      	orrs	r1, r2
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	6992      	ldr	r2, [r2, #24]
 800dd26:	4311      	orrs	r1, r2
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	6812      	ldr	r2, [r2, #0]
 800dd2c:	430b      	orrs	r3, r1
 800dd2e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f042 0201 	orr.w	r2, r2, #1
 800dd3e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2201      	movs	r2, #1
 800dd4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800dd4e:	7afb      	ldrb	r3, [r7, #11]
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3710      	adds	r7, #16
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	00ffff2f 	.word	0x00ffff2f
 800dd5c:	ffe0f8fe 	.word	0xffe0f8fe

0800dd60 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	683a      	ldr	r2, [r7, #0]
 800dd6e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800dd70:	bf00      	nop
 800dd72:	370c      	adds	r7, #12
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	603b      	str	r3, [r7, #0]
 800dd88:	4613      	mov	r3, r2
 800dd8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800dd8c:	e01a      	b.n	800ddc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd94:	d016      	beq.n	800ddc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd96:	f7f7 fc2f 	bl	80055f8 <HAL_GetTick>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	1ad3      	subs	r3, r2, r3
 800dda0:	69ba      	ldr	r2, [r7, #24]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d302      	bcc.n	800ddac <QSPI_WaitFlagStateUntilTimeout+0x30>
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10b      	bne.n	800ddc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2204      	movs	r2, #4
 800ddb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddb8:	f043 0201 	orr.w	r2, r3, #1
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	e00e      	b.n	800dde2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	689a      	ldr	r2, [r3, #8]
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	4013      	ands	r3, r2
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	bf14      	ite	ne
 800ddd2:	2301      	movne	r3, #1
 800ddd4:	2300      	moveq	r3, #0
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	461a      	mov	r2, r3
 800ddda:	79fb      	ldrb	r3, [r7, #7]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d1d6      	bne.n	800dd8e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3710      	adds	r7, #16
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
	...

0800ddec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b08c      	sub	sp, #48	@ 0x30
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d102      	bne.n	800de00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	f000 bc48 	b.w	800e690 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f003 0301 	and.w	r3, r3, #1
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f000 8088 	beq.w	800df1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de0e:	4b99      	ldr	r3, [pc, #612]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800de16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800de18:	4b96      	ldr	r3, [pc, #600]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800de1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800de1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de20:	2b10      	cmp	r3, #16
 800de22:	d007      	beq.n	800de34 <HAL_RCC_OscConfig+0x48>
 800de24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de26:	2b18      	cmp	r3, #24
 800de28:	d111      	bne.n	800de4e <HAL_RCC_OscConfig+0x62>
 800de2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de2c:	f003 0303 	and.w	r3, r3, #3
 800de30:	2b02      	cmp	r3, #2
 800de32:	d10c      	bne.n	800de4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800de34:	4b8f      	ldr	r3, [pc, #572]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d06d      	beq.n	800df1c <HAL_RCC_OscConfig+0x130>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d169      	bne.n	800df1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800de48:	2301      	movs	r3, #1
 800de4a:	f000 bc21 	b.w	800e690 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de56:	d106      	bne.n	800de66 <HAL_RCC_OscConfig+0x7a>
 800de58:	4b86      	ldr	r3, [pc, #536]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4a85      	ldr	r2, [pc, #532]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800de5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800de62:	6013      	str	r3, [r2, #0]
 800de64:	e02e      	b.n	800dec4 <HAL_RCC_OscConfig+0xd8>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d10c      	bne.n	800de88 <HAL_RCC_OscConfig+0x9c>
 800de6e:	4b81      	ldr	r3, [pc, #516]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4a80      	ldr	r2, [pc, #512]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800de74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800de78:	6013      	str	r3, [r2, #0]
 800de7a:	4b7e      	ldr	r3, [pc, #504]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4a7d      	ldr	r2, [pc, #500]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800de80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800de84:	6013      	str	r3, [r2, #0]
 800de86:	e01d      	b.n	800dec4 <HAL_RCC_OscConfig+0xd8>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800de90:	d10c      	bne.n	800deac <HAL_RCC_OscConfig+0xc0>
 800de92:	4b78      	ldr	r3, [pc, #480]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4a77      	ldr	r2, [pc, #476]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800de98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800de9c:	6013      	str	r3, [r2, #0]
 800de9e:	4b75      	ldr	r3, [pc, #468]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4a74      	ldr	r2, [pc, #464]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800dea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dea8:	6013      	str	r3, [r2, #0]
 800deaa:	e00b      	b.n	800dec4 <HAL_RCC_OscConfig+0xd8>
 800deac:	4b71      	ldr	r3, [pc, #452]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4a70      	ldr	r2, [pc, #448]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800deb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800deb6:	6013      	str	r3, [r2, #0]
 800deb8:	4b6e      	ldr	r3, [pc, #440]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	4a6d      	ldr	r2, [pc, #436]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800debe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d013      	beq.n	800def4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800decc:	f7f7 fb94 	bl	80055f8 <HAL_GetTick>
 800ded0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ded2:	e008      	b.n	800dee6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ded4:	f7f7 fb90 	bl	80055f8 <HAL_GetTick>
 800ded8:	4602      	mov	r2, r0
 800deda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dedc:	1ad3      	subs	r3, r2, r3
 800dede:	2b64      	cmp	r3, #100	@ 0x64
 800dee0:	d901      	bls.n	800dee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dee2:	2303      	movs	r3, #3
 800dee4:	e3d4      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dee6:	4b63      	ldr	r3, [pc, #396]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800deee:	2b00      	cmp	r3, #0
 800def0:	d0f0      	beq.n	800ded4 <HAL_RCC_OscConfig+0xe8>
 800def2:	e014      	b.n	800df1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800def4:	f7f7 fb80 	bl	80055f8 <HAL_GetTick>
 800def8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800defa:	e008      	b.n	800df0e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800defc:	f7f7 fb7c 	bl	80055f8 <HAL_GetTick>
 800df00:	4602      	mov	r2, r0
 800df02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df04:	1ad3      	subs	r3, r2, r3
 800df06:	2b64      	cmp	r3, #100	@ 0x64
 800df08:	d901      	bls.n	800df0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800df0a:	2303      	movs	r3, #3
 800df0c:	e3c0      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800df0e:	4b59      	ldr	r3, [pc, #356]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df16:	2b00      	cmp	r3, #0
 800df18:	d1f0      	bne.n	800defc <HAL_RCC_OscConfig+0x110>
 800df1a:	e000      	b.n	800df1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800df1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f003 0302 	and.w	r3, r3, #2
 800df26:	2b00      	cmp	r3, #0
 800df28:	f000 80ca 	beq.w	800e0c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800df2c:	4b51      	ldr	r3, [pc, #324]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800df34:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800df36:	4b4f      	ldr	r3, [pc, #316]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800df38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df3a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800df3c:	6a3b      	ldr	r3, [r7, #32]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d007      	beq.n	800df52 <HAL_RCC_OscConfig+0x166>
 800df42:	6a3b      	ldr	r3, [r7, #32]
 800df44:	2b18      	cmp	r3, #24
 800df46:	d156      	bne.n	800dff6 <HAL_RCC_OscConfig+0x20a>
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	f003 0303 	and.w	r3, r3, #3
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d151      	bne.n	800dff6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800df52:	4b48      	ldr	r3, [pc, #288]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f003 0304 	and.w	r3, r3, #4
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d005      	beq.n	800df6a <HAL_RCC_OscConfig+0x17e>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d101      	bne.n	800df6a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800df66:	2301      	movs	r3, #1
 800df68:	e392      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800df6a:	4b42      	ldr	r3, [pc, #264]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f023 0219 	bic.w	r2, r3, #25
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	493f      	ldr	r1, [pc, #252]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800df78:	4313      	orrs	r3, r2
 800df7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df7c:	f7f7 fb3c 	bl	80055f8 <HAL_GetTick>
 800df80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800df82:	e008      	b.n	800df96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800df84:	f7f7 fb38 	bl	80055f8 <HAL_GetTick>
 800df88:	4602      	mov	r2, r0
 800df8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	2b02      	cmp	r3, #2
 800df90:	d901      	bls.n	800df96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800df92:	2303      	movs	r3, #3
 800df94:	e37c      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800df96:	4b37      	ldr	r3, [pc, #220]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f003 0304 	and.w	r3, r3, #4
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d0f0      	beq.n	800df84 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dfa2:	f7f7 fb59 	bl	8005658 <HAL_GetREVID>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d817      	bhi.n	800dfe0 <HAL_RCC_OscConfig+0x1f4>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	691b      	ldr	r3, [r3, #16]
 800dfb4:	2b40      	cmp	r3, #64	@ 0x40
 800dfb6:	d108      	bne.n	800dfca <HAL_RCC_OscConfig+0x1de>
 800dfb8:	4b2e      	ldr	r3, [pc, #184]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800dfc0:	4a2c      	ldr	r2, [pc, #176]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800dfc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dfc6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dfc8:	e07a      	b.n	800e0c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dfca:	4b2a      	ldr	r3, [pc, #168]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	031b      	lsls	r3, r3, #12
 800dfd8:	4926      	ldr	r1, [pc, #152]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dfde:	e06f      	b.n	800e0c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dfe0:	4b24      	ldr	r3, [pc, #144]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	061b      	lsls	r3, r3, #24
 800dfee:	4921      	ldr	r1, [pc, #132]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800dff0:	4313      	orrs	r3, r2
 800dff2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dff4:	e064      	b.n	800e0c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d047      	beq.n	800e08e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dffe:	4b1d      	ldr	r3, [pc, #116]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f023 0219 	bic.w	r2, r3, #25
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	491a      	ldr	r1, [pc, #104]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800e00c:	4313      	orrs	r3, r2
 800e00e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e010:	f7f7 faf2 	bl	80055f8 <HAL_GetTick>
 800e014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e016:	e008      	b.n	800e02a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e018:	f7f7 faee 	bl	80055f8 <HAL_GetTick>
 800e01c:	4602      	mov	r2, r0
 800e01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e020:	1ad3      	subs	r3, r2, r3
 800e022:	2b02      	cmp	r3, #2
 800e024:	d901      	bls.n	800e02a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e026:	2303      	movs	r3, #3
 800e028:	e332      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e02a:	4b12      	ldr	r3, [pc, #72]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f003 0304 	and.w	r3, r3, #4
 800e032:	2b00      	cmp	r3, #0
 800e034:	d0f0      	beq.n	800e018 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e036:	f7f7 fb0f 	bl	8005658 <HAL_GetREVID>
 800e03a:	4603      	mov	r3, r0
 800e03c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800e040:	4293      	cmp	r3, r2
 800e042:	d819      	bhi.n	800e078 <HAL_RCC_OscConfig+0x28c>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	691b      	ldr	r3, [r3, #16]
 800e048:	2b40      	cmp	r3, #64	@ 0x40
 800e04a:	d108      	bne.n	800e05e <HAL_RCC_OscConfig+0x272>
 800e04c:	4b09      	ldr	r3, [pc, #36]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800e054:	4a07      	ldr	r2, [pc, #28]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800e056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e05a:	6053      	str	r3, [r2, #4]
 800e05c:	e030      	b.n	800e0c0 <HAL_RCC_OscConfig+0x2d4>
 800e05e:	4b05      	ldr	r3, [pc, #20]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	691b      	ldr	r3, [r3, #16]
 800e06a:	031b      	lsls	r3, r3, #12
 800e06c:	4901      	ldr	r1, [pc, #4]	@ (800e074 <HAL_RCC_OscConfig+0x288>)
 800e06e:	4313      	orrs	r3, r2
 800e070:	604b      	str	r3, [r1, #4]
 800e072:	e025      	b.n	800e0c0 <HAL_RCC_OscConfig+0x2d4>
 800e074:	58024400 	.word	0x58024400
 800e078:	4b9a      	ldr	r3, [pc, #616]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	691b      	ldr	r3, [r3, #16]
 800e084:	061b      	lsls	r3, r3, #24
 800e086:	4997      	ldr	r1, [pc, #604]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e088:	4313      	orrs	r3, r2
 800e08a:	604b      	str	r3, [r1, #4]
 800e08c:	e018      	b.n	800e0c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e08e:	4b95      	ldr	r3, [pc, #596]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4a94      	ldr	r2, [pc, #592]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e094:	f023 0301 	bic.w	r3, r3, #1
 800e098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e09a:	f7f7 faad 	bl	80055f8 <HAL_GetTick>
 800e09e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e0a0:	e008      	b.n	800e0b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e0a2:	f7f7 faa9 	bl	80055f8 <HAL_GetTick>
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0aa:	1ad3      	subs	r3, r2, r3
 800e0ac:	2b02      	cmp	r3, #2
 800e0ae:	d901      	bls.n	800e0b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800e0b0:	2303      	movs	r3, #3
 800e0b2:	e2ed      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e0b4:	4b8b      	ldr	r3, [pc, #556]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f003 0304 	and.w	r3, r3, #4
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d1f0      	bne.n	800e0a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f003 0310 	and.w	r3, r3, #16
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	f000 80a9 	beq.w	800e220 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e0ce:	4b85      	ldr	r3, [pc, #532]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e0d0:	691b      	ldr	r3, [r3, #16]
 800e0d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e0d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e0d8:	4b82      	ldr	r3, [pc, #520]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e0de:	69bb      	ldr	r3, [r7, #24]
 800e0e0:	2b08      	cmp	r3, #8
 800e0e2:	d007      	beq.n	800e0f4 <HAL_RCC_OscConfig+0x308>
 800e0e4:	69bb      	ldr	r3, [r7, #24]
 800e0e6:	2b18      	cmp	r3, #24
 800e0e8:	d13a      	bne.n	800e160 <HAL_RCC_OscConfig+0x374>
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	f003 0303 	and.w	r3, r3, #3
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d135      	bne.n	800e160 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e0f4:	4b7b      	ldr	r3, [pc, #492]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d005      	beq.n	800e10c <HAL_RCC_OscConfig+0x320>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	69db      	ldr	r3, [r3, #28]
 800e104:	2b80      	cmp	r3, #128	@ 0x80
 800e106:	d001      	beq.n	800e10c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800e108:	2301      	movs	r3, #1
 800e10a:	e2c1      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e10c:	f7f7 faa4 	bl	8005658 <HAL_GetREVID>
 800e110:	4603      	mov	r3, r0
 800e112:	f241 0203 	movw	r2, #4099	@ 0x1003
 800e116:	4293      	cmp	r3, r2
 800e118:	d817      	bhi.n	800e14a <HAL_RCC_OscConfig+0x35e>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a1b      	ldr	r3, [r3, #32]
 800e11e:	2b20      	cmp	r3, #32
 800e120:	d108      	bne.n	800e134 <HAL_RCC_OscConfig+0x348>
 800e122:	4b70      	ldr	r3, [pc, #448]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800e12a:	4a6e      	ldr	r2, [pc, #440]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e12c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e130:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e132:	e075      	b.n	800e220 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e134:	4b6b      	ldr	r3, [pc, #428]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6a1b      	ldr	r3, [r3, #32]
 800e140:	069b      	lsls	r3, r3, #26
 800e142:	4968      	ldr	r1, [pc, #416]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e144:	4313      	orrs	r3, r2
 800e146:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e148:	e06a      	b.n	800e220 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e14a:	4b66      	ldr	r3, [pc, #408]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6a1b      	ldr	r3, [r3, #32]
 800e156:	061b      	lsls	r3, r3, #24
 800e158:	4962      	ldr	r1, [pc, #392]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e15a:	4313      	orrs	r3, r2
 800e15c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e15e:	e05f      	b.n	800e220 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	69db      	ldr	r3, [r3, #28]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d042      	beq.n	800e1ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e168:	4b5e      	ldr	r3, [pc, #376]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a5d      	ldr	r2, [pc, #372]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e16e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e174:	f7f7 fa40 	bl	80055f8 <HAL_GetTick>
 800e178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e17a:	e008      	b.n	800e18e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e17c:	f7f7 fa3c 	bl	80055f8 <HAL_GetTick>
 800e180:	4602      	mov	r2, r0
 800e182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e184:	1ad3      	subs	r3, r2, r3
 800e186:	2b02      	cmp	r3, #2
 800e188:	d901      	bls.n	800e18e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800e18a:	2303      	movs	r3, #3
 800e18c:	e280      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e18e:	4b55      	ldr	r3, [pc, #340]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e196:	2b00      	cmp	r3, #0
 800e198:	d0f0      	beq.n	800e17c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e19a:	f7f7 fa5d 	bl	8005658 <HAL_GetREVID>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d817      	bhi.n	800e1d8 <HAL_RCC_OscConfig+0x3ec>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6a1b      	ldr	r3, [r3, #32]
 800e1ac:	2b20      	cmp	r3, #32
 800e1ae:	d108      	bne.n	800e1c2 <HAL_RCC_OscConfig+0x3d6>
 800e1b0:	4b4c      	ldr	r3, [pc, #304]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800e1b8:	4a4a      	ldr	r2, [pc, #296]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e1ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e1be:	6053      	str	r3, [r2, #4]
 800e1c0:	e02e      	b.n	800e220 <HAL_RCC_OscConfig+0x434>
 800e1c2:	4b48      	ldr	r3, [pc, #288]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6a1b      	ldr	r3, [r3, #32]
 800e1ce:	069b      	lsls	r3, r3, #26
 800e1d0:	4944      	ldr	r1, [pc, #272]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	604b      	str	r3, [r1, #4]
 800e1d6:	e023      	b.n	800e220 <HAL_RCC_OscConfig+0x434>
 800e1d8:	4b42      	ldr	r3, [pc, #264]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a1b      	ldr	r3, [r3, #32]
 800e1e4:	061b      	lsls	r3, r3, #24
 800e1e6:	493f      	ldr	r1, [pc, #252]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	60cb      	str	r3, [r1, #12]
 800e1ec:	e018      	b.n	800e220 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e1ee:	4b3d      	ldr	r3, [pc, #244]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	4a3c      	ldr	r2, [pc, #240]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e1f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1fa:	f7f7 f9fd 	bl	80055f8 <HAL_GetTick>
 800e1fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e200:	e008      	b.n	800e214 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e202:	f7f7 f9f9 	bl	80055f8 <HAL_GetTick>
 800e206:	4602      	mov	r2, r0
 800e208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	2b02      	cmp	r3, #2
 800e20e:	d901      	bls.n	800e214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e210:	2303      	movs	r3, #3
 800e212:	e23d      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e214:	4b33      	ldr	r3, [pc, #204]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d1f0      	bne.n	800e202 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f003 0308 	and.w	r3, r3, #8
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d036      	beq.n	800e29a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	695b      	ldr	r3, [r3, #20]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d019      	beq.n	800e268 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e234:	4b2b      	ldr	r3, [pc, #172]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e238:	4a2a      	ldr	r2, [pc, #168]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e23a:	f043 0301 	orr.w	r3, r3, #1
 800e23e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e240:	f7f7 f9da 	bl	80055f8 <HAL_GetTick>
 800e244:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e246:	e008      	b.n	800e25a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e248:	f7f7 f9d6 	bl	80055f8 <HAL_GetTick>
 800e24c:	4602      	mov	r2, r0
 800e24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	2b02      	cmp	r3, #2
 800e254:	d901      	bls.n	800e25a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800e256:	2303      	movs	r3, #3
 800e258:	e21a      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e25a:	4b22      	ldr	r3, [pc, #136]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e25c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e25e:	f003 0302 	and.w	r3, r3, #2
 800e262:	2b00      	cmp	r3, #0
 800e264:	d0f0      	beq.n	800e248 <HAL_RCC_OscConfig+0x45c>
 800e266:	e018      	b.n	800e29a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e268:	4b1e      	ldr	r3, [pc, #120]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e26a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e26c:	4a1d      	ldr	r2, [pc, #116]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e26e:	f023 0301 	bic.w	r3, r3, #1
 800e272:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e274:	f7f7 f9c0 	bl	80055f8 <HAL_GetTick>
 800e278:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e27a:	e008      	b.n	800e28e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e27c:	f7f7 f9bc 	bl	80055f8 <HAL_GetTick>
 800e280:	4602      	mov	r2, r0
 800e282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e284:	1ad3      	subs	r3, r2, r3
 800e286:	2b02      	cmp	r3, #2
 800e288:	d901      	bls.n	800e28e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800e28a:	2303      	movs	r3, #3
 800e28c:	e200      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e28e:	4b15      	ldr	r3, [pc, #84]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e292:	f003 0302 	and.w	r3, r3, #2
 800e296:	2b00      	cmp	r3, #0
 800e298:	d1f0      	bne.n	800e27c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f003 0320 	and.w	r3, r3, #32
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d039      	beq.n	800e31a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	699b      	ldr	r3, [r3, #24]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d01c      	beq.n	800e2e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e2ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4a0c      	ldr	r2, [pc, #48]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e2b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e2b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e2ba:	f7f7 f99d 	bl	80055f8 <HAL_GetTick>
 800e2be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e2c0:	e008      	b.n	800e2d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e2c2:	f7f7 f999 	bl	80055f8 <HAL_GetTick>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ca:	1ad3      	subs	r3, r2, r3
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d901      	bls.n	800e2d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e2d0:	2303      	movs	r3, #3
 800e2d2:	e1dd      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e2d4:	4b03      	ldr	r3, [pc, #12]	@ (800e2e4 <HAL_RCC_OscConfig+0x4f8>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d0f0      	beq.n	800e2c2 <HAL_RCC_OscConfig+0x4d6>
 800e2e0:	e01b      	b.n	800e31a <HAL_RCC_OscConfig+0x52e>
 800e2e2:	bf00      	nop
 800e2e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e2e8:	4b9b      	ldr	r3, [pc, #620]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a9a      	ldr	r2, [pc, #616]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e2ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e2f4:	f7f7 f980 	bl	80055f8 <HAL_GetTick>
 800e2f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e2fa:	e008      	b.n	800e30e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e2fc:	f7f7 f97c 	bl	80055f8 <HAL_GetTick>
 800e300:	4602      	mov	r2, r0
 800e302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e304:	1ad3      	subs	r3, r2, r3
 800e306:	2b02      	cmp	r3, #2
 800e308:	d901      	bls.n	800e30e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e30a:	2303      	movs	r3, #3
 800e30c:	e1c0      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e30e:	4b92      	ldr	r3, [pc, #584]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1f0      	bne.n	800e2fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f003 0304 	and.w	r3, r3, #4
 800e322:	2b00      	cmp	r3, #0
 800e324:	f000 8081 	beq.w	800e42a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e328:	4b8c      	ldr	r3, [pc, #560]	@ (800e55c <HAL_RCC_OscConfig+0x770>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a8b      	ldr	r2, [pc, #556]	@ (800e55c <HAL_RCC_OscConfig+0x770>)
 800e32e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e332:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e334:	f7f7 f960 	bl	80055f8 <HAL_GetTick>
 800e338:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e33a:	e008      	b.n	800e34e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e33c:	f7f7 f95c 	bl	80055f8 <HAL_GetTick>
 800e340:	4602      	mov	r2, r0
 800e342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e344:	1ad3      	subs	r3, r2, r3
 800e346:	2b64      	cmp	r3, #100	@ 0x64
 800e348:	d901      	bls.n	800e34e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e34a:	2303      	movs	r3, #3
 800e34c:	e1a0      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e34e:	4b83      	ldr	r3, [pc, #524]	@ (800e55c <HAL_RCC_OscConfig+0x770>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e356:	2b00      	cmp	r3, #0
 800e358:	d0f0      	beq.n	800e33c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d106      	bne.n	800e370 <HAL_RCC_OscConfig+0x584>
 800e362:	4b7d      	ldr	r3, [pc, #500]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e366:	4a7c      	ldr	r2, [pc, #496]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e368:	f043 0301 	orr.w	r3, r3, #1
 800e36c:	6713      	str	r3, [r2, #112]	@ 0x70
 800e36e:	e02d      	b.n	800e3cc <HAL_RCC_OscConfig+0x5e0>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	689b      	ldr	r3, [r3, #8]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d10c      	bne.n	800e392 <HAL_RCC_OscConfig+0x5a6>
 800e378:	4b77      	ldr	r3, [pc, #476]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e37a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e37c:	4a76      	ldr	r2, [pc, #472]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e37e:	f023 0301 	bic.w	r3, r3, #1
 800e382:	6713      	str	r3, [r2, #112]	@ 0x70
 800e384:	4b74      	ldr	r3, [pc, #464]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e388:	4a73      	ldr	r2, [pc, #460]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e38a:	f023 0304 	bic.w	r3, r3, #4
 800e38e:	6713      	str	r3, [r2, #112]	@ 0x70
 800e390:	e01c      	b.n	800e3cc <HAL_RCC_OscConfig+0x5e0>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	2b05      	cmp	r3, #5
 800e398:	d10c      	bne.n	800e3b4 <HAL_RCC_OscConfig+0x5c8>
 800e39a:	4b6f      	ldr	r3, [pc, #444]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e39c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e39e:	4a6e      	ldr	r2, [pc, #440]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e3a0:	f043 0304 	orr.w	r3, r3, #4
 800e3a4:	6713      	str	r3, [r2, #112]	@ 0x70
 800e3a6:	4b6c      	ldr	r3, [pc, #432]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e3a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3aa:	4a6b      	ldr	r2, [pc, #428]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e3ac:	f043 0301 	orr.w	r3, r3, #1
 800e3b0:	6713      	str	r3, [r2, #112]	@ 0x70
 800e3b2:	e00b      	b.n	800e3cc <HAL_RCC_OscConfig+0x5e0>
 800e3b4:	4b68      	ldr	r3, [pc, #416]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e3b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3b8:	4a67      	ldr	r2, [pc, #412]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e3ba:	f023 0301 	bic.w	r3, r3, #1
 800e3be:	6713      	str	r3, [r2, #112]	@ 0x70
 800e3c0:	4b65      	ldr	r3, [pc, #404]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e3c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3c4:	4a64      	ldr	r2, [pc, #400]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e3c6:	f023 0304 	bic.w	r3, r3, #4
 800e3ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	689b      	ldr	r3, [r3, #8]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d015      	beq.n	800e400 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e3d4:	f7f7 f910 	bl	80055f8 <HAL_GetTick>
 800e3d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e3da:	e00a      	b.n	800e3f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e3dc:	f7f7 f90c 	bl	80055f8 <HAL_GetTick>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3e4:	1ad3      	subs	r3, r2, r3
 800e3e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d901      	bls.n	800e3f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e3ee:	2303      	movs	r3, #3
 800e3f0:	e14e      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e3f2:	4b59      	ldr	r3, [pc, #356]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e3f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3f6:	f003 0302 	and.w	r3, r3, #2
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d0ee      	beq.n	800e3dc <HAL_RCC_OscConfig+0x5f0>
 800e3fe:	e014      	b.n	800e42a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e400:	f7f7 f8fa 	bl	80055f8 <HAL_GetTick>
 800e404:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e406:	e00a      	b.n	800e41e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e408:	f7f7 f8f6 	bl	80055f8 <HAL_GetTick>
 800e40c:	4602      	mov	r2, r0
 800e40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e410:	1ad3      	subs	r3, r2, r3
 800e412:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e416:	4293      	cmp	r3, r2
 800e418:	d901      	bls.n	800e41e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e41a:	2303      	movs	r3, #3
 800e41c:	e138      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e41e:	4b4e      	ldr	r3, [pc, #312]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e422:	f003 0302 	and.w	r3, r3, #2
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1ee      	bne.n	800e408 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e42e:	2b00      	cmp	r3, #0
 800e430:	f000 812d 	beq.w	800e68e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e434:	4b48      	ldr	r3, [pc, #288]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e436:	691b      	ldr	r3, [r3, #16]
 800e438:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e43c:	2b18      	cmp	r3, #24
 800e43e:	f000 80bd 	beq.w	800e5bc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e446:	2b02      	cmp	r3, #2
 800e448:	f040 809e 	bne.w	800e588 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e44c:	4b42      	ldr	r3, [pc, #264]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a41      	ldr	r2, [pc, #260]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e452:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e458:	f7f7 f8ce 	bl	80055f8 <HAL_GetTick>
 800e45c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e45e:	e008      	b.n	800e472 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e460:	f7f7 f8ca 	bl	80055f8 <HAL_GetTick>
 800e464:	4602      	mov	r2, r0
 800e466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	d901      	bls.n	800e472 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e46e:	2303      	movs	r3, #3
 800e470:	e10e      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e472:	4b39      	ldr	r3, [pc, #228]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d1f0      	bne.n	800e460 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e47e:	4b36      	ldr	r3, [pc, #216]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e480:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e482:	4b37      	ldr	r3, [pc, #220]	@ (800e560 <HAL_RCC_OscConfig+0x774>)
 800e484:	4013      	ands	r3, r2
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e48e:	0112      	lsls	r2, r2, #4
 800e490:	430a      	orrs	r2, r1
 800e492:	4931      	ldr	r1, [pc, #196]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e494:	4313      	orrs	r3, r2
 800e496:	628b      	str	r3, [r1, #40]	@ 0x28
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e49c:	3b01      	subs	r3, #1
 800e49e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	025b      	lsls	r3, r3, #9
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	431a      	orrs	r2, r3
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4b2:	3b01      	subs	r3, #1
 800e4b4:	041b      	lsls	r3, r3, #16
 800e4b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e4ba:	431a      	orrs	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4c0:	3b01      	subs	r3, #1
 800e4c2:	061b      	lsls	r3, r3, #24
 800e4c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e4c8:	4923      	ldr	r1, [pc, #140]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e4ce:	4b22      	ldr	r3, [pc, #136]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d2:	4a21      	ldr	r2, [pc, #132]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e4d4:	f023 0301 	bic.w	r3, r3, #1
 800e4d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e4da:	4b1f      	ldr	r3, [pc, #124]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e4dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e4de:	4b21      	ldr	r3, [pc, #132]	@ (800e564 <HAL_RCC_OscConfig+0x778>)
 800e4e0:	4013      	ands	r3, r2
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e4e6:	00d2      	lsls	r2, r2, #3
 800e4e8:	491b      	ldr	r1, [pc, #108]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e4ee:	4b1a      	ldr	r3, [pc, #104]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f2:	f023 020c 	bic.w	r2, r3, #12
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4fa:	4917      	ldr	r1, [pc, #92]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e500:	4b15      	ldr	r3, [pc, #84]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e504:	f023 0202 	bic.w	r2, r3, #2
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e50c:	4912      	ldr	r1, [pc, #72]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e50e:	4313      	orrs	r3, r2
 800e510:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e512:	4b11      	ldr	r3, [pc, #68]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e516:	4a10      	ldr	r2, [pc, #64]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e51c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e51e:	4b0e      	ldr	r3, [pc, #56]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e522:	4a0d      	ldr	r2, [pc, #52]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e528:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e52a:	4b0b      	ldr	r3, [pc, #44]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e52e:	4a0a      	ldr	r2, [pc, #40]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e534:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e536:	4b08      	ldr	r3, [pc, #32]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e53a:	4a07      	ldr	r2, [pc, #28]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e53c:	f043 0301 	orr.w	r3, r3, #1
 800e540:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e542:	4b05      	ldr	r3, [pc, #20]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4a04      	ldr	r2, [pc, #16]	@ (800e558 <HAL_RCC_OscConfig+0x76c>)
 800e548:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e54c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e54e:	f7f7 f853 	bl	80055f8 <HAL_GetTick>
 800e552:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e554:	e011      	b.n	800e57a <HAL_RCC_OscConfig+0x78e>
 800e556:	bf00      	nop
 800e558:	58024400 	.word	0x58024400
 800e55c:	58024800 	.word	0x58024800
 800e560:	fffffc0c 	.word	0xfffffc0c
 800e564:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e568:	f7f7 f846 	bl	80055f8 <HAL_GetTick>
 800e56c:	4602      	mov	r2, r0
 800e56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	2b02      	cmp	r3, #2
 800e574:	d901      	bls.n	800e57a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e576:	2303      	movs	r3, #3
 800e578:	e08a      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e57a:	4b47      	ldr	r3, [pc, #284]	@ (800e698 <HAL_RCC_OscConfig+0x8ac>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e582:	2b00      	cmp	r3, #0
 800e584:	d0f0      	beq.n	800e568 <HAL_RCC_OscConfig+0x77c>
 800e586:	e082      	b.n	800e68e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e588:	4b43      	ldr	r3, [pc, #268]	@ (800e698 <HAL_RCC_OscConfig+0x8ac>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a42      	ldr	r2, [pc, #264]	@ (800e698 <HAL_RCC_OscConfig+0x8ac>)
 800e58e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e594:	f7f7 f830 	bl	80055f8 <HAL_GetTick>
 800e598:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e59a:	e008      	b.n	800e5ae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e59c:	f7f7 f82c 	bl	80055f8 <HAL_GetTick>
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5a4:	1ad3      	subs	r3, r2, r3
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	d901      	bls.n	800e5ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e5aa:	2303      	movs	r3, #3
 800e5ac:	e070      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e5ae:	4b3a      	ldr	r3, [pc, #232]	@ (800e698 <HAL_RCC_OscConfig+0x8ac>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d1f0      	bne.n	800e59c <HAL_RCC_OscConfig+0x7b0>
 800e5ba:	e068      	b.n	800e68e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e5bc:	4b36      	ldr	r3, [pc, #216]	@ (800e698 <HAL_RCC_OscConfig+0x8ac>)
 800e5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e5c2:	4b35      	ldr	r3, [pc, #212]	@ (800e698 <HAL_RCC_OscConfig+0x8ac>)
 800e5c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d031      	beq.n	800e634 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	f003 0203 	and.w	r2, r3, #3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d12a      	bne.n	800e634 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	091b      	lsrs	r3, r3, #4
 800e5e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d122      	bne.n	800e634 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d11a      	bne.n	800e634 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	0a5b      	lsrs	r3, r3, #9
 800e602:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e60a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d111      	bne.n	800e634 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	0c1b      	lsrs	r3, r3, #16
 800e614:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e61c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e61e:	429a      	cmp	r2, r3
 800e620:	d108      	bne.n	800e634 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	0e1b      	lsrs	r3, r3, #24
 800e626:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e62e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e630:	429a      	cmp	r2, r3
 800e632:	d001      	beq.n	800e638 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e634:	2301      	movs	r3, #1
 800e636:	e02b      	b.n	800e690 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e638:	4b17      	ldr	r3, [pc, #92]	@ (800e698 <HAL_RCC_OscConfig+0x8ac>)
 800e63a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e63c:	08db      	lsrs	r3, r3, #3
 800e63e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e642:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e648:	693a      	ldr	r2, [r7, #16]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d01f      	beq.n	800e68e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e64e:	4b12      	ldr	r3, [pc, #72]	@ (800e698 <HAL_RCC_OscConfig+0x8ac>)
 800e650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e652:	4a11      	ldr	r2, [pc, #68]	@ (800e698 <HAL_RCC_OscConfig+0x8ac>)
 800e654:	f023 0301 	bic.w	r3, r3, #1
 800e658:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e65a:	f7f6 ffcd 	bl	80055f8 <HAL_GetTick>
 800e65e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e660:	bf00      	nop
 800e662:	f7f6 ffc9 	bl	80055f8 <HAL_GetTick>
 800e666:	4602      	mov	r2, r0
 800e668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d0f9      	beq.n	800e662 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e66e:	4b0a      	ldr	r3, [pc, #40]	@ (800e698 <HAL_RCC_OscConfig+0x8ac>)
 800e670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e672:	4b0a      	ldr	r3, [pc, #40]	@ (800e69c <HAL_RCC_OscConfig+0x8b0>)
 800e674:	4013      	ands	r3, r2
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e67a:	00d2      	lsls	r2, r2, #3
 800e67c:	4906      	ldr	r1, [pc, #24]	@ (800e698 <HAL_RCC_OscConfig+0x8ac>)
 800e67e:	4313      	orrs	r3, r2
 800e680:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e682:	4b05      	ldr	r3, [pc, #20]	@ (800e698 <HAL_RCC_OscConfig+0x8ac>)
 800e684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e686:	4a04      	ldr	r2, [pc, #16]	@ (800e698 <HAL_RCC_OscConfig+0x8ac>)
 800e688:	f043 0301 	orr.w	r3, r3, #1
 800e68c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	3730      	adds	r7, #48	@ 0x30
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	58024400 	.word	0x58024400
 800e69c:	ffff0007 	.word	0xffff0007

0800e6a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d101      	bne.n	800e6b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e19c      	b.n	800e9ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e6b4:	4b8a      	ldr	r3, [pc, #552]	@ (800e8e0 <HAL_RCC_ClockConfig+0x240>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f003 030f 	and.w	r3, r3, #15
 800e6bc:	683a      	ldr	r2, [r7, #0]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d910      	bls.n	800e6e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e6c2:	4b87      	ldr	r3, [pc, #540]	@ (800e8e0 <HAL_RCC_ClockConfig+0x240>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f023 020f 	bic.w	r2, r3, #15
 800e6ca:	4985      	ldr	r1, [pc, #532]	@ (800e8e0 <HAL_RCC_ClockConfig+0x240>)
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	4313      	orrs	r3, r2
 800e6d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6d2:	4b83      	ldr	r3, [pc, #524]	@ (800e8e0 <HAL_RCC_ClockConfig+0x240>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f003 030f 	and.w	r3, r3, #15
 800e6da:	683a      	ldr	r2, [r7, #0]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d001      	beq.n	800e6e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e184      	b.n	800e9ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f003 0304 	and.w	r3, r3, #4
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d010      	beq.n	800e712 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	691a      	ldr	r2, [r3, #16]
 800e6f4:	4b7b      	ldr	r3, [pc, #492]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e6f6:	699b      	ldr	r3, [r3, #24]
 800e6f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d908      	bls.n	800e712 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e700:	4b78      	ldr	r3, [pc, #480]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e702:	699b      	ldr	r3, [r3, #24]
 800e704:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	691b      	ldr	r3, [r3, #16]
 800e70c:	4975      	ldr	r1, [pc, #468]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e70e:	4313      	orrs	r3, r2
 800e710:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f003 0308 	and.w	r3, r3, #8
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d010      	beq.n	800e740 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	695a      	ldr	r2, [r3, #20]
 800e722:	4b70      	ldr	r3, [pc, #448]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e724:	69db      	ldr	r3, [r3, #28]
 800e726:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d908      	bls.n	800e740 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e72e:	4b6d      	ldr	r3, [pc, #436]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e730:	69db      	ldr	r3, [r3, #28]
 800e732:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	695b      	ldr	r3, [r3, #20]
 800e73a:	496a      	ldr	r1, [pc, #424]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e73c:	4313      	orrs	r3, r2
 800e73e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f003 0310 	and.w	r3, r3, #16
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d010      	beq.n	800e76e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	699a      	ldr	r2, [r3, #24]
 800e750:	4b64      	ldr	r3, [pc, #400]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e752:	69db      	ldr	r3, [r3, #28]
 800e754:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e758:	429a      	cmp	r2, r3
 800e75a:	d908      	bls.n	800e76e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e75c:	4b61      	ldr	r3, [pc, #388]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e75e:	69db      	ldr	r3, [r3, #28]
 800e760:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	699b      	ldr	r3, [r3, #24]
 800e768:	495e      	ldr	r1, [pc, #376]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e76a:	4313      	orrs	r3, r2
 800e76c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f003 0320 	and.w	r3, r3, #32
 800e776:	2b00      	cmp	r3, #0
 800e778:	d010      	beq.n	800e79c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	69da      	ldr	r2, [r3, #28]
 800e77e:	4b59      	ldr	r3, [pc, #356]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e780:	6a1b      	ldr	r3, [r3, #32]
 800e782:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e786:	429a      	cmp	r2, r3
 800e788:	d908      	bls.n	800e79c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e78a:	4b56      	ldr	r3, [pc, #344]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e78c:	6a1b      	ldr	r3, [r3, #32]
 800e78e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	69db      	ldr	r3, [r3, #28]
 800e796:	4953      	ldr	r1, [pc, #332]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e798:	4313      	orrs	r3, r2
 800e79a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f003 0302 	and.w	r3, r3, #2
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d010      	beq.n	800e7ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	68da      	ldr	r2, [r3, #12]
 800e7ac:	4b4d      	ldr	r3, [pc, #308]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e7ae:	699b      	ldr	r3, [r3, #24]
 800e7b0:	f003 030f 	and.w	r3, r3, #15
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d908      	bls.n	800e7ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e7b8:	4b4a      	ldr	r3, [pc, #296]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e7ba:	699b      	ldr	r3, [r3, #24]
 800e7bc:	f023 020f 	bic.w	r2, r3, #15
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	4947      	ldr	r1, [pc, #284]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f003 0301 	and.w	r3, r3, #1
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d055      	beq.n	800e882 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e7d6:	4b43      	ldr	r3, [pc, #268]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e7d8:	699b      	ldr	r3, [r3, #24]
 800e7da:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	689b      	ldr	r3, [r3, #8]
 800e7e2:	4940      	ldr	r1, [pc, #256]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e7e4:	4313      	orrs	r3, r2
 800e7e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	2b02      	cmp	r3, #2
 800e7ee:	d107      	bne.n	800e800 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e7f0:	4b3c      	ldr	r3, [pc, #240]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d121      	bne.n	800e840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e0f6      	b.n	800e9ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	2b03      	cmp	r3, #3
 800e806:	d107      	bne.n	800e818 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e808:	4b36      	ldr	r3, [pc, #216]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e810:	2b00      	cmp	r3, #0
 800e812:	d115      	bne.n	800e840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e814:	2301      	movs	r3, #1
 800e816:	e0ea      	b.n	800e9ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d107      	bne.n	800e830 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e820:	4b30      	ldr	r3, [pc, #192]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d109      	bne.n	800e840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e82c:	2301      	movs	r3, #1
 800e82e:	e0de      	b.n	800e9ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e830:	4b2c      	ldr	r3, [pc, #176]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f003 0304 	and.w	r3, r3, #4
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d101      	bne.n	800e840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e83c:	2301      	movs	r3, #1
 800e83e:	e0d6      	b.n	800e9ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e840:	4b28      	ldr	r3, [pc, #160]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e842:	691b      	ldr	r3, [r3, #16]
 800e844:	f023 0207 	bic.w	r2, r3, #7
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	4925      	ldr	r1, [pc, #148]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e84e:	4313      	orrs	r3, r2
 800e850:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e852:	f7f6 fed1 	bl	80055f8 <HAL_GetTick>
 800e856:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e858:	e00a      	b.n	800e870 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e85a:	f7f6 fecd 	bl	80055f8 <HAL_GetTick>
 800e85e:	4602      	mov	r2, r0
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e868:	4293      	cmp	r3, r2
 800e86a:	d901      	bls.n	800e870 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e86c:	2303      	movs	r3, #3
 800e86e:	e0be      	b.n	800e9ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e870:	4b1c      	ldr	r3, [pc, #112]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	00db      	lsls	r3, r3, #3
 800e87e:	429a      	cmp	r2, r3
 800e880:	d1eb      	bne.n	800e85a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f003 0302 	and.w	r3, r3, #2
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d010      	beq.n	800e8b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	68da      	ldr	r2, [r3, #12]
 800e892:	4b14      	ldr	r3, [pc, #80]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e894:	699b      	ldr	r3, [r3, #24]
 800e896:	f003 030f 	and.w	r3, r3, #15
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d208      	bcs.n	800e8b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e89e:	4b11      	ldr	r3, [pc, #68]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e8a0:	699b      	ldr	r3, [r3, #24]
 800e8a2:	f023 020f 	bic.w	r2, r3, #15
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	68db      	ldr	r3, [r3, #12]
 800e8aa:	490e      	ldr	r1, [pc, #56]	@ (800e8e4 <HAL_RCC_ClockConfig+0x244>)
 800e8ac:	4313      	orrs	r3, r2
 800e8ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800e8e0 <HAL_RCC_ClockConfig+0x240>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f003 030f 	and.w	r3, r3, #15
 800e8b8:	683a      	ldr	r2, [r7, #0]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d214      	bcs.n	800e8e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e8be:	4b08      	ldr	r3, [pc, #32]	@ (800e8e0 <HAL_RCC_ClockConfig+0x240>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f023 020f 	bic.w	r2, r3, #15
 800e8c6:	4906      	ldr	r1, [pc, #24]	@ (800e8e0 <HAL_RCC_ClockConfig+0x240>)
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e8ce:	4b04      	ldr	r3, [pc, #16]	@ (800e8e0 <HAL_RCC_ClockConfig+0x240>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f003 030f 	and.w	r3, r3, #15
 800e8d6:	683a      	ldr	r2, [r7, #0]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d005      	beq.n	800e8e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	e086      	b.n	800e9ee <HAL_RCC_ClockConfig+0x34e>
 800e8e0:	52002000 	.word	0x52002000
 800e8e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f003 0304 	and.w	r3, r3, #4
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d010      	beq.n	800e916 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	691a      	ldr	r2, [r3, #16]
 800e8f8:	4b3f      	ldr	r3, [pc, #252]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e8fa:	699b      	ldr	r3, [r3, #24]
 800e8fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e900:	429a      	cmp	r2, r3
 800e902:	d208      	bcs.n	800e916 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e904:	4b3c      	ldr	r3, [pc, #240]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e906:	699b      	ldr	r3, [r3, #24]
 800e908:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	4939      	ldr	r1, [pc, #228]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e912:	4313      	orrs	r3, r2
 800e914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f003 0308 	and.w	r3, r3, #8
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d010      	beq.n	800e944 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	695a      	ldr	r2, [r3, #20]
 800e926:	4b34      	ldr	r3, [pc, #208]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e928:	69db      	ldr	r3, [r3, #28]
 800e92a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e92e:	429a      	cmp	r2, r3
 800e930:	d208      	bcs.n	800e944 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e932:	4b31      	ldr	r3, [pc, #196]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e934:	69db      	ldr	r3, [r3, #28]
 800e936:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	695b      	ldr	r3, [r3, #20]
 800e93e:	492e      	ldr	r1, [pc, #184]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e940:	4313      	orrs	r3, r2
 800e942:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f003 0310 	and.w	r3, r3, #16
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d010      	beq.n	800e972 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	699a      	ldr	r2, [r3, #24]
 800e954:	4b28      	ldr	r3, [pc, #160]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e956:	69db      	ldr	r3, [r3, #28]
 800e958:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d208      	bcs.n	800e972 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e960:	4b25      	ldr	r3, [pc, #148]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e962:	69db      	ldr	r3, [r3, #28]
 800e964:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	699b      	ldr	r3, [r3, #24]
 800e96c:	4922      	ldr	r1, [pc, #136]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e96e:	4313      	orrs	r3, r2
 800e970:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f003 0320 	and.w	r3, r3, #32
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d010      	beq.n	800e9a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	69da      	ldr	r2, [r3, #28]
 800e982:	4b1d      	ldr	r3, [pc, #116]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e984:	6a1b      	ldr	r3, [r3, #32]
 800e986:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d208      	bcs.n	800e9a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e98e:	4b1a      	ldr	r3, [pc, #104]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e990:	6a1b      	ldr	r3, [r3, #32]
 800e992:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	69db      	ldr	r3, [r3, #28]
 800e99a:	4917      	ldr	r1, [pc, #92]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e99c:	4313      	orrs	r3, r2
 800e99e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e9a0:	f000 f89e 	bl	800eae0 <HAL_RCC_GetSysClockFreq>
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	4b14      	ldr	r3, [pc, #80]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e9a8:	699b      	ldr	r3, [r3, #24]
 800e9aa:	0a1b      	lsrs	r3, r3, #8
 800e9ac:	f003 030f 	and.w	r3, r3, #15
 800e9b0:	4912      	ldr	r1, [pc, #72]	@ (800e9fc <HAL_RCC_ClockConfig+0x35c>)
 800e9b2:	5ccb      	ldrb	r3, [r1, r3]
 800e9b4:	f003 031f 	and.w	r3, r3, #31
 800e9b8:	fa22 f303 	lsr.w	r3, r2, r3
 800e9bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e9be:	4b0e      	ldr	r3, [pc, #56]	@ (800e9f8 <HAL_RCC_ClockConfig+0x358>)
 800e9c0:	699b      	ldr	r3, [r3, #24]
 800e9c2:	f003 030f 	and.w	r3, r3, #15
 800e9c6:	4a0d      	ldr	r2, [pc, #52]	@ (800e9fc <HAL_RCC_ClockConfig+0x35c>)
 800e9c8:	5cd3      	ldrb	r3, [r2, r3]
 800e9ca:	f003 031f 	and.w	r3, r3, #31
 800e9ce:	693a      	ldr	r2, [r7, #16]
 800e9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800e9d4:	4a0a      	ldr	r2, [pc, #40]	@ (800ea00 <HAL_RCC_ClockConfig+0x360>)
 800e9d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e9d8:	4a0a      	ldr	r2, [pc, #40]	@ (800ea04 <HAL_RCC_ClockConfig+0x364>)
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e9de:	4b0a      	ldr	r3, [pc, #40]	@ (800ea08 <HAL_RCC_ClockConfig+0x368>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7f5 ffd0 	bl	8004988 <HAL_InitTick>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3718      	adds	r7, #24
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	58024400 	.word	0x58024400
 800e9fc:	08021124 	.word	0x08021124
 800ea00:	24000084 	.word	0x24000084
 800ea04:	24000080 	.word	0x24000080
 800ea08:	24000088 	.word	0x24000088

0800ea0c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b08c      	sub	sp, #48	@ 0x30
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d12a      	bne.n	800ea74 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800ea1e:	4b2d      	ldr	r3, [pc, #180]	@ (800ead4 <HAL_RCC_MCOConfig+0xc8>)
 800ea20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ea24:	4a2b      	ldr	r2, [pc, #172]	@ (800ead4 <HAL_RCC_MCOConfig+0xc8>)
 800ea26:	f043 0301 	orr.w	r3, r3, #1
 800ea2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ea2e:	4b29      	ldr	r3, [pc, #164]	@ (800ead4 <HAL_RCC_MCOConfig+0xc8>)
 800ea30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ea34:	f003 0301 	and.w	r3, r3, #1
 800ea38:	61bb      	str	r3, [r7, #24]
 800ea3a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800ea3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea42:	2302      	movs	r3, #2
 800ea44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea46:	2303      	movs	r3, #3
 800ea48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800ea52:	f107 031c 	add.w	r3, r7, #28
 800ea56:	4619      	mov	r1, r3
 800ea58:	481f      	ldr	r0, [pc, #124]	@ (800ead8 <HAL_RCC_MCOConfig+0xcc>)
 800ea5a:	f7fc fbe9 	bl	800b230 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800ea5e:	4b1d      	ldr	r3, [pc, #116]	@ (800ead4 <HAL_RCC_MCOConfig+0xc8>)
 800ea60:	691b      	ldr	r3, [r3, #16]
 800ea62:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800ea66:	68b9      	ldr	r1, [r7, #8]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	430b      	orrs	r3, r1
 800ea6c:	4919      	ldr	r1, [pc, #100]	@ (800ead4 <HAL_RCC_MCOConfig+0xc8>)
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800ea72:	e02a      	b.n	800eaca <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800ea74:	4b17      	ldr	r3, [pc, #92]	@ (800ead4 <HAL_RCC_MCOConfig+0xc8>)
 800ea76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ea7a:	4a16      	ldr	r2, [pc, #88]	@ (800ead4 <HAL_RCC_MCOConfig+0xc8>)
 800ea7c:	f043 0304 	orr.w	r3, r3, #4
 800ea80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ea84:	4b13      	ldr	r3, [pc, #76]	@ (800ead4 <HAL_RCC_MCOConfig+0xc8>)
 800ea86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ea8a:	f003 0304 	and.w	r3, r3, #4
 800ea8e:	617b      	str	r3, [r7, #20]
 800ea90:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800ea92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea98:	2302      	movs	r3, #2
 800ea9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea9c:	2303      	movs	r3, #3
 800ea9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800eaa8:	f107 031c 	add.w	r3, r7, #28
 800eaac:	4619      	mov	r1, r3
 800eaae:	480b      	ldr	r0, [pc, #44]	@ (800eadc <HAL_RCC_MCOConfig+0xd0>)
 800eab0:	f7fc fbbe 	bl	800b230 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800eab4:	4b07      	ldr	r3, [pc, #28]	@ (800ead4 <HAL_RCC_MCOConfig+0xc8>)
 800eab6:	691b      	ldr	r3, [r3, #16]
 800eab8:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	01d9      	lsls	r1, r3, #7
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	430b      	orrs	r3, r1
 800eac4:	4903      	ldr	r1, [pc, #12]	@ (800ead4 <HAL_RCC_MCOConfig+0xc8>)
 800eac6:	4313      	orrs	r3, r2
 800eac8:	610b      	str	r3, [r1, #16]
}
 800eaca:	bf00      	nop
 800eacc:	3730      	adds	r7, #48	@ 0x30
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	58024400 	.word	0x58024400
 800ead8:	58020000 	.word	0x58020000
 800eadc:	58020800 	.word	0x58020800

0800eae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b089      	sub	sp, #36	@ 0x24
 800eae4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800eae6:	4bb3      	ldr	r3, [pc, #716]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eae8:	691b      	ldr	r3, [r3, #16]
 800eaea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eaee:	2b18      	cmp	r3, #24
 800eaf0:	f200 8155 	bhi.w	800ed9e <HAL_RCC_GetSysClockFreq+0x2be>
 800eaf4:	a201      	add	r2, pc, #4	@ (adr r2, 800eafc <HAL_RCC_GetSysClockFreq+0x1c>)
 800eaf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eafa:	bf00      	nop
 800eafc:	0800eb61 	.word	0x0800eb61
 800eb00:	0800ed9f 	.word	0x0800ed9f
 800eb04:	0800ed9f 	.word	0x0800ed9f
 800eb08:	0800ed9f 	.word	0x0800ed9f
 800eb0c:	0800ed9f 	.word	0x0800ed9f
 800eb10:	0800ed9f 	.word	0x0800ed9f
 800eb14:	0800ed9f 	.word	0x0800ed9f
 800eb18:	0800ed9f 	.word	0x0800ed9f
 800eb1c:	0800eb87 	.word	0x0800eb87
 800eb20:	0800ed9f 	.word	0x0800ed9f
 800eb24:	0800ed9f 	.word	0x0800ed9f
 800eb28:	0800ed9f 	.word	0x0800ed9f
 800eb2c:	0800ed9f 	.word	0x0800ed9f
 800eb30:	0800ed9f 	.word	0x0800ed9f
 800eb34:	0800ed9f 	.word	0x0800ed9f
 800eb38:	0800ed9f 	.word	0x0800ed9f
 800eb3c:	0800eb8d 	.word	0x0800eb8d
 800eb40:	0800ed9f 	.word	0x0800ed9f
 800eb44:	0800ed9f 	.word	0x0800ed9f
 800eb48:	0800ed9f 	.word	0x0800ed9f
 800eb4c:	0800ed9f 	.word	0x0800ed9f
 800eb50:	0800ed9f 	.word	0x0800ed9f
 800eb54:	0800ed9f 	.word	0x0800ed9f
 800eb58:	0800ed9f 	.word	0x0800ed9f
 800eb5c:	0800eb93 	.word	0x0800eb93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb60:	4b94      	ldr	r3, [pc, #592]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f003 0320 	and.w	r3, r3, #32
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d009      	beq.n	800eb80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eb6c:	4b91      	ldr	r3, [pc, #580]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	08db      	lsrs	r3, r3, #3
 800eb72:	f003 0303 	and.w	r3, r3, #3
 800eb76:	4a90      	ldr	r2, [pc, #576]	@ (800edb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800eb78:	fa22 f303 	lsr.w	r3, r2, r3
 800eb7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800eb7e:	e111      	b.n	800eda4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800eb80:	4b8d      	ldr	r3, [pc, #564]	@ (800edb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800eb82:	61bb      	str	r3, [r7, #24]
      break;
 800eb84:	e10e      	b.n	800eda4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800eb86:	4b8d      	ldr	r3, [pc, #564]	@ (800edbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800eb88:	61bb      	str	r3, [r7, #24]
      break;
 800eb8a:	e10b      	b.n	800eda4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800eb8c:	4b8c      	ldr	r3, [pc, #560]	@ (800edc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800eb8e:	61bb      	str	r3, [r7, #24]
      break;
 800eb90:	e108      	b.n	800eda4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eb92:	4b88      	ldr	r3, [pc, #544]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb96:	f003 0303 	and.w	r3, r3, #3
 800eb9a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800eb9c:	4b85      	ldr	r3, [pc, #532]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eba0:	091b      	lsrs	r3, r3, #4
 800eba2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eba6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800eba8:	4b82      	ldr	r3, [pc, #520]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ebaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebac:	f003 0301 	and.w	r3, r3, #1
 800ebb0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ebb2:	4b80      	ldr	r3, [pc, #512]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ebb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebb6:	08db      	lsrs	r3, r3, #3
 800ebb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebbc:	68fa      	ldr	r2, [r7, #12]
 800ebbe:	fb02 f303 	mul.w	r3, r2, r3
 800ebc2:	ee07 3a90 	vmov	s15, r3
 800ebc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	f000 80e1 	beq.w	800ed98 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	f000 8083 	beq.w	800ece4 <HAL_RCC_GetSysClockFreq+0x204>
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	2b02      	cmp	r3, #2
 800ebe2:	f200 80a1 	bhi.w	800ed28 <HAL_RCC_GetSysClockFreq+0x248>
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d003      	beq.n	800ebf4 <HAL_RCC_GetSysClockFreq+0x114>
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d056      	beq.n	800eca0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ebf2:	e099      	b.n	800ed28 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebf4:	4b6f      	ldr	r3, [pc, #444]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f003 0320 	and.w	r3, r3, #32
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d02d      	beq.n	800ec5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec00:	4b6c      	ldr	r3, [pc, #432]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	08db      	lsrs	r3, r3, #3
 800ec06:	f003 0303 	and.w	r3, r3, #3
 800ec0a:	4a6b      	ldr	r2, [pc, #428]	@ (800edb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ec0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ec10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	ee07 3a90 	vmov	s15, r3
 800ec18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	ee07 3a90 	vmov	s15, r3
 800ec22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec2a:	4b62      	ldr	r3, [pc, #392]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec32:	ee07 3a90 	vmov	s15, r3
 800ec36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec3a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec3e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800edc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ec42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ec5a:	e087      	b.n	800ed6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	ee07 3a90 	vmov	s15, r3
 800ec62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec66:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800edc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ec6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec6e:	4b51      	ldr	r3, [pc, #324]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec76:	ee07 3a90 	vmov	s15, r3
 800ec7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec82:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800edc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ec86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ec9e:	e065      	b.n	800ed6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	ee07 3a90 	vmov	s15, r3
 800eca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecaa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800edcc <HAL_RCC_GetSysClockFreq+0x2ec>
 800ecae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecb2:	4b40      	ldr	r3, [pc, #256]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecba:	ee07 3a90 	vmov	s15, r3
 800ecbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecc2:	ed97 6a02 	vldr	s12, [r7, #8]
 800ecc6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800edc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ecca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ecd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ece2:	e043      	b.n	800ed6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	ee07 3a90 	vmov	s15, r3
 800ecea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800edd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ecf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecf6:	4b2f      	ldr	r3, [pc, #188]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecfe:	ee07 3a90 	vmov	s15, r3
 800ed02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed06:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed0a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800edc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ed0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ed26:	e021      	b.n	800ed6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	ee07 3a90 	vmov	s15, r3
 800ed2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed32:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800edcc <HAL_RCC_GetSysClockFreq+0x2ec>
 800ed36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed3a:	4b1e      	ldr	r3, [pc, #120]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed42:	ee07 3a90 	vmov	s15, r3
 800ed46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed4a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed4e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800edc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ed52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ed6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ed6c:	4b11      	ldr	r3, [pc, #68]	@ (800edb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed70:	0a5b      	lsrs	r3, r3, #9
 800ed72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed76:	3301      	adds	r3, #1
 800ed78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	ee07 3a90 	vmov	s15, r3
 800ed80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ed84:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed90:	ee17 3a90 	vmov	r3, s15
 800ed94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ed96:	e005      	b.n	800eda4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	61bb      	str	r3, [r7, #24]
      break;
 800ed9c:	e002      	b.n	800eda4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ed9e:	4b07      	ldr	r3, [pc, #28]	@ (800edbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800eda0:	61bb      	str	r3, [r7, #24]
      break;
 800eda2:	bf00      	nop
  }

  return sysclockfreq;
 800eda4:	69bb      	ldr	r3, [r7, #24]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3724      	adds	r7, #36	@ 0x24
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	58024400 	.word	0x58024400
 800edb8:	03d09000 	.word	0x03d09000
 800edbc:	003d0900 	.word	0x003d0900
 800edc0:	017d7840 	.word	0x017d7840
 800edc4:	46000000 	.word	0x46000000
 800edc8:	4c742400 	.word	0x4c742400
 800edcc:	4a742400 	.word	0x4a742400
 800edd0:	4bbebc20 	.word	0x4bbebc20

0800edd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800edda:	f7ff fe81 	bl	800eae0 <HAL_RCC_GetSysClockFreq>
 800edde:	4602      	mov	r2, r0
 800ede0:	4b10      	ldr	r3, [pc, #64]	@ (800ee24 <HAL_RCC_GetHCLKFreq+0x50>)
 800ede2:	699b      	ldr	r3, [r3, #24]
 800ede4:	0a1b      	lsrs	r3, r3, #8
 800ede6:	f003 030f 	and.w	r3, r3, #15
 800edea:	490f      	ldr	r1, [pc, #60]	@ (800ee28 <HAL_RCC_GetHCLKFreq+0x54>)
 800edec:	5ccb      	ldrb	r3, [r1, r3]
 800edee:	f003 031f 	and.w	r3, r3, #31
 800edf2:	fa22 f303 	lsr.w	r3, r2, r3
 800edf6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800edf8:	4b0a      	ldr	r3, [pc, #40]	@ (800ee24 <HAL_RCC_GetHCLKFreq+0x50>)
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	f003 030f 	and.w	r3, r3, #15
 800ee00:	4a09      	ldr	r2, [pc, #36]	@ (800ee28 <HAL_RCC_GetHCLKFreq+0x54>)
 800ee02:	5cd3      	ldrb	r3, [r2, r3]
 800ee04:	f003 031f 	and.w	r3, r3, #31
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ee0e:	4a07      	ldr	r2, [pc, #28]	@ (800ee2c <HAL_RCC_GetHCLKFreq+0x58>)
 800ee10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ee12:	4a07      	ldr	r2, [pc, #28]	@ (800ee30 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ee18:	4b04      	ldr	r3, [pc, #16]	@ (800ee2c <HAL_RCC_GetHCLKFreq+0x58>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3708      	adds	r7, #8
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	58024400 	.word	0x58024400
 800ee28:	08021124 	.word	0x08021124
 800ee2c:	24000084 	.word	0x24000084
 800ee30:	24000080 	.word	0x24000080

0800ee34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ee38:	f7ff ffcc 	bl	800edd4 <HAL_RCC_GetHCLKFreq>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	4b06      	ldr	r3, [pc, #24]	@ (800ee58 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ee40:	69db      	ldr	r3, [r3, #28]
 800ee42:	091b      	lsrs	r3, r3, #4
 800ee44:	f003 0307 	and.w	r3, r3, #7
 800ee48:	4904      	ldr	r1, [pc, #16]	@ (800ee5c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ee4a:	5ccb      	ldrb	r3, [r1, r3]
 800ee4c:	f003 031f 	and.w	r3, r3, #31
 800ee50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	58024400 	.word	0x58024400
 800ee5c:	08021124 	.word	0x08021124

0800ee60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ee64:	f7ff ffb6 	bl	800edd4 <HAL_RCC_GetHCLKFreq>
 800ee68:	4602      	mov	r2, r0
 800ee6a:	4b06      	ldr	r3, [pc, #24]	@ (800ee84 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ee6c:	69db      	ldr	r3, [r3, #28]
 800ee6e:	0a1b      	lsrs	r3, r3, #8
 800ee70:	f003 0307 	and.w	r3, r3, #7
 800ee74:	4904      	ldr	r1, [pc, #16]	@ (800ee88 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ee76:	5ccb      	ldrb	r3, [r1, r3]
 800ee78:	f003 031f 	and.w	r3, r3, #31
 800ee7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	58024400 	.word	0x58024400
 800ee88:	08021124 	.word	0x08021124

0800ee8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	223f      	movs	r2, #63	@ 0x3f
 800ee9a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ee9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ef08 <HAL_RCC_GetClockConfig+0x7c>)
 800ee9e:	691b      	ldr	r3, [r3, #16]
 800eea0:	f003 0207 	and.w	r2, r3, #7
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800eea8:	4b17      	ldr	r3, [pc, #92]	@ (800ef08 <HAL_RCC_GetClockConfig+0x7c>)
 800eeaa:	699b      	ldr	r3, [r3, #24]
 800eeac:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800eeb4:	4b14      	ldr	r3, [pc, #80]	@ (800ef08 <HAL_RCC_GetClockConfig+0x7c>)
 800eeb6:	699b      	ldr	r3, [r3, #24]
 800eeb8:	f003 020f 	and.w	r2, r3, #15
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800eec0:	4b11      	ldr	r3, [pc, #68]	@ (800ef08 <HAL_RCC_GetClockConfig+0x7c>)
 800eec2:	699b      	ldr	r3, [r3, #24]
 800eec4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800eecc:	4b0e      	ldr	r3, [pc, #56]	@ (800ef08 <HAL_RCC_GetClockConfig+0x7c>)
 800eece:	69db      	ldr	r3, [r3, #28]
 800eed0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800eed8:	4b0b      	ldr	r3, [pc, #44]	@ (800ef08 <HAL_RCC_GetClockConfig+0x7c>)
 800eeda:	69db      	ldr	r3, [r3, #28]
 800eedc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800eee4:	4b08      	ldr	r3, [pc, #32]	@ (800ef08 <HAL_RCC_GetClockConfig+0x7c>)
 800eee6:	6a1b      	ldr	r3, [r3, #32]
 800eee8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800eef0:	4b06      	ldr	r3, [pc, #24]	@ (800ef0c <HAL_RCC_GetClockConfig+0x80>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f003 020f 	and.w	r2, r3, #15
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	601a      	str	r2, [r3, #0]
}
 800eefc:	bf00      	nop
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr
 800ef08:	58024400 	.word	0x58024400
 800ef0c:	52002000 	.word	0x52002000

0800ef10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ef10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ef14:	b0ca      	sub	sp, #296	@ 0x128
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ef22:	2300      	movs	r3, #0
 800ef24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ef28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef30:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800ef34:	2500      	movs	r5, #0
 800ef36:	ea54 0305 	orrs.w	r3, r4, r5
 800ef3a:	d049      	beq.n	800efd0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ef3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ef42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ef46:	d02f      	beq.n	800efa8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ef48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ef4c:	d828      	bhi.n	800efa0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ef4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ef52:	d01a      	beq.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ef54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ef58:	d822      	bhi.n	800efa0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d003      	beq.n	800ef66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ef5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ef62:	d007      	beq.n	800ef74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ef64:	e01c      	b.n	800efa0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef66:	4bb8      	ldr	r3, [pc, #736]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ef68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef6a:	4ab7      	ldr	r2, [pc, #732]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ef6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ef70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ef72:	e01a      	b.n	800efaa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ef74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef78:	3308      	adds	r3, #8
 800ef7a:	2102      	movs	r1, #2
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f002 fb61 	bl	8011644 <RCCEx_PLL2_Config>
 800ef82:	4603      	mov	r3, r0
 800ef84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ef88:	e00f      	b.n	800efaa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef8e:	3328      	adds	r3, #40	@ 0x28
 800ef90:	2102      	movs	r1, #2
 800ef92:	4618      	mov	r0, r3
 800ef94:	f002 fc08 	bl	80117a8 <RCCEx_PLL3_Config>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ef9e:	e004      	b.n	800efaa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800efa0:	2301      	movs	r3, #1
 800efa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800efa6:	e000      	b.n	800efaa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800efa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800efaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d10a      	bne.n	800efc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800efb2:	4ba5      	ldr	r3, [pc, #660]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800efb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efb6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800efba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800efc0:	4aa1      	ldr	r2, [pc, #644]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800efc2:	430b      	orrs	r3, r1
 800efc4:	6513      	str	r3, [r2, #80]	@ 0x50
 800efc6:	e003      	b.n	800efd0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800efcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800efd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800efdc:	f04f 0900 	mov.w	r9, #0
 800efe0:	ea58 0309 	orrs.w	r3, r8, r9
 800efe4:	d047      	beq.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800efe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efec:	2b04      	cmp	r3, #4
 800efee:	d82a      	bhi.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800eff0:	a201      	add	r2, pc, #4	@ (adr r2, 800eff8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800eff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff6:	bf00      	nop
 800eff8:	0800f00d 	.word	0x0800f00d
 800effc:	0800f01b 	.word	0x0800f01b
 800f000:	0800f031 	.word	0x0800f031
 800f004:	0800f04f 	.word	0x0800f04f
 800f008:	0800f04f 	.word	0x0800f04f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f00c:	4b8e      	ldr	r3, [pc, #568]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f00e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f010:	4a8d      	ldr	r2, [pc, #564]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f016:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f018:	e01a      	b.n	800f050 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f01e:	3308      	adds	r3, #8
 800f020:	2100      	movs	r1, #0
 800f022:	4618      	mov	r0, r3
 800f024:	f002 fb0e 	bl	8011644 <RCCEx_PLL2_Config>
 800f028:	4603      	mov	r3, r0
 800f02a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f02e:	e00f      	b.n	800f050 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f034:	3328      	adds	r3, #40	@ 0x28
 800f036:	2100      	movs	r1, #0
 800f038:	4618      	mov	r0, r3
 800f03a:	f002 fbb5 	bl	80117a8 <RCCEx_PLL3_Config>
 800f03e:	4603      	mov	r3, r0
 800f040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f044:	e004      	b.n	800f050 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f046:	2301      	movs	r3, #1
 800f048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f04c:	e000      	b.n	800f050 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800f04e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f054:	2b00      	cmp	r3, #0
 800f056:	d10a      	bne.n	800f06e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f058:	4b7b      	ldr	r3, [pc, #492]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f05a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f05c:	f023 0107 	bic.w	r1, r3, #7
 800f060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f066:	4a78      	ldr	r2, [pc, #480]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f068:	430b      	orrs	r3, r1
 800f06a:	6513      	str	r3, [r2, #80]	@ 0x50
 800f06c:	e003      	b.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f06e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800f082:	f04f 0b00 	mov.w	fp, #0
 800f086:	ea5a 030b 	orrs.w	r3, sl, fp
 800f08a:	d04c      	beq.n	800f126 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800f08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f096:	d030      	beq.n	800f0fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800f098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f09c:	d829      	bhi.n	800f0f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f09e:	2bc0      	cmp	r3, #192	@ 0xc0
 800f0a0:	d02d      	beq.n	800f0fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f0a2:	2bc0      	cmp	r3, #192	@ 0xc0
 800f0a4:	d825      	bhi.n	800f0f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f0a6:	2b80      	cmp	r3, #128	@ 0x80
 800f0a8:	d018      	beq.n	800f0dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800f0aa:	2b80      	cmp	r3, #128	@ 0x80
 800f0ac:	d821      	bhi.n	800f0f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d002      	beq.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800f0b2:	2b40      	cmp	r3, #64	@ 0x40
 800f0b4:	d007      	beq.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800f0b6:	e01c      	b.n	800f0f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f0b8:	4b63      	ldr	r3, [pc, #396]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0bc:	4a62      	ldr	r2, [pc, #392]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f0c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f0c4:	e01c      	b.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0ca:	3308      	adds	r3, #8
 800f0cc:	2100      	movs	r1, #0
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f002 fab8 	bl	8011644 <RCCEx_PLL2_Config>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f0da:	e011      	b.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0e0:	3328      	adds	r3, #40	@ 0x28
 800f0e2:	2100      	movs	r1, #0
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f002 fb5f 	bl	80117a8 <RCCEx_PLL3_Config>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f0f0:	e006      	b.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f0f8:	e002      	b.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f0fa:	bf00      	nop
 800f0fc:	e000      	b.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f0fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f104:	2b00      	cmp	r3, #0
 800f106:	d10a      	bne.n	800f11e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f108:	4b4f      	ldr	r3, [pc, #316]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f10a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f10c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800f110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f116:	4a4c      	ldr	r2, [pc, #304]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f118:	430b      	orrs	r3, r1
 800f11a:	6513      	str	r3, [r2, #80]	@ 0x50
 800f11c:	e003      	b.n	800f126 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f11e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800f132:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800f136:	2300      	movs	r3, #0
 800f138:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800f13c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800f140:	460b      	mov	r3, r1
 800f142:	4313      	orrs	r3, r2
 800f144:	d053      	beq.n	800f1ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800f146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f14a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f14e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f152:	d035      	beq.n	800f1c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800f154:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f158:	d82e      	bhi.n	800f1b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f15a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f15e:	d031      	beq.n	800f1c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800f160:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f164:	d828      	bhi.n	800f1b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f166:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f16a:	d01a      	beq.n	800f1a2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800f16c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f170:	d822      	bhi.n	800f1b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f172:	2b00      	cmp	r3, #0
 800f174:	d003      	beq.n	800f17e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800f176:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f17a:	d007      	beq.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800f17c:	e01c      	b.n	800f1b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f17e:	4b32      	ldr	r3, [pc, #200]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f182:	4a31      	ldr	r2, [pc, #196]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f188:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f18a:	e01c      	b.n	800f1c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f190:	3308      	adds	r3, #8
 800f192:	2100      	movs	r1, #0
 800f194:	4618      	mov	r0, r3
 800f196:	f002 fa55 	bl	8011644 <RCCEx_PLL2_Config>
 800f19a:	4603      	mov	r3, r0
 800f19c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f1a0:	e011      	b.n	800f1c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1a6:	3328      	adds	r3, #40	@ 0x28
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f002 fafc 	bl	80117a8 <RCCEx_PLL3_Config>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f1b6:	e006      	b.n	800f1c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f1be:	e002      	b.n	800f1c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f1c0:	bf00      	nop
 800f1c2:	e000      	b.n	800f1c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f1c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d10b      	bne.n	800f1e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f1ce:	4b1e      	ldr	r3, [pc, #120]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f1d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1d2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800f1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f1de:	4a1a      	ldr	r2, [pc, #104]	@ (800f248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f1e0:	430b      	orrs	r3, r1
 800f1e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800f1e4:	e003      	b.n	800f1ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f1ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800f1fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800f1fe:	2300      	movs	r3, #0
 800f200:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800f204:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800f208:	460b      	mov	r3, r1
 800f20a:	4313      	orrs	r3, r2
 800f20c:	d056      	beq.n	800f2bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800f20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f212:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f216:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f21a:	d038      	beq.n	800f28e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800f21c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f220:	d831      	bhi.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f222:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f226:	d034      	beq.n	800f292 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800f228:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f22c:	d82b      	bhi.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f22e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f232:	d01d      	beq.n	800f270 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800f234:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f238:	d825      	bhi.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d006      	beq.n	800f24c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f23e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f242:	d00a      	beq.n	800f25a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f244:	e01f      	b.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f246:	bf00      	nop
 800f248:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f24c:	4ba2      	ldr	r3, [pc, #648]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f250:	4aa1      	ldr	r2, [pc, #644]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f258:	e01c      	b.n	800f294 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f25e:	3308      	adds	r3, #8
 800f260:	2100      	movs	r1, #0
 800f262:	4618      	mov	r0, r3
 800f264:	f002 f9ee 	bl	8011644 <RCCEx_PLL2_Config>
 800f268:	4603      	mov	r3, r0
 800f26a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f26e:	e011      	b.n	800f294 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f274:	3328      	adds	r3, #40	@ 0x28
 800f276:	2100      	movs	r1, #0
 800f278:	4618      	mov	r0, r3
 800f27a:	f002 fa95 	bl	80117a8 <RCCEx_PLL3_Config>
 800f27e:	4603      	mov	r3, r0
 800f280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f284:	e006      	b.n	800f294 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f286:	2301      	movs	r3, #1
 800f288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f28c:	e002      	b.n	800f294 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f28e:	bf00      	nop
 800f290:	e000      	b.n	800f294 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f292:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d10b      	bne.n	800f2b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f29c:	4b8e      	ldr	r3, [pc, #568]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f29e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2a0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800f2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f2ac:	4a8a      	ldr	r2, [pc, #552]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f2ae:	430b      	orrs	r3, r1
 800f2b0:	6593      	str	r3, [r2, #88]	@ 0x58
 800f2b2:	e003      	b.n	800f2bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f2b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800f2c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800f2d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800f2d6:	460b      	mov	r3, r1
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	d03a      	beq.n	800f352 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800f2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2e2:	2b30      	cmp	r3, #48	@ 0x30
 800f2e4:	d01f      	beq.n	800f326 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800f2e6:	2b30      	cmp	r3, #48	@ 0x30
 800f2e8:	d819      	bhi.n	800f31e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f2ea:	2b20      	cmp	r3, #32
 800f2ec:	d00c      	beq.n	800f308 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f2ee:	2b20      	cmp	r3, #32
 800f2f0:	d815      	bhi.n	800f31e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d019      	beq.n	800f32a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800f2f6:	2b10      	cmp	r3, #16
 800f2f8:	d111      	bne.n	800f31e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f2fa:	4b77      	ldr	r3, [pc, #476]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2fe:	4a76      	ldr	r2, [pc, #472]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f304:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f306:	e011      	b.n	800f32c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f30c:	3308      	adds	r3, #8
 800f30e:	2102      	movs	r1, #2
 800f310:	4618      	mov	r0, r3
 800f312:	f002 f997 	bl	8011644 <RCCEx_PLL2_Config>
 800f316:	4603      	mov	r3, r0
 800f318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f31c:	e006      	b.n	800f32c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f31e:	2301      	movs	r3, #1
 800f320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f324:	e002      	b.n	800f32c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f326:	bf00      	nop
 800f328:	e000      	b.n	800f32c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f32a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f32c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f330:	2b00      	cmp	r3, #0
 800f332:	d10a      	bne.n	800f34a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f334:	4b68      	ldr	r3, [pc, #416]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f338:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800f33c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f342:	4a65      	ldr	r2, [pc, #404]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f344:	430b      	orrs	r3, r1
 800f346:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f348:	e003      	b.n	800f352 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f34a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f34e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f35a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800f35e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800f362:	2300      	movs	r3, #0
 800f364:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800f368:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800f36c:	460b      	mov	r3, r1
 800f36e:	4313      	orrs	r3, r2
 800f370:	d051      	beq.n	800f416 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800f372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f378:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f37c:	d035      	beq.n	800f3ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800f37e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f382:	d82e      	bhi.n	800f3e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f384:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f388:	d031      	beq.n	800f3ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f38a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f38e:	d828      	bhi.n	800f3e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f394:	d01a      	beq.n	800f3cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800f396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f39a:	d822      	bhi.n	800f3e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d003      	beq.n	800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800f3a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3a4:	d007      	beq.n	800f3b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800f3a6:	e01c      	b.n	800f3e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3a8:	4b4b      	ldr	r3, [pc, #300]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ac:	4a4a      	ldr	r2, [pc, #296]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f3b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f3b4:	e01c      	b.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3ba:	3308      	adds	r3, #8
 800f3bc:	2100      	movs	r1, #0
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f002 f940 	bl	8011644 <RCCEx_PLL2_Config>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f3ca:	e011      	b.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f3cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3d0:	3328      	adds	r3, #40	@ 0x28
 800f3d2:	2100      	movs	r1, #0
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f002 f9e7 	bl	80117a8 <RCCEx_PLL3_Config>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f3e0:	e006      	b.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f3e8:	e002      	b.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f3ea:	bf00      	nop
 800f3ec:	e000      	b.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f3ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f3f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d10a      	bne.n	800f40e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f3f8:	4b37      	ldr	r3, [pc, #220]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800f400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f406:	4a34      	ldr	r2, [pc, #208]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f408:	430b      	orrs	r3, r1
 800f40a:	6513      	str	r3, [r2, #80]	@ 0x50
 800f40c:	e003      	b.n	800f416 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f40e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800f422:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f426:	2300      	movs	r3, #0
 800f428:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f42c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800f430:	460b      	mov	r3, r1
 800f432:	4313      	orrs	r3, r2
 800f434:	d056      	beq.n	800f4e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f43a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f43c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f440:	d033      	beq.n	800f4aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f442:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f446:	d82c      	bhi.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f448:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f44c:	d02f      	beq.n	800f4ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f44e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f452:	d826      	bhi.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f454:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f458:	d02b      	beq.n	800f4b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f45a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f45e:	d820      	bhi.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f460:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f464:	d012      	beq.n	800f48c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f466:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f46a:	d81a      	bhi.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d022      	beq.n	800f4b6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f474:	d115      	bne.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f47a:	3308      	adds	r3, #8
 800f47c:	2101      	movs	r1, #1
 800f47e:	4618      	mov	r0, r3
 800f480:	f002 f8e0 	bl	8011644 <RCCEx_PLL2_Config>
 800f484:	4603      	mov	r3, r0
 800f486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f48a:	e015      	b.n	800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f490:	3328      	adds	r3, #40	@ 0x28
 800f492:	2101      	movs	r1, #1
 800f494:	4618      	mov	r0, r3
 800f496:	f002 f987 	bl	80117a8 <RCCEx_PLL3_Config>
 800f49a:	4603      	mov	r3, r0
 800f49c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f4a0:	e00a      	b.n	800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f4a8:	e006      	b.n	800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f4aa:	bf00      	nop
 800f4ac:	e004      	b.n	800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f4ae:	bf00      	nop
 800f4b0:	e002      	b.n	800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f4b2:	bf00      	nop
 800f4b4:	e000      	b.n	800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f4b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f4b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d10d      	bne.n	800f4dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f4c0:	4b05      	ldr	r3, [pc, #20]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f4c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800f4c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4ce:	4a02      	ldr	r2, [pc, #8]	@ (800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f4d0:	430b      	orrs	r3, r1
 800f4d2:	6513      	str	r3, [r2, #80]	@ 0x50
 800f4d4:	e006      	b.n	800f4e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f4d6:	bf00      	nop
 800f4d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f4e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ec:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800f4f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f4fa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800f4fe:	460b      	mov	r3, r1
 800f500:	4313      	orrs	r3, r2
 800f502:	d055      	beq.n	800f5b0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f50c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f510:	d033      	beq.n	800f57a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f512:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f516:	d82c      	bhi.n	800f572 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f51c:	d02f      	beq.n	800f57e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f51e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f522:	d826      	bhi.n	800f572 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f524:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f528:	d02b      	beq.n	800f582 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f52a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f52e:	d820      	bhi.n	800f572 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f534:	d012      	beq.n	800f55c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800f536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f53a:	d81a      	bhi.n	800f572 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d022      	beq.n	800f586 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800f540:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f544:	d115      	bne.n	800f572 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f54a:	3308      	adds	r3, #8
 800f54c:	2101      	movs	r1, #1
 800f54e:	4618      	mov	r0, r3
 800f550:	f002 f878 	bl	8011644 <RCCEx_PLL2_Config>
 800f554:	4603      	mov	r3, r0
 800f556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f55a:	e015      	b.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f560:	3328      	adds	r3, #40	@ 0x28
 800f562:	2101      	movs	r1, #1
 800f564:	4618      	mov	r0, r3
 800f566:	f002 f91f 	bl	80117a8 <RCCEx_PLL3_Config>
 800f56a:	4603      	mov	r3, r0
 800f56c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f570:	e00a      	b.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f572:	2301      	movs	r3, #1
 800f574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f578:	e006      	b.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f57a:	bf00      	nop
 800f57c:	e004      	b.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f57e:	bf00      	nop
 800f580:	e002      	b.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f582:	bf00      	nop
 800f584:	e000      	b.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f586:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d10b      	bne.n	800f5a8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f590:	4ba3      	ldr	r3, [pc, #652]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f594:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800f598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f59c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f5a0:	4a9f      	ldr	r2, [pc, #636]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f5a2:	430b      	orrs	r3, r1
 800f5a4:	6593      	str	r3, [r2, #88]	@ 0x58
 800f5a6:	e003      	b.n	800f5b0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f5ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f5b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800f5bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f5c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800f5ca:	460b      	mov	r3, r1
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	d037      	beq.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f5d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5da:	d00e      	beq.n	800f5fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f5dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5e0:	d816      	bhi.n	800f610 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d018      	beq.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f5e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f5ea:	d111      	bne.n	800f610 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f5ec:	4b8c      	ldr	r3, [pc, #560]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5f0:	4a8b      	ldr	r2, [pc, #556]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f5f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f5f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f5f8:	e00f      	b.n	800f61a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5fe:	3308      	adds	r3, #8
 800f600:	2101      	movs	r1, #1
 800f602:	4618      	mov	r0, r3
 800f604:	f002 f81e 	bl	8011644 <RCCEx_PLL2_Config>
 800f608:	4603      	mov	r3, r0
 800f60a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f60e:	e004      	b.n	800f61a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f610:	2301      	movs	r3, #1
 800f612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f616:	e000      	b.n	800f61a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f61a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d10a      	bne.n	800f638 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f622:	4b7f      	ldr	r3, [pc, #508]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f626:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f62e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f630:	4a7b      	ldr	r2, [pc, #492]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f632:	430b      	orrs	r3, r1
 800f634:	6513      	str	r3, [r2, #80]	@ 0x50
 800f636:	e003      	b.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f63c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f648:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800f64c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f650:	2300      	movs	r3, #0
 800f652:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f656:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800f65a:	460b      	mov	r3, r1
 800f65c:	4313      	orrs	r3, r2
 800f65e:	d039      	beq.n	800f6d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f666:	2b03      	cmp	r3, #3
 800f668:	d81c      	bhi.n	800f6a4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f66a:	a201      	add	r2, pc, #4	@ (adr r2, 800f670 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f670:	0800f6ad 	.word	0x0800f6ad
 800f674:	0800f681 	.word	0x0800f681
 800f678:	0800f68f 	.word	0x0800f68f
 800f67c:	0800f6ad 	.word	0x0800f6ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f680:	4b67      	ldr	r3, [pc, #412]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f684:	4a66      	ldr	r2, [pc, #408]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f68a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f68c:	e00f      	b.n	800f6ae <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f692:	3308      	adds	r3, #8
 800f694:	2102      	movs	r1, #2
 800f696:	4618      	mov	r0, r3
 800f698:	f001 ffd4 	bl	8011644 <RCCEx_PLL2_Config>
 800f69c:	4603      	mov	r3, r0
 800f69e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f6a2:	e004      	b.n	800f6ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f6aa:	e000      	b.n	800f6ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f6ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f6ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d10a      	bne.n	800f6cc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f6b6:	4b5a      	ldr	r3, [pc, #360]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f6b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f6ba:	f023 0103 	bic.w	r1, r3, #3
 800f6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f6c4:	4a56      	ldr	r2, [pc, #344]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f6c6:	430b      	orrs	r3, r1
 800f6c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f6ca:	e003      	b.n	800f6d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f6d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800f6e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f6ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	f000 809f 	beq.w	800f834 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f6f6:	4b4b      	ldr	r3, [pc, #300]	@ (800f824 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4a4a      	ldr	r2, [pc, #296]	@ (800f824 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f6fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f700:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f702:	f7f5 ff79 	bl	80055f8 <HAL_GetTick>
 800f706:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f70a:	e00b      	b.n	800f724 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f70c:	f7f5 ff74 	bl	80055f8 <HAL_GetTick>
 800f710:	4602      	mov	r2, r0
 800f712:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800f716:	1ad3      	subs	r3, r2, r3
 800f718:	2b64      	cmp	r3, #100	@ 0x64
 800f71a:	d903      	bls.n	800f724 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f71c:	2303      	movs	r3, #3
 800f71e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f722:	e005      	b.n	800f730 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f724:	4b3f      	ldr	r3, [pc, #252]	@ (800f824 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d0ed      	beq.n	800f70c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f734:	2b00      	cmp	r3, #0
 800f736:	d179      	bne.n	800f82c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f738:	4b39      	ldr	r3, [pc, #228]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f73a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f740:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f744:	4053      	eors	r3, r2
 800f746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d015      	beq.n	800f77a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f74e:	4b34      	ldr	r3, [pc, #208]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f756:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f75a:	4b31      	ldr	r3, [pc, #196]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f75c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f75e:	4a30      	ldr	r2, [pc, #192]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f764:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f766:	4b2e      	ldr	r3, [pc, #184]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f76a:	4a2d      	ldr	r2, [pc, #180]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f76c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f770:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f772:	4a2b      	ldr	r2, [pc, #172]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f774:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800f778:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f77e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f786:	d118      	bne.n	800f7ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f788:	f7f5 ff36 	bl	80055f8 <HAL_GetTick>
 800f78c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f790:	e00d      	b.n	800f7ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f792:	f7f5 ff31 	bl	80055f8 <HAL_GetTick>
 800f796:	4602      	mov	r2, r0
 800f798:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800f79c:	1ad2      	subs	r2, r2, r3
 800f79e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d903      	bls.n	800f7ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f7a6:	2303      	movs	r3, #3
 800f7a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800f7ac:	e005      	b.n	800f7ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f7ae:	4b1c      	ldr	r3, [pc, #112]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7b2:	f003 0302 	and.w	r3, r3, #2
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d0eb      	beq.n	800f792 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f7ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d129      	bne.n	800f816 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f7c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f7ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f7ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f7d2:	d10e      	bne.n	800f7f2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f7d4:	4b12      	ldr	r3, [pc, #72]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7d6:	691b      	ldr	r3, [r3, #16]
 800f7d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800f7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f7e4:	091a      	lsrs	r2, r3, #4
 800f7e6:	4b10      	ldr	r3, [pc, #64]	@ (800f828 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f7e8:	4013      	ands	r3, r2
 800f7ea:	4a0d      	ldr	r2, [pc, #52]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7ec:	430b      	orrs	r3, r1
 800f7ee:	6113      	str	r3, [r2, #16]
 800f7f0:	e005      	b.n	800f7fe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f7f2:	4b0b      	ldr	r3, [pc, #44]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7f4:	691b      	ldr	r3, [r3, #16]
 800f7f6:	4a0a      	ldr	r2, [pc, #40]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f7fc:	6113      	str	r3, [r2, #16]
 800f7fe:	4b08      	ldr	r3, [pc, #32]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f800:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f806:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f80a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f80e:	4a04      	ldr	r2, [pc, #16]	@ (800f820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f810:	430b      	orrs	r3, r1
 800f812:	6713      	str	r3, [r2, #112]	@ 0x70
 800f814:	e00e      	b.n	800f834 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f81a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800f81e:	e009      	b.n	800f834 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f820:	58024400 	.word	0x58024400
 800f824:	58024800 	.word	0x58024800
 800f828:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f82c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83c:	f002 0301 	and.w	r3, r2, #1
 800f840:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f844:	2300      	movs	r3, #0
 800f846:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f84a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800f84e:	460b      	mov	r3, r1
 800f850:	4313      	orrs	r3, r2
 800f852:	f000 8089 	beq.w	800f968 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f85a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f85c:	2b28      	cmp	r3, #40	@ 0x28
 800f85e:	d86b      	bhi.n	800f938 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f860:	a201      	add	r2, pc, #4	@ (adr r2, 800f868 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f866:	bf00      	nop
 800f868:	0800f941 	.word	0x0800f941
 800f86c:	0800f939 	.word	0x0800f939
 800f870:	0800f939 	.word	0x0800f939
 800f874:	0800f939 	.word	0x0800f939
 800f878:	0800f939 	.word	0x0800f939
 800f87c:	0800f939 	.word	0x0800f939
 800f880:	0800f939 	.word	0x0800f939
 800f884:	0800f939 	.word	0x0800f939
 800f888:	0800f90d 	.word	0x0800f90d
 800f88c:	0800f939 	.word	0x0800f939
 800f890:	0800f939 	.word	0x0800f939
 800f894:	0800f939 	.word	0x0800f939
 800f898:	0800f939 	.word	0x0800f939
 800f89c:	0800f939 	.word	0x0800f939
 800f8a0:	0800f939 	.word	0x0800f939
 800f8a4:	0800f939 	.word	0x0800f939
 800f8a8:	0800f923 	.word	0x0800f923
 800f8ac:	0800f939 	.word	0x0800f939
 800f8b0:	0800f939 	.word	0x0800f939
 800f8b4:	0800f939 	.word	0x0800f939
 800f8b8:	0800f939 	.word	0x0800f939
 800f8bc:	0800f939 	.word	0x0800f939
 800f8c0:	0800f939 	.word	0x0800f939
 800f8c4:	0800f939 	.word	0x0800f939
 800f8c8:	0800f941 	.word	0x0800f941
 800f8cc:	0800f939 	.word	0x0800f939
 800f8d0:	0800f939 	.word	0x0800f939
 800f8d4:	0800f939 	.word	0x0800f939
 800f8d8:	0800f939 	.word	0x0800f939
 800f8dc:	0800f939 	.word	0x0800f939
 800f8e0:	0800f939 	.word	0x0800f939
 800f8e4:	0800f939 	.word	0x0800f939
 800f8e8:	0800f941 	.word	0x0800f941
 800f8ec:	0800f939 	.word	0x0800f939
 800f8f0:	0800f939 	.word	0x0800f939
 800f8f4:	0800f939 	.word	0x0800f939
 800f8f8:	0800f939 	.word	0x0800f939
 800f8fc:	0800f939 	.word	0x0800f939
 800f900:	0800f939 	.word	0x0800f939
 800f904:	0800f939 	.word	0x0800f939
 800f908:	0800f941 	.word	0x0800f941
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f910:	3308      	adds	r3, #8
 800f912:	2101      	movs	r1, #1
 800f914:	4618      	mov	r0, r3
 800f916:	f001 fe95 	bl	8011644 <RCCEx_PLL2_Config>
 800f91a:	4603      	mov	r3, r0
 800f91c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f920:	e00f      	b.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f926:	3328      	adds	r3, #40	@ 0x28
 800f928:	2101      	movs	r1, #1
 800f92a:	4618      	mov	r0, r3
 800f92c:	f001 ff3c 	bl	80117a8 <RCCEx_PLL3_Config>
 800f930:	4603      	mov	r3, r0
 800f932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f936:	e004      	b.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f938:	2301      	movs	r3, #1
 800f93a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f93e:	e000      	b.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f940:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f946:	2b00      	cmp	r3, #0
 800f948:	d10a      	bne.n	800f960 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f94a:	4bbf      	ldr	r3, [pc, #764]	@ (800fc48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f94c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f94e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800f952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f958:	4abb      	ldr	r2, [pc, #748]	@ (800fc48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f95a:	430b      	orrs	r3, r1
 800f95c:	6553      	str	r3, [r2, #84]	@ 0x54
 800f95e:	e003      	b.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f964:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f970:	f002 0302 	and.w	r3, r2, #2
 800f974:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f978:	2300      	movs	r3, #0
 800f97a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f97e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800f982:	460b      	mov	r3, r1
 800f984:	4313      	orrs	r3, r2
 800f986:	d041      	beq.n	800fa0c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f98c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f98e:	2b05      	cmp	r3, #5
 800f990:	d824      	bhi.n	800f9dc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f992:	a201      	add	r2, pc, #4	@ (adr r2, 800f998 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f998:	0800f9e5 	.word	0x0800f9e5
 800f99c:	0800f9b1 	.word	0x0800f9b1
 800f9a0:	0800f9c7 	.word	0x0800f9c7
 800f9a4:	0800f9e5 	.word	0x0800f9e5
 800f9a8:	0800f9e5 	.word	0x0800f9e5
 800f9ac:	0800f9e5 	.word	0x0800f9e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9b4:	3308      	adds	r3, #8
 800f9b6:	2101      	movs	r1, #1
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f001 fe43 	bl	8011644 <RCCEx_PLL2_Config>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f9c4:	e00f      	b.n	800f9e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9ca:	3328      	adds	r3, #40	@ 0x28
 800f9cc:	2101      	movs	r1, #1
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f001 feea 	bl	80117a8 <RCCEx_PLL3_Config>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f9da:	e004      	b.n	800f9e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f9dc:	2301      	movs	r3, #1
 800f9de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f9e2:	e000      	b.n	800f9e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f9e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f9e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d10a      	bne.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f9ee:	4b96      	ldr	r3, [pc, #600]	@ (800fc48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f9f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9f2:	f023 0107 	bic.w	r1, r3, #7
 800f9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f9fc:	4a92      	ldr	r2, [pc, #584]	@ (800fc48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f9fe:	430b      	orrs	r3, r1
 800fa00:	6553      	str	r3, [r2, #84]	@ 0x54
 800fa02:	e003      	b.n	800fa0c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fa0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa14:	f002 0304 	and.w	r3, r2, #4
 800fa18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fa22:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800fa26:	460b      	mov	r3, r1
 800fa28:	4313      	orrs	r3, r2
 800fa2a:	d044      	beq.n	800fab6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800fa2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa34:	2b05      	cmp	r3, #5
 800fa36:	d825      	bhi.n	800fa84 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800fa38:	a201      	add	r2, pc, #4	@ (adr r2, 800fa40 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800fa3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa3e:	bf00      	nop
 800fa40:	0800fa8d 	.word	0x0800fa8d
 800fa44:	0800fa59 	.word	0x0800fa59
 800fa48:	0800fa6f 	.word	0x0800fa6f
 800fa4c:	0800fa8d 	.word	0x0800fa8d
 800fa50:	0800fa8d 	.word	0x0800fa8d
 800fa54:	0800fa8d 	.word	0x0800fa8d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fa58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa5c:	3308      	adds	r3, #8
 800fa5e:	2101      	movs	r1, #1
 800fa60:	4618      	mov	r0, r3
 800fa62:	f001 fdef 	bl	8011644 <RCCEx_PLL2_Config>
 800fa66:	4603      	mov	r3, r0
 800fa68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fa6c:	e00f      	b.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fa6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa72:	3328      	adds	r3, #40	@ 0x28
 800fa74:	2101      	movs	r1, #1
 800fa76:	4618      	mov	r0, r3
 800fa78:	f001 fe96 	bl	80117a8 <RCCEx_PLL3_Config>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fa82:	e004      	b.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa84:	2301      	movs	r3, #1
 800fa86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fa8a:	e000      	b.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800fa8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d10b      	bne.n	800faae <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fa96:	4b6c      	ldr	r3, [pc, #432]	@ (800fc48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fa98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa9a:	f023 0107 	bic.w	r1, r3, #7
 800fa9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800faa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800faa6:	4a68      	ldr	r2, [pc, #416]	@ (800fc48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800faa8:	430b      	orrs	r3, r1
 800faaa:	6593      	str	r3, [r2, #88]	@ 0x58
 800faac:	e003      	b.n	800fab6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800faae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800faba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabe:	f002 0320 	and.w	r3, r2, #32
 800fac2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800fac6:	2300      	movs	r3, #0
 800fac8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800facc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800fad0:	460b      	mov	r3, r1
 800fad2:	4313      	orrs	r3, r2
 800fad4:	d055      	beq.n	800fb82 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800fad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fade:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fae2:	d033      	beq.n	800fb4c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800fae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fae8:	d82c      	bhi.n	800fb44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800faea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800faee:	d02f      	beq.n	800fb50 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800faf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800faf4:	d826      	bhi.n	800fb44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800faf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fafa:	d02b      	beq.n	800fb54 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800fafc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fb00:	d820      	bhi.n	800fb44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fb02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb06:	d012      	beq.n	800fb2e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800fb08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb0c:	d81a      	bhi.n	800fb44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d022      	beq.n	800fb58 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800fb12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fb16:	d115      	bne.n	800fb44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fb18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb1c:	3308      	adds	r3, #8
 800fb1e:	2100      	movs	r1, #0
 800fb20:	4618      	mov	r0, r3
 800fb22:	f001 fd8f 	bl	8011644 <RCCEx_PLL2_Config>
 800fb26:	4603      	mov	r3, r0
 800fb28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fb2c:	e015      	b.n	800fb5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fb2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb32:	3328      	adds	r3, #40	@ 0x28
 800fb34:	2102      	movs	r1, #2
 800fb36:	4618      	mov	r0, r3
 800fb38:	f001 fe36 	bl	80117a8 <RCCEx_PLL3_Config>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fb42:	e00a      	b.n	800fb5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb44:	2301      	movs	r3, #1
 800fb46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fb4a:	e006      	b.n	800fb5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fb4c:	bf00      	nop
 800fb4e:	e004      	b.n	800fb5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fb50:	bf00      	nop
 800fb52:	e002      	b.n	800fb5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fb54:	bf00      	nop
 800fb56:	e000      	b.n	800fb5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fb58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d10b      	bne.n	800fb7a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fb62:	4b39      	ldr	r3, [pc, #228]	@ (800fc48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb66:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800fb6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb72:	4a35      	ldr	r2, [pc, #212]	@ (800fc48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb74:	430b      	orrs	r3, r1
 800fb76:	6553      	str	r3, [r2, #84]	@ 0x54
 800fb78:	e003      	b.n	800fb82 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fb7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb8a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800fb8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800fb92:	2300      	movs	r3, #0
 800fb94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800fb98:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	4313      	orrs	r3, r2
 800fba0:	d058      	beq.n	800fc54 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800fba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fbaa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800fbae:	d033      	beq.n	800fc18 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800fbb0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800fbb4:	d82c      	bhi.n	800fc10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fbb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fbba:	d02f      	beq.n	800fc1c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800fbbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fbc0:	d826      	bhi.n	800fc10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fbc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fbc6:	d02b      	beq.n	800fc20 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800fbc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fbcc:	d820      	bhi.n	800fc10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fbce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fbd2:	d012      	beq.n	800fbfa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800fbd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fbd8:	d81a      	bhi.n	800fc10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d022      	beq.n	800fc24 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800fbde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fbe2:	d115      	bne.n	800fc10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fbe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbe8:	3308      	adds	r3, #8
 800fbea:	2100      	movs	r1, #0
 800fbec:	4618      	mov	r0, r3
 800fbee:	f001 fd29 	bl	8011644 <RCCEx_PLL2_Config>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fbf8:	e015      	b.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbfe:	3328      	adds	r3, #40	@ 0x28
 800fc00:	2102      	movs	r1, #2
 800fc02:	4618      	mov	r0, r3
 800fc04:	f001 fdd0 	bl	80117a8 <RCCEx_PLL3_Config>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fc0e:	e00a      	b.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fc10:	2301      	movs	r3, #1
 800fc12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fc16:	e006      	b.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fc18:	bf00      	nop
 800fc1a:	e004      	b.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fc1c:	bf00      	nop
 800fc1e:	e002      	b.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fc20:	bf00      	nop
 800fc22:	e000      	b.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fc24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d10e      	bne.n	800fc4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fc2e:	4b06      	ldr	r3, [pc, #24]	@ (800fc48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fc30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc32:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800fc36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fc3e:	4a02      	ldr	r2, [pc, #8]	@ (800fc48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fc40:	430b      	orrs	r3, r1
 800fc42:	6593      	str	r3, [r2, #88]	@ 0x58
 800fc44:	e006      	b.n	800fc54 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800fc46:	bf00      	nop
 800fc48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800fc54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800fc60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fc64:	2300      	movs	r3, #0
 800fc66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fc6a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800fc6e:	460b      	mov	r3, r1
 800fc70:	4313      	orrs	r3, r2
 800fc72:	d055      	beq.n	800fd20 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800fc74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fc7c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800fc80:	d033      	beq.n	800fcea <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800fc82:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800fc86:	d82c      	bhi.n	800fce2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fc88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc8c:	d02f      	beq.n	800fcee <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800fc8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc92:	d826      	bhi.n	800fce2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fc94:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800fc98:	d02b      	beq.n	800fcf2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800fc9a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800fc9e:	d820      	bhi.n	800fce2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fca0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fca4:	d012      	beq.n	800fccc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800fca6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fcaa:	d81a      	bhi.n	800fce2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d022      	beq.n	800fcf6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800fcb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fcb4:	d115      	bne.n	800fce2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fcb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fcba:	3308      	adds	r3, #8
 800fcbc:	2100      	movs	r1, #0
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f001 fcc0 	bl	8011644 <RCCEx_PLL2_Config>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fcca:	e015      	b.n	800fcf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fcd0:	3328      	adds	r3, #40	@ 0x28
 800fcd2:	2102      	movs	r1, #2
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f001 fd67 	bl	80117a8 <RCCEx_PLL3_Config>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fce0:	e00a      	b.n	800fcf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fce2:	2301      	movs	r3, #1
 800fce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fce8:	e006      	b.n	800fcf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fcea:	bf00      	nop
 800fcec:	e004      	b.n	800fcf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fcee:	bf00      	nop
 800fcf0:	e002      	b.n	800fcf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fcf2:	bf00      	nop
 800fcf4:	e000      	b.n	800fcf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fcf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fcf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d10b      	bne.n	800fd18 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fd00:	4ba1      	ldr	r3, [pc, #644]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fd02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fd04:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800fd08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd10:	4a9d      	ldr	r2, [pc, #628]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fd12:	430b      	orrs	r3, r1
 800fd14:	6593      	str	r3, [r2, #88]	@ 0x58
 800fd16:	e003      	b.n	800fd20 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fd1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fd20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd28:	f002 0308 	and.w	r3, r2, #8
 800fd2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fd30:	2300      	movs	r3, #0
 800fd32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fd36:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	d01e      	beq.n	800fd7e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800fd40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fd48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd4c:	d10c      	bne.n	800fd68 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd52:	3328      	adds	r3, #40	@ 0x28
 800fd54:	2102      	movs	r1, #2
 800fd56:	4618      	mov	r0, r3
 800fd58:	f001 fd26 	bl	80117a8 <RCCEx_PLL3_Config>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d002      	beq.n	800fd68 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800fd62:	2301      	movs	r3, #1
 800fd64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fd68:	4b87      	ldr	r3, [pc, #540]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fd6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd6c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fd70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fd78:	4a83      	ldr	r2, [pc, #524]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fd7a:	430b      	orrs	r3, r1
 800fd7c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fd7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd86:	f002 0310 	and.w	r3, r2, #16
 800fd8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800fd8e:	2300      	movs	r3, #0
 800fd90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800fd94:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800fd98:	460b      	mov	r3, r1
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	d01e      	beq.n	800fddc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800fd9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fda2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800fda6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fdaa:	d10c      	bne.n	800fdc6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fdac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fdb0:	3328      	adds	r3, #40	@ 0x28
 800fdb2:	2102      	movs	r1, #2
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f001 fcf7 	bl	80117a8 <RCCEx_PLL3_Config>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d002      	beq.n	800fdc6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fdc6:	4b70      	ldr	r3, [pc, #448]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fdc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fdca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800fdce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fdd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800fdd6:	4a6c      	ldr	r2, [pc, #432]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fdd8:	430b      	orrs	r3, r1
 800fdda:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800fde8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fdec:	2300      	movs	r3, #0
 800fdee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fdf2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800fdf6:	460b      	mov	r3, r1
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	d03e      	beq.n	800fe7a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800fdfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fe04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe08:	d022      	beq.n	800fe50 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800fe0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe0e:	d81b      	bhi.n	800fe48 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d003      	beq.n	800fe1c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800fe14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe18:	d00b      	beq.n	800fe32 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800fe1a:	e015      	b.n	800fe48 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fe1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe20:	3308      	adds	r3, #8
 800fe22:	2100      	movs	r1, #0
 800fe24:	4618      	mov	r0, r3
 800fe26:	f001 fc0d 	bl	8011644 <RCCEx_PLL2_Config>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fe30:	e00f      	b.n	800fe52 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fe32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe36:	3328      	adds	r3, #40	@ 0x28
 800fe38:	2102      	movs	r1, #2
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f001 fcb4 	bl	80117a8 <RCCEx_PLL3_Config>
 800fe40:	4603      	mov	r3, r0
 800fe42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fe46:	e004      	b.n	800fe52 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fe48:	2301      	movs	r3, #1
 800fe4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fe4e:	e000      	b.n	800fe52 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800fe50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d10b      	bne.n	800fe72 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fe5a:	4b4b      	ldr	r3, [pc, #300]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe5e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800fe62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fe6a:	4a47      	ldr	r2, [pc, #284]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe6c:	430b      	orrs	r3, r1
 800fe6e:	6593      	str	r3, [r2, #88]	@ 0x58
 800fe70:	e003      	b.n	800fe7a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fe76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fe7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe82:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800fe86:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fe88:	2300      	movs	r3, #0
 800fe8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fe8c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800fe90:	460b      	mov	r3, r1
 800fe92:	4313      	orrs	r3, r2
 800fe94:	d03b      	beq.n	800ff0e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800fe96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fea2:	d01f      	beq.n	800fee4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800fea4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fea8:	d818      	bhi.n	800fedc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800feaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800feae:	d003      	beq.n	800feb8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800feb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800feb4:	d007      	beq.n	800fec6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800feb6:	e011      	b.n	800fedc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800feb8:	4b33      	ldr	r3, [pc, #204]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800feba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800febc:	4a32      	ldr	r2, [pc, #200]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800febe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fec2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800fec4:	e00f      	b.n	800fee6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800feca:	3328      	adds	r3, #40	@ 0x28
 800fecc:	2101      	movs	r1, #1
 800fece:	4618      	mov	r0, r3
 800fed0:	f001 fc6a 	bl	80117a8 <RCCEx_PLL3_Config>
 800fed4:	4603      	mov	r3, r0
 800fed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800feda:	e004      	b.n	800fee6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fedc:	2301      	movs	r3, #1
 800fede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fee2:	e000      	b.n	800fee6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800fee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800feea:	2b00      	cmp	r3, #0
 800feec:	d10b      	bne.n	800ff06 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800feee:	4b26      	ldr	r3, [pc, #152]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fef2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800fef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fefa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fefe:	4a22      	ldr	r2, [pc, #136]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff00:	430b      	orrs	r3, r1
 800ff02:	6553      	str	r3, [r2, #84]	@ 0x54
 800ff04:	e003      	b.n	800ff0e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ff0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ff0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff16:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ff1a:	673b      	str	r3, [r7, #112]	@ 0x70
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	677b      	str	r3, [r7, #116]	@ 0x74
 800ff20:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ff24:	460b      	mov	r3, r1
 800ff26:	4313      	orrs	r3, r2
 800ff28:	d034      	beq.n	800ff94 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ff2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d003      	beq.n	800ff3c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ff34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff38:	d007      	beq.n	800ff4a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ff3a:	e011      	b.n	800ff60 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ff3c:	4b12      	ldr	r3, [pc, #72]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff40:	4a11      	ldr	r2, [pc, #68]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ff46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ff48:	e00e      	b.n	800ff68 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ff4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff4e:	3308      	adds	r3, #8
 800ff50:	2102      	movs	r1, #2
 800ff52:	4618      	mov	r0, r3
 800ff54:	f001 fb76 	bl	8011644 <RCCEx_PLL2_Config>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ff5e:	e003      	b.n	800ff68 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ff60:	2301      	movs	r3, #1
 800ff62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ff66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ff68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d10d      	bne.n	800ff8c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ff70:	4b05      	ldr	r3, [pc, #20]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff74:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ff78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff7e:	4a02      	ldr	r2, [pc, #8]	@ (800ff88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff80:	430b      	orrs	r3, r1
 800ff82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ff84:	e006      	b.n	800ff94 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ff86:	bf00      	nop
 800ff88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ff90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ff94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ffa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ffa6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ffaa:	460b      	mov	r3, r1
 800ffac:	4313      	orrs	r3, r2
 800ffae:	d00c      	beq.n	800ffca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ffb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ffb4:	3328      	adds	r3, #40	@ 0x28
 800ffb6:	2102      	movs	r1, #2
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f001 fbf5 	bl	80117a8 <RCCEx_PLL3_Config>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d002      	beq.n	800ffca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ffca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ffce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ffd6:	663b      	str	r3, [r7, #96]	@ 0x60
 800ffd8:	2300      	movs	r3, #0
 800ffda:	667b      	str	r3, [r7, #100]	@ 0x64
 800ffdc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	4313      	orrs	r3, r2
 800ffe4:	d038      	beq.n	8010058 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ffe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ffea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fff2:	d018      	beq.n	8010026 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800fff4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fff8:	d811      	bhi.n	801001e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fffe:	d014      	beq.n	801002a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8010000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010004:	d80b      	bhi.n	801001e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8010006:	2b00      	cmp	r3, #0
 8010008:	d011      	beq.n	801002e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801000a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801000e:	d106      	bne.n	801001e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010010:	4bc3      	ldr	r3, [pc, #780]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010014:	4ac2      	ldr	r2, [pc, #776]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801001a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801001c:	e008      	b.n	8010030 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801001e:	2301      	movs	r3, #1
 8010020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010024:	e004      	b.n	8010030 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010026:	bf00      	nop
 8010028:	e002      	b.n	8010030 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801002a:	bf00      	nop
 801002c:	e000      	b.n	8010030 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801002e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010034:	2b00      	cmp	r3, #0
 8010036:	d10b      	bne.n	8010050 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010038:	4bb9      	ldr	r3, [pc, #740]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801003a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801003c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8010040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010048:	4ab5      	ldr	r2, [pc, #724]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801004a:	430b      	orrs	r3, r1
 801004c:	6553      	str	r3, [r2, #84]	@ 0x54
 801004e:	e003      	b.n	8010058 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801005c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010060:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8010064:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010066:	2300      	movs	r3, #0
 8010068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801006a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801006e:	460b      	mov	r3, r1
 8010070:	4313      	orrs	r3, r2
 8010072:	d009      	beq.n	8010088 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010074:	4baa      	ldr	r3, [pc, #680]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010078:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801007c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010082:	4aa7      	ldr	r2, [pc, #668]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010084:	430b      	orrs	r3, r1
 8010086:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801008c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010090:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8010094:	653b      	str	r3, [r7, #80]	@ 0x50
 8010096:	2300      	movs	r3, #0
 8010098:	657b      	str	r3, [r7, #84]	@ 0x54
 801009a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801009e:	460b      	mov	r3, r1
 80100a0:	4313      	orrs	r3, r2
 80100a2:	d00a      	beq.n	80100ba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80100a4:	4b9e      	ldr	r3, [pc, #632]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100a6:	691b      	ldr	r3, [r3, #16]
 80100a8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80100ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80100b4:	4a9a      	ldr	r2, [pc, #616]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100b6:	430b      	orrs	r3, r1
 80100b8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80100ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80100c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80100c8:	2300      	movs	r3, #0
 80100ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80100cc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80100d0:	460b      	mov	r3, r1
 80100d2:	4313      	orrs	r3, r2
 80100d4:	d009      	beq.n	80100ea <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80100d6:	4b92      	ldr	r3, [pc, #584]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100da:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80100de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100e4:	4a8e      	ldr	r2, [pc, #568]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100e6:	430b      	orrs	r3, r1
 80100e8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80100ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80100f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80100f8:	2300      	movs	r3, #0
 80100fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80100fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8010100:	460b      	mov	r3, r1
 8010102:	4313      	orrs	r3, r2
 8010104:	d00e      	beq.n	8010124 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010106:	4b86      	ldr	r3, [pc, #536]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010108:	691b      	ldr	r3, [r3, #16]
 801010a:	4a85      	ldr	r2, [pc, #532]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801010c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010110:	6113      	str	r3, [r2, #16]
 8010112:	4b83      	ldr	r3, [pc, #524]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010114:	6919      	ldr	r1, [r3, #16]
 8010116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801011a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801011e:	4a80      	ldr	r2, [pc, #512]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010120:	430b      	orrs	r3, r1
 8010122:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8010124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8010130:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010132:	2300      	movs	r3, #0
 8010134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010136:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801013a:	460b      	mov	r3, r1
 801013c:	4313      	orrs	r3, r2
 801013e:	d009      	beq.n	8010154 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010140:	4b77      	ldr	r3, [pc, #476]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010144:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8010148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801014c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801014e:	4a74      	ldr	r2, [pc, #464]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010150:	430b      	orrs	r3, r1
 8010152:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8010160:	633b      	str	r3, [r7, #48]	@ 0x30
 8010162:	2300      	movs	r3, #0
 8010164:	637b      	str	r3, [r7, #52]	@ 0x34
 8010166:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801016a:	460b      	mov	r3, r1
 801016c:	4313      	orrs	r3, r2
 801016e:	d00a      	beq.n	8010186 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010170:	4b6b      	ldr	r3, [pc, #428]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010174:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8010178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801017c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010180:	4a67      	ldr	r2, [pc, #412]	@ (8010320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010182:	430b      	orrs	r3, r1
 8010184:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8010186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801018a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018e:	2100      	movs	r1, #0
 8010190:	62b9      	str	r1, [r7, #40]	@ 0x28
 8010192:	f003 0301 	and.w	r3, r3, #1
 8010196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010198:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801019c:	460b      	mov	r3, r1
 801019e:	4313      	orrs	r3, r2
 80101a0:	d011      	beq.n	80101c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80101a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80101a6:	3308      	adds	r3, #8
 80101a8:	2100      	movs	r1, #0
 80101aa:	4618      	mov	r0, r3
 80101ac:	f001 fa4a 	bl	8011644 <RCCEx_PLL2_Config>
 80101b0:	4603      	mov	r3, r0
 80101b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80101b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d003      	beq.n	80101c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80101c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80101c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80101ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ce:	2100      	movs	r1, #0
 80101d0:	6239      	str	r1, [r7, #32]
 80101d2:	f003 0302 	and.w	r3, r3, #2
 80101d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80101d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80101dc:	460b      	mov	r3, r1
 80101de:	4313      	orrs	r3, r2
 80101e0:	d011      	beq.n	8010206 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80101e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80101e6:	3308      	adds	r3, #8
 80101e8:	2101      	movs	r1, #1
 80101ea:	4618      	mov	r0, r3
 80101ec:	f001 fa2a 	bl	8011644 <RCCEx_PLL2_Config>
 80101f0:	4603      	mov	r3, r0
 80101f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80101f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d003      	beq.n	8010206 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8010206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801020a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020e:	2100      	movs	r1, #0
 8010210:	61b9      	str	r1, [r7, #24]
 8010212:	f003 0304 	and.w	r3, r3, #4
 8010216:	61fb      	str	r3, [r7, #28]
 8010218:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801021c:	460b      	mov	r3, r1
 801021e:	4313      	orrs	r3, r2
 8010220:	d011      	beq.n	8010246 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010226:	3308      	adds	r3, #8
 8010228:	2102      	movs	r1, #2
 801022a:	4618      	mov	r0, r3
 801022c:	f001 fa0a 	bl	8011644 <RCCEx_PLL2_Config>
 8010230:	4603      	mov	r3, r0
 8010232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8010236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801023a:	2b00      	cmp	r3, #0
 801023c:	d003      	beq.n	8010246 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801023e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010242:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8010246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801024a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024e:	2100      	movs	r1, #0
 8010250:	6139      	str	r1, [r7, #16]
 8010252:	f003 0308 	and.w	r3, r3, #8
 8010256:	617b      	str	r3, [r7, #20]
 8010258:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801025c:	460b      	mov	r3, r1
 801025e:	4313      	orrs	r3, r2
 8010260:	d011      	beq.n	8010286 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010266:	3328      	adds	r3, #40	@ 0x28
 8010268:	2100      	movs	r1, #0
 801026a:	4618      	mov	r0, r3
 801026c:	f001 fa9c 	bl	80117a8 <RCCEx_PLL3_Config>
 8010270:	4603      	mov	r3, r0
 8010272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8010276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801027a:	2b00      	cmp	r3, #0
 801027c:	d003      	beq.n	8010286 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801027e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010282:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8010286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801028a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028e:	2100      	movs	r1, #0
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	f003 0310 	and.w	r3, r3, #16
 8010296:	60fb      	str	r3, [r7, #12]
 8010298:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801029c:	460b      	mov	r3, r1
 801029e:	4313      	orrs	r3, r2
 80102a0:	d011      	beq.n	80102c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80102a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80102a6:	3328      	adds	r3, #40	@ 0x28
 80102a8:	2101      	movs	r1, #1
 80102aa:	4618      	mov	r0, r3
 80102ac:	f001 fa7c 	bl	80117a8 <RCCEx_PLL3_Config>
 80102b0:	4603      	mov	r3, r0
 80102b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80102b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d003      	beq.n	80102c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80102c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80102c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80102ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ce:	2100      	movs	r1, #0
 80102d0:	6039      	str	r1, [r7, #0]
 80102d2:	f003 0320 	and.w	r3, r3, #32
 80102d6:	607b      	str	r3, [r7, #4]
 80102d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80102dc:	460b      	mov	r3, r1
 80102de:	4313      	orrs	r3, r2
 80102e0:	d011      	beq.n	8010306 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80102e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80102e6:	3328      	adds	r3, #40	@ 0x28
 80102e8:	2102      	movs	r1, #2
 80102ea:	4618      	mov	r0, r3
 80102ec:	f001 fa5c 	bl	80117a8 <RCCEx_PLL3_Config>
 80102f0:	4603      	mov	r3, r0
 80102f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80102f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d003      	beq.n	8010306 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8010306:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801030a:	2b00      	cmp	r3, #0
 801030c:	d101      	bne.n	8010312 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801030e:	2300      	movs	r3, #0
 8010310:	e000      	b.n	8010314 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8010312:	2301      	movs	r3, #1
}
 8010314:	4618      	mov	r0, r3
 8010316:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801031a:	46bd      	mov	sp, r7
 801031c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010320:	58024400 	.word	0x58024400

08010324 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b090      	sub	sp, #64	@ 0x40
 8010328:	af00      	add	r7, sp, #0
 801032a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801032e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010332:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8010336:	430b      	orrs	r3, r1
 8010338:	f040 8094 	bne.w	8010464 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801033c:	4b9e      	ldr	r3, [pc, #632]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801033e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010340:	f003 0307 	and.w	r3, r3, #7
 8010344:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010348:	2b04      	cmp	r3, #4
 801034a:	f200 8087 	bhi.w	801045c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801034e:	a201      	add	r2, pc, #4	@ (adr r2, 8010354 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8010350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010354:	08010369 	.word	0x08010369
 8010358:	08010391 	.word	0x08010391
 801035c:	080103b9 	.word	0x080103b9
 8010360:	08010455 	.word	0x08010455
 8010364:	080103e1 	.word	0x080103e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010368:	4b93      	ldr	r3, [pc, #588]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010370:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010374:	d108      	bne.n	8010388 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801037a:	4618      	mov	r0, r3
 801037c:	f001 f810 	bl	80113a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010384:	f000 bd45 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010388:	2300      	movs	r3, #0
 801038a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801038c:	f000 bd41 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010390:	4b89      	ldr	r3, [pc, #548]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010398:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801039c:	d108      	bne.n	80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801039e:	f107 0318 	add.w	r3, r7, #24
 80103a2:	4618      	mov	r0, r3
 80103a4:	f000 fd54 	bl	8010e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80103a8:	69bb      	ldr	r3, [r7, #24]
 80103aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103ac:	f000 bd31 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103b0:	2300      	movs	r3, #0
 80103b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103b4:	f000 bd2d 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80103b8:	4b7f      	ldr	r3, [pc, #508]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80103c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80103c4:	d108      	bne.n	80103d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103c6:	f107 030c 	add.w	r3, r7, #12
 80103ca:	4618      	mov	r0, r3
 80103cc:	f000 fe94 	bl	80110f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103d4:	f000 bd1d 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103d8:	2300      	movs	r3, #0
 80103da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103dc:	f000 bd19 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80103e0:	4b75      	ldr	r3, [pc, #468]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80103e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80103e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80103e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80103ea:	4b73      	ldr	r3, [pc, #460]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	f003 0304 	and.w	r3, r3, #4
 80103f2:	2b04      	cmp	r3, #4
 80103f4:	d10c      	bne.n	8010410 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80103f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d109      	bne.n	8010410 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103fc:	4b6e      	ldr	r3, [pc, #440]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	08db      	lsrs	r3, r3, #3
 8010402:	f003 0303 	and.w	r3, r3, #3
 8010406:	4a6d      	ldr	r2, [pc, #436]	@ (80105bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010408:	fa22 f303 	lsr.w	r3, r2, r3
 801040c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801040e:	e01f      	b.n	8010450 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010410:	4b69      	ldr	r3, [pc, #420]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801041c:	d106      	bne.n	801042c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801041e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010424:	d102      	bne.n	801042c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010426:	4b66      	ldr	r3, [pc, #408]	@ (80105c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801042a:	e011      	b.n	8010450 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801042c:	4b62      	ldr	r3, [pc, #392]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010434:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010438:	d106      	bne.n	8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801043a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801043c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010440:	d102      	bne.n	8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010442:	4b60      	ldr	r3, [pc, #384]	@ (80105c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010446:	e003      	b.n	8010450 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010448:	2300      	movs	r3, #0
 801044a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801044c:	f000 bce1 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010450:	f000 bcdf 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010454:	4b5c      	ldr	r3, [pc, #368]	@ (80105c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010458:	f000 bcdb 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801045c:	2300      	movs	r3, #0
 801045e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010460:	f000 bcd7 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8010464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010468:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 801046c:	430b      	orrs	r3, r1
 801046e:	f040 80ad 	bne.w	80105cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8010472:	4b51      	ldr	r3, [pc, #324]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010476:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 801047a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801047c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801047e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010482:	d056      	beq.n	8010532 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8010484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801048a:	f200 8090 	bhi.w	80105ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801048e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010490:	2bc0      	cmp	r3, #192	@ 0xc0
 8010492:	f000 8088 	beq.w	80105a6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8010496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010498:	2bc0      	cmp	r3, #192	@ 0xc0
 801049a:	f200 8088 	bhi.w	80105ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801049e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104a0:	2b80      	cmp	r3, #128	@ 0x80
 80104a2:	d032      	beq.n	801050a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80104a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104a6:	2b80      	cmp	r3, #128	@ 0x80
 80104a8:	f200 8081 	bhi.w	80105ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80104ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d003      	beq.n	80104ba <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80104b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104b4:	2b40      	cmp	r3, #64	@ 0x40
 80104b6:	d014      	beq.n	80104e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80104b8:	e079      	b.n	80105ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80104ba:	4b3f      	ldr	r3, [pc, #252]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80104c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80104c6:	d108      	bne.n	80104da <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80104c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80104cc:	4618      	mov	r0, r3
 80104ce:	f000 ff67 	bl	80113a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80104d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104d6:	f000 bc9c 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104da:	2300      	movs	r3, #0
 80104dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104de:	f000 bc98 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80104e2:	4b35      	ldr	r3, [pc, #212]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80104ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80104ee:	d108      	bne.n	8010502 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104f0:	f107 0318 	add.w	r3, r7, #24
 80104f4:	4618      	mov	r0, r3
 80104f6:	f000 fcab 	bl	8010e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104fe:	f000 bc88 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010502:	2300      	movs	r3, #0
 8010504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010506:	f000 bc84 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801050a:	4b2b      	ldr	r3, [pc, #172]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010516:	d108      	bne.n	801052a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010518:	f107 030c 	add.w	r3, r7, #12
 801051c:	4618      	mov	r0, r3
 801051e:	f000 fdeb 	bl	80110f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010526:	f000 bc74 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801052a:	2300      	movs	r3, #0
 801052c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801052e:	f000 bc70 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010532:	4b21      	ldr	r3, [pc, #132]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010536:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801053a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801053c:	4b1e      	ldr	r3, [pc, #120]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f003 0304 	and.w	r3, r3, #4
 8010544:	2b04      	cmp	r3, #4
 8010546:	d10c      	bne.n	8010562 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8010548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801054a:	2b00      	cmp	r3, #0
 801054c:	d109      	bne.n	8010562 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801054e:	4b1a      	ldr	r3, [pc, #104]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	08db      	lsrs	r3, r3, #3
 8010554:	f003 0303 	and.w	r3, r3, #3
 8010558:	4a18      	ldr	r2, [pc, #96]	@ (80105bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801055a:	fa22 f303 	lsr.w	r3, r2, r3
 801055e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010560:	e01f      	b.n	80105a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010562:	4b15      	ldr	r3, [pc, #84]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801056a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801056e:	d106      	bne.n	801057e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010576:	d102      	bne.n	801057e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010578:	4b11      	ldr	r3, [pc, #68]	@ (80105c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801057a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801057c:	e011      	b.n	80105a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801057e:	4b0e      	ldr	r3, [pc, #56]	@ (80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801058a:	d106      	bne.n	801059a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 801058c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801058e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010592:	d102      	bne.n	801059a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010594:	4b0b      	ldr	r3, [pc, #44]	@ (80105c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010598:	e003      	b.n	80105a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801059a:	2300      	movs	r3, #0
 801059c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801059e:	f000 bc38 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80105a2:	f000 bc36 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80105a6:	4b08      	ldr	r3, [pc, #32]	@ (80105c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80105a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80105aa:	f000 bc32 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80105ae:	2300      	movs	r3, #0
 80105b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80105b2:	f000 bc2e 	b.w	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80105b6:	bf00      	nop
 80105b8:	58024400 	.word	0x58024400
 80105bc:	03d09000 	.word	0x03d09000
 80105c0:	003d0900 	.word	0x003d0900
 80105c4:	017d7840 	.word	0x017d7840
 80105c8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80105cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105d0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80105d4:	430b      	orrs	r3, r1
 80105d6:	f040 809c 	bne.w	8010712 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80105da:	4b9e      	ldr	r3, [pc, #632]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80105dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105de:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80105e2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80105e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80105ea:	d054      	beq.n	8010696 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80105ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80105f2:	f200 808b 	bhi.w	801070c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80105f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80105fc:	f000 8083 	beq.w	8010706 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8010600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010602:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8010606:	f200 8081 	bhi.w	801070c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801060a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801060c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010610:	d02f      	beq.n	8010672 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8010612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010614:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010618:	d878      	bhi.n	801070c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801061a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801061c:	2b00      	cmp	r3, #0
 801061e:	d004      	beq.n	801062a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010622:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010626:	d012      	beq.n	801064e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010628:	e070      	b.n	801070c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801062a:	4b8a      	ldr	r3, [pc, #552]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010632:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010636:	d107      	bne.n	8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010638:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801063c:	4618      	mov	r0, r3
 801063e:	f000 feaf 	bl	80113a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010646:	e3e4      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010648:	2300      	movs	r3, #0
 801064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801064c:	e3e1      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801064e:	4b81      	ldr	r3, [pc, #516]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010656:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801065a:	d107      	bne.n	801066c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801065c:	f107 0318 	add.w	r3, r7, #24
 8010660:	4618      	mov	r0, r3
 8010662:	f000 fbf5 	bl	8010e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010666:	69bb      	ldr	r3, [r7, #24]
 8010668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801066a:	e3d2      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801066c:	2300      	movs	r3, #0
 801066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010670:	e3cf      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010672:	4b78      	ldr	r3, [pc, #480]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801067a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801067e:	d107      	bne.n	8010690 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010680:	f107 030c 	add.w	r3, r7, #12
 8010684:	4618      	mov	r0, r3
 8010686:	f000 fd37 	bl	80110f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801068e:	e3c0      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010690:	2300      	movs	r3, #0
 8010692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010694:	e3bd      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010696:	4b6f      	ldr	r3, [pc, #444]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801069a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801069e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80106a0:	4b6c      	ldr	r3, [pc, #432]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	f003 0304 	and.w	r3, r3, #4
 80106a8:	2b04      	cmp	r3, #4
 80106aa:	d10c      	bne.n	80106c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80106ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d109      	bne.n	80106c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80106b2:	4b68      	ldr	r3, [pc, #416]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	08db      	lsrs	r3, r3, #3
 80106b8:	f003 0303 	and.w	r3, r3, #3
 80106bc:	4a66      	ldr	r2, [pc, #408]	@ (8010858 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80106be:	fa22 f303 	lsr.w	r3, r2, r3
 80106c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80106c4:	e01e      	b.n	8010704 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80106c6:	4b63      	ldr	r3, [pc, #396]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80106ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80106d2:	d106      	bne.n	80106e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80106d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80106da:	d102      	bne.n	80106e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80106dc:	4b5f      	ldr	r3, [pc, #380]	@ (801085c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80106de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80106e0:	e010      	b.n	8010704 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80106e2:	4b5c      	ldr	r3, [pc, #368]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80106ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80106ee:	d106      	bne.n	80106fe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80106f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80106f6:	d102      	bne.n	80106fe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80106f8:	4b59      	ldr	r3, [pc, #356]	@ (8010860 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80106fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80106fc:	e002      	b.n	8010704 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80106fe:	2300      	movs	r3, #0
 8010700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010702:	e386      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010704:	e385      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010706:	4b57      	ldr	r3, [pc, #348]	@ (8010864 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801070a:	e382      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801070c:	2300      	movs	r3, #0
 801070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010710:	e37f      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010716:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801071a:	430b      	orrs	r3, r1
 801071c:	f040 80a7 	bne.w	801086e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010720:	4b4c      	ldr	r3, [pc, #304]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010724:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8010728:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801072a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801072c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010730:	d055      	beq.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010734:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010738:	f200 8096 	bhi.w	8010868 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801073c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801073e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010742:	f000 8084 	beq.w	801084e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8010746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010748:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801074c:	f200 808c 	bhi.w	8010868 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010752:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010756:	d030      	beq.n	80107ba <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801075a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801075e:	f200 8083 	bhi.w	8010868 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010764:	2b00      	cmp	r3, #0
 8010766:	d004      	beq.n	8010772 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801076a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801076e:	d012      	beq.n	8010796 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010770:	e07a      	b.n	8010868 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010772:	4b38      	ldr	r3, [pc, #224]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801077a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801077e:	d107      	bne.n	8010790 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010784:	4618      	mov	r0, r3
 8010786:	f000 fe0b 	bl	80113a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801078a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801078c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801078e:	e340      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010790:	2300      	movs	r3, #0
 8010792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010794:	e33d      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010796:	4b2f      	ldr	r3, [pc, #188]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801079e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80107a2:	d107      	bne.n	80107b4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107a4:	f107 0318 	add.w	r3, r7, #24
 80107a8:	4618      	mov	r0, r3
 80107aa:	f000 fb51 	bl	8010e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80107ae:	69bb      	ldr	r3, [r7, #24]
 80107b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107b2:	e32e      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107b4:	2300      	movs	r3, #0
 80107b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80107b8:	e32b      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80107ba:	4b26      	ldr	r3, [pc, #152]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80107c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80107c6:	d107      	bne.n	80107d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80107c8:	f107 030c 	add.w	r3, r7, #12
 80107cc:	4618      	mov	r0, r3
 80107ce:	f000 fc93 	bl	80110f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107d6:	e31c      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107d8:	2300      	movs	r3, #0
 80107da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80107dc:	e319      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80107de:	4b1d      	ldr	r3, [pc, #116]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80107e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80107e8:	4b1a      	ldr	r3, [pc, #104]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f003 0304 	and.w	r3, r3, #4
 80107f0:	2b04      	cmp	r3, #4
 80107f2:	d10c      	bne.n	801080e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80107f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d109      	bne.n	801080e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80107fa:	4b16      	ldr	r3, [pc, #88]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	08db      	lsrs	r3, r3, #3
 8010800:	f003 0303 	and.w	r3, r3, #3
 8010804:	4a14      	ldr	r2, [pc, #80]	@ (8010858 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010806:	fa22 f303 	lsr.w	r3, r2, r3
 801080a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801080c:	e01e      	b.n	801084c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801080e:	4b11      	ldr	r3, [pc, #68]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801081a:	d106      	bne.n	801082a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 801081c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801081e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010822:	d102      	bne.n	801082a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010824:	4b0d      	ldr	r3, [pc, #52]	@ (801085c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010828:	e010      	b.n	801084c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801082a:	4b0a      	ldr	r3, [pc, #40]	@ (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010832:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010836:	d106      	bne.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801083a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801083e:	d102      	bne.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010840:	4b07      	ldr	r3, [pc, #28]	@ (8010860 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010842:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010844:	e002      	b.n	801084c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010846:	2300      	movs	r3, #0
 8010848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801084a:	e2e2      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801084c:	e2e1      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801084e:	4b05      	ldr	r3, [pc, #20]	@ (8010864 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010852:	e2de      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010854:	58024400 	.word	0x58024400
 8010858:	03d09000 	.word	0x03d09000
 801085c:	003d0900 	.word	0x003d0900
 8010860:	017d7840 	.word	0x017d7840
 8010864:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010868:	2300      	movs	r3, #0
 801086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801086c:	e2d1      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801086e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010872:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8010876:	430b      	orrs	r3, r1
 8010878:	f040 809c 	bne.w	80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801087c:	4b93      	ldr	r3, [pc, #588]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801087e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010880:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8010884:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010888:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801088c:	d054      	beq.n	8010938 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 801088e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010890:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010894:	f200 808b 	bhi.w	80109ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801089a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801089e:	f000 8083 	beq.w	80109a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80108a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80108a8:	f200 8081 	bhi.w	80109ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80108ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80108b2:	d02f      	beq.n	8010914 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80108b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80108ba:	d878      	bhi.n	80109ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80108bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d004      	beq.n	80108cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80108c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80108c8:	d012      	beq.n	80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80108ca:	e070      	b.n	80109ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80108cc:	4b7f      	ldr	r3, [pc, #508]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80108d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80108d8:	d107      	bne.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80108da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80108de:	4618      	mov	r0, r3
 80108e0:	f000 fd5e 	bl	80113a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80108e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108e8:	e293      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108ea:	2300      	movs	r3, #0
 80108ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80108ee:	e290      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80108f0:	4b76      	ldr	r3, [pc, #472]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80108f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80108fc:	d107      	bne.n	801090e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80108fe:	f107 0318 	add.w	r3, r7, #24
 8010902:	4618      	mov	r0, r3
 8010904:	f000 faa4 	bl	8010e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010908:	69bb      	ldr	r3, [r7, #24]
 801090a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801090c:	e281      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801090e:	2300      	movs	r3, #0
 8010910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010912:	e27e      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010914:	4b6d      	ldr	r3, [pc, #436]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801091c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010920:	d107      	bne.n	8010932 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010922:	f107 030c 	add.w	r3, r7, #12
 8010926:	4618      	mov	r0, r3
 8010928:	f000 fbe6 	bl	80110f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010930:	e26f      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010932:	2300      	movs	r3, #0
 8010934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010936:	e26c      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010938:	4b64      	ldr	r3, [pc, #400]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801093a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801093c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010940:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010942:	4b62      	ldr	r3, [pc, #392]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	f003 0304 	and.w	r3, r3, #4
 801094a:	2b04      	cmp	r3, #4
 801094c:	d10c      	bne.n	8010968 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 801094e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010950:	2b00      	cmp	r3, #0
 8010952:	d109      	bne.n	8010968 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010954:	4b5d      	ldr	r3, [pc, #372]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	08db      	lsrs	r3, r3, #3
 801095a:	f003 0303 	and.w	r3, r3, #3
 801095e:	4a5c      	ldr	r2, [pc, #368]	@ (8010ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010960:	fa22 f303 	lsr.w	r3, r2, r3
 8010964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010966:	e01e      	b.n	80109a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010968:	4b58      	ldr	r3, [pc, #352]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010974:	d106      	bne.n	8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8010976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010978:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801097c:	d102      	bne.n	8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801097e:	4b55      	ldr	r3, [pc, #340]	@ (8010ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010980:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010982:	e010      	b.n	80109a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010984:	4b51      	ldr	r3, [pc, #324]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801098c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010990:	d106      	bne.n	80109a0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8010992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010994:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010998:	d102      	bne.n	80109a0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801099a:	4b4f      	ldr	r3, [pc, #316]	@ (8010ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801099c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801099e:	e002      	b.n	80109a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80109a0:	2300      	movs	r3, #0
 80109a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80109a4:	e235      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80109a6:	e234      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80109a8:	4b4c      	ldr	r3, [pc, #304]	@ (8010adc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80109aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80109ac:	e231      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80109ae:	2300      	movs	r3, #0
 80109b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80109b2:	e22e      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80109b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109b8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80109bc:	430b      	orrs	r3, r1
 80109be:	f040 808f 	bne.w	8010ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80109c2:	4b42      	ldr	r3, [pc, #264]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80109c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109c6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80109ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80109cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80109d2:	d06b      	beq.n	8010aac <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80109d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80109da:	d874      	bhi.n	8010ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80109dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80109e2:	d056      	beq.n	8010a92 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80109e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80109ea:	d86c      	bhi.n	8010ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80109ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80109f2:	d03b      	beq.n	8010a6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80109f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80109fa:	d864      	bhi.n	8010ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80109fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010a02:	d021      	beq.n	8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010a0a:	d85c      	bhi.n	8010ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d004      	beq.n	8010a1c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8010a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010a18:	d004      	beq.n	8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8010a1a:	e054      	b.n	8010ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010a1c:	f7fe fa0a 	bl	800ee34 <HAL_RCC_GetPCLK1Freq>
 8010a20:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010a22:	e1f6      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010a24:	4b29      	ldr	r3, [pc, #164]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010a2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010a30:	d107      	bne.n	8010a42 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a32:	f107 0318 	add.w	r3, r7, #24
 8010a36:	4618      	mov	r0, r3
 8010a38:	f000 fa0a 	bl	8010e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010a3c:	69fb      	ldr	r3, [r7, #28]
 8010a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a40:	e1e7      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a42:	2300      	movs	r3, #0
 8010a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a46:	e1e4      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010a48:	4b20      	ldr	r3, [pc, #128]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010a50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010a54:	d107      	bne.n	8010a66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a56:	f107 030c 	add.w	r3, r7, #12
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f000 fb4c 	bl	80110f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a64:	e1d5      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a66:	2300      	movs	r3, #0
 8010a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a6a:	e1d2      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010a6c:	4b17      	ldr	r3, [pc, #92]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f003 0304 	and.w	r3, r3, #4
 8010a74:	2b04      	cmp	r3, #4
 8010a76:	d109      	bne.n	8010a8c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010a78:	4b14      	ldr	r3, [pc, #80]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	08db      	lsrs	r3, r3, #3
 8010a7e:	f003 0303 	and.w	r3, r3, #3
 8010a82:	4a13      	ldr	r2, [pc, #76]	@ (8010ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010a84:	fa22 f303 	lsr.w	r3, r2, r3
 8010a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a8a:	e1c2      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a90:	e1bf      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010a92:	4b0e      	ldr	r3, [pc, #56]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a9e:	d102      	bne.n	8010aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8010aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8010ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010aa4:	e1b5      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010aaa:	e1b2      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010aac:	4b07      	ldr	r3, [pc, #28]	@ (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010ab4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010ab8:	d102      	bne.n	8010ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8010aba:	4b07      	ldr	r3, [pc, #28]	@ (8010ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010abe:	e1a8      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ac4:	e1a5      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010aca:	e1a2      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010acc:	58024400 	.word	0x58024400
 8010ad0:	03d09000 	.word	0x03d09000
 8010ad4:	003d0900 	.word	0x003d0900
 8010ad8:	017d7840 	.word	0x017d7840
 8010adc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ae4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8010ae8:	430b      	orrs	r3, r1
 8010aea:	d173      	bne.n	8010bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010aec:	4b9c      	ldr	r3, [pc, #624]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010af4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010af8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010afc:	d02f      	beq.n	8010b5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010b04:	d863      	bhi.n	8010bce <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8010b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d004      	beq.n	8010b16 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b12:	d012      	beq.n	8010b3a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010b14:	e05b      	b.n	8010bce <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010b16:	4b92      	ldr	r3, [pc, #584]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010b1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010b22:	d107      	bne.n	8010b34 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b24:	f107 0318 	add.w	r3, r7, #24
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f000 f991 	bl	8010e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010b2e:	69bb      	ldr	r3, [r7, #24]
 8010b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b32:	e16e      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b34:	2300      	movs	r3, #0
 8010b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b38:	e16b      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010b3a:	4b89      	ldr	r3, [pc, #548]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010b46:	d107      	bne.n	8010b58 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b48:	f107 030c 	add.w	r3, r7, #12
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f000 fad3 	bl	80110f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b56:	e15c      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b5c:	e159      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010b5e:	4b80      	ldr	r3, [pc, #512]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010b66:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010b68:	4b7d      	ldr	r3, [pc, #500]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f003 0304 	and.w	r3, r3, #4
 8010b70:	2b04      	cmp	r3, #4
 8010b72:	d10c      	bne.n	8010b8e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d109      	bne.n	8010b8e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b7a:	4b79      	ldr	r3, [pc, #484]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	08db      	lsrs	r3, r3, #3
 8010b80:	f003 0303 	and.w	r3, r3, #3
 8010b84:	4a77      	ldr	r2, [pc, #476]	@ (8010d64 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010b86:	fa22 f303 	lsr.w	r3, r2, r3
 8010b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b8c:	e01e      	b.n	8010bcc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010b8e:	4b74      	ldr	r3, [pc, #464]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b9a:	d106      	bne.n	8010baa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8010b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010ba2:	d102      	bne.n	8010baa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010ba4:	4b70      	ldr	r3, [pc, #448]	@ (8010d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010ba8:	e010      	b.n	8010bcc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010baa:	4b6d      	ldr	r3, [pc, #436]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010bb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010bb6:	d106      	bne.n	8010bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8010bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010bbe:	d102      	bne.n	8010bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010bc0:	4b6a      	ldr	r3, [pc, #424]	@ (8010d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010bc4:	e002      	b.n	8010bcc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010bca:	e122      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010bcc:	e121      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010bd2:	e11e      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bd8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8010bdc:	430b      	orrs	r3, r1
 8010bde:	d133      	bne.n	8010c48 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010be0:	4b5f      	ldr	r3, [pc, #380]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010be8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d004      	beq.n	8010bfa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010bf6:	d012      	beq.n	8010c1e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010bf8:	e023      	b.n	8010c42 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010bfa:	4b59      	ldr	r3, [pc, #356]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010c02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010c06:	d107      	bne.n	8010c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f000 fbc7 	bl	80113a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c16:	e0fc      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c1c:	e0f9      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010c1e:	4b50      	ldr	r3, [pc, #320]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010c26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010c2a:	d107      	bne.n	8010c3c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c2c:	f107 0318 	add.w	r3, r7, #24
 8010c30:	4618      	mov	r0, r3
 8010c32:	f000 f90d 	bl	8010e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010c36:	6a3b      	ldr	r3, [r7, #32]
 8010c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c3a:	e0ea      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c40:	e0e7      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010c42:	2300      	movs	r3, #0
 8010c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c46:	e0e4      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c4c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8010c50:	430b      	orrs	r3, r1
 8010c52:	f040 808d 	bne.w	8010d70 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010c56:	4b42      	ldr	r3, [pc, #264]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c5a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8010c5e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010c66:	d06b      	beq.n	8010d40 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010c6e:	d874      	bhi.n	8010d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c76:	d056      	beq.n	8010d26 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c7e:	d86c      	bhi.n	8010d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010c86:	d03b      	beq.n	8010d00 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8010c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010c8e:	d864      	bhi.n	8010d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010c96:	d021      	beq.n	8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8010c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010c9e:	d85c      	bhi.n	8010d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d004      	beq.n	8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8010ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010cac:	d004      	beq.n	8010cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8010cae:	e054      	b.n	8010d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010cb0:	f000 f8b8 	bl	8010e24 <HAL_RCCEx_GetD3PCLK1Freq>
 8010cb4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010cb6:	e0ac      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010cb8:	4b29      	ldr	r3, [pc, #164]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010cc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010cc4:	d107      	bne.n	8010cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010cc6:	f107 0318 	add.w	r3, r7, #24
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f000 f8c0 	bl	8010e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010cd4:	e09d      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010cda:	e09a      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010cdc:	4b20      	ldr	r3, [pc, #128]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010ce4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010ce8:	d107      	bne.n	8010cfa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010cea:	f107 030c 	add.w	r3, r7, #12
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f000 fa02 	bl	80110f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010cf8:	e08b      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010cfe:	e088      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010d00:	4b17      	ldr	r3, [pc, #92]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	f003 0304 	and.w	r3, r3, #4
 8010d08:	2b04      	cmp	r3, #4
 8010d0a:	d109      	bne.n	8010d20 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010d0c:	4b14      	ldr	r3, [pc, #80]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	08db      	lsrs	r3, r3, #3
 8010d12:	f003 0303 	and.w	r3, r3, #3
 8010d16:	4a13      	ldr	r2, [pc, #76]	@ (8010d64 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010d18:	fa22 f303 	lsr.w	r3, r2, r3
 8010d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d1e:	e078      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d20:	2300      	movs	r3, #0
 8010d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d24:	e075      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010d26:	4b0e      	ldr	r3, [pc, #56]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010d32:	d102      	bne.n	8010d3a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010d34:	4b0c      	ldr	r3, [pc, #48]	@ (8010d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d38:	e06b      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d3e:	e068      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010d40:	4b07      	ldr	r3, [pc, #28]	@ (8010d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010d4c:	d102      	bne.n	8010d54 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010d4e:	4b07      	ldr	r3, [pc, #28]	@ (8010d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d52:	e05e      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d54:	2300      	movs	r3, #0
 8010d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d58:	e05b      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d5e:	e058      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010d60:	58024400 	.word	0x58024400
 8010d64:	03d09000 	.word	0x03d09000
 8010d68:	003d0900 	.word	0x003d0900
 8010d6c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d74:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8010d78:	430b      	orrs	r3, r1
 8010d7a:	d148      	bne.n	8010e0e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010d7c:	4b27      	ldr	r3, [pc, #156]	@ (8010e1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010d84:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010d8c:	d02a      	beq.n	8010de4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8010d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010d94:	d838      	bhi.n	8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8010d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d004      	beq.n	8010da6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010da2:	d00d      	beq.n	8010dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010da4:	e030      	b.n	8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010da6:	4b1d      	ldr	r3, [pc, #116]	@ (8010e1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010dae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010db2:	d102      	bne.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010db4:	4b1a      	ldr	r3, [pc, #104]	@ (8010e20 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8010db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010db8:	e02b      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010dbe:	e028      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010dc0:	4b16      	ldr	r3, [pc, #88]	@ (8010e1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010dc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010dcc:	d107      	bne.n	8010dde <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f000 fae4 	bl	80113a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ddc:	e019      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010dde:	2300      	movs	r3, #0
 8010de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010de2:	e016      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010de4:	4b0d      	ldr	r3, [pc, #52]	@ (8010e1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010dec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010df0:	d107      	bne.n	8010e02 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010df2:	f107 0318 	add.w	r3, r7, #24
 8010df6:	4618      	mov	r0, r3
 8010df8:	f000 f82a 	bl	8010e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e00:	e007      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e02:	2300      	movs	r3, #0
 8010e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e06:	e004      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e0c:	e001      	b.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8010e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3740      	adds	r7, #64	@ 0x40
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	58024400 	.word	0x58024400
 8010e20:	017d7840 	.word	0x017d7840

08010e24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010e28:	f7fd ffd4 	bl	800edd4 <HAL_RCC_GetHCLKFreq>
 8010e2c:	4602      	mov	r2, r0
 8010e2e:	4b06      	ldr	r3, [pc, #24]	@ (8010e48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010e30:	6a1b      	ldr	r3, [r3, #32]
 8010e32:	091b      	lsrs	r3, r3, #4
 8010e34:	f003 0307 	and.w	r3, r3, #7
 8010e38:	4904      	ldr	r1, [pc, #16]	@ (8010e4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010e3a:	5ccb      	ldrb	r3, [r1, r3]
 8010e3c:	f003 031f 	and.w	r3, r3, #31
 8010e40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	58024400 	.word	0x58024400
 8010e4c:	08021124 	.word	0x08021124

08010e50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010e50:	b480      	push	{r7}
 8010e52:	b089      	sub	sp, #36	@ 0x24
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010e58:	4ba1      	ldr	r3, [pc, #644]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e5c:	f003 0303 	and.w	r3, r3, #3
 8010e60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010e62:	4b9f      	ldr	r3, [pc, #636]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e66:	0b1b      	lsrs	r3, r3, #12
 8010e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010e6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010e6e:	4b9c      	ldr	r3, [pc, #624]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e72:	091b      	lsrs	r3, r3, #4
 8010e74:	f003 0301 	and.w	r3, r3, #1
 8010e78:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010e7a:	4b99      	ldr	r3, [pc, #612]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e7e:	08db      	lsrs	r3, r3, #3
 8010e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e84:	693a      	ldr	r2, [r7, #16]
 8010e86:	fb02 f303 	mul.w	r3, r2, r3
 8010e8a:	ee07 3a90 	vmov	s15, r3
 8010e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	f000 8111 	beq.w	80110c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010e9e:	69bb      	ldr	r3, [r7, #24]
 8010ea0:	2b02      	cmp	r3, #2
 8010ea2:	f000 8083 	beq.w	8010fac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010ea6:	69bb      	ldr	r3, [r7, #24]
 8010ea8:	2b02      	cmp	r3, #2
 8010eaa:	f200 80a1 	bhi.w	8010ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d003      	beq.n	8010ebc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010eb4:	69bb      	ldr	r3, [r7, #24]
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	d056      	beq.n	8010f68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010eba:	e099      	b.n	8010ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ebc:	4b88      	ldr	r3, [pc, #544]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	f003 0320 	and.w	r3, r3, #32
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d02d      	beq.n	8010f24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ec8:	4b85      	ldr	r3, [pc, #532]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	08db      	lsrs	r3, r3, #3
 8010ece:	f003 0303 	and.w	r3, r3, #3
 8010ed2:	4a84      	ldr	r2, [pc, #528]	@ (80110e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8010ed8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	ee07 3a90 	vmov	s15, r3
 8010ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	ee07 3a90 	vmov	s15, r3
 8010eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ef2:	4b7b      	ldr	r3, [pc, #492]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010efa:	ee07 3a90 	vmov	s15, r3
 8010efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80110e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010f22:	e087      	b.n	8011034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	ee07 3a90 	vmov	s15, r3
 8010f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80110ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f36:	4b6a      	ldr	r3, [pc, #424]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f3e:	ee07 3a90 	vmov	s15, r3
 8010f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80110e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f66:	e065      	b.n	8011034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	ee07 3a90 	vmov	s15, r3
 8010f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80110f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f7a:	4b59      	ldr	r3, [pc, #356]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f82:	ee07 3a90 	vmov	s15, r3
 8010f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80110e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010faa:	e043      	b.n	8011034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	ee07 3a90 	vmov	s15, r3
 8010fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fb6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80110f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010fbe:	4b48      	ldr	r3, [pc, #288]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fc6:	ee07 3a90 	vmov	s15, r3
 8010fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8010fd2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80110e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010fee:	e021      	b.n	8011034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	ee07 3a90 	vmov	s15, r3
 8010ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ffa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80110f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011002:	4b37      	ldr	r3, [pc, #220]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801100a:	ee07 3a90 	vmov	s15, r3
 801100e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011012:	ed97 6a03 	vldr	s12, [r7, #12]
 8011016:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80110e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801101a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801101e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801102a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801102e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011032:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8011034:	4b2a      	ldr	r3, [pc, #168]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011038:	0a5b      	lsrs	r3, r3, #9
 801103a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801103e:	ee07 3a90 	vmov	s15, r3
 8011042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011046:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801104a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801104e:	edd7 6a07 	vldr	s13, [r7, #28]
 8011052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801105a:	ee17 2a90 	vmov	r2, s15
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8011062:	4b1f      	ldr	r3, [pc, #124]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011066:	0c1b      	lsrs	r3, r3, #16
 8011068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801106c:	ee07 3a90 	vmov	s15, r3
 8011070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011074:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011078:	ee37 7a87 	vadd.f32	s14, s15, s14
 801107c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011088:	ee17 2a90 	vmov	r2, s15
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8011090:	4b13      	ldr	r3, [pc, #76]	@ (80110e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011094:	0e1b      	lsrs	r3, r3, #24
 8011096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801109a:	ee07 3a90 	vmov	s15, r3
 801109e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80110a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80110aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80110ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80110b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80110b6:	ee17 2a90 	vmov	r2, s15
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80110be:	e008      	b.n	80110d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2200      	movs	r2, #0
 80110c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	2200      	movs	r2, #0
 80110ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2200      	movs	r2, #0
 80110d0:	609a      	str	r2, [r3, #8]
}
 80110d2:	bf00      	nop
 80110d4:	3724      	adds	r7, #36	@ 0x24
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr
 80110de:	bf00      	nop
 80110e0:	58024400 	.word	0x58024400
 80110e4:	03d09000 	.word	0x03d09000
 80110e8:	46000000 	.word	0x46000000
 80110ec:	4c742400 	.word	0x4c742400
 80110f0:	4a742400 	.word	0x4a742400
 80110f4:	4bbebc20 	.word	0x4bbebc20

080110f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b089      	sub	sp, #36	@ 0x24
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011100:	4ba1      	ldr	r3, [pc, #644]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011104:	f003 0303 	and.w	r3, r3, #3
 8011108:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801110a:	4b9f      	ldr	r3, [pc, #636]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801110c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801110e:	0d1b      	lsrs	r3, r3, #20
 8011110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011114:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8011116:	4b9c      	ldr	r3, [pc, #624]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801111a:	0a1b      	lsrs	r3, r3, #8
 801111c:	f003 0301 	and.w	r3, r3, #1
 8011120:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8011122:	4b99      	ldr	r3, [pc, #612]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011126:	08db      	lsrs	r3, r3, #3
 8011128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801112c:	693a      	ldr	r2, [r7, #16]
 801112e:	fb02 f303 	mul.w	r3, r2, r3
 8011132:	ee07 3a90 	vmov	s15, r3
 8011136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801113a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	2b00      	cmp	r3, #0
 8011142:	f000 8111 	beq.w	8011368 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8011146:	69bb      	ldr	r3, [r7, #24]
 8011148:	2b02      	cmp	r3, #2
 801114a:	f000 8083 	beq.w	8011254 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801114e:	69bb      	ldr	r3, [r7, #24]
 8011150:	2b02      	cmp	r3, #2
 8011152:	f200 80a1 	bhi.w	8011298 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8011156:	69bb      	ldr	r3, [r7, #24]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d003      	beq.n	8011164 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801115c:	69bb      	ldr	r3, [r7, #24]
 801115e:	2b01      	cmp	r3, #1
 8011160:	d056      	beq.n	8011210 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8011162:	e099      	b.n	8011298 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011164:	4b88      	ldr	r3, [pc, #544]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f003 0320 	and.w	r3, r3, #32
 801116c:	2b00      	cmp	r3, #0
 801116e:	d02d      	beq.n	80111cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011170:	4b85      	ldr	r3, [pc, #532]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	08db      	lsrs	r3, r3, #3
 8011176:	f003 0303 	and.w	r3, r3, #3
 801117a:	4a84      	ldr	r2, [pc, #528]	@ (801138c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801117c:	fa22 f303 	lsr.w	r3, r2, r3
 8011180:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	ee07 3a90 	vmov	s15, r3
 8011188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	ee07 3a90 	vmov	s15, r3
 8011192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801119a:	4b7b      	ldr	r3, [pc, #492]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801119e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111a2:	ee07 3a90 	vmov	s15, r3
 80111a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80111ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8011390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80111b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80111be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80111ca:	e087      	b.n	80112dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	ee07 3a90 	vmov	s15, r3
 80111d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8011394 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80111da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111de:	4b6a      	ldr	r3, [pc, #424]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80111e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111e6:	ee07 3a90 	vmov	s15, r3
 80111ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80111f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8011390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80111f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011206:	ee67 7a27 	vmul.f32	s15, s14, s15
 801120a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801120e:	e065      	b.n	80112dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	ee07 3a90 	vmov	s15, r3
 8011216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801121a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8011398 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801121e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011222:	4b59      	ldr	r3, [pc, #356]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801122a:	ee07 3a90 	vmov	s15, r3
 801122e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011232:	ed97 6a03 	vldr	s12, [r7, #12]
 8011236:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8011390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801123a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801123e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801124a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801124e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011252:	e043      	b.n	80112dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	ee07 3a90 	vmov	s15, r3
 801125a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801125e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801139c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8011262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011266:	4b48      	ldr	r3, [pc, #288]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801126a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801126e:	ee07 3a90 	vmov	s15, r3
 8011272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011276:	ed97 6a03 	vldr	s12, [r7, #12]
 801127a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8011390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801127e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801128a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801128e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011296:	e021      	b.n	80112dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	ee07 3a90 	vmov	s15, r3
 801129e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011398 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80112a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112aa:	4b37      	ldr	r3, [pc, #220]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112b2:	ee07 3a90 	vmov	s15, r3
 80112b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80112be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8011390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80112c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80112c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80112ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80112da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80112dc:	4b2a      	ldr	r3, [pc, #168]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112e0:	0a5b      	lsrs	r3, r3, #9
 80112e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80112e6:	ee07 3a90 	vmov	s15, r3
 80112ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80112f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80112fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011302:	ee17 2a90 	vmov	r2, s15
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801130a:	4b1f      	ldr	r3, [pc, #124]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801130e:	0c1b      	lsrs	r3, r3, #16
 8011310:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011314:	ee07 3a90 	vmov	s15, r3
 8011318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801131c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011320:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011324:	edd7 6a07 	vldr	s13, [r7, #28]
 8011328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801132c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011330:	ee17 2a90 	vmov	r2, s15
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8011338:	4b13      	ldr	r3, [pc, #76]	@ (8011388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801133a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801133c:	0e1b      	lsrs	r3, r3, #24
 801133e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011342:	ee07 3a90 	vmov	s15, r3
 8011346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801134a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801134e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011352:	edd7 6a07 	vldr	s13, [r7, #28]
 8011356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801135a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801135e:	ee17 2a90 	vmov	r2, s15
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8011366:	e008      	b.n	801137a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2200      	movs	r2, #0
 801136c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2200      	movs	r2, #0
 8011372:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2200      	movs	r2, #0
 8011378:	609a      	str	r2, [r3, #8]
}
 801137a:	bf00      	nop
 801137c:	3724      	adds	r7, #36	@ 0x24
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr
 8011386:	bf00      	nop
 8011388:	58024400 	.word	0x58024400
 801138c:	03d09000 	.word	0x03d09000
 8011390:	46000000 	.word	0x46000000
 8011394:	4c742400 	.word	0x4c742400
 8011398:	4a742400 	.word	0x4a742400
 801139c:	4bbebc20 	.word	0x4bbebc20

080113a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80113a0:	b480      	push	{r7}
 80113a2:	b089      	sub	sp, #36	@ 0x24
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80113a8:	4ba0      	ldr	r3, [pc, #640]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80113aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113ac:	f003 0303 	and.w	r3, r3, #3
 80113b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80113b2:	4b9e      	ldr	r3, [pc, #632]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80113b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113b6:	091b      	lsrs	r3, r3, #4
 80113b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80113bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80113be:	4b9b      	ldr	r3, [pc, #620]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80113c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113c2:	f003 0301 	and.w	r3, r3, #1
 80113c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80113c8:	4b98      	ldr	r3, [pc, #608]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80113ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113cc:	08db      	lsrs	r3, r3, #3
 80113ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80113d2:	693a      	ldr	r2, [r7, #16]
 80113d4:	fb02 f303 	mul.w	r3, r2, r3
 80113d8:	ee07 3a90 	vmov	s15, r3
 80113dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	f000 8111 	beq.w	801160e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80113ec:	69bb      	ldr	r3, [r7, #24]
 80113ee:	2b02      	cmp	r3, #2
 80113f0:	f000 8083 	beq.w	80114fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80113f4:	69bb      	ldr	r3, [r7, #24]
 80113f6:	2b02      	cmp	r3, #2
 80113f8:	f200 80a1 	bhi.w	801153e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80113fc:	69bb      	ldr	r3, [r7, #24]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d003      	beq.n	801140a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8011402:	69bb      	ldr	r3, [r7, #24]
 8011404:	2b01      	cmp	r3, #1
 8011406:	d056      	beq.n	80114b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8011408:	e099      	b.n	801153e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801140a:	4b88      	ldr	r3, [pc, #544]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	f003 0320 	and.w	r3, r3, #32
 8011412:	2b00      	cmp	r3, #0
 8011414:	d02d      	beq.n	8011472 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011416:	4b85      	ldr	r3, [pc, #532]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	08db      	lsrs	r3, r3, #3
 801141c:	f003 0303 	and.w	r3, r3, #3
 8011420:	4a83      	ldr	r2, [pc, #524]	@ (8011630 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8011422:	fa22 f303 	lsr.w	r3, r2, r3
 8011426:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	ee07 3a90 	vmov	s15, r3
 801142e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	ee07 3a90 	vmov	s15, r3
 8011438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801143c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011440:	4b7a      	ldr	r3, [pc, #488]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011448:	ee07 3a90 	vmov	s15, r3
 801144c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011450:	ed97 6a03 	vldr	s12, [r7, #12]
 8011454:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8011634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801145c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011460:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011468:	ee67 7a27 	vmul.f32	s15, s14, s15
 801146c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011470:	e087      	b.n	8011582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	ee07 3a90 	vmov	s15, r3
 8011478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801147c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8011638 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011484:	4b69      	ldr	r3, [pc, #420]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801148c:	ee07 3a90 	vmov	s15, r3
 8011490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011494:	ed97 6a03 	vldr	s12, [r7, #12]
 8011498:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8011634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801149c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80114a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80114a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80114b4:	e065      	b.n	8011582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	ee07 3a90 	vmov	s15, r3
 80114bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114c0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801163c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80114c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80114c8:	4b58      	ldr	r3, [pc, #352]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114d0:	ee07 3a90 	vmov	s15, r3
 80114d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80114d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80114dc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8011634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80114e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80114e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80114ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80114f8:	e043      	b.n	8011582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	ee07 3a90 	vmov	s15, r3
 8011500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011504:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8011640 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801150c:	4b47      	ldr	r3, [pc, #284]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801150e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011514:	ee07 3a90 	vmov	s15, r3
 8011518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801151c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011520:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8011634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801152c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011538:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801153c:	e021      	b.n	8011582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	ee07 3a90 	vmov	s15, r3
 8011544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011548:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011638 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801154c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011550:	4b36      	ldr	r3, [pc, #216]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011558:	ee07 3a90 	vmov	s15, r3
 801155c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011560:	ed97 6a03 	vldr	s12, [r7, #12]
 8011564:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801156c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011570:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011578:	ee67 7a27 	vmul.f32	s15, s14, s15
 801157c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011580:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8011582:	4b2a      	ldr	r3, [pc, #168]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011586:	0a5b      	lsrs	r3, r3, #9
 8011588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801158c:	ee07 3a90 	vmov	s15, r3
 8011590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011594:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011598:	ee37 7a87 	vadd.f32	s14, s15, s14
 801159c:	edd7 6a07 	vldr	s13, [r7, #28]
 80115a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80115a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115a8:	ee17 2a90 	vmov	r2, s15
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80115b0:	4b1e      	ldr	r3, [pc, #120]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80115b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115b4:	0c1b      	lsrs	r3, r3, #16
 80115b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80115ba:	ee07 3a90 	vmov	s15, r3
 80115be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80115c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80115ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80115ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80115d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115d6:	ee17 2a90 	vmov	r2, s15
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80115de:	4b13      	ldr	r3, [pc, #76]	@ (801162c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80115e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115e2:	0e1b      	lsrs	r3, r3, #24
 80115e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80115e8:	ee07 3a90 	vmov	s15, r3
 80115ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80115f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80115f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80115fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011604:	ee17 2a90 	vmov	r2, s15
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801160c:	e008      	b.n	8011620 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2200      	movs	r2, #0
 8011612:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2200      	movs	r2, #0
 8011618:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2200      	movs	r2, #0
 801161e:	609a      	str	r2, [r3, #8]
}
 8011620:	bf00      	nop
 8011622:	3724      	adds	r7, #36	@ 0x24
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr
 801162c:	58024400 	.word	0x58024400
 8011630:	03d09000 	.word	0x03d09000
 8011634:	46000000 	.word	0x46000000
 8011638:	4c742400 	.word	0x4c742400
 801163c:	4a742400 	.word	0x4a742400
 8011640:	4bbebc20 	.word	0x4bbebc20

08011644 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801164e:	2300      	movs	r3, #0
 8011650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011652:	4b53      	ldr	r3, [pc, #332]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 8011654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011656:	f003 0303 	and.w	r3, r3, #3
 801165a:	2b03      	cmp	r3, #3
 801165c:	d101      	bne.n	8011662 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801165e:	2301      	movs	r3, #1
 8011660:	e099      	b.n	8011796 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011662:	4b4f      	ldr	r3, [pc, #316]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	4a4e      	ldr	r2, [pc, #312]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 8011668:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801166c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801166e:	f7f3 ffc3 	bl	80055f8 <HAL_GetTick>
 8011672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011674:	e008      	b.n	8011688 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011676:	f7f3 ffbf 	bl	80055f8 <HAL_GetTick>
 801167a:	4602      	mov	r2, r0
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	1ad3      	subs	r3, r2, r3
 8011680:	2b02      	cmp	r3, #2
 8011682:	d901      	bls.n	8011688 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011684:	2303      	movs	r3, #3
 8011686:	e086      	b.n	8011796 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011688:	4b45      	ldr	r3, [pc, #276]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011690:	2b00      	cmp	r3, #0
 8011692:	d1f0      	bne.n	8011676 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011694:	4b42      	ldr	r3, [pc, #264]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 8011696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011698:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	031b      	lsls	r3, r3, #12
 80116a2:	493f      	ldr	r1, [pc, #252]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 80116a4:	4313      	orrs	r3, r2
 80116a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	3b01      	subs	r3, #1
 80116ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	689b      	ldr	r3, [r3, #8]
 80116b6:	3b01      	subs	r3, #1
 80116b8:	025b      	lsls	r3, r3, #9
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	431a      	orrs	r2, r3
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	68db      	ldr	r3, [r3, #12]
 80116c2:	3b01      	subs	r3, #1
 80116c4:	041b      	lsls	r3, r3, #16
 80116c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80116ca:	431a      	orrs	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	691b      	ldr	r3, [r3, #16]
 80116d0:	3b01      	subs	r3, #1
 80116d2:	061b      	lsls	r3, r3, #24
 80116d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80116d8:	4931      	ldr	r1, [pc, #196]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 80116da:	4313      	orrs	r3, r2
 80116dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80116de:	4b30      	ldr	r3, [pc, #192]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 80116e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	695b      	ldr	r3, [r3, #20]
 80116ea:	492d      	ldr	r1, [pc, #180]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 80116ec:	4313      	orrs	r3, r2
 80116ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80116f0:	4b2b      	ldr	r3, [pc, #172]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 80116f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116f4:	f023 0220 	bic.w	r2, r3, #32
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	699b      	ldr	r3, [r3, #24]
 80116fc:	4928      	ldr	r1, [pc, #160]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 80116fe:	4313      	orrs	r3, r2
 8011700:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011702:	4b27      	ldr	r3, [pc, #156]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 8011704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011706:	4a26      	ldr	r2, [pc, #152]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 8011708:	f023 0310 	bic.w	r3, r3, #16
 801170c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801170e:	4b24      	ldr	r3, [pc, #144]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 8011710:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011712:	4b24      	ldr	r3, [pc, #144]	@ (80117a4 <RCCEx_PLL2_Config+0x160>)
 8011714:	4013      	ands	r3, r2
 8011716:	687a      	ldr	r2, [r7, #4]
 8011718:	69d2      	ldr	r2, [r2, #28]
 801171a:	00d2      	lsls	r2, r2, #3
 801171c:	4920      	ldr	r1, [pc, #128]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 801171e:	4313      	orrs	r3, r2
 8011720:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011722:	4b1f      	ldr	r3, [pc, #124]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 8011724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011726:	4a1e      	ldr	r2, [pc, #120]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 8011728:	f043 0310 	orr.w	r3, r3, #16
 801172c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d106      	bne.n	8011742 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011734:	4b1a      	ldr	r3, [pc, #104]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 8011736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011738:	4a19      	ldr	r2, [pc, #100]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 801173a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801173e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011740:	e00f      	b.n	8011762 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	2b01      	cmp	r3, #1
 8011746:	d106      	bne.n	8011756 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011748:	4b15      	ldr	r3, [pc, #84]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 801174a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801174c:	4a14      	ldr	r2, [pc, #80]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 801174e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011752:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011754:	e005      	b.n	8011762 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011756:	4b12      	ldr	r3, [pc, #72]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 8011758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801175a:	4a11      	ldr	r2, [pc, #68]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 801175c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011760:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011762:	4b0f      	ldr	r3, [pc, #60]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	4a0e      	ldr	r2, [pc, #56]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 8011768:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801176c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801176e:	f7f3 ff43 	bl	80055f8 <HAL_GetTick>
 8011772:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011774:	e008      	b.n	8011788 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011776:	f7f3 ff3f 	bl	80055f8 <HAL_GetTick>
 801177a:	4602      	mov	r2, r0
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	1ad3      	subs	r3, r2, r3
 8011780:	2b02      	cmp	r3, #2
 8011782:	d901      	bls.n	8011788 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011784:	2303      	movs	r3, #3
 8011786:	e006      	b.n	8011796 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011788:	4b05      	ldr	r3, [pc, #20]	@ (80117a0 <RCCEx_PLL2_Config+0x15c>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011790:	2b00      	cmp	r3, #0
 8011792:	d0f0      	beq.n	8011776 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011794:	7bfb      	ldrb	r3, [r7, #15]
}
 8011796:	4618      	mov	r0, r3
 8011798:	3710      	adds	r7, #16
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	58024400 	.word	0x58024400
 80117a4:	ffff0007 	.word	0xffff0007

080117a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b084      	sub	sp, #16
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80117b2:	2300      	movs	r3, #0
 80117b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80117b6:	4b53      	ldr	r3, [pc, #332]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 80117b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117ba:	f003 0303 	and.w	r3, r3, #3
 80117be:	2b03      	cmp	r3, #3
 80117c0:	d101      	bne.n	80117c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80117c2:	2301      	movs	r3, #1
 80117c4:	e099      	b.n	80118fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80117c6:	4b4f      	ldr	r3, [pc, #316]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	4a4e      	ldr	r2, [pc, #312]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 80117cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80117d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80117d2:	f7f3 ff11 	bl	80055f8 <HAL_GetTick>
 80117d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80117d8:	e008      	b.n	80117ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80117da:	f7f3 ff0d 	bl	80055f8 <HAL_GetTick>
 80117de:	4602      	mov	r2, r0
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	1ad3      	subs	r3, r2, r3
 80117e4:	2b02      	cmp	r3, #2
 80117e6:	d901      	bls.n	80117ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80117e8:	2303      	movs	r3, #3
 80117ea:	e086      	b.n	80118fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80117ec:	4b45      	ldr	r3, [pc, #276]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d1f0      	bne.n	80117da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80117f8:	4b42      	ldr	r3, [pc, #264]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 80117fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	051b      	lsls	r3, r3, #20
 8011806:	493f      	ldr	r1, [pc, #252]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 8011808:	4313      	orrs	r3, r2
 801180a:	628b      	str	r3, [r1, #40]	@ 0x28
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	3b01      	subs	r3, #1
 8011812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	689b      	ldr	r3, [r3, #8]
 801181a:	3b01      	subs	r3, #1
 801181c:	025b      	lsls	r3, r3, #9
 801181e:	b29b      	uxth	r3, r3
 8011820:	431a      	orrs	r2, r3
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	68db      	ldr	r3, [r3, #12]
 8011826:	3b01      	subs	r3, #1
 8011828:	041b      	lsls	r3, r3, #16
 801182a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801182e:	431a      	orrs	r2, r3
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	691b      	ldr	r3, [r3, #16]
 8011834:	3b01      	subs	r3, #1
 8011836:	061b      	lsls	r3, r3, #24
 8011838:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801183c:	4931      	ldr	r1, [pc, #196]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 801183e:	4313      	orrs	r3, r2
 8011840:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011842:	4b30      	ldr	r3, [pc, #192]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 8011844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011846:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	695b      	ldr	r3, [r3, #20]
 801184e:	492d      	ldr	r1, [pc, #180]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 8011850:	4313      	orrs	r3, r2
 8011852:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011854:	4b2b      	ldr	r3, [pc, #172]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 8011856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011858:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	699b      	ldr	r3, [r3, #24]
 8011860:	4928      	ldr	r1, [pc, #160]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 8011862:	4313      	orrs	r3, r2
 8011864:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011866:	4b27      	ldr	r3, [pc, #156]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 8011868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801186a:	4a26      	ldr	r2, [pc, #152]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 801186c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011870:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011872:	4b24      	ldr	r3, [pc, #144]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 8011874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011876:	4b24      	ldr	r3, [pc, #144]	@ (8011908 <RCCEx_PLL3_Config+0x160>)
 8011878:	4013      	ands	r3, r2
 801187a:	687a      	ldr	r2, [r7, #4]
 801187c:	69d2      	ldr	r2, [r2, #28]
 801187e:	00d2      	lsls	r2, r2, #3
 8011880:	4920      	ldr	r1, [pc, #128]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 8011882:	4313      	orrs	r3, r2
 8011884:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011886:	4b1f      	ldr	r3, [pc, #124]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 8011888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801188a:	4a1e      	ldr	r2, [pc, #120]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 801188c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011890:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d106      	bne.n	80118a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011898:	4b1a      	ldr	r3, [pc, #104]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 801189a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801189c:	4a19      	ldr	r2, [pc, #100]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 801189e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80118a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80118a4:	e00f      	b.n	80118c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d106      	bne.n	80118ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80118ac:	4b15      	ldr	r3, [pc, #84]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 80118ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118b0:	4a14      	ldr	r2, [pc, #80]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 80118b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80118b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80118b8:	e005      	b.n	80118c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80118ba:	4b12      	ldr	r3, [pc, #72]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 80118bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118be:	4a11      	ldr	r2, [pc, #68]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 80118c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80118c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80118c6:	4b0f      	ldr	r3, [pc, #60]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	4a0e      	ldr	r2, [pc, #56]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 80118cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80118d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80118d2:	f7f3 fe91 	bl	80055f8 <HAL_GetTick>
 80118d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80118d8:	e008      	b.n	80118ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80118da:	f7f3 fe8d 	bl	80055f8 <HAL_GetTick>
 80118de:	4602      	mov	r2, r0
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	1ad3      	subs	r3, r2, r3
 80118e4:	2b02      	cmp	r3, #2
 80118e6:	d901      	bls.n	80118ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80118e8:	2303      	movs	r3, #3
 80118ea:	e006      	b.n	80118fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80118ec:	4b05      	ldr	r3, [pc, #20]	@ (8011904 <RCCEx_PLL3_Config+0x15c>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d0f0      	beq.n	80118da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80118f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3710      	adds	r7, #16
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop
 8011904:	58024400 	.word	0x58024400
 8011908:	ffff0007 	.word	0xffff0007

0801190c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b084      	sub	sp, #16
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d101      	bne.n	801191e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801191a:	2301      	movs	r3, #1
 801191c:	e10f      	b.n	8011b3e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2200      	movs	r2, #0
 8011922:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	4a87      	ldr	r2, [pc, #540]	@ (8011b48 <HAL_SPI_Init+0x23c>)
 801192a:	4293      	cmp	r3, r2
 801192c:	d00f      	beq.n	801194e <HAL_SPI_Init+0x42>
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	4a86      	ldr	r2, [pc, #536]	@ (8011b4c <HAL_SPI_Init+0x240>)
 8011934:	4293      	cmp	r3, r2
 8011936:	d00a      	beq.n	801194e <HAL_SPI_Init+0x42>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	4a84      	ldr	r2, [pc, #528]	@ (8011b50 <HAL_SPI_Init+0x244>)
 801193e:	4293      	cmp	r3, r2
 8011940:	d005      	beq.n	801194e <HAL_SPI_Init+0x42>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	68db      	ldr	r3, [r3, #12]
 8011946:	2b0f      	cmp	r3, #15
 8011948:	d901      	bls.n	801194e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801194a:	2301      	movs	r3, #1
 801194c:	e0f7      	b.n	8011b3e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f000 ff6c 	bl	801282c <SPI_GetPacketSize>
 8011954:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	4a7b      	ldr	r2, [pc, #492]	@ (8011b48 <HAL_SPI_Init+0x23c>)
 801195c:	4293      	cmp	r3, r2
 801195e:	d00c      	beq.n	801197a <HAL_SPI_Init+0x6e>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	4a79      	ldr	r2, [pc, #484]	@ (8011b4c <HAL_SPI_Init+0x240>)
 8011966:	4293      	cmp	r3, r2
 8011968:	d007      	beq.n	801197a <HAL_SPI_Init+0x6e>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	4a78      	ldr	r2, [pc, #480]	@ (8011b50 <HAL_SPI_Init+0x244>)
 8011970:	4293      	cmp	r3, r2
 8011972:	d002      	beq.n	801197a <HAL_SPI_Init+0x6e>
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	2b08      	cmp	r3, #8
 8011978:	d811      	bhi.n	801199e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801197e:	4a72      	ldr	r2, [pc, #456]	@ (8011b48 <HAL_SPI_Init+0x23c>)
 8011980:	4293      	cmp	r3, r2
 8011982:	d009      	beq.n	8011998 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	4a70      	ldr	r2, [pc, #448]	@ (8011b4c <HAL_SPI_Init+0x240>)
 801198a:	4293      	cmp	r3, r2
 801198c:	d004      	beq.n	8011998 <HAL_SPI_Init+0x8c>
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	4a6f      	ldr	r2, [pc, #444]	@ (8011b50 <HAL_SPI_Init+0x244>)
 8011994:	4293      	cmp	r3, r2
 8011996:	d104      	bne.n	80119a2 <HAL_SPI_Init+0x96>
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	2b10      	cmp	r3, #16
 801199c:	d901      	bls.n	80119a2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801199e:	2301      	movs	r3, #1
 80119a0:	e0cd      	b.n	8011b3e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80119a8:	b2db      	uxtb	r3, r3
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d106      	bne.n	80119bc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2200      	movs	r2, #0
 80119b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f7f2 feb4 	bl	8004724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2202      	movs	r2, #2
 80119c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	681a      	ldr	r2, [r3, #0]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	f022 0201 	bic.w	r2, r2, #1
 80119d2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	689b      	ldr	r3, [r3, #8]
 80119da:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80119de:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	699b      	ldr	r3, [r3, #24]
 80119e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80119e8:	d119      	bne.n	8011a1e <HAL_SPI_Init+0x112>
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	685b      	ldr	r3, [r3, #4]
 80119ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80119f2:	d103      	bne.n	80119fc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d008      	beq.n	8011a0e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d10c      	bne.n	8011a1e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011a08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011a0c:	d107      	bne.n	8011a1e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011a1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d00f      	beq.n	8011a4a <HAL_SPI_Init+0x13e>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	68db      	ldr	r3, [r3, #12]
 8011a2e:	2b06      	cmp	r3, #6
 8011a30:	d90b      	bls.n	8011a4a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	430a      	orrs	r2, r1
 8011a46:	601a      	str	r2, [r3, #0]
 8011a48:	e007      	b.n	8011a5a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011a58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	69da      	ldr	r2, [r3, #28]
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a62:	431a      	orrs	r2, r3
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	431a      	orrs	r2, r3
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a6c:	ea42 0103 	orr.w	r1, r2, r3
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	68da      	ldr	r2, [r3, #12]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	430a      	orrs	r2, r1
 8011a7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a84:	431a      	orrs	r2, r3
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a8a:	431a      	orrs	r2, r3
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	699b      	ldr	r3, [r3, #24]
 8011a90:	431a      	orrs	r2, r3
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	691b      	ldr	r3, [r3, #16]
 8011a96:	431a      	orrs	r2, r3
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	695b      	ldr	r3, [r3, #20]
 8011a9c:	431a      	orrs	r2, r3
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	6a1b      	ldr	r3, [r3, #32]
 8011aa2:	431a      	orrs	r2, r3
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	685b      	ldr	r3, [r3, #4]
 8011aa8:	431a      	orrs	r2, r3
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011aae:	431a      	orrs	r2, r3
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	689b      	ldr	r3, [r3, #8]
 8011ab4:	431a      	orrs	r2, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011aba:	ea42 0103 	orr.w	r1, r2, r3
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	430a      	orrs	r2, r1
 8011ac8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d113      	bne.n	8011afa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	689b      	ldr	r3, [r3, #8]
 8011ad8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011ae4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	689b      	ldr	r3, [r3, #8]
 8011aec:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011af8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f022 0201 	bic.w	r2, r2, #1
 8011b08:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d00a      	beq.n	8011b2c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	68db      	ldr	r3, [r3, #12]
 8011b1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	430a      	orrs	r2, r1
 8011b2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	2201      	movs	r2, #1
 8011b38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8011b3c:	2300      	movs	r3, #0
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3710      	adds	r7, #16
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	40013000 	.word	0x40013000
 8011b4c:	40003800 	.word	0x40003800
 8011b50:	40003c00 	.word	0x40003c00

08011b54 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b088      	sub	sp, #32
 8011b58:	af02      	add	r7, sp, #8
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	603b      	str	r3, [r7, #0]
 8011b60:	4613      	mov	r3, r2
 8011b62:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	3320      	adds	r3, #32
 8011b6a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011b6c:	f7f3 fd44 	bl	80055f8 <HAL_GetTick>
 8011b70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011b78:	b2db      	uxtb	r3, r3
 8011b7a:	2b01      	cmp	r3, #1
 8011b7c:	d001      	beq.n	8011b82 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8011b7e:	2302      	movs	r3, #2
 8011b80:	e1d1      	b.n	8011f26 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d002      	beq.n	8011b8e <HAL_SPI_Transmit+0x3a>
 8011b88:	88fb      	ldrh	r3, [r7, #6]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d101      	bne.n	8011b92 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8011b8e:	2301      	movs	r3, #1
 8011b90:	e1c9      	b.n	8011f26 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011b98:	2b01      	cmp	r3, #1
 8011b9a:	d101      	bne.n	8011ba0 <HAL_SPI_Transmit+0x4c>
 8011b9c:	2302      	movs	r3, #2
 8011b9e:	e1c2      	b.n	8011f26 <HAL_SPI_Transmit+0x3d2>
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2203      	movs	r2, #3
 8011bac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	68ba      	ldr	r2, [r7, #8]
 8011bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	88fa      	ldrh	r2, [r7, #6]
 8011bc2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	88fa      	ldrh	r2, [r7, #6]
 8011bca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	2200      	movs	r2, #0
 8011be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	2200      	movs	r2, #0
 8011be8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	2200      	movs	r2, #0
 8011bee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	689b      	ldr	r3, [r3, #8]
 8011bf4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8011bf8:	d108      	bne.n	8011c0c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011c08:	601a      	str	r2, [r3, #0]
 8011c0a:	e009      	b.n	8011c20 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	68db      	ldr	r3, [r3, #12]
 8011c12:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8011c1e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	685a      	ldr	r2, [r3, #4]
 8011c26:	4b96      	ldr	r3, [pc, #600]	@ (8011e80 <HAL_SPI_Transmit+0x32c>)
 8011c28:	4013      	ands	r3, r2
 8011c2a:	88f9      	ldrh	r1, [r7, #6]
 8011c2c:	68fa      	ldr	r2, [r7, #12]
 8011c2e:	6812      	ldr	r2, [r2, #0]
 8011c30:	430b      	orrs	r3, r1
 8011c32:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	681a      	ldr	r2, [r3, #0]
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	f042 0201 	orr.w	r2, r2, #1
 8011c42:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	685b      	ldr	r3, [r3, #4]
 8011c48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011c4c:	d107      	bne.n	8011c5e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	681a      	ldr	r2, [r3, #0]
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011c5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	68db      	ldr	r3, [r3, #12]
 8011c62:	2b0f      	cmp	r3, #15
 8011c64:	d947      	bls.n	8011cf6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011c66:	e03f      	b.n	8011ce8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	695b      	ldr	r3, [r3, #20]
 8011c6e:	f003 0302 	and.w	r3, r3, #2
 8011c72:	2b02      	cmp	r3, #2
 8011c74:	d114      	bne.n	8011ca0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	6812      	ldr	r2, [r2, #0]
 8011c80:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011c86:	1d1a      	adds	r2, r3, #4
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	3b01      	subs	r3, #1
 8011c96:	b29a      	uxth	r2, r3
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011c9e:	e023      	b.n	8011ce8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011ca0:	f7f3 fcaa 	bl	80055f8 <HAL_GetTick>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	1ad3      	subs	r3, r2, r3
 8011caa:	683a      	ldr	r2, [r7, #0]
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d803      	bhi.n	8011cb8 <HAL_SPI_Transmit+0x164>
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cb6:	d102      	bne.n	8011cbe <HAL_SPI_Transmit+0x16a>
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d114      	bne.n	8011ce8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011cbe:	68f8      	ldr	r0, [r7, #12]
 8011cc0:	f000 fce6 	bl	8012690 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011cca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	2201      	movs	r2, #1
 8011cd8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8011ce4:	2303      	movs	r3, #3
 8011ce6:	e11e      	b.n	8011f26 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d1b9      	bne.n	8011c68 <HAL_SPI_Transmit+0x114>
 8011cf4:	e0f1      	b.n	8011eda <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	68db      	ldr	r3, [r3, #12]
 8011cfa:	2b07      	cmp	r3, #7
 8011cfc:	f240 80e6 	bls.w	8011ecc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011d00:	e05d      	b.n	8011dbe <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	695b      	ldr	r3, [r3, #20]
 8011d08:	f003 0302 	and.w	r3, r3, #2
 8011d0c:	2b02      	cmp	r3, #2
 8011d0e:	d132      	bne.n	8011d76 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	d918      	bls.n	8011d4e <HAL_SPI_Transmit+0x1fa>
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d014      	beq.n	8011d4e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	6812      	ldr	r2, [r2, #0]
 8011d2e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011d34:	1d1a      	adds	r2, r3, #4
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	3b02      	subs	r3, #2
 8011d44:	b29a      	uxth	r2, r3
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011d4c:	e037      	b.n	8011dbe <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011d52:	881a      	ldrh	r2, [r3, #0]
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011d5c:	1c9a      	adds	r2, r3, #2
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011d68:	b29b      	uxth	r3, r3
 8011d6a:	3b01      	subs	r3, #1
 8011d6c:	b29a      	uxth	r2, r3
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011d74:	e023      	b.n	8011dbe <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011d76:	f7f3 fc3f 	bl	80055f8 <HAL_GetTick>
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	1ad3      	subs	r3, r2, r3
 8011d80:	683a      	ldr	r2, [r7, #0]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d803      	bhi.n	8011d8e <HAL_SPI_Transmit+0x23a>
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d8c:	d102      	bne.n	8011d94 <HAL_SPI_Transmit+0x240>
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d114      	bne.n	8011dbe <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011d94:	68f8      	ldr	r0, [r7, #12]
 8011d96:	f000 fc7b 	bl	8012690 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011da0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	2201      	movs	r2, #1
 8011dae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2200      	movs	r2, #0
 8011db6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8011dba:	2303      	movs	r3, #3
 8011dbc:	e0b3      	b.n	8011f26 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d19b      	bne.n	8011d02 <HAL_SPI_Transmit+0x1ae>
 8011dca:	e086      	b.n	8011eda <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	695b      	ldr	r3, [r3, #20]
 8011dd2:	f003 0302 	and.w	r3, r3, #2
 8011dd6:	2b02      	cmp	r3, #2
 8011dd8:	d154      	bne.n	8011e84 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	2b03      	cmp	r3, #3
 8011de4:	d918      	bls.n	8011e18 <HAL_SPI_Transmit+0x2c4>
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011dea:	2b40      	cmp	r3, #64	@ 0x40
 8011dec:	d914      	bls.n	8011e18 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	6812      	ldr	r2, [r2, #0]
 8011df8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011dfe:	1d1a      	adds	r2, r3, #4
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011e0a:	b29b      	uxth	r3, r3
 8011e0c:	3b04      	subs	r3, #4
 8011e0e:	b29a      	uxth	r2, r3
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011e16:	e059      	b.n	8011ecc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	2b01      	cmp	r3, #1
 8011e22:	d917      	bls.n	8011e54 <HAL_SPI_Transmit+0x300>
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d013      	beq.n	8011e54 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e30:	881a      	ldrh	r2, [r3, #0]
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e3a:	1c9a      	adds	r2, r3, #2
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011e46:	b29b      	uxth	r3, r3
 8011e48:	3b02      	subs	r3, #2
 8011e4a:	b29a      	uxth	r2, r3
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011e52:	e03b      	b.n	8011ecc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	3320      	adds	r3, #32
 8011e5e:	7812      	ldrb	r2, [r2, #0]
 8011e60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e66:	1c5a      	adds	r2, r3, #1
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	3b01      	subs	r3, #1
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011e7e:	e025      	b.n	8011ecc <HAL_SPI_Transmit+0x378>
 8011e80:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011e84:	f7f3 fbb8 	bl	80055f8 <HAL_GetTick>
 8011e88:	4602      	mov	r2, r0
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	1ad3      	subs	r3, r2, r3
 8011e8e:	683a      	ldr	r2, [r7, #0]
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d803      	bhi.n	8011e9c <HAL_SPI_Transmit+0x348>
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e9a:	d102      	bne.n	8011ea2 <HAL_SPI_Transmit+0x34e>
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d114      	bne.n	8011ecc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011ea2:	68f8      	ldr	r0, [r7, #12]
 8011ea4:	f000 fbf4 	bl	8012690 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011eae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	2201      	movs	r2, #1
 8011ebc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8011ec8:	2303      	movs	r3, #3
 8011eca:	e02c      	b.n	8011f26 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011ed2:	b29b      	uxth	r3, r3
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	f47f af79 	bne.w	8011dcc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8011eda:	693b      	ldr	r3, [r7, #16]
 8011edc:	9300      	str	r3, [sp, #0]
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	2108      	movs	r1, #8
 8011ee4:	68f8      	ldr	r0, [r7, #12]
 8011ee6:	f000 fc73 	bl	80127d0 <SPI_WaitOnFlagUntilTimeout>
 8011eea:	4603      	mov	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d007      	beq.n	8011f00 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ef6:	f043 0220 	orr.w	r2, r3, #32
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011f00:	68f8      	ldr	r0, [r7, #12]
 8011f02:	f000 fbc5 	bl	8012690 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	2201      	movs	r2, #1
 8011f0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	2200      	movs	r2, #0
 8011f12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d001      	beq.n	8011f24 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8011f20:	2301      	movs	r3, #1
 8011f22:	e000      	b.n	8011f26 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8011f24:	2300      	movs	r3, #0
  }
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3718      	adds	r7, #24
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
 8011f2e:	bf00      	nop

08011f30 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b084      	sub	sp, #16
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	60f8      	str	r0, [r7, #12]
 8011f38:	60b9      	str	r1, [r7, #8]
 8011f3a:	4613      	mov	r3, r2
 8011f3c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011f44:	b2db      	uxtb	r3, r3
 8011f46:	2b01      	cmp	r3, #1
 8011f48:	d001      	beq.n	8011f4e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8011f4a:	2302      	movs	r3, #2
 8011f4c:	e126      	b.n	801219c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d002      	beq.n	8011f5a <HAL_SPI_Transmit_DMA+0x2a>
 8011f54:	88fb      	ldrh	r3, [r7, #6]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d101      	bne.n	8011f5e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	e11e      	b.n	801219c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	d101      	bne.n	8011f6c <HAL_SPI_Transmit_DMA+0x3c>
 8011f68:	2302      	movs	r3, #2
 8011f6a:	e117      	b.n	801219c <HAL_SPI_Transmit_DMA+0x26c>
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2201      	movs	r2, #1
 8011f70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2203      	movs	r2, #3
 8011f78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	68ba      	ldr	r2, [r7, #8]
 8011f88:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	88fa      	ldrh	r2, [r7, #6]
 8011f8e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	88fa      	ldrh	r2, [r7, #6]
 8011f96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	689b      	ldr	r3, [r3, #8]
 8011fc0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8011fc4:	d108      	bne.n	8011fd8 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	681a      	ldr	r2, [r3, #0]
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011fd4:	601a      	str	r2, [r3, #0]
 8011fd6:	e009      	b.n	8011fec <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	68db      	ldr	r3, [r3, #12]
 8011fde:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8011fea:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	68db      	ldr	r3, [r3, #12]
 8011ff0:	2b0f      	cmp	r3, #15
 8011ff2:	d905      	bls.n	8012000 <HAL_SPI_Transmit_DMA+0xd0>
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ff8:	699b      	ldr	r3, [r3, #24]
 8011ffa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011ffe:	d10f      	bne.n	8012020 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8012004:	2b07      	cmp	r3, #7
 8012006:	d911      	bls.n	801202c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801200c:	699b      	ldr	r3, [r3, #24]
 801200e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012012:	d00b      	beq.n	801202c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012018:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801201a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801201e:	d005      	beq.n	801202c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	2200      	movs	r2, #0
 8012024:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8012028:	2301      	movs	r3, #1
 801202a:	e0b7      	b.n	801219c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	2b07      	cmp	r3, #7
 8012032:	d820      	bhi.n	8012076 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012038:	699b      	ldr	r3, [r3, #24]
 801203a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801203e:	d109      	bne.n	8012054 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012046:	b29b      	uxth	r3, r3
 8012048:	3301      	adds	r3, #1
 801204a:	105b      	asrs	r3, r3, #1
 801204c:	b29a      	uxth	r2, r3
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012058:	699b      	ldr	r3, [r3, #24]
 801205a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801205e:	d11e      	bne.n	801209e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012066:	b29b      	uxth	r3, r3
 8012068:	3303      	adds	r3, #3
 801206a:	109b      	asrs	r3, r3, #2
 801206c:	b29a      	uxth	r2, r3
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012074:	e013      	b.n	801209e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	68db      	ldr	r3, [r3, #12]
 801207a:	2b0f      	cmp	r3, #15
 801207c:	d80f      	bhi.n	801209e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012082:	699b      	ldr	r3, [r3, #24]
 8012084:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012088:	d109      	bne.n	801209e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012090:	b29b      	uxth	r3, r3
 8012092:	3301      	adds	r3, #1
 8012094:	105b      	asrs	r3, r3, #1
 8012096:	b29a      	uxth	r2, r3
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80120a2:	4a40      	ldr	r2, [pc, #256]	@ (80121a4 <HAL_SPI_Transmit_DMA+0x274>)
 80120a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80120aa:	4a3f      	ldr	r2, [pc, #252]	@ (80121a8 <HAL_SPI_Transmit_DMA+0x278>)
 80120ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80120b2:	4a3e      	ldr	r2, [pc, #248]	@ (80121ac <HAL_SPI_Transmit_DMA+0x27c>)
 80120b4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80120ba:	2200      	movs	r2, #0
 80120bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	689a      	ldr	r2, [r3, #8]
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80120cc:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80120d6:	4619      	mov	r1, r3
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	3320      	adds	r3, #32
 80120de:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80120e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80120e8:	f7f5 fee4 	bl	8007eb4 <HAL_DMA_Start_IT>
 80120ec:	4603      	mov	r3, r0
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d011      	beq.n	8012116 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80120f8:	f043 0210 	orr.w	r2, r3, #16
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	2201      	movs	r2, #1
 8012106:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2200      	movs	r2, #0
 801210e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8012112:	2301      	movs	r3, #1
 8012114:	e042      	b.n	801219c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801211a:	69db      	ldr	r3, [r3, #28]
 801211c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012120:	d108      	bne.n	8012134 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	6859      	ldr	r1, [r3, #4]
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681a      	ldr	r2, [r3, #0]
 801212c:	4b20      	ldr	r3, [pc, #128]	@ (80121b0 <HAL_SPI_Transmit_DMA+0x280>)
 801212e:	400b      	ands	r3, r1
 8012130:	6053      	str	r3, [r2, #4]
 8012132:	e009      	b.n	8012148 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	685a      	ldr	r2, [r3, #4]
 801213a:	4b1d      	ldr	r3, [pc, #116]	@ (80121b0 <HAL_SPI_Transmit_DMA+0x280>)
 801213c:	4013      	ands	r3, r2
 801213e:	88f9      	ldrh	r1, [r7, #6]
 8012140:	68fa      	ldr	r2, [r7, #12]
 8012142:	6812      	ldr	r2, [r2, #0]
 8012144:	430b      	orrs	r3, r1
 8012146:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	689a      	ldr	r2, [r3, #8]
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012156:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	691a      	ldr	r2, [r3, #16]
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8012166:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	681a      	ldr	r2, [r3, #0]
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f042 0201 	orr.w	r2, r2, #1
 8012176:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	685b      	ldr	r3, [r3, #4]
 801217c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012180:	d107      	bne.n	8012192 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	681a      	ldr	r2, [r3, #0]
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012190:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	2200      	movs	r2, #0
 8012196:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801219a:	2300      	movs	r3, #0
}
 801219c:	4618      	mov	r0, r3
 801219e:	3710      	adds	r7, #16
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}
 80121a4:	080125fb 	.word	0x080125fb
 80121a8:	080125b5 	.word	0x080125b5
 80121ac:	08012617 	.word	0x08012617
 80121b0:	ffff0000 	.word	0xffff0000

080121b4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b08a      	sub	sp, #40	@ 0x28
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	691b      	ldr	r3, [r3, #16]
 80121c2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	695b      	ldr	r3, [r3, #20]
 80121ca:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80121cc:	6a3a      	ldr	r2, [r7, #32]
 80121ce:	69fb      	ldr	r3, [r7, #28]
 80121d0:	4013      	ands	r3, r2
 80121d2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80121dc:	2300      	movs	r3, #0
 80121de:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80121e6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	3330      	adds	r3, #48	@ 0x30
 80121ee:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80121f0:	69fb      	ldr	r3, [r7, #28]
 80121f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d010      	beq.n	801221c <HAL_SPI_IRQHandler+0x68>
 80121fa:	6a3b      	ldr	r3, [r7, #32]
 80121fc:	f003 0308 	and.w	r3, r3, #8
 8012200:	2b00      	cmp	r3, #0
 8012202:	d00b      	beq.n	801221c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	699a      	ldr	r2, [r3, #24]
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012212:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f000 f9c3 	bl	80125a0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801221a:	e192      	b.n	8012542 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012222:	2b00      	cmp	r3, #0
 8012224:	d113      	bne.n	801224e <HAL_SPI_IRQHandler+0x9a>
 8012226:	69bb      	ldr	r3, [r7, #24]
 8012228:	f003 0320 	and.w	r3, r3, #32
 801222c:	2b00      	cmp	r3, #0
 801222e:	d10e      	bne.n	801224e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8012230:	69bb      	ldr	r3, [r7, #24]
 8012232:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012236:	2b00      	cmp	r3, #0
 8012238:	d009      	beq.n	801224e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	4798      	blx	r3
    hspi->RxISR(hspi);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	4798      	blx	r3
    handled = 1UL;
 801224a:	2301      	movs	r3, #1
 801224c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801224e:	69bb      	ldr	r3, [r7, #24]
 8012250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012254:	2b00      	cmp	r3, #0
 8012256:	d10f      	bne.n	8012278 <HAL_SPI_IRQHandler+0xc4>
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	f003 0301 	and.w	r3, r3, #1
 801225e:	2b00      	cmp	r3, #0
 8012260:	d00a      	beq.n	8012278 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012262:	69bb      	ldr	r3, [r7, #24]
 8012264:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012268:	2b00      	cmp	r3, #0
 801226a:	d105      	bne.n	8012278 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	4798      	blx	r3
    handled = 1UL;
 8012274:	2301      	movs	r3, #1
 8012276:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012278:	69bb      	ldr	r3, [r7, #24]
 801227a:	f003 0320 	and.w	r3, r3, #32
 801227e:	2b00      	cmp	r3, #0
 8012280:	d10f      	bne.n	80122a2 <HAL_SPI_IRQHandler+0xee>
 8012282:	69bb      	ldr	r3, [r7, #24]
 8012284:	f003 0302 	and.w	r3, r3, #2
 8012288:	2b00      	cmp	r3, #0
 801228a:	d00a      	beq.n	80122a2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801228c:	69bb      	ldr	r3, [r7, #24]
 801228e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012292:	2b00      	cmp	r3, #0
 8012294:	d105      	bne.n	80122a2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	4798      	blx	r3
    handled = 1UL;
 801229e:	2301      	movs	r3, #1
 80122a0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80122a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	f040 8147 	bne.w	8012538 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80122aa:	69bb      	ldr	r3, [r7, #24]
 80122ac:	f003 0308 	and.w	r3, r3, #8
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	f000 808b 	beq.w	80123cc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	699a      	ldr	r2, [r3, #24]
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	f042 0208 	orr.w	r2, r2, #8
 80122c4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	699a      	ldr	r2, [r3, #24]
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f042 0210 	orr.w	r2, r2, #16
 80122d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	699a      	ldr	r2, [r3, #24]
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80122e4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	691a      	ldr	r2, [r3, #16]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	f022 0208 	bic.w	r2, r2, #8
 80122f4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	689b      	ldr	r3, [r3, #8]
 80122fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8012300:	2b00      	cmp	r3, #0
 8012302:	d13d      	bne.n	8012380 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8012304:	e036      	b.n	8012374 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	68db      	ldr	r3, [r3, #12]
 801230a:	2b0f      	cmp	r3, #15
 801230c:	d90b      	bls.n	8012326 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681a      	ldr	r2, [r3, #0]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012316:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012318:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801231e:	1d1a      	adds	r2, r3, #4
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	665a      	str	r2, [r3, #100]	@ 0x64
 8012324:	e01d      	b.n	8012362 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	68db      	ldr	r3, [r3, #12]
 801232a:	2b07      	cmp	r3, #7
 801232c:	d90b      	bls.n	8012346 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012332:	68fa      	ldr	r2, [r7, #12]
 8012334:	8812      	ldrh	r2, [r2, #0]
 8012336:	b292      	uxth	r2, r2
 8012338:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801233e:	1c9a      	adds	r2, r3, #2
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	665a      	str	r2, [r3, #100]	@ 0x64
 8012344:	e00d      	b.n	8012362 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012352:	7812      	ldrb	r2, [r2, #0]
 8012354:	b2d2      	uxtb	r2, r2
 8012356:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801235c:	1c5a      	adds	r2, r3, #1
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012368:	b29b      	uxth	r3, r3
 801236a:	3b01      	subs	r3, #1
 801236c:	b29a      	uxth	r2, r3
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801237a:	b29b      	uxth	r3, r3
 801237c:	2b00      	cmp	r3, #0
 801237e:	d1c2      	bne.n	8012306 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f000 f985 	bl	8012690 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2201      	movs	r2, #1
 801238a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012394:	2b00      	cmp	r3, #0
 8012396:	d003      	beq.n	80123a0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f000 f8f7 	bl	801258c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801239e:	e0d0      	b.n	8012542 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80123a0:	7cfb      	ldrb	r3, [r7, #19]
 80123a2:	2b05      	cmp	r3, #5
 80123a4:	d103      	bne.n	80123ae <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f000 f8dc 	bl	8012564 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80123ac:	e0c6      	b.n	801253c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80123ae:	7cfb      	ldrb	r3, [r7, #19]
 80123b0:	2b04      	cmp	r3, #4
 80123b2:	d103      	bne.n	80123bc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f000 f8cb 	bl	8012550 <HAL_SPI_RxCpltCallback>
    return;
 80123ba:	e0bf      	b.n	801253c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80123bc:	7cfb      	ldrb	r3, [r7, #19]
 80123be:	2b03      	cmp	r3, #3
 80123c0:	f040 80bc 	bne.w	801253c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f7ef fdd9 	bl	8001f7c <HAL_SPI_TxCpltCallback>
    return;
 80123ca:	e0b7      	b.n	801253c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80123cc:	69bb      	ldr	r3, [r7, #24]
 80123ce:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	f000 80b5 	beq.w	8012542 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80123d8:	69bb      	ldr	r3, [r7, #24]
 80123da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d00f      	beq.n	8012402 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80123e8:	f043 0204 	orr.w	r2, r3, #4
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	699a      	ldr	r2, [r3, #24]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012400:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8012402:	69bb      	ldr	r3, [r7, #24]
 8012404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012408:	2b00      	cmp	r3, #0
 801240a:	d00f      	beq.n	801242c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012412:	f043 0201 	orr.w	r2, r3, #1
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	699a      	ldr	r2, [r3, #24]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801242a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801242c:	69bb      	ldr	r3, [r7, #24]
 801242e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012432:	2b00      	cmp	r3, #0
 8012434:	d00f      	beq.n	8012456 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801243c:	f043 0208 	orr.w	r2, r3, #8
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	699a      	ldr	r2, [r3, #24]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012454:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8012456:	69bb      	ldr	r3, [r7, #24]
 8012458:	f003 0320 	and.w	r3, r3, #32
 801245c:	2b00      	cmp	r3, #0
 801245e:	d00f      	beq.n	8012480 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012466:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	699a      	ldr	r2, [r3, #24]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	f042 0220 	orr.w	r2, r2, #32
 801247e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012486:	2b00      	cmp	r3, #0
 8012488:	d05a      	beq.n	8012540 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	681a      	ldr	r2, [r3, #0]
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	f022 0201 	bic.w	r2, r2, #1
 8012498:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	6919      	ldr	r1, [r3, #16]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681a      	ldr	r2, [r3, #0]
 80124a4:	4b28      	ldr	r3, [pc, #160]	@ (8012548 <HAL_SPI_IRQHandler+0x394>)
 80124a6:	400b      	ands	r3, r1
 80124a8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80124aa:	697b      	ldr	r3, [r7, #20]
 80124ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80124b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80124b4:	d138      	bne.n	8012528 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	689a      	ldr	r2, [r3, #8]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80124c4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d013      	beq.n	80124f6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80124d2:	4a1e      	ldr	r2, [pc, #120]	@ (801254c <HAL_SPI_IRQHandler+0x398>)
 80124d4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80124da:	4618      	mov	r0, r3
 80124dc:	f7f6 fa72 	bl	80089c4 <HAL_DMA_Abort_IT>
 80124e0:	4603      	mov	r3, r0
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d007      	beq.n	80124f6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80124ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d020      	beq.n	8012540 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012502:	4a12      	ldr	r2, [pc, #72]	@ (801254c <HAL_SPI_IRQHandler+0x398>)
 8012504:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801250a:	4618      	mov	r0, r3
 801250c:	f7f6 fa5a 	bl	80089c4 <HAL_DMA_Abort_IT>
 8012510:	4603      	mov	r3, r0
 8012512:	2b00      	cmp	r3, #0
 8012514:	d014      	beq.n	8012540 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801251c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012526:	e00b      	b.n	8012540 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2201      	movs	r2, #1
 801252c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f000 f82b 	bl	801258c <HAL_SPI_ErrorCallback>
    return;
 8012536:	e003      	b.n	8012540 <HAL_SPI_IRQHandler+0x38c>
    return;
 8012538:	bf00      	nop
 801253a:	e002      	b.n	8012542 <HAL_SPI_IRQHandler+0x38e>
    return;
 801253c:	bf00      	nop
 801253e:	e000      	b.n	8012542 <HAL_SPI_IRQHandler+0x38e>
    return;
 8012540:	bf00      	nop
  }
}
 8012542:	3728      	adds	r7, #40	@ 0x28
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	fffffc94 	.word	0xfffffc94
 801254c:	0801265d 	.word	0x0801265d

08012550 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012550:	b480      	push	{r7}
 8012552:	b083      	sub	sp, #12
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012558:	bf00      	nop
 801255a:	370c      	adds	r7, #12
 801255c:	46bd      	mov	sp, r7
 801255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012562:	4770      	bx	lr

08012564 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012564:	b480      	push	{r7}
 8012566:	b083      	sub	sp, #12
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801256c:	bf00      	nop
 801256e:	370c      	adds	r7, #12
 8012570:	46bd      	mov	sp, r7
 8012572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012576:	4770      	bx	lr

08012578 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012578:	b480      	push	{r7}
 801257a:	b083      	sub	sp, #12
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8012580:	bf00      	nop
 8012582:	370c      	adds	r7, #12
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr

0801258c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801258c:	b480      	push	{r7}
 801258e:	b083      	sub	sp, #12
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012594:	bf00      	nop
 8012596:	370c      	adds	r7, #12
 8012598:	46bd      	mov	sp, r7
 801259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259e:	4770      	bx	lr

080125a0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80125a0:	b480      	push	{r7}
 80125a2:	b083      	sub	sp, #12
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80125a8:	bf00      	nop
 80125aa:	370c      	adds	r7, #12
 80125ac:	46bd      	mov	sp, r7
 80125ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b2:	4770      	bx	lr

080125b4 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b084      	sub	sp, #16
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125c0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80125c8:	b2db      	uxtb	r3, r3
 80125ca:	2b07      	cmp	r3, #7
 80125cc:	d011      	beq.n	80125f2 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80125d2:	69db      	ldr	r3, [r3, #28]
 80125d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80125d8:	d103      	bne.n	80125e2 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80125da:	68f8      	ldr	r0, [r7, #12]
 80125dc:	f7ef fcce 	bl	8001f7c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80125e0:	e007      	b.n	80125f2 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	691a      	ldr	r2, [r3, #16]
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	f042 0208 	orr.w	r2, r2, #8
 80125f0:	611a      	str	r2, [r3, #16]
}
 80125f2:	bf00      	nop
 80125f4:	3710      	adds	r7, #16
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}

080125fa <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80125fa:	b580      	push	{r7, lr}
 80125fc:	b084      	sub	sp, #16
 80125fe:	af00      	add	r7, sp, #0
 8012600:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012606:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8012608:	68f8      	ldr	r0, [r7, #12]
 801260a:	f7ff ffb5 	bl	8012578 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801260e:	bf00      	nop
 8012610:	3710      	adds	r7, #16
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}

08012616 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012616:	b580      	push	{r7, lr}
 8012618:	b084      	sub	sp, #16
 801261a:	af00      	add	r7, sp, #0
 801261c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012622:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f7f7 fb3d 	bl	8009ca4 <HAL_DMA_GetError>
 801262a:	4603      	mov	r3, r0
 801262c:	2b02      	cmp	r3, #2
 801262e:	d011      	beq.n	8012654 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	f000 f82d 	bl	8012690 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801263c:	f043 0210 	orr.w	r2, r3, #16
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2201      	movs	r2, #1
 801264a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801264e:	68f8      	ldr	r0, [r7, #12]
 8012650:	f7ff ff9c 	bl	801258c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012654:	bf00      	nop
 8012656:	3710      	adds	r7, #16
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b084      	sub	sp, #16
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012668:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	2200      	movs	r2, #0
 801266e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	2200      	movs	r2, #0
 8012676:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	2201      	movs	r2, #1
 801267e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012682:	68f8      	ldr	r0, [r7, #12]
 8012684:	f7ff ff82 	bl	801258c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012688:	bf00      	nop
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012690:	b480      	push	{r7}
 8012692:	b085      	sub	sp, #20
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	695b      	ldr	r3, [r3, #20]
 801269e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	699a      	ldr	r2, [r3, #24]
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	f042 0208 	orr.w	r2, r2, #8
 80126ae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	699a      	ldr	r2, [r3, #24]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	f042 0210 	orr.w	r2, r2, #16
 80126be:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	681a      	ldr	r2, [r3, #0]
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	f022 0201 	bic.w	r2, r2, #1
 80126ce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	6919      	ldr	r1, [r3, #16]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	4b3c      	ldr	r3, [pc, #240]	@ (80127cc <SPI_CloseTransfer+0x13c>)
 80126dc:	400b      	ands	r3, r1
 80126de:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	689a      	ldr	r2, [r3, #8]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80126ee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80126f6:	b2db      	uxtb	r3, r3
 80126f8:	2b04      	cmp	r3, #4
 80126fa:	d014      	beq.n	8012726 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	f003 0320 	and.w	r3, r3, #32
 8012702:	2b00      	cmp	r3, #0
 8012704:	d00f      	beq.n	8012726 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801270c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	699a      	ldr	r2, [r3, #24]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	f042 0220 	orr.w	r2, r2, #32
 8012724:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801272c:	b2db      	uxtb	r3, r3
 801272e:	2b03      	cmp	r3, #3
 8012730:	d014      	beq.n	801275c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012738:	2b00      	cmp	r3, #0
 801273a:	d00f      	beq.n	801275c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012742:	f043 0204 	orr.w	r2, r3, #4
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	699a      	ldr	r2, [r3, #24]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801275a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012762:	2b00      	cmp	r3, #0
 8012764:	d00f      	beq.n	8012786 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801276c:	f043 0201 	orr.w	r2, r3, #1
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	699a      	ldr	r2, [r3, #24]
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012784:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801278c:	2b00      	cmp	r3, #0
 801278e:	d00f      	beq.n	80127b0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012796:	f043 0208 	orr.w	r2, r3, #8
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	699a      	ldr	r2, [r3, #24]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80127ae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2200      	movs	r2, #0
 80127b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2200      	movs	r2, #0
 80127bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80127c0:	bf00      	nop
 80127c2:	3714      	adds	r7, #20
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr
 80127cc:	fffffc90 	.word	0xfffffc90

080127d0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b084      	sub	sp, #16
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	603b      	str	r3, [r7, #0]
 80127dc:	4613      	mov	r3, r2
 80127de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80127e0:	e010      	b.n	8012804 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80127e2:	f7f2 ff09 	bl	80055f8 <HAL_GetTick>
 80127e6:	4602      	mov	r2, r0
 80127e8:	69bb      	ldr	r3, [r7, #24]
 80127ea:	1ad3      	subs	r3, r2, r3
 80127ec:	683a      	ldr	r2, [r7, #0]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d803      	bhi.n	80127fa <SPI_WaitOnFlagUntilTimeout+0x2a>
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127f8:	d102      	bne.n	8012800 <SPI_WaitOnFlagUntilTimeout+0x30>
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d101      	bne.n	8012804 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8012800:	2303      	movs	r3, #3
 8012802:	e00f      	b.n	8012824 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	695a      	ldr	r2, [r3, #20]
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	4013      	ands	r3, r2
 801280e:	68ba      	ldr	r2, [r7, #8]
 8012810:	429a      	cmp	r2, r3
 8012812:	bf0c      	ite	eq
 8012814:	2301      	moveq	r3, #1
 8012816:	2300      	movne	r3, #0
 8012818:	b2db      	uxtb	r3, r3
 801281a:	461a      	mov	r2, r3
 801281c:	79fb      	ldrb	r3, [r7, #7]
 801281e:	429a      	cmp	r2, r3
 8012820:	d0df      	beq.n	80127e2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8012822:	2300      	movs	r3, #0
}
 8012824:	4618      	mov	r0, r3
 8012826:	3710      	adds	r7, #16
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}

0801282c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801282c:	b480      	push	{r7}
 801282e:	b085      	sub	sp, #20
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012838:	095b      	lsrs	r3, r3, #5
 801283a:	3301      	adds	r3, #1
 801283c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	68db      	ldr	r3, [r3, #12]
 8012842:	3301      	adds	r3, #1
 8012844:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	3307      	adds	r3, #7
 801284a:	08db      	lsrs	r3, r3, #3
 801284c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	68fa      	ldr	r2, [r7, #12]
 8012852:	fb02 f303 	mul.w	r3, r2, r3
}
 8012856:	4618      	mov	r0, r3
 8012858:	3714      	adds	r7, #20
 801285a:	46bd      	mov	sp, r7
 801285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012860:	4770      	bx	lr
	...

08012864 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	60f8      	str	r0, [r7, #12]
 801286c:	60b9      	str	r1, [r7, #8]
 801286e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d101      	bne.n	801287a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8012876:	2301      	movs	r3, #1
 8012878:	e03e      	b.n	80128f8 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012880:	b2db      	uxtb	r3, r3
 8012882:	2b00      	cmp	r3, #0
 8012884:	d106      	bne.n	8012894 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2200      	movs	r2, #0
 801288a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 801288e:	68f8      	ldr	r0, [r7, #12]
 8012890:	f7f0 fdaa 	bl	80033e8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	681a      	ldr	r2, [r3, #0]
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	3308      	adds	r3, #8
 801289c:	4619      	mov	r1, r3
 801289e:	4610      	mov	r0, r2
 80128a0:	f003 ffba 	bl	8016818 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	6818      	ldr	r0, [r3, #0]
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	689b      	ldr	r3, [r3, #8]
 80128ac:	461a      	mov	r2, r3
 80128ae:	68b9      	ldr	r1, [r7, #8]
 80128b0:	f004 f842 	bl	8016938 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	6858      	ldr	r0, [r3, #4]
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	689a      	ldr	r2, [r3, #8]
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128c0:	6879      	ldr	r1, [r7, #4]
 80128c2:	f004 f883 	bl	80169cc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	68fa      	ldr	r2, [r7, #12]
 80128cc:	6892      	ldr	r2, [r2, #8]
 80128ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	68fa      	ldr	r2, [r7, #12]
 80128d8:	6892      	ldr	r2, [r2, #8]
 80128da:	f041 0101 	orr.w	r1, r1, #1
 80128de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80128e2:	4b07      	ldr	r3, [pc, #28]	@ (8012900 <HAL_SRAM_Init+0x9c>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	4a06      	ldr	r2, [pc, #24]	@ (8012900 <HAL_SRAM_Init+0x9c>)
 80128e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80128ec:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	2201      	movs	r2, #1
 80128f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 80128f6:	2300      	movs	r3, #0
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3710      	adds	r7, #16
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	52004000 	.word	0x52004000

08012904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d101      	bne.n	8012916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012912:	2301      	movs	r3, #1
 8012914:	e049      	b.n	80129aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801291c:	b2db      	uxtb	r3, r3
 801291e:	2b00      	cmp	r3, #0
 8012920:	d106      	bne.n	8012930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2200      	movs	r2, #0
 8012926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f7f2 fb38 	bl	8004fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2202      	movs	r2, #2
 8012934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681a      	ldr	r2, [r3, #0]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	3304      	adds	r3, #4
 8012940:	4619      	mov	r1, r3
 8012942:	4610      	mov	r0, r2
 8012944:	f000 fe56 	bl	80135f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2201      	movs	r2, #1
 801294c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2201      	movs	r2, #1
 8012954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2201      	movs	r2, #1
 801295c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2201      	movs	r2, #1
 8012964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2201      	movs	r2, #1
 801296c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2201      	movs	r2, #1
 8012974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2201      	movs	r2, #1
 801297c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2201      	movs	r2, #1
 8012984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2201      	movs	r2, #1
 801298c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2201      	movs	r2, #1
 8012994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2201      	movs	r2, #1
 801299c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2201      	movs	r2, #1
 80129a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80129a8:	2300      	movs	r3, #0
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3708      	adds	r7, #8
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
	...

080129b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80129b4:	b480      	push	{r7}
 80129b6:	b085      	sub	sp, #20
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	d001      	beq.n	80129cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80129c8:	2301      	movs	r3, #1
 80129ca:	e04c      	b.n	8012a66 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2202      	movs	r2, #2
 80129d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	4a26      	ldr	r2, [pc, #152]	@ (8012a74 <HAL_TIM_Base_Start+0xc0>)
 80129da:	4293      	cmp	r3, r2
 80129dc:	d022      	beq.n	8012a24 <HAL_TIM_Base_Start+0x70>
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80129e6:	d01d      	beq.n	8012a24 <HAL_TIM_Base_Start+0x70>
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	4a22      	ldr	r2, [pc, #136]	@ (8012a78 <HAL_TIM_Base_Start+0xc4>)
 80129ee:	4293      	cmp	r3, r2
 80129f0:	d018      	beq.n	8012a24 <HAL_TIM_Base_Start+0x70>
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	4a21      	ldr	r2, [pc, #132]	@ (8012a7c <HAL_TIM_Base_Start+0xc8>)
 80129f8:	4293      	cmp	r3, r2
 80129fa:	d013      	beq.n	8012a24 <HAL_TIM_Base_Start+0x70>
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	4a1f      	ldr	r2, [pc, #124]	@ (8012a80 <HAL_TIM_Base_Start+0xcc>)
 8012a02:	4293      	cmp	r3, r2
 8012a04:	d00e      	beq.n	8012a24 <HAL_TIM_Base_Start+0x70>
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8012a84 <HAL_TIM_Base_Start+0xd0>)
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	d009      	beq.n	8012a24 <HAL_TIM_Base_Start+0x70>
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	4a1c      	ldr	r2, [pc, #112]	@ (8012a88 <HAL_TIM_Base_Start+0xd4>)
 8012a16:	4293      	cmp	r3, r2
 8012a18:	d004      	beq.n	8012a24 <HAL_TIM_Base_Start+0x70>
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8012a8c <HAL_TIM_Base_Start+0xd8>)
 8012a20:	4293      	cmp	r3, r2
 8012a22:	d115      	bne.n	8012a50 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	689a      	ldr	r2, [r3, #8]
 8012a2a:	4b19      	ldr	r3, [pc, #100]	@ (8012a90 <HAL_TIM_Base_Start+0xdc>)
 8012a2c:	4013      	ands	r3, r2
 8012a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	2b06      	cmp	r3, #6
 8012a34:	d015      	beq.n	8012a62 <HAL_TIM_Base_Start+0xae>
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a3c:	d011      	beq.n	8012a62 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	681a      	ldr	r2, [r3, #0]
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	f042 0201 	orr.w	r2, r2, #1
 8012a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a4e:	e008      	b.n	8012a62 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	681a      	ldr	r2, [r3, #0]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	f042 0201 	orr.w	r2, r2, #1
 8012a5e:	601a      	str	r2, [r3, #0]
 8012a60:	e000      	b.n	8012a64 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012a64:	2300      	movs	r3, #0
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3714      	adds	r7, #20
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a70:	4770      	bx	lr
 8012a72:	bf00      	nop
 8012a74:	40010000 	.word	0x40010000
 8012a78:	40000400 	.word	0x40000400
 8012a7c:	40000800 	.word	0x40000800
 8012a80:	40000c00 	.word	0x40000c00
 8012a84:	40010400 	.word	0x40010400
 8012a88:	40001800 	.word	0x40001800
 8012a8c:	40014000 	.word	0x40014000
 8012a90:	00010007 	.word	0x00010007

08012a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012a94:	b480      	push	{r7}
 8012a96:	b085      	sub	sp, #20
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012aa2:	b2db      	uxtb	r3, r3
 8012aa4:	2b01      	cmp	r3, #1
 8012aa6:	d001      	beq.n	8012aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	e054      	b.n	8012b56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2202      	movs	r2, #2
 8012ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	68da      	ldr	r2, [r3, #12]
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	f042 0201 	orr.w	r2, r2, #1
 8012ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	4a26      	ldr	r2, [pc, #152]	@ (8012b64 <HAL_TIM_Base_Start_IT+0xd0>)
 8012aca:	4293      	cmp	r3, r2
 8012acc:	d022      	beq.n	8012b14 <HAL_TIM_Base_Start_IT+0x80>
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ad6:	d01d      	beq.n	8012b14 <HAL_TIM_Base_Start_IT+0x80>
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	4a22      	ldr	r2, [pc, #136]	@ (8012b68 <HAL_TIM_Base_Start_IT+0xd4>)
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d018      	beq.n	8012b14 <HAL_TIM_Base_Start_IT+0x80>
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	4a21      	ldr	r2, [pc, #132]	@ (8012b6c <HAL_TIM_Base_Start_IT+0xd8>)
 8012ae8:	4293      	cmp	r3, r2
 8012aea:	d013      	beq.n	8012b14 <HAL_TIM_Base_Start_IT+0x80>
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	4a1f      	ldr	r2, [pc, #124]	@ (8012b70 <HAL_TIM_Base_Start_IT+0xdc>)
 8012af2:	4293      	cmp	r3, r2
 8012af4:	d00e      	beq.n	8012b14 <HAL_TIM_Base_Start_IT+0x80>
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	4a1e      	ldr	r2, [pc, #120]	@ (8012b74 <HAL_TIM_Base_Start_IT+0xe0>)
 8012afc:	4293      	cmp	r3, r2
 8012afe:	d009      	beq.n	8012b14 <HAL_TIM_Base_Start_IT+0x80>
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	4a1c      	ldr	r2, [pc, #112]	@ (8012b78 <HAL_TIM_Base_Start_IT+0xe4>)
 8012b06:	4293      	cmp	r3, r2
 8012b08:	d004      	beq.n	8012b14 <HAL_TIM_Base_Start_IT+0x80>
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8012b7c <HAL_TIM_Base_Start_IT+0xe8>)
 8012b10:	4293      	cmp	r3, r2
 8012b12:	d115      	bne.n	8012b40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	689a      	ldr	r2, [r3, #8]
 8012b1a:	4b19      	ldr	r3, [pc, #100]	@ (8012b80 <HAL_TIM_Base_Start_IT+0xec>)
 8012b1c:	4013      	ands	r3, r2
 8012b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	2b06      	cmp	r3, #6
 8012b24:	d015      	beq.n	8012b52 <HAL_TIM_Base_Start_IT+0xbe>
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b2c:	d011      	beq.n	8012b52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	681a      	ldr	r2, [r3, #0]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	f042 0201 	orr.w	r2, r2, #1
 8012b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b3e:	e008      	b.n	8012b52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	681a      	ldr	r2, [r3, #0]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	f042 0201 	orr.w	r2, r2, #1
 8012b4e:	601a      	str	r2, [r3, #0]
 8012b50:	e000      	b.n	8012b54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012b54:	2300      	movs	r3, #0
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3714      	adds	r7, #20
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	40010000 	.word	0x40010000
 8012b68:	40000400 	.word	0x40000400
 8012b6c:	40000800 	.word	0x40000800
 8012b70:	40000c00 	.word	0x40000c00
 8012b74:	40010400 	.word	0x40010400
 8012b78:	40001800 	.word	0x40001800
 8012b7c:	40014000 	.word	0x40014000
 8012b80:	00010007 	.word	0x00010007

08012b84 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	2200      	movs	r2, #0
 8012b94:	6839      	ldr	r1, [r7, #0]
 8012b96:	4618      	mov	r0, r3
 8012b98:	f001 f940 	bl	8013e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	4a3e      	ldr	r2, [pc, #248]	@ (8012c9c <HAL_TIM_OC_Stop+0x118>)
 8012ba2:	4293      	cmp	r3, r2
 8012ba4:	d013      	beq.n	8012bce <HAL_TIM_OC_Stop+0x4a>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	4a3d      	ldr	r2, [pc, #244]	@ (8012ca0 <HAL_TIM_OC_Stop+0x11c>)
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d00e      	beq.n	8012bce <HAL_TIM_OC_Stop+0x4a>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	4a3b      	ldr	r2, [pc, #236]	@ (8012ca4 <HAL_TIM_OC_Stop+0x120>)
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	d009      	beq.n	8012bce <HAL_TIM_OC_Stop+0x4a>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	4a3a      	ldr	r2, [pc, #232]	@ (8012ca8 <HAL_TIM_OC_Stop+0x124>)
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	d004      	beq.n	8012bce <HAL_TIM_OC_Stop+0x4a>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	4a38      	ldr	r2, [pc, #224]	@ (8012cac <HAL_TIM_OC_Stop+0x128>)
 8012bca:	4293      	cmp	r3, r2
 8012bcc:	d101      	bne.n	8012bd2 <HAL_TIM_OC_Stop+0x4e>
 8012bce:	2301      	movs	r3, #1
 8012bd0:	e000      	b.n	8012bd4 <HAL_TIM_OC_Stop+0x50>
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d017      	beq.n	8012c08 <HAL_TIM_OC_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	6a1a      	ldr	r2, [r3, #32]
 8012bde:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012be2:	4013      	ands	r3, r2
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d10f      	bne.n	8012c08 <HAL_TIM_OC_Stop+0x84>
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	6a1a      	ldr	r2, [r3, #32]
 8012bee:	f240 4344 	movw	r3, #1092	@ 0x444
 8012bf2:	4013      	ands	r3, r2
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d107      	bne.n	8012c08 <HAL_TIM_OC_Stop+0x84>
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012c06:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	6a1a      	ldr	r2, [r3, #32]
 8012c0e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012c12:	4013      	ands	r3, r2
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d10f      	bne.n	8012c38 <HAL_TIM_OC_Stop+0xb4>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	6a1a      	ldr	r2, [r3, #32]
 8012c1e:	f240 4344 	movw	r3, #1092	@ 0x444
 8012c22:	4013      	ands	r3, r2
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d107      	bne.n	8012c38 <HAL_TIM_OC_Stop+0xb4>
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	f022 0201 	bic.w	r2, r2, #1
 8012c36:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d104      	bne.n	8012c48 <HAL_TIM_OC_Stop+0xc4>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2201      	movs	r2, #1
 8012c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012c46:	e023      	b.n	8012c90 <HAL_TIM_OC_Stop+0x10c>
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	2b04      	cmp	r3, #4
 8012c4c:	d104      	bne.n	8012c58 <HAL_TIM_OC_Stop+0xd4>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2201      	movs	r2, #1
 8012c52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012c56:	e01b      	b.n	8012c90 <HAL_TIM_OC_Stop+0x10c>
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	2b08      	cmp	r3, #8
 8012c5c:	d104      	bne.n	8012c68 <HAL_TIM_OC_Stop+0xe4>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	2201      	movs	r2, #1
 8012c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012c66:	e013      	b.n	8012c90 <HAL_TIM_OC_Stop+0x10c>
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	2b0c      	cmp	r3, #12
 8012c6c:	d104      	bne.n	8012c78 <HAL_TIM_OC_Stop+0xf4>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2201      	movs	r2, #1
 8012c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012c76:	e00b      	b.n	8012c90 <HAL_TIM_OC_Stop+0x10c>
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	2b10      	cmp	r3, #16
 8012c7c:	d104      	bne.n	8012c88 <HAL_TIM_OC_Stop+0x104>
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2201      	movs	r2, #1
 8012c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012c86:	e003      	b.n	8012c90 <HAL_TIM_OC_Stop+0x10c>
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2201      	movs	r2, #1
 8012c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8012c90:	2300      	movs	r3, #0
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3708      	adds	r7, #8
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}
 8012c9a:	bf00      	nop
 8012c9c:	40010000 	.word	0x40010000
 8012ca0:	40010400 	.word	0x40010400
 8012ca4:	40014000 	.word	0x40014000
 8012ca8:	40014400 	.word	0x40014400
 8012cac:	40014800 	.word	0x40014800

08012cb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b082      	sub	sp, #8
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d101      	bne.n	8012cc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	e049      	b.n	8012d56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012cc8:	b2db      	uxtb	r3, r3
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d106      	bne.n	8012cdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f7f2 f982 	bl	8004fe0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2202      	movs	r2, #2
 8012ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	681a      	ldr	r2, [r3, #0]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	3304      	adds	r3, #4
 8012cec:	4619      	mov	r1, r3
 8012cee:	4610      	mov	r0, r2
 8012cf0:	f000 fc80 	bl	80135f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2201      	movs	r2, #1
 8012d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2201      	movs	r2, #1
 8012d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2201      	movs	r2, #1
 8012d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2201      	movs	r2, #1
 8012d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2201      	movs	r2, #1
 8012d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2201      	movs	r2, #1
 8012d28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2201      	movs	r2, #1
 8012d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2201      	movs	r2, #1
 8012d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2201      	movs	r2, #1
 8012d40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2201      	movs	r2, #1
 8012d48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2201      	movs	r2, #1
 8012d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012d54:	2300      	movs	r3, #0
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3708      	adds	r7, #8
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
	...

08012d60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b084      	sub	sp, #16
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d109      	bne.n	8012d84 <HAL_TIM_PWM_Start+0x24>
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012d76:	b2db      	uxtb	r3, r3
 8012d78:	2b01      	cmp	r3, #1
 8012d7a:	bf14      	ite	ne
 8012d7c:	2301      	movne	r3, #1
 8012d7e:	2300      	moveq	r3, #0
 8012d80:	b2db      	uxtb	r3, r3
 8012d82:	e03c      	b.n	8012dfe <HAL_TIM_PWM_Start+0x9e>
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	2b04      	cmp	r3, #4
 8012d88:	d109      	bne.n	8012d9e <HAL_TIM_PWM_Start+0x3e>
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012d90:	b2db      	uxtb	r3, r3
 8012d92:	2b01      	cmp	r3, #1
 8012d94:	bf14      	ite	ne
 8012d96:	2301      	movne	r3, #1
 8012d98:	2300      	moveq	r3, #0
 8012d9a:	b2db      	uxtb	r3, r3
 8012d9c:	e02f      	b.n	8012dfe <HAL_TIM_PWM_Start+0x9e>
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	2b08      	cmp	r3, #8
 8012da2:	d109      	bne.n	8012db8 <HAL_TIM_PWM_Start+0x58>
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	2b01      	cmp	r3, #1
 8012dae:	bf14      	ite	ne
 8012db0:	2301      	movne	r3, #1
 8012db2:	2300      	moveq	r3, #0
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	e022      	b.n	8012dfe <HAL_TIM_PWM_Start+0x9e>
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	2b0c      	cmp	r3, #12
 8012dbc:	d109      	bne.n	8012dd2 <HAL_TIM_PWM_Start+0x72>
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012dc4:	b2db      	uxtb	r3, r3
 8012dc6:	2b01      	cmp	r3, #1
 8012dc8:	bf14      	ite	ne
 8012dca:	2301      	movne	r3, #1
 8012dcc:	2300      	moveq	r3, #0
 8012dce:	b2db      	uxtb	r3, r3
 8012dd0:	e015      	b.n	8012dfe <HAL_TIM_PWM_Start+0x9e>
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	2b10      	cmp	r3, #16
 8012dd6:	d109      	bne.n	8012dec <HAL_TIM_PWM_Start+0x8c>
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012dde:	b2db      	uxtb	r3, r3
 8012de0:	2b01      	cmp	r3, #1
 8012de2:	bf14      	ite	ne
 8012de4:	2301      	movne	r3, #1
 8012de6:	2300      	moveq	r3, #0
 8012de8:	b2db      	uxtb	r3, r3
 8012dea:	e008      	b.n	8012dfe <HAL_TIM_PWM_Start+0x9e>
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012df2:	b2db      	uxtb	r3, r3
 8012df4:	2b01      	cmp	r3, #1
 8012df6:	bf14      	ite	ne
 8012df8:	2301      	movne	r3, #1
 8012dfa:	2300      	moveq	r3, #0
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d001      	beq.n	8012e06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8012e02:	2301      	movs	r3, #1
 8012e04:	e0a1      	b.n	8012f4a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d104      	bne.n	8012e16 <HAL_TIM_PWM_Start+0xb6>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2202      	movs	r2, #2
 8012e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012e14:	e023      	b.n	8012e5e <HAL_TIM_PWM_Start+0xfe>
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	2b04      	cmp	r3, #4
 8012e1a:	d104      	bne.n	8012e26 <HAL_TIM_PWM_Start+0xc6>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2202      	movs	r2, #2
 8012e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012e24:	e01b      	b.n	8012e5e <HAL_TIM_PWM_Start+0xfe>
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	2b08      	cmp	r3, #8
 8012e2a:	d104      	bne.n	8012e36 <HAL_TIM_PWM_Start+0xd6>
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2202      	movs	r2, #2
 8012e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012e34:	e013      	b.n	8012e5e <HAL_TIM_PWM_Start+0xfe>
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	2b0c      	cmp	r3, #12
 8012e3a:	d104      	bne.n	8012e46 <HAL_TIM_PWM_Start+0xe6>
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2202      	movs	r2, #2
 8012e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012e44:	e00b      	b.n	8012e5e <HAL_TIM_PWM_Start+0xfe>
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	2b10      	cmp	r3, #16
 8012e4a:	d104      	bne.n	8012e56 <HAL_TIM_PWM_Start+0xf6>
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2202      	movs	r2, #2
 8012e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012e54:	e003      	b.n	8012e5e <HAL_TIM_PWM_Start+0xfe>
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2202      	movs	r2, #2
 8012e5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	2201      	movs	r2, #1
 8012e64:	6839      	ldr	r1, [r7, #0]
 8012e66:	4618      	mov	r0, r3
 8012e68:	f000 ffd8 	bl	8013e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	4a38      	ldr	r2, [pc, #224]	@ (8012f54 <HAL_TIM_PWM_Start+0x1f4>)
 8012e72:	4293      	cmp	r3, r2
 8012e74:	d013      	beq.n	8012e9e <HAL_TIM_PWM_Start+0x13e>
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4a37      	ldr	r2, [pc, #220]	@ (8012f58 <HAL_TIM_PWM_Start+0x1f8>)
 8012e7c:	4293      	cmp	r3, r2
 8012e7e:	d00e      	beq.n	8012e9e <HAL_TIM_PWM_Start+0x13e>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	4a35      	ldr	r2, [pc, #212]	@ (8012f5c <HAL_TIM_PWM_Start+0x1fc>)
 8012e86:	4293      	cmp	r3, r2
 8012e88:	d009      	beq.n	8012e9e <HAL_TIM_PWM_Start+0x13e>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	4a34      	ldr	r2, [pc, #208]	@ (8012f60 <HAL_TIM_PWM_Start+0x200>)
 8012e90:	4293      	cmp	r3, r2
 8012e92:	d004      	beq.n	8012e9e <HAL_TIM_PWM_Start+0x13e>
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	4a32      	ldr	r2, [pc, #200]	@ (8012f64 <HAL_TIM_PWM_Start+0x204>)
 8012e9a:	4293      	cmp	r3, r2
 8012e9c:	d101      	bne.n	8012ea2 <HAL_TIM_PWM_Start+0x142>
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	e000      	b.n	8012ea4 <HAL_TIM_PWM_Start+0x144>
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d007      	beq.n	8012eb8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012eb6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	4a25      	ldr	r2, [pc, #148]	@ (8012f54 <HAL_TIM_PWM_Start+0x1f4>)
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d022      	beq.n	8012f08 <HAL_TIM_PWM_Start+0x1a8>
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012eca:	d01d      	beq.n	8012f08 <HAL_TIM_PWM_Start+0x1a8>
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	4a25      	ldr	r2, [pc, #148]	@ (8012f68 <HAL_TIM_PWM_Start+0x208>)
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d018      	beq.n	8012f08 <HAL_TIM_PWM_Start+0x1a8>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	4a24      	ldr	r2, [pc, #144]	@ (8012f6c <HAL_TIM_PWM_Start+0x20c>)
 8012edc:	4293      	cmp	r3, r2
 8012ede:	d013      	beq.n	8012f08 <HAL_TIM_PWM_Start+0x1a8>
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4a22      	ldr	r2, [pc, #136]	@ (8012f70 <HAL_TIM_PWM_Start+0x210>)
 8012ee6:	4293      	cmp	r3, r2
 8012ee8:	d00e      	beq.n	8012f08 <HAL_TIM_PWM_Start+0x1a8>
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	4a1a      	ldr	r2, [pc, #104]	@ (8012f58 <HAL_TIM_PWM_Start+0x1f8>)
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	d009      	beq.n	8012f08 <HAL_TIM_PWM_Start+0x1a8>
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	4a1e      	ldr	r2, [pc, #120]	@ (8012f74 <HAL_TIM_PWM_Start+0x214>)
 8012efa:	4293      	cmp	r3, r2
 8012efc:	d004      	beq.n	8012f08 <HAL_TIM_PWM_Start+0x1a8>
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	4a16      	ldr	r2, [pc, #88]	@ (8012f5c <HAL_TIM_PWM_Start+0x1fc>)
 8012f04:	4293      	cmp	r3, r2
 8012f06:	d115      	bne.n	8012f34 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	689a      	ldr	r2, [r3, #8]
 8012f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8012f78 <HAL_TIM_PWM_Start+0x218>)
 8012f10:	4013      	ands	r3, r2
 8012f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	2b06      	cmp	r3, #6
 8012f18:	d015      	beq.n	8012f46 <HAL_TIM_PWM_Start+0x1e6>
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f20:	d011      	beq.n	8012f46 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	681a      	ldr	r2, [r3, #0]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	f042 0201 	orr.w	r2, r2, #1
 8012f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012f32:	e008      	b.n	8012f46 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	681a      	ldr	r2, [r3, #0]
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	f042 0201 	orr.w	r2, r2, #1
 8012f42:	601a      	str	r2, [r3, #0]
 8012f44:	e000      	b.n	8012f48 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012f46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012f48:	2300      	movs	r3, #0
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3710      	adds	r7, #16
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	40010000 	.word	0x40010000
 8012f58:	40010400 	.word	0x40010400
 8012f5c:	40014000 	.word	0x40014000
 8012f60:	40014400 	.word	0x40014400
 8012f64:	40014800 	.word	0x40014800
 8012f68:	40000400 	.word	0x40000400
 8012f6c:	40000800 	.word	0x40000800
 8012f70:	40000c00 	.word	0x40000c00
 8012f74:	40001800 	.word	0x40001800
 8012f78:	00010007 	.word	0x00010007

08012f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b084      	sub	sp, #16
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	68db      	ldr	r3, [r3, #12]
 8012f8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	691b      	ldr	r3, [r3, #16]
 8012f92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	f003 0302 	and.w	r3, r3, #2
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d020      	beq.n	8012fe0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f003 0302 	and.w	r3, r3, #2
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d01b      	beq.n	8012fe0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	f06f 0202 	mvn.w	r2, #2
 8012fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2201      	movs	r2, #1
 8012fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	699b      	ldr	r3, [r3, #24]
 8012fbe:	f003 0303 	and.w	r3, r3, #3
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d003      	beq.n	8012fce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	f000 faf6 	bl	80135b8 <HAL_TIM_IC_CaptureCallback>
 8012fcc:	e005      	b.n	8012fda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f000 fae8 	bl	80135a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f000 faf9 	bl	80135cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	f003 0304 	and.w	r3, r3, #4
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d020      	beq.n	801302c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	f003 0304 	and.w	r3, r3, #4
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d01b      	beq.n	801302c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	f06f 0204 	mvn.w	r2, #4
 8012ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2202      	movs	r2, #2
 8013002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	699b      	ldr	r3, [r3, #24]
 801300a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801300e:	2b00      	cmp	r3, #0
 8013010:	d003      	beq.n	801301a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	f000 fad0 	bl	80135b8 <HAL_TIM_IC_CaptureCallback>
 8013018:	e005      	b.n	8013026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	f000 fac2 	bl	80135a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013020:	6878      	ldr	r0, [r7, #4]
 8013022:	f000 fad3 	bl	80135cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	2200      	movs	r2, #0
 801302a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	f003 0308 	and.w	r3, r3, #8
 8013032:	2b00      	cmp	r3, #0
 8013034:	d020      	beq.n	8013078 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	f003 0308 	and.w	r3, r3, #8
 801303c:	2b00      	cmp	r3, #0
 801303e:	d01b      	beq.n	8013078 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	f06f 0208 	mvn.w	r2, #8
 8013048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2204      	movs	r2, #4
 801304e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	69db      	ldr	r3, [r3, #28]
 8013056:	f003 0303 	and.w	r3, r3, #3
 801305a:	2b00      	cmp	r3, #0
 801305c:	d003      	beq.n	8013066 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f000 faaa 	bl	80135b8 <HAL_TIM_IC_CaptureCallback>
 8013064:	e005      	b.n	8013072 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f000 fa9c 	bl	80135a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f000 faad 	bl	80135cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	2200      	movs	r2, #0
 8013076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	f003 0310 	and.w	r3, r3, #16
 801307e:	2b00      	cmp	r3, #0
 8013080:	d020      	beq.n	80130c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	f003 0310 	and.w	r3, r3, #16
 8013088:	2b00      	cmp	r3, #0
 801308a:	d01b      	beq.n	80130c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	f06f 0210 	mvn.w	r2, #16
 8013094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2208      	movs	r2, #8
 801309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	69db      	ldr	r3, [r3, #28]
 80130a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d003      	beq.n	80130b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80130aa:	6878      	ldr	r0, [r7, #4]
 80130ac:	f000 fa84 	bl	80135b8 <HAL_TIM_IC_CaptureCallback>
 80130b0:	e005      	b.n	80130be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f000 fa76 	bl	80135a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f000 fa87 	bl	80135cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2200      	movs	r2, #0
 80130c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	f003 0301 	and.w	r3, r3, #1
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d00c      	beq.n	80130e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	f003 0301 	and.w	r3, r3, #1
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d007      	beq.n	80130e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	f06f 0201 	mvn.w	r2, #1
 80130e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f7f1 f93a 	bl	800435c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d104      	bne.n	80130fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d00c      	beq.n	8013116 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013102:	2b00      	cmp	r3, #0
 8013104:	d007      	beq.n	8013116 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801310e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f000 ffbf 	bl	8014094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801311c:	2b00      	cmp	r3, #0
 801311e:	d00c      	beq.n	801313a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013126:	2b00      	cmp	r3, #0
 8013128:	d007      	beq.n	801313a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8013132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f000 ffb7 	bl	80140a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013140:	2b00      	cmp	r3, #0
 8013142:	d00c      	beq.n	801315e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801314a:	2b00      	cmp	r3, #0
 801314c:	d007      	beq.n	801315e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8013156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f000 fa41 	bl	80135e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	f003 0320 	and.w	r3, r3, #32
 8013164:	2b00      	cmp	r3, #0
 8013166:	d00c      	beq.n	8013182 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	f003 0320 	and.w	r3, r3, #32
 801316e:	2b00      	cmp	r3, #0
 8013170:	d007      	beq.n	8013182 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	f06f 0220 	mvn.w	r2, #32
 801317a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f000 ff7f 	bl	8014080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013182:	bf00      	nop
 8013184:	3710      	adds	r7, #16
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
	...

0801318c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b086      	sub	sp, #24
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013198:	2300      	movs	r3, #0
 801319a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80131a2:	2b01      	cmp	r3, #1
 80131a4:	d101      	bne.n	80131aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80131a6:	2302      	movs	r3, #2
 80131a8:	e0ff      	b.n	80133aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	2201      	movs	r2, #1
 80131ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2b14      	cmp	r3, #20
 80131b6:	f200 80f0 	bhi.w	801339a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80131ba:	a201      	add	r2, pc, #4	@ (adr r2, 80131c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80131bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131c0:	08013215 	.word	0x08013215
 80131c4:	0801339b 	.word	0x0801339b
 80131c8:	0801339b 	.word	0x0801339b
 80131cc:	0801339b 	.word	0x0801339b
 80131d0:	08013255 	.word	0x08013255
 80131d4:	0801339b 	.word	0x0801339b
 80131d8:	0801339b 	.word	0x0801339b
 80131dc:	0801339b 	.word	0x0801339b
 80131e0:	08013297 	.word	0x08013297
 80131e4:	0801339b 	.word	0x0801339b
 80131e8:	0801339b 	.word	0x0801339b
 80131ec:	0801339b 	.word	0x0801339b
 80131f0:	080132d7 	.word	0x080132d7
 80131f4:	0801339b 	.word	0x0801339b
 80131f8:	0801339b 	.word	0x0801339b
 80131fc:	0801339b 	.word	0x0801339b
 8013200:	08013319 	.word	0x08013319
 8013204:	0801339b 	.word	0x0801339b
 8013208:	0801339b 	.word	0x0801339b
 801320c:	0801339b 	.word	0x0801339b
 8013210:	08013359 	.word	0x08013359
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	68b9      	ldr	r1, [r7, #8]
 801321a:	4618      	mov	r0, r3
 801321c:	f000 fa8a 	bl	8013734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	699a      	ldr	r2, [r3, #24]
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	f042 0208 	orr.w	r2, r2, #8
 801322e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	699a      	ldr	r2, [r3, #24]
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	f022 0204 	bic.w	r2, r2, #4
 801323e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	6999      	ldr	r1, [r3, #24]
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	691a      	ldr	r2, [r3, #16]
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	430a      	orrs	r2, r1
 8013250:	619a      	str	r2, [r3, #24]
      break;
 8013252:	e0a5      	b.n	80133a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	68b9      	ldr	r1, [r7, #8]
 801325a:	4618      	mov	r0, r3
 801325c:	f000 fafa 	bl	8013854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	699a      	ldr	r2, [r3, #24]
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801326e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	699a      	ldr	r2, [r3, #24]
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801327e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	6999      	ldr	r1, [r3, #24]
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	691b      	ldr	r3, [r3, #16]
 801328a:	021a      	lsls	r2, r3, #8
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	430a      	orrs	r2, r1
 8013292:	619a      	str	r2, [r3, #24]
      break;
 8013294:	e084      	b.n	80133a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	68b9      	ldr	r1, [r7, #8]
 801329c:	4618      	mov	r0, r3
 801329e:	f000 fb63 	bl	8013968 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	69da      	ldr	r2, [r3, #28]
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	f042 0208 	orr.w	r2, r2, #8
 80132b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	69da      	ldr	r2, [r3, #28]
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	f022 0204 	bic.w	r2, r2, #4
 80132c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	69d9      	ldr	r1, [r3, #28]
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	691a      	ldr	r2, [r3, #16]
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	430a      	orrs	r2, r1
 80132d2:	61da      	str	r2, [r3, #28]
      break;
 80132d4:	e064      	b.n	80133a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	68b9      	ldr	r1, [r7, #8]
 80132dc:	4618      	mov	r0, r3
 80132de:	f000 fbcb 	bl	8013a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	69da      	ldr	r2, [r3, #28]
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80132f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	69da      	ldr	r2, [r3, #28]
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	69d9      	ldr	r1, [r3, #28]
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	691b      	ldr	r3, [r3, #16]
 801330c:	021a      	lsls	r2, r3, #8
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	430a      	orrs	r2, r1
 8013314:	61da      	str	r2, [r3, #28]
      break;
 8013316:	e043      	b.n	80133a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	68b9      	ldr	r1, [r7, #8]
 801331e:	4618      	mov	r0, r3
 8013320:	f000 fc14 	bl	8013b4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	f042 0208 	orr.w	r2, r2, #8
 8013332:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	f022 0204 	bic.w	r2, r2, #4
 8013342:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	691a      	ldr	r2, [r3, #16]
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	430a      	orrs	r2, r1
 8013354:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8013356:	e023      	b.n	80133a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	68b9      	ldr	r1, [r7, #8]
 801335e:	4618      	mov	r0, r3
 8013360:	f000 fc58 	bl	8013c14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013372:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013382:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	691b      	ldr	r3, [r3, #16]
 801338e:	021a      	lsls	r2, r3, #8
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	430a      	orrs	r2, r1
 8013396:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8013398:	e002      	b.n	80133a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801339a:	2301      	movs	r3, #1
 801339c:	75fb      	strb	r3, [r7, #23]
      break;
 801339e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	2200      	movs	r2, #0
 80133a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80133a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3718      	adds	r7, #24
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}
 80133b2:	bf00      	nop

080133b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b084      	sub	sp, #16
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80133be:	2300      	movs	r3, #0
 80133c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80133c8:	2b01      	cmp	r3, #1
 80133ca:	d101      	bne.n	80133d0 <HAL_TIM_ConfigClockSource+0x1c>
 80133cc:	2302      	movs	r3, #2
 80133ce:	e0dc      	b.n	801358a <HAL_TIM_ConfigClockSource+0x1d6>
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2201      	movs	r2, #1
 80133d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2202      	movs	r2, #2
 80133dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	689b      	ldr	r3, [r3, #8]
 80133e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80133e8:	68ba      	ldr	r2, [r7, #8]
 80133ea:	4b6a      	ldr	r3, [pc, #424]	@ (8013594 <HAL_TIM_ConfigClockSource+0x1e0>)
 80133ec:	4013      	ands	r3, r2
 80133ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80133f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	68ba      	ldr	r2, [r7, #8]
 80133fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	4a64      	ldr	r2, [pc, #400]	@ (8013598 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013406:	4293      	cmp	r3, r2
 8013408:	f000 80a9 	beq.w	801355e <HAL_TIM_ConfigClockSource+0x1aa>
 801340c:	4a62      	ldr	r2, [pc, #392]	@ (8013598 <HAL_TIM_ConfigClockSource+0x1e4>)
 801340e:	4293      	cmp	r3, r2
 8013410:	f200 80ae 	bhi.w	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
 8013414:	4a61      	ldr	r2, [pc, #388]	@ (801359c <HAL_TIM_ConfigClockSource+0x1e8>)
 8013416:	4293      	cmp	r3, r2
 8013418:	f000 80a1 	beq.w	801355e <HAL_TIM_ConfigClockSource+0x1aa>
 801341c:	4a5f      	ldr	r2, [pc, #380]	@ (801359c <HAL_TIM_ConfigClockSource+0x1e8>)
 801341e:	4293      	cmp	r3, r2
 8013420:	f200 80a6 	bhi.w	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
 8013424:	4a5e      	ldr	r2, [pc, #376]	@ (80135a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8013426:	4293      	cmp	r3, r2
 8013428:	f000 8099 	beq.w	801355e <HAL_TIM_ConfigClockSource+0x1aa>
 801342c:	4a5c      	ldr	r2, [pc, #368]	@ (80135a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 801342e:	4293      	cmp	r3, r2
 8013430:	f200 809e 	bhi.w	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
 8013434:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8013438:	f000 8091 	beq.w	801355e <HAL_TIM_ConfigClockSource+0x1aa>
 801343c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8013440:	f200 8096 	bhi.w	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
 8013444:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013448:	f000 8089 	beq.w	801355e <HAL_TIM_ConfigClockSource+0x1aa>
 801344c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013450:	f200 808e 	bhi.w	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
 8013454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013458:	d03e      	beq.n	80134d8 <HAL_TIM_ConfigClockSource+0x124>
 801345a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801345e:	f200 8087 	bhi.w	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
 8013462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013466:	f000 8086 	beq.w	8013576 <HAL_TIM_ConfigClockSource+0x1c2>
 801346a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801346e:	d87f      	bhi.n	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
 8013470:	2b70      	cmp	r3, #112	@ 0x70
 8013472:	d01a      	beq.n	80134aa <HAL_TIM_ConfigClockSource+0xf6>
 8013474:	2b70      	cmp	r3, #112	@ 0x70
 8013476:	d87b      	bhi.n	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
 8013478:	2b60      	cmp	r3, #96	@ 0x60
 801347a:	d050      	beq.n	801351e <HAL_TIM_ConfigClockSource+0x16a>
 801347c:	2b60      	cmp	r3, #96	@ 0x60
 801347e:	d877      	bhi.n	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
 8013480:	2b50      	cmp	r3, #80	@ 0x50
 8013482:	d03c      	beq.n	80134fe <HAL_TIM_ConfigClockSource+0x14a>
 8013484:	2b50      	cmp	r3, #80	@ 0x50
 8013486:	d873      	bhi.n	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
 8013488:	2b40      	cmp	r3, #64	@ 0x40
 801348a:	d058      	beq.n	801353e <HAL_TIM_ConfigClockSource+0x18a>
 801348c:	2b40      	cmp	r3, #64	@ 0x40
 801348e:	d86f      	bhi.n	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
 8013490:	2b30      	cmp	r3, #48	@ 0x30
 8013492:	d064      	beq.n	801355e <HAL_TIM_ConfigClockSource+0x1aa>
 8013494:	2b30      	cmp	r3, #48	@ 0x30
 8013496:	d86b      	bhi.n	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
 8013498:	2b20      	cmp	r3, #32
 801349a:	d060      	beq.n	801355e <HAL_TIM_ConfigClockSource+0x1aa>
 801349c:	2b20      	cmp	r3, #32
 801349e:	d867      	bhi.n	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d05c      	beq.n	801355e <HAL_TIM_ConfigClockSource+0x1aa>
 80134a4:	2b10      	cmp	r3, #16
 80134a6:	d05a      	beq.n	801355e <HAL_TIM_ConfigClockSource+0x1aa>
 80134a8:	e062      	b.n	8013570 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80134ba:	f000 fc8f 	bl	8013ddc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	689b      	ldr	r3, [r3, #8]
 80134c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80134cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	68ba      	ldr	r2, [r7, #8]
 80134d4:	609a      	str	r2, [r3, #8]
      break;
 80134d6:	e04f      	b.n	8013578 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80134e8:	f000 fc78 	bl	8013ddc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	689a      	ldr	r2, [r3, #8]
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80134fa:	609a      	str	r2, [r3, #8]
      break;
 80134fc:	e03c      	b.n	8013578 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801350a:	461a      	mov	r2, r3
 801350c:	f000 fbe8 	bl	8013ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	2150      	movs	r1, #80	@ 0x50
 8013516:	4618      	mov	r0, r3
 8013518:	f000 fc42 	bl	8013da0 <TIM_ITRx_SetConfig>
      break;
 801351c:	e02c      	b.n	8013578 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801352a:	461a      	mov	r2, r3
 801352c:	f000 fc07 	bl	8013d3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	2160      	movs	r1, #96	@ 0x60
 8013536:	4618      	mov	r0, r3
 8013538:	f000 fc32 	bl	8013da0 <TIM_ITRx_SetConfig>
      break;
 801353c:	e01c      	b.n	8013578 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801354a:	461a      	mov	r2, r3
 801354c:	f000 fbc8 	bl	8013ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	2140      	movs	r1, #64	@ 0x40
 8013556:	4618      	mov	r0, r3
 8013558:	f000 fc22 	bl	8013da0 <TIM_ITRx_SetConfig>
      break;
 801355c:	e00c      	b.n	8013578 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681a      	ldr	r2, [r3, #0]
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	4619      	mov	r1, r3
 8013568:	4610      	mov	r0, r2
 801356a:	f000 fc19 	bl	8013da0 <TIM_ITRx_SetConfig>
      break;
 801356e:	e003      	b.n	8013578 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013570:	2301      	movs	r3, #1
 8013572:	73fb      	strb	r3, [r7, #15]
      break;
 8013574:	e000      	b.n	8013578 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2201      	movs	r2, #1
 801357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2200      	movs	r2, #0
 8013584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013588:	7bfb      	ldrb	r3, [r7, #15]
}
 801358a:	4618      	mov	r0, r3
 801358c:	3710      	adds	r7, #16
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop
 8013594:	ffceff88 	.word	0xffceff88
 8013598:	00100040 	.word	0x00100040
 801359c:	00100030 	.word	0x00100030
 80135a0:	00100020 	.word	0x00100020

080135a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80135a4:	b480      	push	{r7}
 80135a6:	b083      	sub	sp, #12
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80135ac:	bf00      	nop
 80135ae:	370c      	adds	r7, #12
 80135b0:	46bd      	mov	sp, r7
 80135b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b6:	4770      	bx	lr

080135b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80135b8:	b480      	push	{r7}
 80135ba:	b083      	sub	sp, #12
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80135c0:	bf00      	nop
 80135c2:	370c      	adds	r7, #12
 80135c4:	46bd      	mov	sp, r7
 80135c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ca:	4770      	bx	lr

080135cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80135cc:	b480      	push	{r7}
 80135ce:	b083      	sub	sp, #12
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80135d4:	bf00      	nop
 80135d6:	370c      	adds	r7, #12
 80135d8:	46bd      	mov	sp, r7
 80135da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135de:	4770      	bx	lr

080135e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80135e0:	b480      	push	{r7}
 80135e2:	b083      	sub	sp, #12
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80135e8:	bf00      	nop
 80135ea:	370c      	adds	r7, #12
 80135ec:	46bd      	mov	sp, r7
 80135ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f2:	4770      	bx	lr

080135f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80135f4:	b480      	push	{r7}
 80135f6:	b085      	sub	sp, #20
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	4a43      	ldr	r2, [pc, #268]	@ (8013714 <TIM_Base_SetConfig+0x120>)
 8013608:	4293      	cmp	r3, r2
 801360a:	d013      	beq.n	8013634 <TIM_Base_SetConfig+0x40>
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013612:	d00f      	beq.n	8013634 <TIM_Base_SetConfig+0x40>
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	4a40      	ldr	r2, [pc, #256]	@ (8013718 <TIM_Base_SetConfig+0x124>)
 8013618:	4293      	cmp	r3, r2
 801361a:	d00b      	beq.n	8013634 <TIM_Base_SetConfig+0x40>
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	4a3f      	ldr	r2, [pc, #252]	@ (801371c <TIM_Base_SetConfig+0x128>)
 8013620:	4293      	cmp	r3, r2
 8013622:	d007      	beq.n	8013634 <TIM_Base_SetConfig+0x40>
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	4a3e      	ldr	r2, [pc, #248]	@ (8013720 <TIM_Base_SetConfig+0x12c>)
 8013628:	4293      	cmp	r3, r2
 801362a:	d003      	beq.n	8013634 <TIM_Base_SetConfig+0x40>
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	4a3d      	ldr	r2, [pc, #244]	@ (8013724 <TIM_Base_SetConfig+0x130>)
 8013630:	4293      	cmp	r3, r2
 8013632:	d108      	bne.n	8013646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801363a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	685b      	ldr	r3, [r3, #4]
 8013640:	68fa      	ldr	r2, [r7, #12]
 8013642:	4313      	orrs	r3, r2
 8013644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	4a32      	ldr	r2, [pc, #200]	@ (8013714 <TIM_Base_SetConfig+0x120>)
 801364a:	4293      	cmp	r3, r2
 801364c:	d01f      	beq.n	801368e <TIM_Base_SetConfig+0x9a>
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013654:	d01b      	beq.n	801368e <TIM_Base_SetConfig+0x9a>
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	4a2f      	ldr	r2, [pc, #188]	@ (8013718 <TIM_Base_SetConfig+0x124>)
 801365a:	4293      	cmp	r3, r2
 801365c:	d017      	beq.n	801368e <TIM_Base_SetConfig+0x9a>
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	4a2e      	ldr	r2, [pc, #184]	@ (801371c <TIM_Base_SetConfig+0x128>)
 8013662:	4293      	cmp	r3, r2
 8013664:	d013      	beq.n	801368e <TIM_Base_SetConfig+0x9a>
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	4a2d      	ldr	r2, [pc, #180]	@ (8013720 <TIM_Base_SetConfig+0x12c>)
 801366a:	4293      	cmp	r3, r2
 801366c:	d00f      	beq.n	801368e <TIM_Base_SetConfig+0x9a>
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	4a2c      	ldr	r2, [pc, #176]	@ (8013724 <TIM_Base_SetConfig+0x130>)
 8013672:	4293      	cmp	r3, r2
 8013674:	d00b      	beq.n	801368e <TIM_Base_SetConfig+0x9a>
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	4a2b      	ldr	r2, [pc, #172]	@ (8013728 <TIM_Base_SetConfig+0x134>)
 801367a:	4293      	cmp	r3, r2
 801367c:	d007      	beq.n	801368e <TIM_Base_SetConfig+0x9a>
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	4a2a      	ldr	r2, [pc, #168]	@ (801372c <TIM_Base_SetConfig+0x138>)
 8013682:	4293      	cmp	r3, r2
 8013684:	d003      	beq.n	801368e <TIM_Base_SetConfig+0x9a>
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	4a29      	ldr	r2, [pc, #164]	@ (8013730 <TIM_Base_SetConfig+0x13c>)
 801368a:	4293      	cmp	r3, r2
 801368c:	d108      	bne.n	80136a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	68db      	ldr	r3, [r3, #12]
 801369a:	68fa      	ldr	r2, [r7, #12]
 801369c:	4313      	orrs	r3, r2
 801369e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	695b      	ldr	r3, [r3, #20]
 80136aa:	4313      	orrs	r3, r2
 80136ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	689a      	ldr	r2, [r3, #8]
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	681a      	ldr	r2, [r3, #0]
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	4a14      	ldr	r2, [pc, #80]	@ (8013714 <TIM_Base_SetConfig+0x120>)
 80136c2:	4293      	cmp	r3, r2
 80136c4:	d00f      	beq.n	80136e6 <TIM_Base_SetConfig+0xf2>
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	4a16      	ldr	r2, [pc, #88]	@ (8013724 <TIM_Base_SetConfig+0x130>)
 80136ca:	4293      	cmp	r3, r2
 80136cc:	d00b      	beq.n	80136e6 <TIM_Base_SetConfig+0xf2>
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	4a15      	ldr	r2, [pc, #84]	@ (8013728 <TIM_Base_SetConfig+0x134>)
 80136d2:	4293      	cmp	r3, r2
 80136d4:	d007      	beq.n	80136e6 <TIM_Base_SetConfig+0xf2>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	4a14      	ldr	r2, [pc, #80]	@ (801372c <TIM_Base_SetConfig+0x138>)
 80136da:	4293      	cmp	r3, r2
 80136dc:	d003      	beq.n	80136e6 <TIM_Base_SetConfig+0xf2>
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	4a13      	ldr	r2, [pc, #76]	@ (8013730 <TIM_Base_SetConfig+0x13c>)
 80136e2:	4293      	cmp	r3, r2
 80136e4:	d103      	bne.n	80136ee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	691a      	ldr	r2, [r3, #16]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	f043 0204 	orr.w	r2, r3, #4
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2201      	movs	r2, #1
 80136fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	68fa      	ldr	r2, [r7, #12]
 8013704:	601a      	str	r2, [r3, #0]
}
 8013706:	bf00      	nop
 8013708:	3714      	adds	r7, #20
 801370a:	46bd      	mov	sp, r7
 801370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013710:	4770      	bx	lr
 8013712:	bf00      	nop
 8013714:	40010000 	.word	0x40010000
 8013718:	40000400 	.word	0x40000400
 801371c:	40000800 	.word	0x40000800
 8013720:	40000c00 	.word	0x40000c00
 8013724:	40010400 	.word	0x40010400
 8013728:	40014000 	.word	0x40014000
 801372c:	40014400 	.word	0x40014400
 8013730:	40014800 	.word	0x40014800

08013734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013734:	b480      	push	{r7}
 8013736:	b087      	sub	sp, #28
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
 801373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6a1b      	ldr	r3, [r3, #32]
 8013742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	6a1b      	ldr	r3, [r3, #32]
 8013748:	f023 0201 	bic.w	r2, r3, #1
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	685b      	ldr	r3, [r3, #4]
 8013754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	699b      	ldr	r3, [r3, #24]
 801375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801375c:	68fa      	ldr	r2, [r7, #12]
 801375e:	4b37      	ldr	r3, [pc, #220]	@ (801383c <TIM_OC1_SetConfig+0x108>)
 8013760:	4013      	ands	r3, r2
 8013762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f023 0303 	bic.w	r3, r3, #3
 801376a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	68fa      	ldr	r2, [r7, #12]
 8013772:	4313      	orrs	r3, r2
 8013774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	f023 0302 	bic.w	r3, r3, #2
 801377c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	689b      	ldr	r3, [r3, #8]
 8013782:	697a      	ldr	r2, [r7, #20]
 8013784:	4313      	orrs	r3, r2
 8013786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	4a2d      	ldr	r2, [pc, #180]	@ (8013840 <TIM_OC1_SetConfig+0x10c>)
 801378c:	4293      	cmp	r3, r2
 801378e:	d00f      	beq.n	80137b0 <TIM_OC1_SetConfig+0x7c>
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	4a2c      	ldr	r2, [pc, #176]	@ (8013844 <TIM_OC1_SetConfig+0x110>)
 8013794:	4293      	cmp	r3, r2
 8013796:	d00b      	beq.n	80137b0 <TIM_OC1_SetConfig+0x7c>
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	4a2b      	ldr	r2, [pc, #172]	@ (8013848 <TIM_OC1_SetConfig+0x114>)
 801379c:	4293      	cmp	r3, r2
 801379e:	d007      	beq.n	80137b0 <TIM_OC1_SetConfig+0x7c>
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	4a2a      	ldr	r2, [pc, #168]	@ (801384c <TIM_OC1_SetConfig+0x118>)
 80137a4:	4293      	cmp	r3, r2
 80137a6:	d003      	beq.n	80137b0 <TIM_OC1_SetConfig+0x7c>
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	4a29      	ldr	r2, [pc, #164]	@ (8013850 <TIM_OC1_SetConfig+0x11c>)
 80137ac:	4293      	cmp	r3, r2
 80137ae:	d10c      	bne.n	80137ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	f023 0308 	bic.w	r3, r3, #8
 80137b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	68db      	ldr	r3, [r3, #12]
 80137bc:	697a      	ldr	r2, [r7, #20]
 80137be:	4313      	orrs	r3, r2
 80137c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	f023 0304 	bic.w	r3, r3, #4
 80137c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4a1c      	ldr	r2, [pc, #112]	@ (8013840 <TIM_OC1_SetConfig+0x10c>)
 80137ce:	4293      	cmp	r3, r2
 80137d0:	d00f      	beq.n	80137f2 <TIM_OC1_SetConfig+0xbe>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	4a1b      	ldr	r2, [pc, #108]	@ (8013844 <TIM_OC1_SetConfig+0x110>)
 80137d6:	4293      	cmp	r3, r2
 80137d8:	d00b      	beq.n	80137f2 <TIM_OC1_SetConfig+0xbe>
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	4a1a      	ldr	r2, [pc, #104]	@ (8013848 <TIM_OC1_SetConfig+0x114>)
 80137de:	4293      	cmp	r3, r2
 80137e0:	d007      	beq.n	80137f2 <TIM_OC1_SetConfig+0xbe>
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	4a19      	ldr	r2, [pc, #100]	@ (801384c <TIM_OC1_SetConfig+0x118>)
 80137e6:	4293      	cmp	r3, r2
 80137e8:	d003      	beq.n	80137f2 <TIM_OC1_SetConfig+0xbe>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4a18      	ldr	r2, [pc, #96]	@ (8013850 <TIM_OC1_SetConfig+0x11c>)
 80137ee:	4293      	cmp	r3, r2
 80137f0:	d111      	bne.n	8013816 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80137f2:	693b      	ldr	r3, [r7, #16]
 80137f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80137f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80137fa:	693b      	ldr	r3, [r7, #16]
 80137fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	695b      	ldr	r3, [r3, #20]
 8013806:	693a      	ldr	r2, [r7, #16]
 8013808:	4313      	orrs	r3, r2
 801380a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	699b      	ldr	r3, [r3, #24]
 8013810:	693a      	ldr	r2, [r7, #16]
 8013812:	4313      	orrs	r3, r2
 8013814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	693a      	ldr	r2, [r7, #16]
 801381a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	68fa      	ldr	r2, [r7, #12]
 8013820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	685a      	ldr	r2, [r3, #4]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	697a      	ldr	r2, [r7, #20]
 801382e:	621a      	str	r2, [r3, #32]
}
 8013830:	bf00      	nop
 8013832:	371c      	adds	r7, #28
 8013834:	46bd      	mov	sp, r7
 8013836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383a:	4770      	bx	lr
 801383c:	fffeff8f 	.word	0xfffeff8f
 8013840:	40010000 	.word	0x40010000
 8013844:	40010400 	.word	0x40010400
 8013848:	40014000 	.word	0x40014000
 801384c:	40014400 	.word	0x40014400
 8013850:	40014800 	.word	0x40014800

08013854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013854:	b480      	push	{r7}
 8013856:	b087      	sub	sp, #28
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
 801385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	6a1b      	ldr	r3, [r3, #32]
 8013862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6a1b      	ldr	r3, [r3, #32]
 8013868:	f023 0210 	bic.w	r2, r3, #16
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	699b      	ldr	r3, [r3, #24]
 801387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801387c:	68fa      	ldr	r2, [r7, #12]
 801387e:	4b34      	ldr	r3, [pc, #208]	@ (8013950 <TIM_OC2_SetConfig+0xfc>)
 8013880:	4013      	ands	r3, r2
 8013882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801388a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	021b      	lsls	r3, r3, #8
 8013892:	68fa      	ldr	r2, [r7, #12]
 8013894:	4313      	orrs	r3, r2
 8013896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	f023 0320 	bic.w	r3, r3, #32
 801389e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	689b      	ldr	r3, [r3, #8]
 80138a4:	011b      	lsls	r3, r3, #4
 80138a6:	697a      	ldr	r2, [r7, #20]
 80138a8:	4313      	orrs	r3, r2
 80138aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	4a29      	ldr	r2, [pc, #164]	@ (8013954 <TIM_OC2_SetConfig+0x100>)
 80138b0:	4293      	cmp	r3, r2
 80138b2:	d003      	beq.n	80138bc <TIM_OC2_SetConfig+0x68>
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	4a28      	ldr	r2, [pc, #160]	@ (8013958 <TIM_OC2_SetConfig+0x104>)
 80138b8:	4293      	cmp	r3, r2
 80138ba:	d10d      	bne.n	80138d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80138c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	68db      	ldr	r3, [r3, #12]
 80138c8:	011b      	lsls	r3, r3, #4
 80138ca:	697a      	ldr	r2, [r7, #20]
 80138cc:	4313      	orrs	r3, r2
 80138ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80138d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	4a1e      	ldr	r2, [pc, #120]	@ (8013954 <TIM_OC2_SetConfig+0x100>)
 80138dc:	4293      	cmp	r3, r2
 80138de:	d00f      	beq.n	8013900 <TIM_OC2_SetConfig+0xac>
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	4a1d      	ldr	r2, [pc, #116]	@ (8013958 <TIM_OC2_SetConfig+0x104>)
 80138e4:	4293      	cmp	r3, r2
 80138e6:	d00b      	beq.n	8013900 <TIM_OC2_SetConfig+0xac>
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	4a1c      	ldr	r2, [pc, #112]	@ (801395c <TIM_OC2_SetConfig+0x108>)
 80138ec:	4293      	cmp	r3, r2
 80138ee:	d007      	beq.n	8013900 <TIM_OC2_SetConfig+0xac>
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	4a1b      	ldr	r2, [pc, #108]	@ (8013960 <TIM_OC2_SetConfig+0x10c>)
 80138f4:	4293      	cmp	r3, r2
 80138f6:	d003      	beq.n	8013900 <TIM_OC2_SetConfig+0xac>
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	4a1a      	ldr	r2, [pc, #104]	@ (8013964 <TIM_OC2_SetConfig+0x110>)
 80138fc:	4293      	cmp	r3, r2
 80138fe:	d113      	bne.n	8013928 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013900:	693b      	ldr	r3, [r7, #16]
 8013902:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013906:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801390e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013910:	683b      	ldr	r3, [r7, #0]
 8013912:	695b      	ldr	r3, [r3, #20]
 8013914:	009b      	lsls	r3, r3, #2
 8013916:	693a      	ldr	r2, [r7, #16]
 8013918:	4313      	orrs	r3, r2
 801391a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	699b      	ldr	r3, [r3, #24]
 8013920:	009b      	lsls	r3, r3, #2
 8013922:	693a      	ldr	r2, [r7, #16]
 8013924:	4313      	orrs	r3, r2
 8013926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	693a      	ldr	r2, [r7, #16]
 801392c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	68fa      	ldr	r2, [r7, #12]
 8013932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	685a      	ldr	r2, [r3, #4]
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	697a      	ldr	r2, [r7, #20]
 8013940:	621a      	str	r2, [r3, #32]
}
 8013942:	bf00      	nop
 8013944:	371c      	adds	r7, #28
 8013946:	46bd      	mov	sp, r7
 8013948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394c:	4770      	bx	lr
 801394e:	bf00      	nop
 8013950:	feff8fff 	.word	0xfeff8fff
 8013954:	40010000 	.word	0x40010000
 8013958:	40010400 	.word	0x40010400
 801395c:	40014000 	.word	0x40014000
 8013960:	40014400 	.word	0x40014400
 8013964:	40014800 	.word	0x40014800

08013968 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013968:	b480      	push	{r7}
 801396a:	b087      	sub	sp, #28
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
 8013970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6a1b      	ldr	r3, [r3, #32]
 8013976:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6a1b      	ldr	r3, [r3, #32]
 801397c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	685b      	ldr	r3, [r3, #4]
 8013988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	69db      	ldr	r3, [r3, #28]
 801398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013990:	68fa      	ldr	r2, [r7, #12]
 8013992:	4b33      	ldr	r3, [pc, #204]	@ (8013a60 <TIM_OC3_SetConfig+0xf8>)
 8013994:	4013      	ands	r3, r2
 8013996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	f023 0303 	bic.w	r3, r3, #3
 801399e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	68fa      	ldr	r2, [r7, #12]
 80139a6:	4313      	orrs	r3, r2
 80139a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80139b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	689b      	ldr	r3, [r3, #8]
 80139b6:	021b      	lsls	r3, r3, #8
 80139b8:	697a      	ldr	r2, [r7, #20]
 80139ba:	4313      	orrs	r3, r2
 80139bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	4a28      	ldr	r2, [pc, #160]	@ (8013a64 <TIM_OC3_SetConfig+0xfc>)
 80139c2:	4293      	cmp	r3, r2
 80139c4:	d003      	beq.n	80139ce <TIM_OC3_SetConfig+0x66>
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	4a27      	ldr	r2, [pc, #156]	@ (8013a68 <TIM_OC3_SetConfig+0x100>)
 80139ca:	4293      	cmp	r3, r2
 80139cc:	d10d      	bne.n	80139ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80139ce:	697b      	ldr	r3, [r7, #20]
 80139d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80139d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80139d6:	683b      	ldr	r3, [r7, #0]
 80139d8:	68db      	ldr	r3, [r3, #12]
 80139da:	021b      	lsls	r3, r3, #8
 80139dc:	697a      	ldr	r2, [r7, #20]
 80139de:	4313      	orrs	r3, r2
 80139e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80139e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	4a1d      	ldr	r2, [pc, #116]	@ (8013a64 <TIM_OC3_SetConfig+0xfc>)
 80139ee:	4293      	cmp	r3, r2
 80139f0:	d00f      	beq.n	8013a12 <TIM_OC3_SetConfig+0xaa>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	4a1c      	ldr	r2, [pc, #112]	@ (8013a68 <TIM_OC3_SetConfig+0x100>)
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d00b      	beq.n	8013a12 <TIM_OC3_SetConfig+0xaa>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	4a1b      	ldr	r2, [pc, #108]	@ (8013a6c <TIM_OC3_SetConfig+0x104>)
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d007      	beq.n	8013a12 <TIM_OC3_SetConfig+0xaa>
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	4a1a      	ldr	r2, [pc, #104]	@ (8013a70 <TIM_OC3_SetConfig+0x108>)
 8013a06:	4293      	cmp	r3, r2
 8013a08:	d003      	beq.n	8013a12 <TIM_OC3_SetConfig+0xaa>
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	4a19      	ldr	r2, [pc, #100]	@ (8013a74 <TIM_OC3_SetConfig+0x10c>)
 8013a0e:	4293      	cmp	r3, r2
 8013a10:	d113      	bne.n	8013a3a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013a1a:	693b      	ldr	r3, [r7, #16]
 8013a1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	695b      	ldr	r3, [r3, #20]
 8013a26:	011b      	lsls	r3, r3, #4
 8013a28:	693a      	ldr	r2, [r7, #16]
 8013a2a:	4313      	orrs	r3, r2
 8013a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	699b      	ldr	r3, [r3, #24]
 8013a32:	011b      	lsls	r3, r3, #4
 8013a34:	693a      	ldr	r2, [r7, #16]
 8013a36:	4313      	orrs	r3, r2
 8013a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	693a      	ldr	r2, [r7, #16]
 8013a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	68fa      	ldr	r2, [r7, #12]
 8013a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	685a      	ldr	r2, [r3, #4]
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	697a      	ldr	r2, [r7, #20]
 8013a52:	621a      	str	r2, [r3, #32]
}
 8013a54:	bf00      	nop
 8013a56:	371c      	adds	r7, #28
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5e:	4770      	bx	lr
 8013a60:	fffeff8f 	.word	0xfffeff8f
 8013a64:	40010000 	.word	0x40010000
 8013a68:	40010400 	.word	0x40010400
 8013a6c:	40014000 	.word	0x40014000
 8013a70:	40014400 	.word	0x40014400
 8013a74:	40014800 	.word	0x40014800

08013a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013a78:	b480      	push	{r7}
 8013a7a:	b087      	sub	sp, #28
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6a1b      	ldr	r3, [r3, #32]
 8013a86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	6a1b      	ldr	r3, [r3, #32]
 8013a8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	685b      	ldr	r3, [r3, #4]
 8013a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	69db      	ldr	r3, [r3, #28]
 8013a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013aa0:	68fa      	ldr	r2, [r7, #12]
 8013aa2:	4b24      	ldr	r3, [pc, #144]	@ (8013b34 <TIM_OC4_SetConfig+0xbc>)
 8013aa4:	4013      	ands	r3, r2
 8013aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	021b      	lsls	r3, r3, #8
 8013ab6:	68fa      	ldr	r2, [r7, #12]
 8013ab8:	4313      	orrs	r3, r2
 8013aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013abc:	693b      	ldr	r3, [r7, #16]
 8013abe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	689b      	ldr	r3, [r3, #8]
 8013ac8:	031b      	lsls	r3, r3, #12
 8013aca:	693a      	ldr	r2, [r7, #16]
 8013acc:	4313      	orrs	r3, r2
 8013ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	4a19      	ldr	r2, [pc, #100]	@ (8013b38 <TIM_OC4_SetConfig+0xc0>)
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	d00f      	beq.n	8013af8 <TIM_OC4_SetConfig+0x80>
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	4a18      	ldr	r2, [pc, #96]	@ (8013b3c <TIM_OC4_SetConfig+0xc4>)
 8013adc:	4293      	cmp	r3, r2
 8013ade:	d00b      	beq.n	8013af8 <TIM_OC4_SetConfig+0x80>
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	4a17      	ldr	r2, [pc, #92]	@ (8013b40 <TIM_OC4_SetConfig+0xc8>)
 8013ae4:	4293      	cmp	r3, r2
 8013ae6:	d007      	beq.n	8013af8 <TIM_OC4_SetConfig+0x80>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	4a16      	ldr	r2, [pc, #88]	@ (8013b44 <TIM_OC4_SetConfig+0xcc>)
 8013aec:	4293      	cmp	r3, r2
 8013aee:	d003      	beq.n	8013af8 <TIM_OC4_SetConfig+0x80>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	4a15      	ldr	r2, [pc, #84]	@ (8013b48 <TIM_OC4_SetConfig+0xd0>)
 8013af4:	4293      	cmp	r3, r2
 8013af6:	d109      	bne.n	8013b0c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013afe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	695b      	ldr	r3, [r3, #20]
 8013b04:	019b      	lsls	r3, r3, #6
 8013b06:	697a      	ldr	r2, [r7, #20]
 8013b08:	4313      	orrs	r3, r2
 8013b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	697a      	ldr	r2, [r7, #20]
 8013b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	68fa      	ldr	r2, [r7, #12]
 8013b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	685a      	ldr	r2, [r3, #4]
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	693a      	ldr	r2, [r7, #16]
 8013b24:	621a      	str	r2, [r3, #32]
}
 8013b26:	bf00      	nop
 8013b28:	371c      	adds	r7, #28
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b30:	4770      	bx	lr
 8013b32:	bf00      	nop
 8013b34:	feff8fff 	.word	0xfeff8fff
 8013b38:	40010000 	.word	0x40010000
 8013b3c:	40010400 	.word	0x40010400
 8013b40:	40014000 	.word	0x40014000
 8013b44:	40014400 	.word	0x40014400
 8013b48:	40014800 	.word	0x40014800

08013b4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013b4c:	b480      	push	{r7}
 8013b4e:	b087      	sub	sp, #28
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
 8013b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	6a1b      	ldr	r3, [r3, #32]
 8013b5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	6a1b      	ldr	r3, [r3, #32]
 8013b60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013b74:	68fa      	ldr	r2, [r7, #12]
 8013b76:	4b21      	ldr	r3, [pc, #132]	@ (8013bfc <TIM_OC5_SetConfig+0xb0>)
 8013b78:	4013      	ands	r3, r2
 8013b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	68fa      	ldr	r2, [r7, #12]
 8013b82:	4313      	orrs	r3, r2
 8013b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8013b8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	689b      	ldr	r3, [r3, #8]
 8013b92:	041b      	lsls	r3, r3, #16
 8013b94:	693a      	ldr	r2, [r7, #16]
 8013b96:	4313      	orrs	r3, r2
 8013b98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	4a18      	ldr	r2, [pc, #96]	@ (8013c00 <TIM_OC5_SetConfig+0xb4>)
 8013b9e:	4293      	cmp	r3, r2
 8013ba0:	d00f      	beq.n	8013bc2 <TIM_OC5_SetConfig+0x76>
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	4a17      	ldr	r2, [pc, #92]	@ (8013c04 <TIM_OC5_SetConfig+0xb8>)
 8013ba6:	4293      	cmp	r3, r2
 8013ba8:	d00b      	beq.n	8013bc2 <TIM_OC5_SetConfig+0x76>
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	4a16      	ldr	r2, [pc, #88]	@ (8013c08 <TIM_OC5_SetConfig+0xbc>)
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d007      	beq.n	8013bc2 <TIM_OC5_SetConfig+0x76>
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	4a15      	ldr	r2, [pc, #84]	@ (8013c0c <TIM_OC5_SetConfig+0xc0>)
 8013bb6:	4293      	cmp	r3, r2
 8013bb8:	d003      	beq.n	8013bc2 <TIM_OC5_SetConfig+0x76>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	4a14      	ldr	r2, [pc, #80]	@ (8013c10 <TIM_OC5_SetConfig+0xc4>)
 8013bbe:	4293      	cmp	r3, r2
 8013bc0:	d109      	bne.n	8013bd6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	695b      	ldr	r3, [r3, #20]
 8013bce:	021b      	lsls	r3, r3, #8
 8013bd0:	697a      	ldr	r2, [r7, #20]
 8013bd2:	4313      	orrs	r3, r2
 8013bd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	697a      	ldr	r2, [r7, #20]
 8013bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	68fa      	ldr	r2, [r7, #12]
 8013be0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	685a      	ldr	r2, [r3, #4]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	693a      	ldr	r2, [r7, #16]
 8013bee:	621a      	str	r2, [r3, #32]
}
 8013bf0:	bf00      	nop
 8013bf2:	371c      	adds	r7, #28
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfa:	4770      	bx	lr
 8013bfc:	fffeff8f 	.word	0xfffeff8f
 8013c00:	40010000 	.word	0x40010000
 8013c04:	40010400 	.word	0x40010400
 8013c08:	40014000 	.word	0x40014000
 8013c0c:	40014400 	.word	0x40014400
 8013c10:	40014800 	.word	0x40014800

08013c14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013c14:	b480      	push	{r7}
 8013c16:	b087      	sub	sp, #28
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	6a1b      	ldr	r3, [r3, #32]
 8013c22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6a1b      	ldr	r3, [r3, #32]
 8013c28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	685b      	ldr	r3, [r3, #4]
 8013c34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013c3c:	68fa      	ldr	r2, [r7, #12]
 8013c3e:	4b22      	ldr	r3, [pc, #136]	@ (8013cc8 <TIM_OC6_SetConfig+0xb4>)
 8013c40:	4013      	ands	r3, r2
 8013c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	021b      	lsls	r3, r3, #8
 8013c4a:	68fa      	ldr	r2, [r7, #12]
 8013c4c:	4313      	orrs	r3, r2
 8013c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013c50:	693b      	ldr	r3, [r7, #16]
 8013c52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013c56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	689b      	ldr	r3, [r3, #8]
 8013c5c:	051b      	lsls	r3, r3, #20
 8013c5e:	693a      	ldr	r2, [r7, #16]
 8013c60:	4313      	orrs	r3, r2
 8013c62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	4a19      	ldr	r2, [pc, #100]	@ (8013ccc <TIM_OC6_SetConfig+0xb8>)
 8013c68:	4293      	cmp	r3, r2
 8013c6a:	d00f      	beq.n	8013c8c <TIM_OC6_SetConfig+0x78>
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	4a18      	ldr	r2, [pc, #96]	@ (8013cd0 <TIM_OC6_SetConfig+0xbc>)
 8013c70:	4293      	cmp	r3, r2
 8013c72:	d00b      	beq.n	8013c8c <TIM_OC6_SetConfig+0x78>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	4a17      	ldr	r2, [pc, #92]	@ (8013cd4 <TIM_OC6_SetConfig+0xc0>)
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d007      	beq.n	8013c8c <TIM_OC6_SetConfig+0x78>
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	4a16      	ldr	r2, [pc, #88]	@ (8013cd8 <TIM_OC6_SetConfig+0xc4>)
 8013c80:	4293      	cmp	r3, r2
 8013c82:	d003      	beq.n	8013c8c <TIM_OC6_SetConfig+0x78>
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	4a15      	ldr	r2, [pc, #84]	@ (8013cdc <TIM_OC6_SetConfig+0xc8>)
 8013c88:	4293      	cmp	r3, r2
 8013c8a:	d109      	bne.n	8013ca0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013c8c:	697b      	ldr	r3, [r7, #20]
 8013c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013c92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	695b      	ldr	r3, [r3, #20]
 8013c98:	029b      	lsls	r3, r3, #10
 8013c9a:	697a      	ldr	r2, [r7, #20]
 8013c9c:	4313      	orrs	r3, r2
 8013c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	697a      	ldr	r2, [r7, #20]
 8013ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	68fa      	ldr	r2, [r7, #12]
 8013caa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	685a      	ldr	r2, [r3, #4]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	693a      	ldr	r2, [r7, #16]
 8013cb8:	621a      	str	r2, [r3, #32]
}
 8013cba:	bf00      	nop
 8013cbc:	371c      	adds	r7, #28
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc4:	4770      	bx	lr
 8013cc6:	bf00      	nop
 8013cc8:	feff8fff 	.word	0xfeff8fff
 8013ccc:	40010000 	.word	0x40010000
 8013cd0:	40010400 	.word	0x40010400
 8013cd4:	40014000 	.word	0x40014000
 8013cd8:	40014400 	.word	0x40014400
 8013cdc:	40014800 	.word	0x40014800

08013ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013ce0:	b480      	push	{r7}
 8013ce2:	b087      	sub	sp, #28
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	60f8      	str	r0, [r7, #12]
 8013ce8:	60b9      	str	r1, [r7, #8]
 8013cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	6a1b      	ldr	r3, [r3, #32]
 8013cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	6a1b      	ldr	r3, [r3, #32]
 8013cf6:	f023 0201 	bic.w	r2, r3, #1
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	699b      	ldr	r3, [r3, #24]
 8013d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013d04:	693b      	ldr	r3, [r7, #16]
 8013d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	011b      	lsls	r3, r3, #4
 8013d10:	693a      	ldr	r2, [r7, #16]
 8013d12:	4313      	orrs	r3, r2
 8013d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013d16:	697b      	ldr	r3, [r7, #20]
 8013d18:	f023 030a 	bic.w	r3, r3, #10
 8013d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013d1e:	697a      	ldr	r2, [r7, #20]
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	4313      	orrs	r3, r2
 8013d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	693a      	ldr	r2, [r7, #16]
 8013d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	697a      	ldr	r2, [r7, #20]
 8013d30:	621a      	str	r2, [r3, #32]
}
 8013d32:	bf00      	nop
 8013d34:	371c      	adds	r7, #28
 8013d36:	46bd      	mov	sp, r7
 8013d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3c:	4770      	bx	lr

08013d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013d3e:	b480      	push	{r7}
 8013d40:	b087      	sub	sp, #28
 8013d42:	af00      	add	r7, sp, #0
 8013d44:	60f8      	str	r0, [r7, #12]
 8013d46:	60b9      	str	r1, [r7, #8]
 8013d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	6a1b      	ldr	r3, [r3, #32]
 8013d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	6a1b      	ldr	r3, [r3, #32]
 8013d54:	f023 0210 	bic.w	r2, r3, #16
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	699b      	ldr	r3, [r3, #24]
 8013d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013d62:	693b      	ldr	r3, [r7, #16]
 8013d64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	031b      	lsls	r3, r3, #12
 8013d6e:	693a      	ldr	r2, [r7, #16]
 8013d70:	4313      	orrs	r3, r2
 8013d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	011b      	lsls	r3, r3, #4
 8013d80:	697a      	ldr	r2, [r7, #20]
 8013d82:	4313      	orrs	r3, r2
 8013d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	693a      	ldr	r2, [r7, #16]
 8013d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	697a      	ldr	r2, [r7, #20]
 8013d90:	621a      	str	r2, [r3, #32]
}
 8013d92:	bf00      	nop
 8013d94:	371c      	adds	r7, #28
 8013d96:	46bd      	mov	sp, r7
 8013d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9c:	4770      	bx	lr
	...

08013da0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013da0:	b480      	push	{r7}
 8013da2:	b085      	sub	sp, #20
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	689b      	ldr	r3, [r3, #8]
 8013dae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013db0:	68fa      	ldr	r2, [r7, #12]
 8013db2:	4b09      	ldr	r3, [pc, #36]	@ (8013dd8 <TIM_ITRx_SetConfig+0x38>)
 8013db4:	4013      	ands	r3, r2
 8013db6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013db8:	683a      	ldr	r2, [r7, #0]
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	4313      	orrs	r3, r2
 8013dbe:	f043 0307 	orr.w	r3, r3, #7
 8013dc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	68fa      	ldr	r2, [r7, #12]
 8013dc8:	609a      	str	r2, [r3, #8]
}
 8013dca:	bf00      	nop
 8013dcc:	3714      	adds	r7, #20
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd4:	4770      	bx	lr
 8013dd6:	bf00      	nop
 8013dd8:	ffcfff8f 	.word	0xffcfff8f

08013ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013ddc:	b480      	push	{r7}
 8013dde:	b087      	sub	sp, #28
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	60f8      	str	r0, [r7, #12]
 8013de4:	60b9      	str	r1, [r7, #8]
 8013de6:	607a      	str	r2, [r7, #4]
 8013de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	689b      	ldr	r3, [r3, #8]
 8013dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	021a      	lsls	r2, r3, #8
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	431a      	orrs	r2, r3
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	4313      	orrs	r3, r2
 8013e04:	697a      	ldr	r2, [r7, #20]
 8013e06:	4313      	orrs	r3, r2
 8013e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	697a      	ldr	r2, [r7, #20]
 8013e0e:	609a      	str	r2, [r3, #8]
}
 8013e10:	bf00      	nop
 8013e12:	371c      	adds	r7, #28
 8013e14:	46bd      	mov	sp, r7
 8013e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1a:	4770      	bx	lr

08013e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	b087      	sub	sp, #28
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	60f8      	str	r0, [r7, #12]
 8013e24:	60b9      	str	r1, [r7, #8]
 8013e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	f003 031f 	and.w	r3, r3, #31
 8013e2e:	2201      	movs	r2, #1
 8013e30:	fa02 f303 	lsl.w	r3, r2, r3
 8013e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	6a1a      	ldr	r2, [r3, #32]
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	43db      	mvns	r3, r3
 8013e3e:	401a      	ands	r2, r3
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	6a1a      	ldr	r2, [r3, #32]
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	f003 031f 	and.w	r3, r3, #31
 8013e4e:	6879      	ldr	r1, [r7, #4]
 8013e50:	fa01 f303 	lsl.w	r3, r1, r3
 8013e54:	431a      	orrs	r2, r3
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	621a      	str	r2, [r3, #32]
}
 8013e5a:	bf00      	nop
 8013e5c:	371c      	adds	r7, #28
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e64:	4770      	bx	lr
	...

08013e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013e68:	b480      	push	{r7}
 8013e6a:	b085      	sub	sp, #20
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
 8013e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013e78:	2b01      	cmp	r3, #1
 8013e7a:	d101      	bne.n	8013e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013e7c:	2302      	movs	r3, #2
 8013e7e:	e06d      	b.n	8013f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2201      	movs	r2, #1
 8013e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2202      	movs	r2, #2
 8013e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	685b      	ldr	r3, [r3, #4]
 8013e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	689b      	ldr	r3, [r3, #8]
 8013e9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	4a30      	ldr	r2, [pc, #192]	@ (8013f68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013ea6:	4293      	cmp	r3, r2
 8013ea8:	d004      	beq.n	8013eb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	4a2f      	ldr	r2, [pc, #188]	@ (8013f6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013eb0:	4293      	cmp	r3, r2
 8013eb2:	d108      	bne.n	8013ec6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8013eba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	68fa      	ldr	r2, [r7, #12]
 8013ec2:	4313      	orrs	r3, r2
 8013ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013ecc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	68fa      	ldr	r2, [r7, #12]
 8013ed4:	4313      	orrs	r3, r2
 8013ed6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	68fa      	ldr	r2, [r7, #12]
 8013ede:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	4a20      	ldr	r2, [pc, #128]	@ (8013f68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013ee6:	4293      	cmp	r3, r2
 8013ee8:	d022      	beq.n	8013f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013ef2:	d01d      	beq.n	8013f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8013f70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013efa:	4293      	cmp	r3, r2
 8013efc:	d018      	beq.n	8013f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	4a1c      	ldr	r2, [pc, #112]	@ (8013f74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013f04:	4293      	cmp	r3, r2
 8013f06:	d013      	beq.n	8013f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8013f78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	d00e      	beq.n	8013f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	4a15      	ldr	r2, [pc, #84]	@ (8013f6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013f18:	4293      	cmp	r3, r2
 8013f1a:	d009      	beq.n	8013f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	4a16      	ldr	r2, [pc, #88]	@ (8013f7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013f22:	4293      	cmp	r3, r2
 8013f24:	d004      	beq.n	8013f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	4a15      	ldr	r2, [pc, #84]	@ (8013f80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013f2c:	4293      	cmp	r3, r2
 8013f2e:	d10c      	bne.n	8013f4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013f36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	689b      	ldr	r3, [r3, #8]
 8013f3c:	68ba      	ldr	r2, [r7, #8]
 8013f3e:	4313      	orrs	r3, r2
 8013f40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	68ba      	ldr	r2, [r7, #8]
 8013f48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2201      	movs	r2, #1
 8013f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	2200      	movs	r2, #0
 8013f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013f5a:	2300      	movs	r3, #0
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3714      	adds	r7, #20
 8013f60:	46bd      	mov	sp, r7
 8013f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f66:	4770      	bx	lr
 8013f68:	40010000 	.word	0x40010000
 8013f6c:	40010400 	.word	0x40010400
 8013f70:	40000400 	.word	0x40000400
 8013f74:	40000800 	.word	0x40000800
 8013f78:	40000c00 	.word	0x40000c00
 8013f7c:	40001800 	.word	0x40001800
 8013f80:	40014000 	.word	0x40014000

08013f84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013f84:	b480      	push	{r7}
 8013f86:	b085      	sub	sp, #20
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013f98:	2b01      	cmp	r3, #1
 8013f9a:	d101      	bne.n	8013fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013f9c:	2302      	movs	r3, #2
 8013f9e:	e065      	b.n	801406c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2201      	movs	r2, #1
 8013fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	68db      	ldr	r3, [r3, #12]
 8013fb2:	4313      	orrs	r3, r2
 8013fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	689b      	ldr	r3, [r3, #8]
 8013fc0:	4313      	orrs	r3, r2
 8013fc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	685b      	ldr	r3, [r3, #4]
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	4313      	orrs	r3, r2
 8013fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	691b      	ldr	r3, [r3, #16]
 8013fea:	4313      	orrs	r3, r2
 8013fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	695b      	ldr	r3, [r3, #20]
 8013ff8:	4313      	orrs	r3, r2
 8013ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8014002:	683b      	ldr	r3, [r7, #0]
 8014004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014006:	4313      	orrs	r3, r2
 8014008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	699b      	ldr	r3, [r3, #24]
 8014014:	041b      	lsls	r3, r3, #16
 8014016:	4313      	orrs	r3, r2
 8014018:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	4a16      	ldr	r2, [pc, #88]	@ (8014078 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8014020:	4293      	cmp	r3, r2
 8014022:	d004      	beq.n	801402e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	4a14      	ldr	r2, [pc, #80]	@ (801407c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801402a:	4293      	cmp	r3, r2
 801402c:	d115      	bne.n	801405a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014038:	051b      	lsls	r3, r3, #20
 801403a:	4313      	orrs	r3, r2
 801403c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	69db      	ldr	r3, [r3, #28]
 8014048:	4313      	orrs	r3, r2
 801404a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	6a1b      	ldr	r3, [r3, #32]
 8014056:	4313      	orrs	r3, r2
 8014058:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	68fa      	ldr	r2, [r7, #12]
 8014060:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	2200      	movs	r2, #0
 8014066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801406a:	2300      	movs	r3, #0
}
 801406c:	4618      	mov	r0, r3
 801406e:	3714      	adds	r7, #20
 8014070:	46bd      	mov	sp, r7
 8014072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014076:	4770      	bx	lr
 8014078:	40010000 	.word	0x40010000
 801407c:	40010400 	.word	0x40010400

08014080 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014080:	b480      	push	{r7}
 8014082:	b083      	sub	sp, #12
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014088:	bf00      	nop
 801408a:	370c      	adds	r7, #12
 801408c:	46bd      	mov	sp, r7
 801408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014092:	4770      	bx	lr

08014094 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014094:	b480      	push	{r7}
 8014096:	b083      	sub	sp, #12
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801409c:	bf00      	nop
 801409e:	370c      	adds	r7, #12
 80140a0:	46bd      	mov	sp, r7
 80140a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a6:	4770      	bx	lr

080140a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80140a8:	b480      	push	{r7}
 80140aa:	b083      	sub	sp, #12
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80140b0:	bf00      	nop
 80140b2:	370c      	adds	r7, #12
 80140b4:	46bd      	mov	sp, r7
 80140b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ba:	4770      	bx	lr

080140bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b082      	sub	sp, #8
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d101      	bne.n	80140ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80140ca:	2301      	movs	r3, #1
 80140cc:	e042      	b.n	8014154 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d106      	bne.n	80140e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2200      	movs	r2, #0
 80140dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f7f1 f8a5 	bl	8005230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2224      	movs	r2, #36	@ 0x24
 80140ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	681a      	ldr	r2, [r3, #0]
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	f022 0201 	bic.w	r2, r2, #1
 80140fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014102:	2b00      	cmp	r3, #0
 8014104:	d002      	beq.n	801410c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f001 fc32 	bl	8015970 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f000 fec7 	bl	8014ea0 <UART_SetConfig>
 8014112:	4603      	mov	r3, r0
 8014114:	2b01      	cmp	r3, #1
 8014116:	d101      	bne.n	801411c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8014118:	2301      	movs	r3, #1
 801411a:	e01b      	b.n	8014154 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	685a      	ldr	r2, [r3, #4]
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801412a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	689a      	ldr	r2, [r3, #8]
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801413a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	681a      	ldr	r2, [r3, #0]
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	f042 0201 	orr.w	r2, r2, #1
 801414a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f001 fcb1 	bl	8015ab4 <UART_CheckIdleState>
 8014152:	4603      	mov	r3, r0
}
 8014154:	4618      	mov	r0, r3
 8014156:	3708      	adds	r7, #8
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}

0801415c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b08a      	sub	sp, #40	@ 0x28
 8014160:	af02      	add	r7, sp, #8
 8014162:	60f8      	str	r0, [r7, #12]
 8014164:	60b9      	str	r1, [r7, #8]
 8014166:	603b      	str	r3, [r7, #0]
 8014168:	4613      	mov	r3, r2
 801416a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014172:	2b20      	cmp	r3, #32
 8014174:	d17b      	bne.n	801426e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d002      	beq.n	8014182 <HAL_UART_Transmit+0x26>
 801417c:	88fb      	ldrh	r3, [r7, #6]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d101      	bne.n	8014186 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8014182:	2301      	movs	r3, #1
 8014184:	e074      	b.n	8014270 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	2200      	movs	r2, #0
 801418a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	2221      	movs	r2, #33	@ 0x21
 8014192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014196:	f7f1 fa2f 	bl	80055f8 <HAL_GetTick>
 801419a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	88fa      	ldrh	r2, [r7, #6]
 80141a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	88fa      	ldrh	r2, [r7, #6]
 80141a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	689b      	ldr	r3, [r3, #8]
 80141b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80141b4:	d108      	bne.n	80141c8 <HAL_UART_Transmit+0x6c>
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	691b      	ldr	r3, [r3, #16]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d104      	bne.n	80141c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80141be:	2300      	movs	r3, #0
 80141c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80141c2:	68bb      	ldr	r3, [r7, #8]
 80141c4:	61bb      	str	r3, [r7, #24]
 80141c6:	e003      	b.n	80141d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80141cc:	2300      	movs	r3, #0
 80141ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80141d0:	e030      	b.n	8014234 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	9300      	str	r3, [sp, #0]
 80141d6:	697b      	ldr	r3, [r7, #20]
 80141d8:	2200      	movs	r2, #0
 80141da:	2180      	movs	r1, #128	@ 0x80
 80141dc:	68f8      	ldr	r0, [r7, #12]
 80141de:	f001 fd13 	bl	8015c08 <UART_WaitOnFlagUntilTimeout>
 80141e2:	4603      	mov	r3, r0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d005      	beq.n	80141f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	2220      	movs	r2, #32
 80141ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80141f0:	2303      	movs	r3, #3
 80141f2:	e03d      	b.n	8014270 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80141f4:	69fb      	ldr	r3, [r7, #28]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d10b      	bne.n	8014212 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80141fa:	69bb      	ldr	r3, [r7, #24]
 80141fc:	881b      	ldrh	r3, [r3, #0]
 80141fe:	461a      	mov	r2, r3
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014208:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801420a:	69bb      	ldr	r3, [r7, #24]
 801420c:	3302      	adds	r3, #2
 801420e:	61bb      	str	r3, [r7, #24]
 8014210:	e007      	b.n	8014222 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8014212:	69fb      	ldr	r3, [r7, #28]
 8014214:	781a      	ldrb	r2, [r3, #0]
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801421c:	69fb      	ldr	r3, [r7, #28]
 801421e:	3301      	adds	r3, #1
 8014220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8014228:	b29b      	uxth	r3, r3
 801422a:	3b01      	subs	r3, #1
 801422c:	b29a      	uxth	r2, r3
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801423a:	b29b      	uxth	r3, r3
 801423c:	2b00      	cmp	r3, #0
 801423e:	d1c8      	bne.n	80141d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014240:	683b      	ldr	r3, [r7, #0]
 8014242:	9300      	str	r3, [sp, #0]
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	2200      	movs	r2, #0
 8014248:	2140      	movs	r1, #64	@ 0x40
 801424a:	68f8      	ldr	r0, [r7, #12]
 801424c:	f001 fcdc 	bl	8015c08 <UART_WaitOnFlagUntilTimeout>
 8014250:	4603      	mov	r3, r0
 8014252:	2b00      	cmp	r3, #0
 8014254:	d005      	beq.n	8014262 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	2220      	movs	r2, #32
 801425a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801425e:	2303      	movs	r3, #3
 8014260:	e006      	b.n	8014270 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	2220      	movs	r2, #32
 8014266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801426a:	2300      	movs	r3, #0
 801426c:	e000      	b.n	8014270 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801426e:	2302      	movs	r3, #2
  }
}
 8014270:	4618      	mov	r0, r3
 8014272:	3720      	adds	r7, #32
 8014274:	46bd      	mov	sp, r7
 8014276:	bd80      	pop	{r7, pc}

08014278 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b08a      	sub	sp, #40	@ 0x28
 801427c:	af02      	add	r7, sp, #8
 801427e:	60f8      	str	r0, [r7, #12]
 8014280:	60b9      	str	r1, [r7, #8]
 8014282:	603b      	str	r3, [r7, #0]
 8014284:	4613      	mov	r3, r2
 8014286:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801428e:	2b20      	cmp	r3, #32
 8014290:	f040 80b5 	bne.w	80143fe <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8014294:	68bb      	ldr	r3, [r7, #8]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d002      	beq.n	80142a0 <HAL_UART_Receive+0x28>
 801429a:	88fb      	ldrh	r3, [r7, #6]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d101      	bne.n	80142a4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80142a0:	2301      	movs	r3, #1
 80142a2:	e0ad      	b.n	8014400 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	2200      	movs	r2, #0
 80142a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	2222      	movs	r2, #34	@ 0x22
 80142b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	2200      	movs	r2, #0
 80142b8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80142ba:	f7f1 f99d 	bl	80055f8 <HAL_GetTick>
 80142be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	88fa      	ldrh	r2, [r7, #6]
 80142c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	88fa      	ldrh	r2, [r7, #6]
 80142cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	689b      	ldr	r3, [r3, #8]
 80142d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80142d8:	d10e      	bne.n	80142f8 <HAL_UART_Receive+0x80>
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	691b      	ldr	r3, [r3, #16]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d105      	bne.n	80142ee <HAL_UART_Receive+0x76>
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80142e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80142ec:	e02d      	b.n	801434a <HAL_UART_Receive+0xd2>
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	22ff      	movs	r2, #255	@ 0xff
 80142f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80142f6:	e028      	b.n	801434a <HAL_UART_Receive+0xd2>
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	689b      	ldr	r3, [r3, #8]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d10d      	bne.n	801431c <HAL_UART_Receive+0xa4>
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	691b      	ldr	r3, [r3, #16]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d104      	bne.n	8014312 <HAL_UART_Receive+0x9a>
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	22ff      	movs	r2, #255	@ 0xff
 801430c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8014310:	e01b      	b.n	801434a <HAL_UART_Receive+0xd2>
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	227f      	movs	r2, #127	@ 0x7f
 8014316:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801431a:	e016      	b.n	801434a <HAL_UART_Receive+0xd2>
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	689b      	ldr	r3, [r3, #8]
 8014320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014324:	d10d      	bne.n	8014342 <HAL_UART_Receive+0xca>
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	691b      	ldr	r3, [r3, #16]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d104      	bne.n	8014338 <HAL_UART_Receive+0xc0>
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	227f      	movs	r2, #127	@ 0x7f
 8014332:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8014336:	e008      	b.n	801434a <HAL_UART_Receive+0xd2>
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	223f      	movs	r2, #63	@ 0x3f
 801433c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8014340:	e003      	b.n	801434a <HAL_UART_Receive+0xd2>
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	2200      	movs	r2, #0
 8014346:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014350:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	689b      	ldr	r3, [r3, #8]
 8014356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801435a:	d108      	bne.n	801436e <HAL_UART_Receive+0xf6>
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	691b      	ldr	r3, [r3, #16]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d104      	bne.n	801436e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014364:	2300      	movs	r3, #0
 8014366:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	61bb      	str	r3, [r7, #24]
 801436c:	e003      	b.n	8014376 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014372:	2300      	movs	r3, #0
 8014374:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014376:	e036      	b.n	80143e6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	9300      	str	r3, [sp, #0]
 801437c:	697b      	ldr	r3, [r7, #20]
 801437e:	2200      	movs	r2, #0
 8014380:	2120      	movs	r1, #32
 8014382:	68f8      	ldr	r0, [r7, #12]
 8014384:	f001 fc40 	bl	8015c08 <UART_WaitOnFlagUntilTimeout>
 8014388:	4603      	mov	r3, r0
 801438a:	2b00      	cmp	r3, #0
 801438c:	d005      	beq.n	801439a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	2220      	movs	r2, #32
 8014392:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8014396:	2303      	movs	r3, #3
 8014398:	e032      	b.n	8014400 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801439a:	69fb      	ldr	r3, [r7, #28]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d10c      	bne.n	80143ba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143a6:	b29a      	uxth	r2, r3
 80143a8:	8a7b      	ldrh	r3, [r7, #18]
 80143aa:	4013      	ands	r3, r2
 80143ac:	b29a      	uxth	r2, r3
 80143ae:	69bb      	ldr	r3, [r7, #24]
 80143b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80143b2:	69bb      	ldr	r3, [r7, #24]
 80143b4:	3302      	adds	r3, #2
 80143b6:	61bb      	str	r3, [r7, #24]
 80143b8:	e00c      	b.n	80143d4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143c0:	b2da      	uxtb	r2, r3
 80143c2:	8a7b      	ldrh	r3, [r7, #18]
 80143c4:	b2db      	uxtb	r3, r3
 80143c6:	4013      	ands	r3, r2
 80143c8:	b2da      	uxtb	r2, r3
 80143ca:	69fb      	ldr	r3, [r7, #28]
 80143cc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80143ce:	69fb      	ldr	r3, [r7, #28]
 80143d0:	3301      	adds	r3, #1
 80143d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80143da:	b29b      	uxth	r3, r3
 80143dc:	3b01      	subs	r3, #1
 80143de:	b29a      	uxth	r2, r3
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80143ec:	b29b      	uxth	r3, r3
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d1c2      	bne.n	8014378 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	2220      	movs	r2, #32
 80143f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80143fa:	2300      	movs	r3, #0
 80143fc:	e000      	b.n	8014400 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80143fe:	2302      	movs	r3, #2
  }
}
 8014400:	4618      	mov	r0, r3
 8014402:	3720      	adds	r7, #32
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}

08014408 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8014408:	b480      	push	{r7}
 801440a:	b091      	sub	sp, #68	@ 0x44
 801440c:	af00      	add	r7, sp, #0
 801440e:	60f8      	str	r0, [r7, #12]
 8014410:	60b9      	str	r1, [r7, #8]
 8014412:	4613      	mov	r3, r2
 8014414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801441c:	2b20      	cmp	r3, #32
 801441e:	d178      	bne.n	8014512 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8014420:	68bb      	ldr	r3, [r7, #8]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d002      	beq.n	801442c <HAL_UART_Transmit_IT+0x24>
 8014426:	88fb      	ldrh	r3, [r7, #6]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d101      	bne.n	8014430 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 801442c:	2301      	movs	r3, #1
 801442e:	e071      	b.n	8014514 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	68ba      	ldr	r2, [r7, #8]
 8014434:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	88fa      	ldrh	r2, [r7, #6]
 801443a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	88fa      	ldrh	r2, [r7, #6]
 8014442:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	2200      	movs	r2, #0
 801444a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	2200      	movs	r2, #0
 8014450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	2221      	movs	r2, #33	@ 0x21
 8014458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014464:	d12a      	bne.n	80144bc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	689b      	ldr	r3, [r3, #8]
 801446a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801446e:	d107      	bne.n	8014480 <HAL_UART_Transmit_IT+0x78>
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	691b      	ldr	r3, [r3, #16]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d103      	bne.n	8014480 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	4a29      	ldr	r2, [pc, #164]	@ (8014520 <HAL_UART_Transmit_IT+0x118>)
 801447c:	679a      	str	r2, [r3, #120]	@ 0x78
 801447e:	e002      	b.n	8014486 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	4a28      	ldr	r2, [pc, #160]	@ (8014524 <HAL_UART_Transmit_IT+0x11c>)
 8014484:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	3308      	adds	r3, #8
 801448c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801448e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014490:	e853 3f00 	ldrex	r3, [r3]
 8014494:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014498:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801449c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	3308      	adds	r3, #8
 80144a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80144a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80144a8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80144ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80144ae:	e841 2300 	strex	r3, r2, [r1]
 80144b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80144b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d1e5      	bne.n	8014486 <HAL_UART_Transmit_IT+0x7e>
 80144ba:	e028      	b.n	801450e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	689b      	ldr	r3, [r3, #8]
 80144c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80144c4:	d107      	bne.n	80144d6 <HAL_UART_Transmit_IT+0xce>
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	691b      	ldr	r3, [r3, #16]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d103      	bne.n	80144d6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	4a15      	ldr	r2, [pc, #84]	@ (8014528 <HAL_UART_Transmit_IT+0x120>)
 80144d2:	679a      	str	r2, [r3, #120]	@ 0x78
 80144d4:	e002      	b.n	80144dc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	4a14      	ldr	r2, [pc, #80]	@ (801452c <HAL_UART_Transmit_IT+0x124>)
 80144da:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144e2:	697b      	ldr	r3, [r7, #20]
 80144e4:	e853 3f00 	ldrex	r3, [r3]
 80144e8:	613b      	str	r3, [r7, #16]
   return(result);
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80144f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	461a      	mov	r2, r3
 80144f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144fa:	623b      	str	r3, [r7, #32]
 80144fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144fe:	69f9      	ldr	r1, [r7, #28]
 8014500:	6a3a      	ldr	r2, [r7, #32]
 8014502:	e841 2300 	strex	r3, r2, [r1]
 8014506:	61bb      	str	r3, [r7, #24]
   return(result);
 8014508:	69bb      	ldr	r3, [r7, #24]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d1e6      	bne.n	80144dc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 801450e:	2300      	movs	r3, #0
 8014510:	e000      	b.n	8014514 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8014512:	2302      	movs	r3, #2
  }
}
 8014514:	4618      	mov	r0, r3
 8014516:	3744      	adds	r7, #68	@ 0x44
 8014518:	46bd      	mov	sp, r7
 801451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451e:	4770      	bx	lr
 8014520:	08016497 	.word	0x08016497
 8014524:	080163b7 	.word	0x080163b7
 8014528:	080162f5 	.word	0x080162f5
 801452c:	0801623d 	.word	0x0801623d

08014530 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b08a      	sub	sp, #40	@ 0x28
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	4613      	mov	r3, r2
 801453c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014544:	2b20      	cmp	r3, #32
 8014546:	d167      	bne.n	8014618 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d002      	beq.n	8014554 <HAL_UART_Transmit_DMA+0x24>
 801454e:	88fb      	ldrh	r3, [r7, #6]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d101      	bne.n	8014558 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8014554:	2301      	movs	r3, #1
 8014556:	e060      	b.n	801461a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	68ba      	ldr	r2, [r7, #8]
 801455c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	88fa      	ldrh	r2, [r7, #6]
 8014562:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	88fa      	ldrh	r2, [r7, #6]
 801456a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2200      	movs	r2, #0
 8014572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	2221      	movs	r2, #33	@ 0x21
 801457a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014582:	2b00      	cmp	r3, #0
 8014584:	d028      	beq.n	80145d8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801458a:	4a26      	ldr	r2, [pc, #152]	@ (8014624 <HAL_UART_Transmit_DMA+0xf4>)
 801458c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014592:	4a25      	ldr	r2, [pc, #148]	@ (8014628 <HAL_UART_Transmit_DMA+0xf8>)
 8014594:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801459a:	4a24      	ldr	r2, [pc, #144]	@ (801462c <HAL_UART_Transmit_DMA+0xfc>)
 801459c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80145a2:	2200      	movs	r2, #0
 80145a4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80145ae:	4619      	mov	r1, r3
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	3328      	adds	r3, #40	@ 0x28
 80145b6:	461a      	mov	r2, r3
 80145b8:	88fb      	ldrh	r3, [r7, #6]
 80145ba:	f7f3 fc7b 	bl	8007eb4 <HAL_DMA_Start_IT>
 80145be:	4603      	mov	r3, r0
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d009      	beq.n	80145d8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	2210      	movs	r2, #16
 80145c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	2220      	movs	r2, #32
 80145d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80145d4:	2301      	movs	r3, #1
 80145d6:	e020      	b.n	801461a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	2240      	movs	r2, #64	@ 0x40
 80145de:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	3308      	adds	r3, #8
 80145e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	e853 3f00 	ldrex	r3, [r3]
 80145ee:	613b      	str	r3, [r7, #16]
   return(result);
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80145f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	3308      	adds	r3, #8
 80145fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014600:	623a      	str	r2, [r7, #32]
 8014602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014604:	69f9      	ldr	r1, [r7, #28]
 8014606:	6a3a      	ldr	r2, [r7, #32]
 8014608:	e841 2300 	strex	r3, r2, [r1]
 801460c:	61bb      	str	r3, [r7, #24]
   return(result);
 801460e:	69bb      	ldr	r3, [r7, #24]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d1e5      	bne.n	80145e0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8014614:	2300      	movs	r3, #0
 8014616:	e000      	b.n	801461a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8014618:	2302      	movs	r3, #2
  }
}
 801461a:	4618      	mov	r0, r3
 801461c:	3728      	adds	r7, #40	@ 0x28
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}
 8014622:	bf00      	nop
 8014624:	08015f81 	.word	0x08015f81
 8014628:	08016017 	.word	0x08016017
 801462c:	08016199 	.word	0x08016199

08014630 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b08a      	sub	sp, #40	@ 0x28
 8014634:	af00      	add	r7, sp, #0
 8014636:	60f8      	str	r0, [r7, #12]
 8014638:	60b9      	str	r1, [r7, #8]
 801463a:	4613      	mov	r3, r2
 801463c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014644:	2b20      	cmp	r3, #32
 8014646:	d137      	bne.n	80146b8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d002      	beq.n	8014654 <HAL_UART_Receive_DMA+0x24>
 801464e:	88fb      	ldrh	r3, [r7, #6]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d101      	bne.n	8014658 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8014654:	2301      	movs	r3, #1
 8014656:	e030      	b.n	80146ba <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	2200      	movs	r2, #0
 801465c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	4a18      	ldr	r2, [pc, #96]	@ (80146c4 <HAL_UART_Receive_DMA+0x94>)
 8014664:	4293      	cmp	r3, r2
 8014666:	d01f      	beq.n	80146a8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	685b      	ldr	r3, [r3, #4]
 801466e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014672:	2b00      	cmp	r3, #0
 8014674:	d018      	beq.n	80146a8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	e853 3f00 	ldrex	r3, [r3]
 8014682:	613b      	str	r3, [r7, #16]
   return(result);
 8014684:	693b      	ldr	r3, [r7, #16]
 8014686:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801468a:	627b      	str	r3, [r7, #36]	@ 0x24
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	461a      	mov	r2, r3
 8014692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014694:	623b      	str	r3, [r7, #32]
 8014696:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014698:	69f9      	ldr	r1, [r7, #28]
 801469a:	6a3a      	ldr	r2, [r7, #32]
 801469c:	e841 2300 	strex	r3, r2, [r1]
 80146a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80146a2:	69bb      	ldr	r3, [r7, #24]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d1e6      	bne.n	8014676 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80146a8:	88fb      	ldrh	r3, [r7, #6]
 80146aa:	461a      	mov	r2, r3
 80146ac:	68b9      	ldr	r1, [r7, #8]
 80146ae:	68f8      	ldr	r0, [r7, #12]
 80146b0:	f001 fb18 	bl	8015ce4 <UART_Start_Receive_DMA>
 80146b4:	4603      	mov	r3, r0
 80146b6:	e000      	b.n	80146ba <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80146b8:	2302      	movs	r3, #2
  }
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3728      	adds	r7, #40	@ 0x28
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
 80146c2:	bf00      	nop
 80146c4:	58000c00 	.word	0x58000c00

080146c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b0ba      	sub	sp, #232	@ 0xe8
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	69db      	ldr	r3, [r3, #28]
 80146d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	689b      	ldr	r3, [r3, #8]
 80146ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80146ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80146f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80146f6:	4013      	ands	r3, r2
 80146f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80146fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8014700:	2b00      	cmp	r3, #0
 8014702:	d11b      	bne.n	801473c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014708:	f003 0320 	and.w	r3, r3, #32
 801470c:	2b00      	cmp	r3, #0
 801470e:	d015      	beq.n	801473c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014714:	f003 0320 	and.w	r3, r3, #32
 8014718:	2b00      	cmp	r3, #0
 801471a:	d105      	bne.n	8014728 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801471c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014724:	2b00      	cmp	r3, #0
 8014726:	d009      	beq.n	801473c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801472c:	2b00      	cmp	r3, #0
 801472e:	f000 8393 	beq.w	8014e58 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	4798      	blx	r3
      }
      return;
 801473a:	e38d      	b.n	8014e58 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801473c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8014740:	2b00      	cmp	r3, #0
 8014742:	f000 8123 	beq.w	801498c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8014746:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801474a:	4b8d      	ldr	r3, [pc, #564]	@ (8014980 <HAL_UART_IRQHandler+0x2b8>)
 801474c:	4013      	ands	r3, r2
 801474e:	2b00      	cmp	r3, #0
 8014750:	d106      	bne.n	8014760 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8014752:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8014756:	4b8b      	ldr	r3, [pc, #556]	@ (8014984 <HAL_UART_IRQHandler+0x2bc>)
 8014758:	4013      	ands	r3, r2
 801475a:	2b00      	cmp	r3, #0
 801475c:	f000 8116 	beq.w	801498c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014764:	f003 0301 	and.w	r3, r3, #1
 8014768:	2b00      	cmp	r3, #0
 801476a:	d011      	beq.n	8014790 <HAL_UART_IRQHandler+0xc8>
 801476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014774:	2b00      	cmp	r3, #0
 8014776:	d00b      	beq.n	8014790 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	2201      	movs	r2, #1
 801477e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014786:	f043 0201 	orr.w	r2, r3, #1
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014794:	f003 0302 	and.w	r3, r3, #2
 8014798:	2b00      	cmp	r3, #0
 801479a:	d011      	beq.n	80147c0 <HAL_UART_IRQHandler+0xf8>
 801479c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80147a0:	f003 0301 	and.w	r3, r3, #1
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d00b      	beq.n	80147c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	2202      	movs	r2, #2
 80147ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80147b6:	f043 0204 	orr.w	r2, r3, #4
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80147c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80147c4:	f003 0304 	and.w	r3, r3, #4
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d011      	beq.n	80147f0 <HAL_UART_IRQHandler+0x128>
 80147cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80147d0:	f003 0301 	and.w	r3, r3, #1
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d00b      	beq.n	80147f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	2204      	movs	r2, #4
 80147de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80147e6:	f043 0202 	orr.w	r2, r3, #2
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80147f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80147f4:	f003 0308 	and.w	r3, r3, #8
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d017      	beq.n	801482c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80147fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014800:	f003 0320 	and.w	r3, r3, #32
 8014804:	2b00      	cmp	r3, #0
 8014806:	d105      	bne.n	8014814 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014808:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801480c:	4b5c      	ldr	r3, [pc, #368]	@ (8014980 <HAL_UART_IRQHandler+0x2b8>)
 801480e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014810:	2b00      	cmp	r3, #0
 8014812:	d00b      	beq.n	801482c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	2208      	movs	r2, #8
 801481a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014822:	f043 0208 	orr.w	r2, r3, #8
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801482c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014834:	2b00      	cmp	r3, #0
 8014836:	d012      	beq.n	801485e <HAL_UART_IRQHandler+0x196>
 8014838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801483c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014840:	2b00      	cmp	r3, #0
 8014842:	d00c      	beq.n	801485e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801484c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014854:	f043 0220 	orr.w	r2, r3, #32
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014864:	2b00      	cmp	r3, #0
 8014866:	f000 82f9 	beq.w	8014e5c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801486e:	f003 0320 	and.w	r3, r3, #32
 8014872:	2b00      	cmp	r3, #0
 8014874:	d013      	beq.n	801489e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801487a:	f003 0320 	and.w	r3, r3, #32
 801487e:	2b00      	cmp	r3, #0
 8014880:	d105      	bne.n	801488e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801488a:	2b00      	cmp	r3, #0
 801488c:	d007      	beq.n	801489e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014892:	2b00      	cmp	r3, #0
 8014894:	d003      	beq.n	801489e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80148a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	689b      	ldr	r3, [r3, #8]
 80148ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80148b2:	2b40      	cmp	r3, #64	@ 0x40
 80148b4:	d005      	beq.n	80148c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80148b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80148ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d054      	beq.n	801496c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80148c2:	6878      	ldr	r0, [r7, #4]
 80148c4:	f001 faf6 	bl	8015eb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	689b      	ldr	r3, [r3, #8]
 80148ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80148d2:	2b40      	cmp	r3, #64	@ 0x40
 80148d4:	d146      	bne.n	8014964 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	3308      	adds	r3, #8
 80148dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80148e4:	e853 3f00 	ldrex	r3, [r3]
 80148e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80148ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80148f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80148f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	3308      	adds	r3, #8
 80148fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8014902:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8014906:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801490a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801490e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8014912:	e841 2300 	strex	r3, r2, [r1]
 8014916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801491a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801491e:	2b00      	cmp	r3, #0
 8014920:	d1d9      	bne.n	80148d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014928:	2b00      	cmp	r3, #0
 801492a:	d017      	beq.n	801495c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014932:	4a15      	ldr	r2, [pc, #84]	@ (8014988 <HAL_UART_IRQHandler+0x2c0>)
 8014934:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801493c:	4618      	mov	r0, r3
 801493e:	f7f4 f841 	bl	80089c4 <HAL_DMA_Abort_IT>
 8014942:	4603      	mov	r3, r0
 8014944:	2b00      	cmp	r3, #0
 8014946:	d019      	beq.n	801497c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801494e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014950:	687a      	ldr	r2, [r7, #4]
 8014952:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8014956:	4610      	mov	r0, r2
 8014958:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801495a:	e00f      	b.n	801497c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f006 fa87 	bl	801ae70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014962:	e00b      	b.n	801497c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014964:	6878      	ldr	r0, [r7, #4]
 8014966:	f006 fa83 	bl	801ae70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801496a:	e007      	b.n	801497c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f006 fa7f 	bl	801ae70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	2200      	movs	r2, #0
 8014976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801497a:	e26f      	b.n	8014e5c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801497c:	bf00      	nop
    return;
 801497e:	e26d      	b.n	8014e5c <HAL_UART_IRQHandler+0x794>
 8014980:	10000001 	.word	0x10000001
 8014984:	04000120 	.word	0x04000120
 8014988:	08016219 	.word	0x08016219

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014990:	2b01      	cmp	r3, #1
 8014992:	f040 8203 	bne.w	8014d9c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801499a:	f003 0310 	and.w	r3, r3, #16
 801499e:	2b00      	cmp	r3, #0
 80149a0:	f000 81fc 	beq.w	8014d9c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80149a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80149a8:	f003 0310 	and.w	r3, r3, #16
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	f000 81f5 	beq.w	8014d9c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	2210      	movs	r2, #16
 80149b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	689b      	ldr	r3, [r3, #8]
 80149c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80149c4:	2b40      	cmp	r3, #64	@ 0x40
 80149c6:	f040 816d 	bne.w	8014ca4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	4aa4      	ldr	r2, [pc, #656]	@ (8014c64 <HAL_UART_IRQHandler+0x59c>)
 80149d4:	4293      	cmp	r3, r2
 80149d6:	d068      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	4aa1      	ldr	r2, [pc, #644]	@ (8014c68 <HAL_UART_IRQHandler+0x5a0>)
 80149e2:	4293      	cmp	r3, r2
 80149e4:	d061      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	4a9f      	ldr	r2, [pc, #636]	@ (8014c6c <HAL_UART_IRQHandler+0x5a4>)
 80149f0:	4293      	cmp	r3, r2
 80149f2:	d05a      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	4a9c      	ldr	r2, [pc, #624]	@ (8014c70 <HAL_UART_IRQHandler+0x5a8>)
 80149fe:	4293      	cmp	r3, r2
 8014a00:	d053      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	4a9a      	ldr	r2, [pc, #616]	@ (8014c74 <HAL_UART_IRQHandler+0x5ac>)
 8014a0c:	4293      	cmp	r3, r2
 8014a0e:	d04c      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	4a97      	ldr	r2, [pc, #604]	@ (8014c78 <HAL_UART_IRQHandler+0x5b0>)
 8014a1a:	4293      	cmp	r3, r2
 8014a1c:	d045      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	4a95      	ldr	r2, [pc, #596]	@ (8014c7c <HAL_UART_IRQHandler+0x5b4>)
 8014a28:	4293      	cmp	r3, r2
 8014a2a:	d03e      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	4a92      	ldr	r2, [pc, #584]	@ (8014c80 <HAL_UART_IRQHandler+0x5b8>)
 8014a36:	4293      	cmp	r3, r2
 8014a38:	d037      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	4a90      	ldr	r2, [pc, #576]	@ (8014c84 <HAL_UART_IRQHandler+0x5bc>)
 8014a44:	4293      	cmp	r3, r2
 8014a46:	d030      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	4a8d      	ldr	r2, [pc, #564]	@ (8014c88 <HAL_UART_IRQHandler+0x5c0>)
 8014a52:	4293      	cmp	r3, r2
 8014a54:	d029      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	4a8b      	ldr	r2, [pc, #556]	@ (8014c8c <HAL_UART_IRQHandler+0x5c4>)
 8014a60:	4293      	cmp	r3, r2
 8014a62:	d022      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	4a88      	ldr	r2, [pc, #544]	@ (8014c90 <HAL_UART_IRQHandler+0x5c8>)
 8014a6e:	4293      	cmp	r3, r2
 8014a70:	d01b      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	4a86      	ldr	r2, [pc, #536]	@ (8014c94 <HAL_UART_IRQHandler+0x5cc>)
 8014a7c:	4293      	cmp	r3, r2
 8014a7e:	d014      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	4a83      	ldr	r2, [pc, #524]	@ (8014c98 <HAL_UART_IRQHandler+0x5d0>)
 8014a8a:	4293      	cmp	r3, r2
 8014a8c:	d00d      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	4a81      	ldr	r2, [pc, #516]	@ (8014c9c <HAL_UART_IRQHandler+0x5d4>)
 8014a98:	4293      	cmp	r3, r2
 8014a9a:	d006      	beq.n	8014aaa <HAL_UART_IRQHandler+0x3e2>
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	4a7e      	ldr	r2, [pc, #504]	@ (8014ca0 <HAL_UART_IRQHandler+0x5d8>)
 8014aa6:	4293      	cmp	r3, r2
 8014aa8:	d106      	bne.n	8014ab8 <HAL_UART_IRQHandler+0x3f0>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	685b      	ldr	r3, [r3, #4]
 8014ab4:	b29b      	uxth	r3, r3
 8014ab6:	e005      	b.n	8014ac4 <HAL_UART_IRQHandler+0x3fc>
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	b29b      	uxth	r3, r3
 8014ac4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014ac8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	f000 80ad 	beq.w	8014c2c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014ad8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8014adc:	429a      	cmp	r2, r3
 8014ade:	f080 80a5 	bcs.w	8014c2c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8014ae8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014af2:	69db      	ldr	r3, [r3, #28]
 8014af4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014af8:	f000 8087 	beq.w	8014c0a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014b08:	e853 3f00 	ldrex	r3, [r3]
 8014b0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8014b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014b18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	461a      	mov	r2, r3
 8014b22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8014b26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014b2a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014b32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014b36:	e841 2300 	strex	r3, r2, [r1]
 8014b3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8014b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d1da      	bne.n	8014afc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	3308      	adds	r3, #8
 8014b4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014b50:	e853 3f00 	ldrex	r3, [r3]
 8014b54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8014b56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014b58:	f023 0301 	bic.w	r3, r3, #1
 8014b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	3308      	adds	r3, #8
 8014b66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8014b6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8014b6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8014b72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014b76:	e841 2300 	strex	r3, r2, [r1]
 8014b7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8014b7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d1e1      	bne.n	8014b46 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	3308      	adds	r3, #8
 8014b88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014b8c:	e853 3f00 	ldrex	r3, [r3]
 8014b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8014b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014b98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	3308      	adds	r3, #8
 8014ba2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8014ba6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014baa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014bac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014bae:	e841 2300 	strex	r3, r2, [r1]
 8014bb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8014bb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d1e3      	bne.n	8014b82 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2220      	movs	r2, #32
 8014bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014bd0:	e853 3f00 	ldrex	r3, [r3]
 8014bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014bd8:	f023 0310 	bic.w	r3, r3, #16
 8014bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	461a      	mov	r2, r3
 8014be6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014bea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014bec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014bf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014bf2:	e841 2300 	strex	r3, r2, [r1]
 8014bf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8014bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d1e4      	bne.n	8014bc8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014c04:	4618      	mov	r0, r3
 8014c06:	f7f3 fbbf 	bl	8008388 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2202      	movs	r2, #2
 8014c0e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014c1c:	b29b      	uxth	r3, r3
 8014c1e:	1ad3      	subs	r3, r2, r3
 8014c20:	b29b      	uxth	r3, r3
 8014c22:	4619      	mov	r1, r3
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f000 f92f 	bl	8014e88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8014c2a:	e119      	b.n	8014e60 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8014c36:	429a      	cmp	r2, r3
 8014c38:	f040 8112 	bne.w	8014e60 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014c42:	69db      	ldr	r3, [r3, #28]
 8014c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014c48:	f040 810a 	bne.w	8014e60 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2202      	movs	r2, #2
 8014c50:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014c58:	4619      	mov	r1, r3
 8014c5a:	6878      	ldr	r0, [r7, #4]
 8014c5c:	f000 f914 	bl	8014e88 <HAL_UARTEx_RxEventCallback>
      return;
 8014c60:	e0fe      	b.n	8014e60 <HAL_UART_IRQHandler+0x798>
 8014c62:	bf00      	nop
 8014c64:	40020010 	.word	0x40020010
 8014c68:	40020028 	.word	0x40020028
 8014c6c:	40020040 	.word	0x40020040
 8014c70:	40020058 	.word	0x40020058
 8014c74:	40020070 	.word	0x40020070
 8014c78:	40020088 	.word	0x40020088
 8014c7c:	400200a0 	.word	0x400200a0
 8014c80:	400200b8 	.word	0x400200b8
 8014c84:	40020410 	.word	0x40020410
 8014c88:	40020428 	.word	0x40020428
 8014c8c:	40020440 	.word	0x40020440
 8014c90:	40020458 	.word	0x40020458
 8014c94:	40020470 	.word	0x40020470
 8014c98:	40020488 	.word	0x40020488
 8014c9c:	400204a0 	.word	0x400204a0
 8014ca0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	1ad3      	subs	r3, r2, r3
 8014cb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014cbe:	b29b      	uxth	r3, r3
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	f000 80cf 	beq.w	8014e64 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8014cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	f000 80ca 	beq.w	8014e64 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cd8:	e853 3f00 	ldrex	r3, [r3]
 8014cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	461a      	mov	r2, r3
 8014cee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8014cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8014cf4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014cfa:	e841 2300 	strex	r3, r2, [r1]
 8014cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d1e4      	bne.n	8014cd0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	3308      	adds	r3, #8
 8014d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d10:	e853 3f00 	ldrex	r3, [r3]
 8014d14:	623b      	str	r3, [r7, #32]
   return(result);
 8014d16:	6a3a      	ldr	r2, [r7, #32]
 8014d18:	4b55      	ldr	r3, [pc, #340]	@ (8014e70 <HAL_UART_IRQHandler+0x7a8>)
 8014d1a:	4013      	ands	r3, r2
 8014d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	3308      	adds	r3, #8
 8014d26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8014d2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8014d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d32:	e841 2300 	strex	r3, r2, [r1]
 8014d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d1e3      	bne.n	8014d06 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2220      	movs	r2, #32
 8014d42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2200      	movs	r2, #0
 8014d4a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	2200      	movs	r2, #0
 8014d50:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d58:	693b      	ldr	r3, [r7, #16]
 8014d5a:	e853 3f00 	ldrex	r3, [r3]
 8014d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	f023 0310 	bic.w	r3, r3, #16
 8014d66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	461a      	mov	r2, r3
 8014d70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014d74:	61fb      	str	r3, [r7, #28]
 8014d76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d78:	69b9      	ldr	r1, [r7, #24]
 8014d7a:	69fa      	ldr	r2, [r7, #28]
 8014d7c:	e841 2300 	strex	r3, r2, [r1]
 8014d80:	617b      	str	r3, [r7, #20]
   return(result);
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d1e4      	bne.n	8014d52 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2202      	movs	r2, #2
 8014d8c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014d8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014d92:	4619      	mov	r1, r3
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f000 f877 	bl	8014e88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014d9a:	e063      	b.n	8014e64 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014da0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d00e      	beq.n	8014dc6 <HAL_UART_IRQHandler+0x6fe>
 8014da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014dac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d008      	beq.n	8014dc6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8014dbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014dbe:	6878      	ldr	r0, [r7, #4]
 8014dc0:	f001 fc09 	bl	80165d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014dc4:	e051      	b.n	8014e6a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d014      	beq.n	8014dfc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d105      	bne.n	8014dea <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014de2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d008      	beq.n	8014dfc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d03a      	beq.n	8014e68 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014df6:	6878      	ldr	r0, [r7, #4]
 8014df8:	4798      	blx	r3
    }
    return;
 8014dfa:	e035      	b.n	8014e68 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d009      	beq.n	8014e1c <HAL_UART_IRQHandler+0x754>
 8014e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d003      	beq.n	8014e1c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f001 fbb3 	bl	8016580 <UART_EndTransmit_IT>
    return;
 8014e1a:	e026      	b.n	8014e6a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014e20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d009      	beq.n	8014e3c <HAL_UART_IRQHandler+0x774>
 8014e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014e2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d003      	beq.n	8014e3c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f001 fbe2 	bl	80165fe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014e3a:	e016      	b.n	8014e6a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d010      	beq.n	8014e6a <HAL_UART_IRQHandler+0x7a2>
 8014e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	da0c      	bge.n	8014e6a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f001 fbca 	bl	80165ea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014e56:	e008      	b.n	8014e6a <HAL_UART_IRQHandler+0x7a2>
      return;
 8014e58:	bf00      	nop
 8014e5a:	e006      	b.n	8014e6a <HAL_UART_IRQHandler+0x7a2>
    return;
 8014e5c:	bf00      	nop
 8014e5e:	e004      	b.n	8014e6a <HAL_UART_IRQHandler+0x7a2>
      return;
 8014e60:	bf00      	nop
 8014e62:	e002      	b.n	8014e6a <HAL_UART_IRQHandler+0x7a2>
      return;
 8014e64:	bf00      	nop
 8014e66:	e000      	b.n	8014e6a <HAL_UART_IRQHandler+0x7a2>
    return;
 8014e68:	bf00      	nop
  }
}
 8014e6a:	37e8      	adds	r7, #232	@ 0xe8
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	effffffe 	.word	0xeffffffe

08014e74 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014e74:	b480      	push	{r7}
 8014e76:	b083      	sub	sp, #12
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8014e7c:	bf00      	nop
 8014e7e:	370c      	adds	r7, #12
 8014e80:	46bd      	mov	sp, r7
 8014e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e86:	4770      	bx	lr

08014e88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014e88:	b480      	push	{r7}
 8014e8a:	b083      	sub	sp, #12
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
 8014e90:	460b      	mov	r3, r1
 8014e92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014e94:	bf00      	nop
 8014e96:	370c      	adds	r7, #12
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9e:	4770      	bx	lr

08014ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014ea4:	b092      	sub	sp, #72	@ 0x48
 8014ea6:	af00      	add	r7, sp, #0
 8014ea8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	689a      	ldr	r2, [r3, #8]
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	691b      	ldr	r3, [r3, #16]
 8014eb8:	431a      	orrs	r2, r3
 8014eba:	697b      	ldr	r3, [r7, #20]
 8014ebc:	695b      	ldr	r3, [r3, #20]
 8014ebe:	431a      	orrs	r2, r3
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	69db      	ldr	r3, [r3, #28]
 8014ec4:	4313      	orrs	r3, r2
 8014ec6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	681a      	ldr	r2, [r3, #0]
 8014ece:	4bbe      	ldr	r3, [pc, #760]	@ (80151c8 <UART_SetConfig+0x328>)
 8014ed0:	4013      	ands	r3, r2
 8014ed2:	697a      	ldr	r2, [r7, #20]
 8014ed4:	6812      	ldr	r2, [r2, #0]
 8014ed6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014ed8:	430b      	orrs	r3, r1
 8014eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	685b      	ldr	r3, [r3, #4]
 8014ee2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	68da      	ldr	r2, [r3, #12]
 8014eea:	697b      	ldr	r3, [r7, #20]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	430a      	orrs	r2, r1
 8014ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014ef2:	697b      	ldr	r3, [r7, #20]
 8014ef4:	699b      	ldr	r3, [r3, #24]
 8014ef6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014ef8:	697b      	ldr	r3, [r7, #20]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	4ab3      	ldr	r2, [pc, #716]	@ (80151cc <UART_SetConfig+0x32c>)
 8014efe:	4293      	cmp	r3, r2
 8014f00:	d004      	beq.n	8014f0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014f02:	697b      	ldr	r3, [r7, #20]
 8014f04:	6a1b      	ldr	r3, [r3, #32]
 8014f06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014f08:	4313      	orrs	r3, r2
 8014f0a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014f0c:	697b      	ldr	r3, [r7, #20]
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	689a      	ldr	r2, [r3, #8]
 8014f12:	4baf      	ldr	r3, [pc, #700]	@ (80151d0 <UART_SetConfig+0x330>)
 8014f14:	4013      	ands	r3, r2
 8014f16:	697a      	ldr	r2, [r7, #20]
 8014f18:	6812      	ldr	r2, [r2, #0]
 8014f1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014f1c:	430b      	orrs	r3, r1
 8014f1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f26:	f023 010f 	bic.w	r1, r3, #15
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014f2e:	697b      	ldr	r3, [r7, #20]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	430a      	orrs	r2, r1
 8014f34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	4aa6      	ldr	r2, [pc, #664]	@ (80151d4 <UART_SetConfig+0x334>)
 8014f3c:	4293      	cmp	r3, r2
 8014f3e:	d177      	bne.n	8015030 <UART_SetConfig+0x190>
 8014f40:	4ba5      	ldr	r3, [pc, #660]	@ (80151d8 <UART_SetConfig+0x338>)
 8014f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014f48:	2b28      	cmp	r3, #40	@ 0x28
 8014f4a:	d86d      	bhi.n	8015028 <UART_SetConfig+0x188>
 8014f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8014f54 <UART_SetConfig+0xb4>)
 8014f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f52:	bf00      	nop
 8014f54:	08014ff9 	.word	0x08014ff9
 8014f58:	08015029 	.word	0x08015029
 8014f5c:	08015029 	.word	0x08015029
 8014f60:	08015029 	.word	0x08015029
 8014f64:	08015029 	.word	0x08015029
 8014f68:	08015029 	.word	0x08015029
 8014f6c:	08015029 	.word	0x08015029
 8014f70:	08015029 	.word	0x08015029
 8014f74:	08015001 	.word	0x08015001
 8014f78:	08015029 	.word	0x08015029
 8014f7c:	08015029 	.word	0x08015029
 8014f80:	08015029 	.word	0x08015029
 8014f84:	08015029 	.word	0x08015029
 8014f88:	08015029 	.word	0x08015029
 8014f8c:	08015029 	.word	0x08015029
 8014f90:	08015029 	.word	0x08015029
 8014f94:	08015009 	.word	0x08015009
 8014f98:	08015029 	.word	0x08015029
 8014f9c:	08015029 	.word	0x08015029
 8014fa0:	08015029 	.word	0x08015029
 8014fa4:	08015029 	.word	0x08015029
 8014fa8:	08015029 	.word	0x08015029
 8014fac:	08015029 	.word	0x08015029
 8014fb0:	08015029 	.word	0x08015029
 8014fb4:	08015011 	.word	0x08015011
 8014fb8:	08015029 	.word	0x08015029
 8014fbc:	08015029 	.word	0x08015029
 8014fc0:	08015029 	.word	0x08015029
 8014fc4:	08015029 	.word	0x08015029
 8014fc8:	08015029 	.word	0x08015029
 8014fcc:	08015029 	.word	0x08015029
 8014fd0:	08015029 	.word	0x08015029
 8014fd4:	08015019 	.word	0x08015019
 8014fd8:	08015029 	.word	0x08015029
 8014fdc:	08015029 	.word	0x08015029
 8014fe0:	08015029 	.word	0x08015029
 8014fe4:	08015029 	.word	0x08015029
 8014fe8:	08015029 	.word	0x08015029
 8014fec:	08015029 	.word	0x08015029
 8014ff0:	08015029 	.word	0x08015029
 8014ff4:	08015021 	.word	0x08015021
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014ffe:	e222      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015000:	2304      	movs	r3, #4
 8015002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015006:	e21e      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015008:	2308      	movs	r3, #8
 801500a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801500e:	e21a      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015010:	2310      	movs	r3, #16
 8015012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015016:	e216      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015018:	2320      	movs	r3, #32
 801501a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801501e:	e212      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015020:	2340      	movs	r3, #64	@ 0x40
 8015022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015026:	e20e      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015028:	2380      	movs	r3, #128	@ 0x80
 801502a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801502e:	e20a      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	4a69      	ldr	r2, [pc, #420]	@ (80151dc <UART_SetConfig+0x33c>)
 8015036:	4293      	cmp	r3, r2
 8015038:	d130      	bne.n	801509c <UART_SetConfig+0x1fc>
 801503a:	4b67      	ldr	r3, [pc, #412]	@ (80151d8 <UART_SetConfig+0x338>)
 801503c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801503e:	f003 0307 	and.w	r3, r3, #7
 8015042:	2b05      	cmp	r3, #5
 8015044:	d826      	bhi.n	8015094 <UART_SetConfig+0x1f4>
 8015046:	a201      	add	r2, pc, #4	@ (adr r2, 801504c <UART_SetConfig+0x1ac>)
 8015048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801504c:	08015065 	.word	0x08015065
 8015050:	0801506d 	.word	0x0801506d
 8015054:	08015075 	.word	0x08015075
 8015058:	0801507d 	.word	0x0801507d
 801505c:	08015085 	.word	0x08015085
 8015060:	0801508d 	.word	0x0801508d
 8015064:	2300      	movs	r3, #0
 8015066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801506a:	e1ec      	b.n	8015446 <UART_SetConfig+0x5a6>
 801506c:	2304      	movs	r3, #4
 801506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015072:	e1e8      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015074:	2308      	movs	r3, #8
 8015076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801507a:	e1e4      	b.n	8015446 <UART_SetConfig+0x5a6>
 801507c:	2310      	movs	r3, #16
 801507e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015082:	e1e0      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015084:	2320      	movs	r3, #32
 8015086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801508a:	e1dc      	b.n	8015446 <UART_SetConfig+0x5a6>
 801508c:	2340      	movs	r3, #64	@ 0x40
 801508e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015092:	e1d8      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015094:	2380      	movs	r3, #128	@ 0x80
 8015096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801509a:	e1d4      	b.n	8015446 <UART_SetConfig+0x5a6>
 801509c:	697b      	ldr	r3, [r7, #20]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	4a4f      	ldr	r2, [pc, #316]	@ (80151e0 <UART_SetConfig+0x340>)
 80150a2:	4293      	cmp	r3, r2
 80150a4:	d130      	bne.n	8015108 <UART_SetConfig+0x268>
 80150a6:	4b4c      	ldr	r3, [pc, #304]	@ (80151d8 <UART_SetConfig+0x338>)
 80150a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80150aa:	f003 0307 	and.w	r3, r3, #7
 80150ae:	2b05      	cmp	r3, #5
 80150b0:	d826      	bhi.n	8015100 <UART_SetConfig+0x260>
 80150b2:	a201      	add	r2, pc, #4	@ (adr r2, 80150b8 <UART_SetConfig+0x218>)
 80150b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150b8:	080150d1 	.word	0x080150d1
 80150bc:	080150d9 	.word	0x080150d9
 80150c0:	080150e1 	.word	0x080150e1
 80150c4:	080150e9 	.word	0x080150e9
 80150c8:	080150f1 	.word	0x080150f1
 80150cc:	080150f9 	.word	0x080150f9
 80150d0:	2300      	movs	r3, #0
 80150d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150d6:	e1b6      	b.n	8015446 <UART_SetConfig+0x5a6>
 80150d8:	2304      	movs	r3, #4
 80150da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150de:	e1b2      	b.n	8015446 <UART_SetConfig+0x5a6>
 80150e0:	2308      	movs	r3, #8
 80150e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150e6:	e1ae      	b.n	8015446 <UART_SetConfig+0x5a6>
 80150e8:	2310      	movs	r3, #16
 80150ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150ee:	e1aa      	b.n	8015446 <UART_SetConfig+0x5a6>
 80150f0:	2320      	movs	r3, #32
 80150f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150f6:	e1a6      	b.n	8015446 <UART_SetConfig+0x5a6>
 80150f8:	2340      	movs	r3, #64	@ 0x40
 80150fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150fe:	e1a2      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015100:	2380      	movs	r3, #128	@ 0x80
 8015102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015106:	e19e      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015108:	697b      	ldr	r3, [r7, #20]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	4a35      	ldr	r2, [pc, #212]	@ (80151e4 <UART_SetConfig+0x344>)
 801510e:	4293      	cmp	r3, r2
 8015110:	d130      	bne.n	8015174 <UART_SetConfig+0x2d4>
 8015112:	4b31      	ldr	r3, [pc, #196]	@ (80151d8 <UART_SetConfig+0x338>)
 8015114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015116:	f003 0307 	and.w	r3, r3, #7
 801511a:	2b05      	cmp	r3, #5
 801511c:	d826      	bhi.n	801516c <UART_SetConfig+0x2cc>
 801511e:	a201      	add	r2, pc, #4	@ (adr r2, 8015124 <UART_SetConfig+0x284>)
 8015120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015124:	0801513d 	.word	0x0801513d
 8015128:	08015145 	.word	0x08015145
 801512c:	0801514d 	.word	0x0801514d
 8015130:	08015155 	.word	0x08015155
 8015134:	0801515d 	.word	0x0801515d
 8015138:	08015165 	.word	0x08015165
 801513c:	2300      	movs	r3, #0
 801513e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015142:	e180      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015144:	2304      	movs	r3, #4
 8015146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801514a:	e17c      	b.n	8015446 <UART_SetConfig+0x5a6>
 801514c:	2308      	movs	r3, #8
 801514e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015152:	e178      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015154:	2310      	movs	r3, #16
 8015156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801515a:	e174      	b.n	8015446 <UART_SetConfig+0x5a6>
 801515c:	2320      	movs	r3, #32
 801515e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015162:	e170      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015164:	2340      	movs	r3, #64	@ 0x40
 8015166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801516a:	e16c      	b.n	8015446 <UART_SetConfig+0x5a6>
 801516c:	2380      	movs	r3, #128	@ 0x80
 801516e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015172:	e168      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	4a1b      	ldr	r2, [pc, #108]	@ (80151e8 <UART_SetConfig+0x348>)
 801517a:	4293      	cmp	r3, r2
 801517c:	d142      	bne.n	8015204 <UART_SetConfig+0x364>
 801517e:	4b16      	ldr	r3, [pc, #88]	@ (80151d8 <UART_SetConfig+0x338>)
 8015180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015182:	f003 0307 	and.w	r3, r3, #7
 8015186:	2b05      	cmp	r3, #5
 8015188:	d838      	bhi.n	80151fc <UART_SetConfig+0x35c>
 801518a:	a201      	add	r2, pc, #4	@ (adr r2, 8015190 <UART_SetConfig+0x2f0>)
 801518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015190:	080151a9 	.word	0x080151a9
 8015194:	080151b1 	.word	0x080151b1
 8015198:	080151b9 	.word	0x080151b9
 801519c:	080151c1 	.word	0x080151c1
 80151a0:	080151ed 	.word	0x080151ed
 80151a4:	080151f5 	.word	0x080151f5
 80151a8:	2300      	movs	r3, #0
 80151aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151ae:	e14a      	b.n	8015446 <UART_SetConfig+0x5a6>
 80151b0:	2304      	movs	r3, #4
 80151b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151b6:	e146      	b.n	8015446 <UART_SetConfig+0x5a6>
 80151b8:	2308      	movs	r3, #8
 80151ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151be:	e142      	b.n	8015446 <UART_SetConfig+0x5a6>
 80151c0:	2310      	movs	r3, #16
 80151c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151c6:	e13e      	b.n	8015446 <UART_SetConfig+0x5a6>
 80151c8:	cfff69f3 	.word	0xcfff69f3
 80151cc:	58000c00 	.word	0x58000c00
 80151d0:	11fff4ff 	.word	0x11fff4ff
 80151d4:	40011000 	.word	0x40011000
 80151d8:	58024400 	.word	0x58024400
 80151dc:	40004400 	.word	0x40004400
 80151e0:	40004800 	.word	0x40004800
 80151e4:	40004c00 	.word	0x40004c00
 80151e8:	40005000 	.word	0x40005000
 80151ec:	2320      	movs	r3, #32
 80151ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151f2:	e128      	b.n	8015446 <UART_SetConfig+0x5a6>
 80151f4:	2340      	movs	r3, #64	@ 0x40
 80151f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151fa:	e124      	b.n	8015446 <UART_SetConfig+0x5a6>
 80151fc:	2380      	movs	r3, #128	@ 0x80
 80151fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015202:	e120      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015204:	697b      	ldr	r3, [r7, #20]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	4acb      	ldr	r2, [pc, #812]	@ (8015538 <UART_SetConfig+0x698>)
 801520a:	4293      	cmp	r3, r2
 801520c:	d176      	bne.n	80152fc <UART_SetConfig+0x45c>
 801520e:	4bcb      	ldr	r3, [pc, #812]	@ (801553c <UART_SetConfig+0x69c>)
 8015210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015212:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8015216:	2b28      	cmp	r3, #40	@ 0x28
 8015218:	d86c      	bhi.n	80152f4 <UART_SetConfig+0x454>
 801521a:	a201      	add	r2, pc, #4	@ (adr r2, 8015220 <UART_SetConfig+0x380>)
 801521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015220:	080152c5 	.word	0x080152c5
 8015224:	080152f5 	.word	0x080152f5
 8015228:	080152f5 	.word	0x080152f5
 801522c:	080152f5 	.word	0x080152f5
 8015230:	080152f5 	.word	0x080152f5
 8015234:	080152f5 	.word	0x080152f5
 8015238:	080152f5 	.word	0x080152f5
 801523c:	080152f5 	.word	0x080152f5
 8015240:	080152cd 	.word	0x080152cd
 8015244:	080152f5 	.word	0x080152f5
 8015248:	080152f5 	.word	0x080152f5
 801524c:	080152f5 	.word	0x080152f5
 8015250:	080152f5 	.word	0x080152f5
 8015254:	080152f5 	.word	0x080152f5
 8015258:	080152f5 	.word	0x080152f5
 801525c:	080152f5 	.word	0x080152f5
 8015260:	080152d5 	.word	0x080152d5
 8015264:	080152f5 	.word	0x080152f5
 8015268:	080152f5 	.word	0x080152f5
 801526c:	080152f5 	.word	0x080152f5
 8015270:	080152f5 	.word	0x080152f5
 8015274:	080152f5 	.word	0x080152f5
 8015278:	080152f5 	.word	0x080152f5
 801527c:	080152f5 	.word	0x080152f5
 8015280:	080152dd 	.word	0x080152dd
 8015284:	080152f5 	.word	0x080152f5
 8015288:	080152f5 	.word	0x080152f5
 801528c:	080152f5 	.word	0x080152f5
 8015290:	080152f5 	.word	0x080152f5
 8015294:	080152f5 	.word	0x080152f5
 8015298:	080152f5 	.word	0x080152f5
 801529c:	080152f5 	.word	0x080152f5
 80152a0:	080152e5 	.word	0x080152e5
 80152a4:	080152f5 	.word	0x080152f5
 80152a8:	080152f5 	.word	0x080152f5
 80152ac:	080152f5 	.word	0x080152f5
 80152b0:	080152f5 	.word	0x080152f5
 80152b4:	080152f5 	.word	0x080152f5
 80152b8:	080152f5 	.word	0x080152f5
 80152bc:	080152f5 	.word	0x080152f5
 80152c0:	080152ed 	.word	0x080152ed
 80152c4:	2301      	movs	r3, #1
 80152c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152ca:	e0bc      	b.n	8015446 <UART_SetConfig+0x5a6>
 80152cc:	2304      	movs	r3, #4
 80152ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152d2:	e0b8      	b.n	8015446 <UART_SetConfig+0x5a6>
 80152d4:	2308      	movs	r3, #8
 80152d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152da:	e0b4      	b.n	8015446 <UART_SetConfig+0x5a6>
 80152dc:	2310      	movs	r3, #16
 80152de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152e2:	e0b0      	b.n	8015446 <UART_SetConfig+0x5a6>
 80152e4:	2320      	movs	r3, #32
 80152e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152ea:	e0ac      	b.n	8015446 <UART_SetConfig+0x5a6>
 80152ec:	2340      	movs	r3, #64	@ 0x40
 80152ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152f2:	e0a8      	b.n	8015446 <UART_SetConfig+0x5a6>
 80152f4:	2380      	movs	r3, #128	@ 0x80
 80152f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152fa:	e0a4      	b.n	8015446 <UART_SetConfig+0x5a6>
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	4a8f      	ldr	r2, [pc, #572]	@ (8015540 <UART_SetConfig+0x6a0>)
 8015302:	4293      	cmp	r3, r2
 8015304:	d130      	bne.n	8015368 <UART_SetConfig+0x4c8>
 8015306:	4b8d      	ldr	r3, [pc, #564]	@ (801553c <UART_SetConfig+0x69c>)
 8015308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801530a:	f003 0307 	and.w	r3, r3, #7
 801530e:	2b05      	cmp	r3, #5
 8015310:	d826      	bhi.n	8015360 <UART_SetConfig+0x4c0>
 8015312:	a201      	add	r2, pc, #4	@ (adr r2, 8015318 <UART_SetConfig+0x478>)
 8015314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015318:	08015331 	.word	0x08015331
 801531c:	08015339 	.word	0x08015339
 8015320:	08015341 	.word	0x08015341
 8015324:	08015349 	.word	0x08015349
 8015328:	08015351 	.word	0x08015351
 801532c:	08015359 	.word	0x08015359
 8015330:	2300      	movs	r3, #0
 8015332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015336:	e086      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015338:	2304      	movs	r3, #4
 801533a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801533e:	e082      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015340:	2308      	movs	r3, #8
 8015342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015346:	e07e      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015348:	2310      	movs	r3, #16
 801534a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801534e:	e07a      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015350:	2320      	movs	r3, #32
 8015352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015356:	e076      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015358:	2340      	movs	r3, #64	@ 0x40
 801535a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801535e:	e072      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015360:	2380      	movs	r3, #128	@ 0x80
 8015362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015366:	e06e      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	4a75      	ldr	r2, [pc, #468]	@ (8015544 <UART_SetConfig+0x6a4>)
 801536e:	4293      	cmp	r3, r2
 8015370:	d130      	bne.n	80153d4 <UART_SetConfig+0x534>
 8015372:	4b72      	ldr	r3, [pc, #456]	@ (801553c <UART_SetConfig+0x69c>)
 8015374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015376:	f003 0307 	and.w	r3, r3, #7
 801537a:	2b05      	cmp	r3, #5
 801537c:	d826      	bhi.n	80153cc <UART_SetConfig+0x52c>
 801537e:	a201      	add	r2, pc, #4	@ (adr r2, 8015384 <UART_SetConfig+0x4e4>)
 8015380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015384:	0801539d 	.word	0x0801539d
 8015388:	080153a5 	.word	0x080153a5
 801538c:	080153ad 	.word	0x080153ad
 8015390:	080153b5 	.word	0x080153b5
 8015394:	080153bd 	.word	0x080153bd
 8015398:	080153c5 	.word	0x080153c5
 801539c:	2300      	movs	r3, #0
 801539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80153a2:	e050      	b.n	8015446 <UART_SetConfig+0x5a6>
 80153a4:	2304      	movs	r3, #4
 80153a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80153aa:	e04c      	b.n	8015446 <UART_SetConfig+0x5a6>
 80153ac:	2308      	movs	r3, #8
 80153ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80153b2:	e048      	b.n	8015446 <UART_SetConfig+0x5a6>
 80153b4:	2310      	movs	r3, #16
 80153b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80153ba:	e044      	b.n	8015446 <UART_SetConfig+0x5a6>
 80153bc:	2320      	movs	r3, #32
 80153be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80153c2:	e040      	b.n	8015446 <UART_SetConfig+0x5a6>
 80153c4:	2340      	movs	r3, #64	@ 0x40
 80153c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80153ca:	e03c      	b.n	8015446 <UART_SetConfig+0x5a6>
 80153cc:	2380      	movs	r3, #128	@ 0x80
 80153ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80153d2:	e038      	b.n	8015446 <UART_SetConfig+0x5a6>
 80153d4:	697b      	ldr	r3, [r7, #20]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	4a5b      	ldr	r2, [pc, #364]	@ (8015548 <UART_SetConfig+0x6a8>)
 80153da:	4293      	cmp	r3, r2
 80153dc:	d130      	bne.n	8015440 <UART_SetConfig+0x5a0>
 80153de:	4b57      	ldr	r3, [pc, #348]	@ (801553c <UART_SetConfig+0x69c>)
 80153e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80153e2:	f003 0307 	and.w	r3, r3, #7
 80153e6:	2b05      	cmp	r3, #5
 80153e8:	d826      	bhi.n	8015438 <UART_SetConfig+0x598>
 80153ea:	a201      	add	r2, pc, #4	@ (adr r2, 80153f0 <UART_SetConfig+0x550>)
 80153ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153f0:	08015409 	.word	0x08015409
 80153f4:	08015411 	.word	0x08015411
 80153f8:	08015419 	.word	0x08015419
 80153fc:	08015421 	.word	0x08015421
 8015400:	08015429 	.word	0x08015429
 8015404:	08015431 	.word	0x08015431
 8015408:	2302      	movs	r3, #2
 801540a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801540e:	e01a      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015410:	2304      	movs	r3, #4
 8015412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015416:	e016      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015418:	2308      	movs	r3, #8
 801541a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801541e:	e012      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015420:	2310      	movs	r3, #16
 8015422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015426:	e00e      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015428:	2320      	movs	r3, #32
 801542a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801542e:	e00a      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015430:	2340      	movs	r3, #64	@ 0x40
 8015432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015436:	e006      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015438:	2380      	movs	r3, #128	@ 0x80
 801543a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801543e:	e002      	b.n	8015446 <UART_SetConfig+0x5a6>
 8015440:	2380      	movs	r3, #128	@ 0x80
 8015442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015446:	697b      	ldr	r3, [r7, #20]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	4a3f      	ldr	r2, [pc, #252]	@ (8015548 <UART_SetConfig+0x6a8>)
 801544c:	4293      	cmp	r3, r2
 801544e:	f040 80f8 	bne.w	8015642 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015452:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015456:	2b20      	cmp	r3, #32
 8015458:	dc46      	bgt.n	80154e8 <UART_SetConfig+0x648>
 801545a:	2b02      	cmp	r3, #2
 801545c:	f2c0 8082 	blt.w	8015564 <UART_SetConfig+0x6c4>
 8015460:	3b02      	subs	r3, #2
 8015462:	2b1e      	cmp	r3, #30
 8015464:	d87e      	bhi.n	8015564 <UART_SetConfig+0x6c4>
 8015466:	a201      	add	r2, pc, #4	@ (adr r2, 801546c <UART_SetConfig+0x5cc>)
 8015468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801546c:	080154ef 	.word	0x080154ef
 8015470:	08015565 	.word	0x08015565
 8015474:	080154f7 	.word	0x080154f7
 8015478:	08015565 	.word	0x08015565
 801547c:	08015565 	.word	0x08015565
 8015480:	08015565 	.word	0x08015565
 8015484:	08015507 	.word	0x08015507
 8015488:	08015565 	.word	0x08015565
 801548c:	08015565 	.word	0x08015565
 8015490:	08015565 	.word	0x08015565
 8015494:	08015565 	.word	0x08015565
 8015498:	08015565 	.word	0x08015565
 801549c:	08015565 	.word	0x08015565
 80154a0:	08015565 	.word	0x08015565
 80154a4:	08015517 	.word	0x08015517
 80154a8:	08015565 	.word	0x08015565
 80154ac:	08015565 	.word	0x08015565
 80154b0:	08015565 	.word	0x08015565
 80154b4:	08015565 	.word	0x08015565
 80154b8:	08015565 	.word	0x08015565
 80154bc:	08015565 	.word	0x08015565
 80154c0:	08015565 	.word	0x08015565
 80154c4:	08015565 	.word	0x08015565
 80154c8:	08015565 	.word	0x08015565
 80154cc:	08015565 	.word	0x08015565
 80154d0:	08015565 	.word	0x08015565
 80154d4:	08015565 	.word	0x08015565
 80154d8:	08015565 	.word	0x08015565
 80154dc:	08015565 	.word	0x08015565
 80154e0:	08015565 	.word	0x08015565
 80154e4:	08015557 	.word	0x08015557
 80154e8:	2b40      	cmp	r3, #64	@ 0x40
 80154ea:	d037      	beq.n	801555c <UART_SetConfig+0x6bc>
 80154ec:	e03a      	b.n	8015564 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80154ee:	f7fb fc99 	bl	8010e24 <HAL_RCCEx_GetD3PCLK1Freq>
 80154f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80154f4:	e03c      	b.n	8015570 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80154f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80154fa:	4618      	mov	r0, r3
 80154fc:	f7fb fca8 	bl	8010e50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015504:	e034      	b.n	8015570 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015506:	f107 0318 	add.w	r3, r7, #24
 801550a:	4618      	mov	r0, r3
 801550c:	f7fb fdf4 	bl	80110f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015510:	69fb      	ldr	r3, [r7, #28]
 8015512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015514:	e02c      	b.n	8015570 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015516:	4b09      	ldr	r3, [pc, #36]	@ (801553c <UART_SetConfig+0x69c>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	f003 0320 	and.w	r3, r3, #32
 801551e:	2b00      	cmp	r3, #0
 8015520:	d016      	beq.n	8015550 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015522:	4b06      	ldr	r3, [pc, #24]	@ (801553c <UART_SetConfig+0x69c>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	08db      	lsrs	r3, r3, #3
 8015528:	f003 0303 	and.w	r3, r3, #3
 801552c:	4a07      	ldr	r2, [pc, #28]	@ (801554c <UART_SetConfig+0x6ac>)
 801552e:	fa22 f303 	lsr.w	r3, r2, r3
 8015532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015534:	e01c      	b.n	8015570 <UART_SetConfig+0x6d0>
 8015536:	bf00      	nop
 8015538:	40011400 	.word	0x40011400
 801553c:	58024400 	.word	0x58024400
 8015540:	40007800 	.word	0x40007800
 8015544:	40007c00 	.word	0x40007c00
 8015548:	58000c00 	.word	0x58000c00
 801554c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8015550:	4b9d      	ldr	r3, [pc, #628]	@ (80157c8 <UART_SetConfig+0x928>)
 8015552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015554:	e00c      	b.n	8015570 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015556:	4b9d      	ldr	r3, [pc, #628]	@ (80157cc <UART_SetConfig+0x92c>)
 8015558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801555a:	e009      	b.n	8015570 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801555c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015562:	e005      	b.n	8015570 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015564:	2300      	movs	r3, #0
 8015566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8015568:	2301      	movs	r3, #1
 801556a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801556e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015572:	2b00      	cmp	r3, #0
 8015574:	f000 81de 	beq.w	8015934 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015578:	697b      	ldr	r3, [r7, #20]
 801557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801557c:	4a94      	ldr	r2, [pc, #592]	@ (80157d0 <UART_SetConfig+0x930>)
 801557e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015582:	461a      	mov	r2, r3
 8015584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015586:	fbb3 f3f2 	udiv	r3, r3, r2
 801558a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801558c:	697b      	ldr	r3, [r7, #20]
 801558e:	685a      	ldr	r2, [r3, #4]
 8015590:	4613      	mov	r3, r2
 8015592:	005b      	lsls	r3, r3, #1
 8015594:	4413      	add	r3, r2
 8015596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015598:	429a      	cmp	r2, r3
 801559a:	d305      	bcc.n	80155a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	685b      	ldr	r3, [r3, #4]
 80155a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80155a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d903      	bls.n	80155b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80155a8:	2301      	movs	r3, #1
 80155aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80155ae:	e1c1      	b.n	8015934 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80155b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155b2:	2200      	movs	r2, #0
 80155b4:	60bb      	str	r3, [r7, #8]
 80155b6:	60fa      	str	r2, [r7, #12]
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155bc:	4a84      	ldr	r2, [pc, #528]	@ (80157d0 <UART_SetConfig+0x930>)
 80155be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80155c2:	b29b      	uxth	r3, r3
 80155c4:	2200      	movs	r2, #0
 80155c6:	603b      	str	r3, [r7, #0]
 80155c8:	607a      	str	r2, [r7, #4]
 80155ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80155ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80155d2:	f7ea fedd 	bl	8000390 <__aeabi_uldivmod>
 80155d6:	4602      	mov	r2, r0
 80155d8:	460b      	mov	r3, r1
 80155da:	4610      	mov	r0, r2
 80155dc:	4619      	mov	r1, r3
 80155de:	f04f 0200 	mov.w	r2, #0
 80155e2:	f04f 0300 	mov.w	r3, #0
 80155e6:	020b      	lsls	r3, r1, #8
 80155e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80155ec:	0202      	lsls	r2, r0, #8
 80155ee:	6979      	ldr	r1, [r7, #20]
 80155f0:	6849      	ldr	r1, [r1, #4]
 80155f2:	0849      	lsrs	r1, r1, #1
 80155f4:	2000      	movs	r0, #0
 80155f6:	460c      	mov	r4, r1
 80155f8:	4605      	mov	r5, r0
 80155fa:	eb12 0804 	adds.w	r8, r2, r4
 80155fe:	eb43 0905 	adc.w	r9, r3, r5
 8015602:	697b      	ldr	r3, [r7, #20]
 8015604:	685b      	ldr	r3, [r3, #4]
 8015606:	2200      	movs	r2, #0
 8015608:	469a      	mov	sl, r3
 801560a:	4693      	mov	fp, r2
 801560c:	4652      	mov	r2, sl
 801560e:	465b      	mov	r3, fp
 8015610:	4640      	mov	r0, r8
 8015612:	4649      	mov	r1, r9
 8015614:	f7ea febc 	bl	8000390 <__aeabi_uldivmod>
 8015618:	4602      	mov	r2, r0
 801561a:	460b      	mov	r3, r1
 801561c:	4613      	mov	r3, r2
 801561e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015626:	d308      	bcc.n	801563a <UART_SetConfig+0x79a>
 8015628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801562a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801562e:	d204      	bcs.n	801563a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015636:	60da      	str	r2, [r3, #12]
 8015638:	e17c      	b.n	8015934 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801563a:	2301      	movs	r3, #1
 801563c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8015640:	e178      	b.n	8015934 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015642:	697b      	ldr	r3, [r7, #20]
 8015644:	69db      	ldr	r3, [r3, #28]
 8015646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801564a:	f040 80c5 	bne.w	80157d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801564e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015652:	2b20      	cmp	r3, #32
 8015654:	dc48      	bgt.n	80156e8 <UART_SetConfig+0x848>
 8015656:	2b00      	cmp	r3, #0
 8015658:	db7b      	blt.n	8015752 <UART_SetConfig+0x8b2>
 801565a:	2b20      	cmp	r3, #32
 801565c:	d879      	bhi.n	8015752 <UART_SetConfig+0x8b2>
 801565e:	a201      	add	r2, pc, #4	@ (adr r2, 8015664 <UART_SetConfig+0x7c4>)
 8015660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015664:	080156ef 	.word	0x080156ef
 8015668:	080156f7 	.word	0x080156f7
 801566c:	08015753 	.word	0x08015753
 8015670:	08015753 	.word	0x08015753
 8015674:	080156ff 	.word	0x080156ff
 8015678:	08015753 	.word	0x08015753
 801567c:	08015753 	.word	0x08015753
 8015680:	08015753 	.word	0x08015753
 8015684:	0801570f 	.word	0x0801570f
 8015688:	08015753 	.word	0x08015753
 801568c:	08015753 	.word	0x08015753
 8015690:	08015753 	.word	0x08015753
 8015694:	08015753 	.word	0x08015753
 8015698:	08015753 	.word	0x08015753
 801569c:	08015753 	.word	0x08015753
 80156a0:	08015753 	.word	0x08015753
 80156a4:	0801571f 	.word	0x0801571f
 80156a8:	08015753 	.word	0x08015753
 80156ac:	08015753 	.word	0x08015753
 80156b0:	08015753 	.word	0x08015753
 80156b4:	08015753 	.word	0x08015753
 80156b8:	08015753 	.word	0x08015753
 80156bc:	08015753 	.word	0x08015753
 80156c0:	08015753 	.word	0x08015753
 80156c4:	08015753 	.word	0x08015753
 80156c8:	08015753 	.word	0x08015753
 80156cc:	08015753 	.word	0x08015753
 80156d0:	08015753 	.word	0x08015753
 80156d4:	08015753 	.word	0x08015753
 80156d8:	08015753 	.word	0x08015753
 80156dc:	08015753 	.word	0x08015753
 80156e0:	08015753 	.word	0x08015753
 80156e4:	08015745 	.word	0x08015745
 80156e8:	2b40      	cmp	r3, #64	@ 0x40
 80156ea:	d02e      	beq.n	801574a <UART_SetConfig+0x8aa>
 80156ec:	e031      	b.n	8015752 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80156ee:	f7f9 fba1 	bl	800ee34 <HAL_RCC_GetPCLK1Freq>
 80156f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80156f4:	e033      	b.n	801575e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80156f6:	f7f9 fbb3 	bl	800ee60 <HAL_RCC_GetPCLK2Freq>
 80156fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80156fc:	e02f      	b.n	801575e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80156fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015702:	4618      	mov	r0, r3
 8015704:	f7fb fba4 	bl	8010e50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801570a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801570c:	e027      	b.n	801575e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801570e:	f107 0318 	add.w	r3, r7, #24
 8015712:	4618      	mov	r0, r3
 8015714:	f7fb fcf0 	bl	80110f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015718:	69fb      	ldr	r3, [r7, #28]
 801571a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801571c:	e01f      	b.n	801575e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801571e:	4b2d      	ldr	r3, [pc, #180]	@ (80157d4 <UART_SetConfig+0x934>)
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	f003 0320 	and.w	r3, r3, #32
 8015726:	2b00      	cmp	r3, #0
 8015728:	d009      	beq.n	801573e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801572a:	4b2a      	ldr	r3, [pc, #168]	@ (80157d4 <UART_SetConfig+0x934>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	08db      	lsrs	r3, r3, #3
 8015730:	f003 0303 	and.w	r3, r3, #3
 8015734:	4a24      	ldr	r2, [pc, #144]	@ (80157c8 <UART_SetConfig+0x928>)
 8015736:	fa22 f303 	lsr.w	r3, r2, r3
 801573a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801573c:	e00f      	b.n	801575e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801573e:	4b22      	ldr	r3, [pc, #136]	@ (80157c8 <UART_SetConfig+0x928>)
 8015740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015742:	e00c      	b.n	801575e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015744:	4b21      	ldr	r3, [pc, #132]	@ (80157cc <UART_SetConfig+0x92c>)
 8015746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015748:	e009      	b.n	801575e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801574a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801574e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015750:	e005      	b.n	801575e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8015752:	2300      	movs	r3, #0
 8015754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8015756:	2301      	movs	r3, #1
 8015758:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801575c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801575e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015760:	2b00      	cmp	r3, #0
 8015762:	f000 80e7 	beq.w	8015934 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015766:	697b      	ldr	r3, [r7, #20]
 8015768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801576a:	4a19      	ldr	r2, [pc, #100]	@ (80157d0 <UART_SetConfig+0x930>)
 801576c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015770:	461a      	mov	r2, r3
 8015772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015774:	fbb3 f3f2 	udiv	r3, r3, r2
 8015778:	005a      	lsls	r2, r3, #1
 801577a:	697b      	ldr	r3, [r7, #20]
 801577c:	685b      	ldr	r3, [r3, #4]
 801577e:	085b      	lsrs	r3, r3, #1
 8015780:	441a      	add	r2, r3
 8015782:	697b      	ldr	r3, [r7, #20]
 8015784:	685b      	ldr	r3, [r3, #4]
 8015786:	fbb2 f3f3 	udiv	r3, r2, r3
 801578a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801578e:	2b0f      	cmp	r3, #15
 8015790:	d916      	bls.n	80157c0 <UART_SetConfig+0x920>
 8015792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015798:	d212      	bcs.n	80157c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801579a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801579c:	b29b      	uxth	r3, r3
 801579e:	f023 030f 	bic.w	r3, r3, #15
 80157a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80157a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157a6:	085b      	lsrs	r3, r3, #1
 80157a8:	b29b      	uxth	r3, r3
 80157aa:	f003 0307 	and.w	r3, r3, #7
 80157ae:	b29a      	uxth	r2, r3
 80157b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80157b2:	4313      	orrs	r3, r2
 80157b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80157bc:	60da      	str	r2, [r3, #12]
 80157be:	e0b9      	b.n	8015934 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80157c0:	2301      	movs	r3, #1
 80157c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80157c6:	e0b5      	b.n	8015934 <UART_SetConfig+0xa94>
 80157c8:	03d09000 	.word	0x03d09000
 80157cc:	003d0900 	.word	0x003d0900
 80157d0:	0802113c 	.word	0x0802113c
 80157d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80157d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80157dc:	2b20      	cmp	r3, #32
 80157de:	dc49      	bgt.n	8015874 <UART_SetConfig+0x9d4>
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	db7c      	blt.n	80158de <UART_SetConfig+0xa3e>
 80157e4:	2b20      	cmp	r3, #32
 80157e6:	d87a      	bhi.n	80158de <UART_SetConfig+0xa3e>
 80157e8:	a201      	add	r2, pc, #4	@ (adr r2, 80157f0 <UART_SetConfig+0x950>)
 80157ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157ee:	bf00      	nop
 80157f0:	0801587b 	.word	0x0801587b
 80157f4:	08015883 	.word	0x08015883
 80157f8:	080158df 	.word	0x080158df
 80157fc:	080158df 	.word	0x080158df
 8015800:	0801588b 	.word	0x0801588b
 8015804:	080158df 	.word	0x080158df
 8015808:	080158df 	.word	0x080158df
 801580c:	080158df 	.word	0x080158df
 8015810:	0801589b 	.word	0x0801589b
 8015814:	080158df 	.word	0x080158df
 8015818:	080158df 	.word	0x080158df
 801581c:	080158df 	.word	0x080158df
 8015820:	080158df 	.word	0x080158df
 8015824:	080158df 	.word	0x080158df
 8015828:	080158df 	.word	0x080158df
 801582c:	080158df 	.word	0x080158df
 8015830:	080158ab 	.word	0x080158ab
 8015834:	080158df 	.word	0x080158df
 8015838:	080158df 	.word	0x080158df
 801583c:	080158df 	.word	0x080158df
 8015840:	080158df 	.word	0x080158df
 8015844:	080158df 	.word	0x080158df
 8015848:	080158df 	.word	0x080158df
 801584c:	080158df 	.word	0x080158df
 8015850:	080158df 	.word	0x080158df
 8015854:	080158df 	.word	0x080158df
 8015858:	080158df 	.word	0x080158df
 801585c:	080158df 	.word	0x080158df
 8015860:	080158df 	.word	0x080158df
 8015864:	080158df 	.word	0x080158df
 8015868:	080158df 	.word	0x080158df
 801586c:	080158df 	.word	0x080158df
 8015870:	080158d1 	.word	0x080158d1
 8015874:	2b40      	cmp	r3, #64	@ 0x40
 8015876:	d02e      	beq.n	80158d6 <UART_SetConfig+0xa36>
 8015878:	e031      	b.n	80158de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801587a:	f7f9 fadb 	bl	800ee34 <HAL_RCC_GetPCLK1Freq>
 801587e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015880:	e033      	b.n	80158ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015882:	f7f9 faed 	bl	800ee60 <HAL_RCC_GetPCLK2Freq>
 8015886:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015888:	e02f      	b.n	80158ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801588a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801588e:	4618      	mov	r0, r3
 8015890:	f7fb fade 	bl	8010e50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015898:	e027      	b.n	80158ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801589a:	f107 0318 	add.w	r3, r7, #24
 801589e:	4618      	mov	r0, r3
 80158a0:	f7fb fc2a 	bl	80110f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80158a4:	69fb      	ldr	r3, [r7, #28]
 80158a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158a8:	e01f      	b.n	80158ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80158aa:	4b2d      	ldr	r3, [pc, #180]	@ (8015960 <UART_SetConfig+0xac0>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	f003 0320 	and.w	r3, r3, #32
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d009      	beq.n	80158ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80158b6:	4b2a      	ldr	r3, [pc, #168]	@ (8015960 <UART_SetConfig+0xac0>)
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	08db      	lsrs	r3, r3, #3
 80158bc:	f003 0303 	and.w	r3, r3, #3
 80158c0:	4a28      	ldr	r2, [pc, #160]	@ (8015964 <UART_SetConfig+0xac4>)
 80158c2:	fa22 f303 	lsr.w	r3, r2, r3
 80158c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80158c8:	e00f      	b.n	80158ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80158ca:	4b26      	ldr	r3, [pc, #152]	@ (8015964 <UART_SetConfig+0xac4>)
 80158cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158ce:	e00c      	b.n	80158ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80158d0:	4b25      	ldr	r3, [pc, #148]	@ (8015968 <UART_SetConfig+0xac8>)
 80158d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158d4:	e009      	b.n	80158ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80158d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80158da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158dc:	e005      	b.n	80158ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80158de:	2300      	movs	r3, #0
 80158e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80158e2:	2301      	movs	r3, #1
 80158e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80158e8:	bf00      	nop
    }

    if (pclk != 0U)
 80158ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d021      	beq.n	8015934 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80158f0:	697b      	ldr	r3, [r7, #20]
 80158f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158f4:	4a1d      	ldr	r2, [pc, #116]	@ (801596c <UART_SetConfig+0xacc>)
 80158f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80158fa:	461a      	mov	r2, r3
 80158fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8015902:	697b      	ldr	r3, [r7, #20]
 8015904:	685b      	ldr	r3, [r3, #4]
 8015906:	085b      	lsrs	r3, r3, #1
 8015908:	441a      	add	r2, r3
 801590a:	697b      	ldr	r3, [r7, #20]
 801590c:	685b      	ldr	r3, [r3, #4]
 801590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015912:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015916:	2b0f      	cmp	r3, #15
 8015918:	d909      	bls.n	801592e <UART_SetConfig+0xa8e>
 801591a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801591c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015920:	d205      	bcs.n	801592e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015924:	b29a      	uxth	r2, r3
 8015926:	697b      	ldr	r3, [r7, #20]
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	60da      	str	r2, [r3, #12]
 801592c:	e002      	b.n	8015934 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801592e:	2301      	movs	r3, #1
 8015930:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015934:	697b      	ldr	r3, [r7, #20]
 8015936:	2201      	movs	r2, #1
 8015938:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801593c:	697b      	ldr	r3, [r7, #20]
 801593e:	2201      	movs	r2, #1
 8015940:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	2200      	movs	r2, #0
 8015948:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801594a:	697b      	ldr	r3, [r7, #20]
 801594c:	2200      	movs	r2, #0
 801594e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8015950:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8015954:	4618      	mov	r0, r3
 8015956:	3748      	adds	r7, #72	@ 0x48
 8015958:	46bd      	mov	sp, r7
 801595a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801595e:	bf00      	nop
 8015960:	58024400 	.word	0x58024400
 8015964:	03d09000 	.word	0x03d09000
 8015968:	003d0900 	.word	0x003d0900
 801596c:	0802113c 	.word	0x0802113c

08015970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015970:	b480      	push	{r7}
 8015972:	b083      	sub	sp, #12
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801597c:	f003 0308 	and.w	r3, r3, #8
 8015980:	2b00      	cmp	r3, #0
 8015982:	d00a      	beq.n	801599a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	685b      	ldr	r3, [r3, #4]
 801598a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	430a      	orrs	r2, r1
 8015998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801599e:	f003 0301 	and.w	r3, r3, #1
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d00a      	beq.n	80159bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	685b      	ldr	r3, [r3, #4]
 80159ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	430a      	orrs	r2, r1
 80159ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159c0:	f003 0302 	and.w	r3, r3, #2
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d00a      	beq.n	80159de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	685b      	ldr	r3, [r3, #4]
 80159ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	430a      	orrs	r2, r1
 80159dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159e2:	f003 0304 	and.w	r3, r3, #4
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d00a      	beq.n	8015a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	685b      	ldr	r3, [r3, #4]
 80159f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	430a      	orrs	r2, r1
 80159fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a04:	f003 0310 	and.w	r3, r3, #16
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d00a      	beq.n	8015a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	689b      	ldr	r3, [r3, #8]
 8015a12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	430a      	orrs	r2, r1
 8015a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a26:	f003 0320 	and.w	r3, r3, #32
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d00a      	beq.n	8015a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	689b      	ldr	r3, [r3, #8]
 8015a34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	430a      	orrs	r2, r1
 8015a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d01a      	beq.n	8015a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	685b      	ldr	r3, [r3, #4]
 8015a56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	430a      	orrs	r2, r1
 8015a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015a6e:	d10a      	bne.n	8015a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	685b      	ldr	r3, [r3, #4]
 8015a76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	430a      	orrs	r2, r1
 8015a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d00a      	beq.n	8015aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	685b      	ldr	r3, [r3, #4]
 8015a98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	430a      	orrs	r2, r1
 8015aa6:	605a      	str	r2, [r3, #4]
  }
}
 8015aa8:	bf00      	nop
 8015aaa:	370c      	adds	r7, #12
 8015aac:	46bd      	mov	sp, r7
 8015aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab2:	4770      	bx	lr

08015ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b098      	sub	sp, #96	@ 0x60
 8015ab8:	af02      	add	r7, sp, #8
 8015aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2200      	movs	r2, #0
 8015ac0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015ac4:	f7ef fd98 	bl	80055f8 <HAL_GetTick>
 8015ac8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	f003 0308 	and.w	r3, r3, #8
 8015ad4:	2b08      	cmp	r3, #8
 8015ad6:	d12f      	bne.n	8015b38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015ad8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015adc:	9300      	str	r3, [sp, #0]
 8015ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f000 f88e 	bl	8015c08 <UART_WaitOnFlagUntilTimeout>
 8015aec:	4603      	mov	r3, r0
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d022      	beq.n	8015b38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015afa:	e853 3f00 	ldrex	r3, [r3]
 8015afe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	461a      	mov	r2, r3
 8015b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8015b12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015b16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015b18:	e841 2300 	strex	r3, r2, [r1]
 8015b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d1e6      	bne.n	8015af2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	2220      	movs	r2, #32
 8015b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	2200      	movs	r2, #0
 8015b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015b34:	2303      	movs	r3, #3
 8015b36:	e063      	b.n	8015c00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	f003 0304 	and.w	r3, r3, #4
 8015b42:	2b04      	cmp	r3, #4
 8015b44:	d149      	bne.n	8015bda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015b46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015b4a:	9300      	str	r3, [sp, #0]
 8015b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015b4e:	2200      	movs	r2, #0
 8015b50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015b54:	6878      	ldr	r0, [r7, #4]
 8015b56:	f000 f857 	bl	8015c08 <UART_WaitOnFlagUntilTimeout>
 8015b5a:	4603      	mov	r3, r0
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d03c      	beq.n	8015bda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b68:	e853 3f00 	ldrex	r3, [r3]
 8015b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8015b6e:	6a3b      	ldr	r3, [r7, #32]
 8015b70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	461a      	mov	r2, r3
 8015b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015b7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8015b80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b86:	e841 2300 	strex	r3, r2, [r1]
 8015b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d1e6      	bne.n	8015b60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	3308      	adds	r3, #8
 8015b98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b9a:	693b      	ldr	r3, [r7, #16]
 8015b9c:	e853 3f00 	ldrex	r3, [r3]
 8015ba0:	60fb      	str	r3, [r7, #12]
   return(result);
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	f023 0301 	bic.w	r3, r3, #1
 8015ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	3308      	adds	r3, #8
 8015bb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015bb2:	61fa      	str	r2, [r7, #28]
 8015bb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bb6:	69b9      	ldr	r1, [r7, #24]
 8015bb8:	69fa      	ldr	r2, [r7, #28]
 8015bba:	e841 2300 	strex	r3, r2, [r1]
 8015bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8015bc0:	697b      	ldr	r3, [r7, #20]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d1e5      	bne.n	8015b92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	2220      	movs	r2, #32
 8015bca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	2200      	movs	r2, #0
 8015bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015bd6:	2303      	movs	r3, #3
 8015bd8:	e012      	b.n	8015c00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	2220      	movs	r2, #32
 8015bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2220      	movs	r2, #32
 8015be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	2200      	movs	r2, #0
 8015bee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	2200      	movs	r2, #0
 8015bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8015bfe:	2300      	movs	r3, #0
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3758      	adds	r7, #88	@ 0x58
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}

08015c08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b084      	sub	sp, #16
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	60f8      	str	r0, [r7, #12]
 8015c10:	60b9      	str	r1, [r7, #8]
 8015c12:	603b      	str	r3, [r7, #0]
 8015c14:	4613      	mov	r3, r2
 8015c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015c18:	e04f      	b.n	8015cba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015c1a:	69bb      	ldr	r3, [r7, #24]
 8015c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c20:	d04b      	beq.n	8015cba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015c22:	f7ef fce9 	bl	80055f8 <HAL_GetTick>
 8015c26:	4602      	mov	r2, r0
 8015c28:	683b      	ldr	r3, [r7, #0]
 8015c2a:	1ad3      	subs	r3, r2, r3
 8015c2c:	69ba      	ldr	r2, [r7, #24]
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d302      	bcc.n	8015c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8015c32:	69bb      	ldr	r3, [r7, #24]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d101      	bne.n	8015c3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015c38:	2303      	movs	r3, #3
 8015c3a:	e04e      	b.n	8015cda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	f003 0304 	and.w	r3, r3, #4
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d037      	beq.n	8015cba <UART_WaitOnFlagUntilTimeout+0xb2>
 8015c4a:	68bb      	ldr	r3, [r7, #8]
 8015c4c:	2b80      	cmp	r3, #128	@ 0x80
 8015c4e:	d034      	beq.n	8015cba <UART_WaitOnFlagUntilTimeout+0xb2>
 8015c50:	68bb      	ldr	r3, [r7, #8]
 8015c52:	2b40      	cmp	r3, #64	@ 0x40
 8015c54:	d031      	beq.n	8015cba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	69db      	ldr	r3, [r3, #28]
 8015c5c:	f003 0308 	and.w	r3, r3, #8
 8015c60:	2b08      	cmp	r3, #8
 8015c62:	d110      	bne.n	8015c86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	2208      	movs	r2, #8
 8015c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015c6c:	68f8      	ldr	r0, [r7, #12]
 8015c6e:	f000 f921 	bl	8015eb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	2208      	movs	r2, #8
 8015c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8015c82:	2301      	movs	r3, #1
 8015c84:	e029      	b.n	8015cda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	69db      	ldr	r3, [r3, #28]
 8015c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015c94:	d111      	bne.n	8015cba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015c9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015ca0:	68f8      	ldr	r0, [r7, #12]
 8015ca2:	f000 f907 	bl	8015eb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	2220      	movs	r2, #32
 8015caa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8015cb6:	2303      	movs	r3, #3
 8015cb8:	e00f      	b.n	8015cda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	69da      	ldr	r2, [r3, #28]
 8015cc0:	68bb      	ldr	r3, [r7, #8]
 8015cc2:	4013      	ands	r3, r2
 8015cc4:	68ba      	ldr	r2, [r7, #8]
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	bf0c      	ite	eq
 8015cca:	2301      	moveq	r3, #1
 8015ccc:	2300      	movne	r3, #0
 8015cce:	b2db      	uxtb	r3, r3
 8015cd0:	461a      	mov	r2, r3
 8015cd2:	79fb      	ldrb	r3, [r7, #7]
 8015cd4:	429a      	cmp	r2, r3
 8015cd6:	d0a0      	beq.n	8015c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015cd8:	2300      	movs	r3, #0
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3710      	adds	r7, #16
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
	...

08015ce4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b096      	sub	sp, #88	@ 0x58
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	60f8      	str	r0, [r7, #12]
 8015cec:	60b9      	str	r1, [r7, #8]
 8015cee:	4613      	mov	r3, r2
 8015cf0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	68ba      	ldr	r2, [r7, #8]
 8015cf6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	88fa      	ldrh	r2, [r7, #6]
 8015cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	2200      	movs	r2, #0
 8015d04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	2222      	movs	r2, #34	@ 0x22
 8015d0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d02d      	beq.n	8015d76 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015d20:	4a40      	ldr	r2, [pc, #256]	@ (8015e24 <UART_Start_Receive_DMA+0x140>)
 8015d22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015d2a:	4a3f      	ldr	r2, [pc, #252]	@ (8015e28 <UART_Start_Receive_DMA+0x144>)
 8015d2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015d34:	4a3d      	ldr	r2, [pc, #244]	@ (8015e2c <UART_Start_Receive_DMA+0x148>)
 8015d36:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015d3e:	2200      	movs	r2, #0
 8015d40:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	3324      	adds	r3, #36	@ 0x24
 8015d4e:	4619      	mov	r1, r3
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015d54:	461a      	mov	r2, r3
 8015d56:	88fb      	ldrh	r3, [r7, #6]
 8015d58:	f7f2 f8ac 	bl	8007eb4 <HAL_DMA_Start_IT>
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d009      	beq.n	8015d76 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	2210      	movs	r2, #16
 8015d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	2220      	movs	r2, #32
 8015d6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8015d72:	2301      	movs	r3, #1
 8015d74:	e051      	b.n	8015e1a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	691b      	ldr	r3, [r3, #16]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d018      	beq.n	8015db0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d86:	e853 3f00 	ldrex	r3, [r3]
 8015d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015d92:	657b      	str	r3, [r7, #84]	@ 0x54
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	461a      	mov	r2, r3
 8015d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015d9e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015da0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015da4:	e841 2300 	strex	r3, r2, [r1]
 8015da8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8015daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d1e6      	bne.n	8015d7e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	3308      	adds	r3, #8
 8015db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dba:	e853 3f00 	ldrex	r3, [r3]
 8015dbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dc2:	f043 0301 	orr.w	r3, r3, #1
 8015dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	3308      	adds	r3, #8
 8015dce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015dd0:	637a      	str	r2, [r7, #52]	@ 0x34
 8015dd2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dd4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015dd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015dd8:	e841 2300 	strex	r3, r2, [r1]
 8015ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8015dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d1e5      	bne.n	8015db0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	3308      	adds	r3, #8
 8015dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dec:	697b      	ldr	r3, [r7, #20]
 8015dee:	e853 3f00 	ldrex	r3, [r3]
 8015df2:	613b      	str	r3, [r7, #16]
   return(result);
 8015df4:	693b      	ldr	r3, [r7, #16]
 8015df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	3308      	adds	r3, #8
 8015e02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015e04:	623a      	str	r2, [r7, #32]
 8015e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e08:	69f9      	ldr	r1, [r7, #28]
 8015e0a:	6a3a      	ldr	r2, [r7, #32]
 8015e0c:	e841 2300 	strex	r3, r2, [r1]
 8015e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8015e12:	69bb      	ldr	r3, [r7, #24]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d1e5      	bne.n	8015de4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8015e18:	2300      	movs	r3, #0
}
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	3758      	adds	r7, #88	@ 0x58
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}
 8015e22:	bf00      	nop
 8015e24:	08016033 	.word	0x08016033
 8015e28:	0801615b 	.word	0x0801615b
 8015e2c:	08016199 	.word	0x08016199

08015e30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8015e30:	b480      	push	{r7}
 8015e32:	b08f      	sub	sp, #60	@ 0x3c
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e3e:	6a3b      	ldr	r3, [r7, #32]
 8015e40:	e853 3f00 	ldrex	r3, [r3]
 8015e44:	61fb      	str	r3, [r7, #28]
   return(result);
 8015e46:	69fb      	ldr	r3, [r7, #28]
 8015e48:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8015e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	461a      	mov	r2, r3
 8015e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e58:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e5e:	e841 2300 	strex	r3, r2, [r1]
 8015e62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d1e6      	bne.n	8015e38 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	3308      	adds	r3, #8
 8015e70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	e853 3f00 	ldrex	r3, [r3]
 8015e78:	60bb      	str	r3, [r7, #8]
   return(result);
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8015e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	3308      	adds	r3, #8
 8015e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e8a:	61ba      	str	r2, [r7, #24]
 8015e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e8e:	6979      	ldr	r1, [r7, #20]
 8015e90:	69ba      	ldr	r2, [r7, #24]
 8015e92:	e841 2300 	strex	r3, r2, [r1]
 8015e96:	613b      	str	r3, [r7, #16]
   return(result);
 8015e98:	693b      	ldr	r3, [r7, #16]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d1e5      	bne.n	8015e6a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	2220      	movs	r2, #32
 8015ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8015ea6:	bf00      	nop
 8015ea8:	373c      	adds	r7, #60	@ 0x3c
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb0:	4770      	bx	lr
	...

08015eb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015eb4:	b480      	push	{r7}
 8015eb6:	b095      	sub	sp, #84	@ 0x54
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ec4:	e853 3f00 	ldrex	r3, [r3]
 8015ec8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8015eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	461a      	mov	r2, r3
 8015ed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015eda:	643b      	str	r3, [r7, #64]	@ 0x40
 8015edc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ede:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015ee0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015ee2:	e841 2300 	strex	r3, r2, [r1]
 8015ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d1e6      	bne.n	8015ebc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	3308      	adds	r3, #8
 8015ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ef6:	6a3b      	ldr	r3, [r7, #32]
 8015ef8:	e853 3f00 	ldrex	r3, [r3]
 8015efc:	61fb      	str	r3, [r7, #28]
   return(result);
 8015efe:	69fa      	ldr	r2, [r7, #28]
 8015f00:	4b1e      	ldr	r3, [pc, #120]	@ (8015f7c <UART_EndRxTransfer+0xc8>)
 8015f02:	4013      	ands	r3, r2
 8015f04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	3308      	adds	r3, #8
 8015f0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015f0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015f10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015f16:	e841 2300 	strex	r3, r2, [r1]
 8015f1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d1e5      	bne.n	8015eee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f26:	2b01      	cmp	r3, #1
 8015f28:	d118      	bne.n	8015f5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	e853 3f00 	ldrex	r3, [r3]
 8015f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8015f38:	68bb      	ldr	r3, [r7, #8]
 8015f3a:	f023 0310 	bic.w	r3, r3, #16
 8015f3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	461a      	mov	r2, r3
 8015f46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015f48:	61bb      	str	r3, [r7, #24]
 8015f4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f4c:	6979      	ldr	r1, [r7, #20]
 8015f4e:	69ba      	ldr	r2, [r7, #24]
 8015f50:	e841 2300 	strex	r3, r2, [r1]
 8015f54:	613b      	str	r3, [r7, #16]
   return(result);
 8015f56:	693b      	ldr	r3, [r7, #16]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d1e6      	bne.n	8015f2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2220      	movs	r2, #32
 8015f60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	2200      	movs	r2, #0
 8015f68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8015f70:	bf00      	nop
 8015f72:	3754      	adds	r7, #84	@ 0x54
 8015f74:	46bd      	mov	sp, r7
 8015f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7a:	4770      	bx	lr
 8015f7c:	effffffe 	.word	0xeffffffe

08015f80 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b090      	sub	sp, #64	@ 0x40
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	69db      	ldr	r3, [r3, #28]
 8015f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015f96:	d037      	beq.n	8016008 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8015f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	3308      	adds	r3, #8
 8015fa6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015faa:	e853 3f00 	ldrex	r3, [r3]
 8015fae:	623b      	str	r3, [r7, #32]
   return(result);
 8015fb0:	6a3b      	ldr	r3, [r7, #32]
 8015fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	3308      	adds	r3, #8
 8015fbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015fc0:	633a      	str	r2, [r7, #48]	@ 0x30
 8015fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015fc8:	e841 2300 	strex	r3, r2, [r1]
 8015fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d1e5      	bne.n	8015fa0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fda:	693b      	ldr	r3, [r7, #16]
 8015fdc:	e853 3f00 	ldrex	r3, [r3]
 8015fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8015fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	461a      	mov	r2, r3
 8015ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ff2:	61fb      	str	r3, [r7, #28]
 8015ff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ff6:	69b9      	ldr	r1, [r7, #24]
 8015ff8:	69fa      	ldr	r2, [r7, #28]
 8015ffa:	e841 2300 	strex	r3, r2, [r1]
 8015ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8016000:	697b      	ldr	r3, [r7, #20]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d1e6      	bne.n	8015fd4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016006:	e002      	b.n	801600e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8016008:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801600a:	f004 fef1 	bl	801adf0 <HAL_UART_TxCpltCallback>
}
 801600e:	bf00      	nop
 8016010:	3740      	adds	r7, #64	@ 0x40
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}

08016016 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8016016:	b580      	push	{r7, lr}
 8016018:	b084      	sub	sp, #16
 801601a:	af00      	add	r7, sp, #0
 801601c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016022:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8016024:	68f8      	ldr	r0, [r7, #12]
 8016026:	f7fe ff25 	bl	8014e74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801602a:	bf00      	nop
 801602c:	3710      	adds	r7, #16
 801602e:	46bd      	mov	sp, r7
 8016030:	bd80      	pop	{r7, pc}

08016032 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8016032:	b580      	push	{r7, lr}
 8016034:	b09c      	sub	sp, #112	@ 0x70
 8016036:	af00      	add	r7, sp, #0
 8016038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801603e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	69db      	ldr	r3, [r3, #28]
 8016044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016048:	d071      	beq.n	801612e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801604a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801604c:	2200      	movs	r2, #0
 801604e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801605a:	e853 3f00 	ldrex	r3, [r3]
 801605e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8016060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016062:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016066:	66bb      	str	r3, [r7, #104]	@ 0x68
 8016068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	461a      	mov	r2, r3
 801606e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016070:	65bb      	str	r3, [r7, #88]	@ 0x58
 8016072:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016074:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8016076:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016078:	e841 2300 	strex	r3, r2, [r1]
 801607c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801607e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016080:	2b00      	cmp	r3, #0
 8016082:	d1e6      	bne.n	8016052 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	3308      	adds	r3, #8
 801608a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801608c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801608e:	e853 3f00 	ldrex	r3, [r3]
 8016092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8016094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016096:	f023 0301 	bic.w	r3, r3, #1
 801609a:	667b      	str	r3, [r7, #100]	@ 0x64
 801609c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	3308      	adds	r3, #8
 80160a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80160a4:	647a      	str	r2, [r7, #68]	@ 0x44
 80160a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80160aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80160ac:	e841 2300 	strex	r3, r2, [r1]
 80160b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80160b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d1e5      	bne.n	8016084 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80160b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	3308      	adds	r3, #8
 80160be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160c2:	e853 3f00 	ldrex	r3, [r3]
 80160c6:	623b      	str	r3, [r7, #32]
   return(result);
 80160c8:	6a3b      	ldr	r3, [r7, #32]
 80160ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80160ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80160d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	3308      	adds	r3, #8
 80160d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80160d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80160da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80160de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80160e0:	e841 2300 	strex	r3, r2, [r1]
 80160e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80160e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d1e5      	bne.n	80160b8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80160ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80160ee:	2220      	movs	r2, #32
 80160f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80160f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80160f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80160f8:	2b01      	cmp	r3, #1
 80160fa:	d118      	bne.n	801612e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80160fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016102:	693b      	ldr	r3, [r7, #16]
 8016104:	e853 3f00 	ldrex	r3, [r3]
 8016108:	60fb      	str	r3, [r7, #12]
   return(result);
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	f023 0310 	bic.w	r3, r3, #16
 8016110:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	461a      	mov	r2, r3
 8016118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801611a:	61fb      	str	r3, [r7, #28]
 801611c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801611e:	69b9      	ldr	r1, [r7, #24]
 8016120:	69fa      	ldr	r2, [r7, #28]
 8016122:	e841 2300 	strex	r3, r2, [r1]
 8016126:	617b      	str	r3, [r7, #20]
   return(result);
 8016128:	697b      	ldr	r3, [r7, #20]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d1e6      	bne.n	80160fc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801612e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016130:	2200      	movs	r2, #0
 8016132:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016138:	2b01      	cmp	r3, #1
 801613a:	d107      	bne.n	801614c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801613c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801613e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8016142:	4619      	mov	r1, r3
 8016144:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8016146:	f7fe fe9f 	bl	8014e88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801614a:	e002      	b.n	8016152 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801614c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801614e:	f004 ffe7 	bl	801b120 <HAL_UART_RxCpltCallback>
}
 8016152:	bf00      	nop
 8016154:	3770      	adds	r7, #112	@ 0x70
 8016156:	46bd      	mov	sp, r7
 8016158:	bd80      	pop	{r7, pc}

0801615a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801615a:	b580      	push	{r7, lr}
 801615c:	b084      	sub	sp, #16
 801615e:	af00      	add	r7, sp, #0
 8016160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016166:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	2201      	movs	r2, #1
 801616c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016172:	2b01      	cmp	r3, #1
 8016174:	d109      	bne.n	801618a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801617c:	085b      	lsrs	r3, r3, #1
 801617e:	b29b      	uxth	r3, r3
 8016180:	4619      	mov	r1, r3
 8016182:	68f8      	ldr	r0, [r7, #12]
 8016184:	f7fe fe80 	bl	8014e88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016188:	e002      	b.n	8016190 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801618a:	68f8      	ldr	r0, [r7, #12]
 801618c:	f004 ffda 	bl	801b144 <HAL_UART_RxHalfCpltCallback>
}
 8016190:	bf00      	nop
 8016192:	3710      	adds	r7, #16
 8016194:	46bd      	mov	sp, r7
 8016196:	bd80      	pop	{r7, pc}

08016198 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b086      	sub	sp, #24
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80161a4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80161a6:	697b      	ldr	r3, [r7, #20]
 80161a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80161ac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80161b4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80161b6:	697b      	ldr	r3, [r7, #20]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	689b      	ldr	r3, [r3, #8]
 80161bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80161c0:	2b80      	cmp	r3, #128	@ 0x80
 80161c2:	d109      	bne.n	80161d8 <UART_DMAError+0x40>
 80161c4:	693b      	ldr	r3, [r7, #16]
 80161c6:	2b21      	cmp	r3, #33	@ 0x21
 80161c8:	d106      	bne.n	80161d8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80161ca:	697b      	ldr	r3, [r7, #20]
 80161cc:	2200      	movs	r2, #0
 80161ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80161d2:	6978      	ldr	r0, [r7, #20]
 80161d4:	f7ff fe2c 	bl	8015e30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80161d8:	697b      	ldr	r3, [r7, #20]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	689b      	ldr	r3, [r3, #8]
 80161de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80161e2:	2b40      	cmp	r3, #64	@ 0x40
 80161e4:	d109      	bne.n	80161fa <UART_DMAError+0x62>
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	2b22      	cmp	r3, #34	@ 0x22
 80161ea:	d106      	bne.n	80161fa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	2200      	movs	r2, #0
 80161f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80161f4:	6978      	ldr	r0, [r7, #20]
 80161f6:	f7ff fe5d 	bl	8015eb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016200:	f043 0210 	orr.w	r2, r3, #16
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801620a:	6978      	ldr	r0, [r7, #20]
 801620c:	f004 fe30 	bl	801ae70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016210:	bf00      	nop
 8016212:	3718      	adds	r7, #24
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}

08016218 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b084      	sub	sp, #16
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016224:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	2200      	movs	r2, #0
 801622a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801622e:	68f8      	ldr	r0, [r7, #12]
 8016230:	f004 fe1e 	bl	801ae70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016234:	bf00      	nop
 8016236:	3710      	adds	r7, #16
 8016238:	46bd      	mov	sp, r7
 801623a:	bd80      	pop	{r7, pc}

0801623c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801623c:	b480      	push	{r7}
 801623e:	b08f      	sub	sp, #60	@ 0x3c
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801624a:	2b21      	cmp	r3, #33	@ 0x21
 801624c:	d14c      	bne.n	80162e8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8016254:	b29b      	uxth	r3, r3
 8016256:	2b00      	cmp	r3, #0
 8016258:	d132      	bne.n	80162c0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016260:	6a3b      	ldr	r3, [r7, #32]
 8016262:	e853 3f00 	ldrex	r3, [r3]
 8016266:	61fb      	str	r3, [r7, #28]
   return(result);
 8016268:	69fb      	ldr	r3, [r7, #28]
 801626a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801626e:	637b      	str	r3, [r7, #52]	@ 0x34
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	461a      	mov	r2, r3
 8016276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801627a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801627c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801627e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016280:	e841 2300 	strex	r3, r2, [r1]
 8016284:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8016286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016288:	2b00      	cmp	r3, #0
 801628a:	d1e6      	bne.n	801625a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	e853 3f00 	ldrex	r3, [r3]
 8016298:	60bb      	str	r3, [r7, #8]
   return(result);
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80162a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	461a      	mov	r2, r3
 80162a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162aa:	61bb      	str	r3, [r7, #24]
 80162ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162ae:	6979      	ldr	r1, [r7, #20]
 80162b0:	69ba      	ldr	r2, [r7, #24]
 80162b2:	e841 2300 	strex	r3, r2, [r1]
 80162b6:	613b      	str	r3, [r7, #16]
   return(result);
 80162b8:	693b      	ldr	r3, [r7, #16]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d1e6      	bne.n	801628c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80162be:	e013      	b.n	80162e8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80162c4:	781a      	ldrb	r2, [r3, #0]
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80162d0:	1c5a      	adds	r2, r3, #1
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80162dc:	b29b      	uxth	r3, r3
 80162de:	3b01      	subs	r3, #1
 80162e0:	b29a      	uxth	r2, r3
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80162e8:	bf00      	nop
 80162ea:	373c      	adds	r7, #60	@ 0x3c
 80162ec:	46bd      	mov	sp, r7
 80162ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f2:	4770      	bx	lr

080162f4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80162f4:	b480      	push	{r7}
 80162f6:	b091      	sub	sp, #68	@ 0x44
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016302:	2b21      	cmp	r3, #33	@ 0x21
 8016304:	d151      	bne.n	80163aa <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801630c:	b29b      	uxth	r3, r3
 801630e:	2b00      	cmp	r3, #0
 8016310:	d132      	bne.n	8016378 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801631a:	e853 3f00 	ldrex	r3, [r3]
 801631e:	623b      	str	r3, [r7, #32]
   return(result);
 8016320:	6a3b      	ldr	r3, [r7, #32]
 8016322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016326:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	461a      	mov	r2, r3
 801632e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016330:	633b      	str	r3, [r7, #48]	@ 0x30
 8016332:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016334:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016338:	e841 2300 	strex	r3, r2, [r1]
 801633c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016340:	2b00      	cmp	r3, #0
 8016342:	d1e6      	bne.n	8016312 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801634a:	693b      	ldr	r3, [r7, #16]
 801634c:	e853 3f00 	ldrex	r3, [r3]
 8016350:	60fb      	str	r3, [r7, #12]
   return(result);
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016358:	637b      	str	r3, [r7, #52]	@ 0x34
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	461a      	mov	r2, r3
 8016360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016362:	61fb      	str	r3, [r7, #28]
 8016364:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016366:	69b9      	ldr	r1, [r7, #24]
 8016368:	69fa      	ldr	r2, [r7, #28]
 801636a:	e841 2300 	strex	r3, r2, [r1]
 801636e:	617b      	str	r3, [r7, #20]
   return(result);
 8016370:	697b      	ldr	r3, [r7, #20]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d1e6      	bne.n	8016344 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8016376:	e018      	b.n	80163aa <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801637c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801637e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016380:	881b      	ldrh	r3, [r3, #0]
 8016382:	461a      	mov	r2, r3
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801638c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016392:	1c9a      	adds	r2, r3, #2
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801639e:	b29b      	uxth	r3, r3
 80163a0:	3b01      	subs	r3, #1
 80163a2:	b29a      	uxth	r2, r3
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80163aa:	bf00      	nop
 80163ac:	3744      	adds	r7, #68	@ 0x44
 80163ae:	46bd      	mov	sp, r7
 80163b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b4:	4770      	bx	lr

080163b6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80163b6:	b480      	push	{r7}
 80163b8:	b091      	sub	sp, #68	@ 0x44
 80163ba:	af00      	add	r7, sp, #0
 80163bc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80163c4:	2b21      	cmp	r3, #33	@ 0x21
 80163c6:	d160      	bne.n	801648a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80163ce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80163d0:	e057      	b.n	8016482 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80163d8:	b29b      	uxth	r3, r3
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d133      	bne.n	8016446 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	3308      	adds	r3, #8
 80163e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163e8:	e853 3f00 	ldrex	r3, [r3]
 80163ec:	623b      	str	r3, [r7, #32]
   return(result);
 80163ee:	6a3b      	ldr	r3, [r7, #32]
 80163f0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80163f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	3308      	adds	r3, #8
 80163fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80163fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8016400:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016402:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016406:	e841 2300 	strex	r3, r2, [r1]
 801640a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801640e:	2b00      	cmp	r3, #0
 8016410:	d1e5      	bne.n	80163de <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016418:	693b      	ldr	r3, [r7, #16]
 801641a:	e853 3f00 	ldrex	r3, [r3]
 801641e:	60fb      	str	r3, [r7, #12]
   return(result);
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016426:	637b      	str	r3, [r7, #52]	@ 0x34
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	461a      	mov	r2, r3
 801642e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016430:	61fb      	str	r3, [r7, #28]
 8016432:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016434:	69b9      	ldr	r1, [r7, #24]
 8016436:	69fa      	ldr	r2, [r7, #28]
 8016438:	e841 2300 	strex	r3, r2, [r1]
 801643c:	617b      	str	r3, [r7, #20]
   return(result);
 801643e:	697b      	ldr	r3, [r7, #20]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d1e6      	bne.n	8016412 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8016444:	e021      	b.n	801648a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	69db      	ldr	r3, [r3, #28]
 801644c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016450:	2b00      	cmp	r3, #0
 8016452:	d013      	beq.n	801647c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016458:	781a      	ldrb	r2, [r3, #0]
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016464:	1c5a      	adds	r2, r3, #1
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8016470:	b29b      	uxth	r3, r3
 8016472:	3b01      	subs	r3, #1
 8016474:	b29a      	uxth	r2, r3
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801647c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801647e:	3b01      	subs	r3, #1
 8016480:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8016482:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016484:	2b00      	cmp	r3, #0
 8016486:	d1a4      	bne.n	80163d2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8016488:	e7ff      	b.n	801648a <UART_TxISR_8BIT_FIFOEN+0xd4>
 801648a:	bf00      	nop
 801648c:	3744      	adds	r7, #68	@ 0x44
 801648e:	46bd      	mov	sp, r7
 8016490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016494:	4770      	bx	lr

08016496 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016496:	b480      	push	{r7}
 8016498:	b091      	sub	sp, #68	@ 0x44
 801649a:	af00      	add	r7, sp, #0
 801649c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80164a4:	2b21      	cmp	r3, #33	@ 0x21
 80164a6:	d165      	bne.n	8016574 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80164ae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80164b0:	e05c      	b.n	801656c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80164b8:	b29b      	uxth	r3, r3
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d133      	bne.n	8016526 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	3308      	adds	r3, #8
 80164c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164c6:	6a3b      	ldr	r3, [r7, #32]
 80164c8:	e853 3f00 	ldrex	r3, [r3]
 80164cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80164ce:	69fb      	ldr	r3, [r7, #28]
 80164d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80164d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	3308      	adds	r3, #8
 80164dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80164de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80164e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80164e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80164e6:	e841 2300 	strex	r3, r2, [r1]
 80164ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80164ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d1e5      	bne.n	80164be <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	e853 3f00 	ldrex	r3, [r3]
 80164fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8016500:	68bb      	ldr	r3, [r7, #8]
 8016502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016506:	633b      	str	r3, [r7, #48]	@ 0x30
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	461a      	mov	r2, r3
 801650e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016510:	61bb      	str	r3, [r7, #24]
 8016512:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016514:	6979      	ldr	r1, [r7, #20]
 8016516:	69ba      	ldr	r2, [r7, #24]
 8016518:	e841 2300 	strex	r3, r2, [r1]
 801651c:	613b      	str	r3, [r7, #16]
   return(result);
 801651e:	693b      	ldr	r3, [r7, #16]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d1e6      	bne.n	80164f2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8016524:	e026      	b.n	8016574 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	69db      	ldr	r3, [r3, #28]
 801652c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016530:	2b00      	cmp	r3, #0
 8016532:	d018      	beq.n	8016566 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016538:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801653c:	881b      	ldrh	r3, [r3, #0]
 801653e:	461a      	mov	r2, r3
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016548:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801654e:	1c9a      	adds	r2, r3, #2
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801655a:	b29b      	uxth	r3, r3
 801655c:	3b01      	subs	r3, #1
 801655e:	b29a      	uxth	r2, r3
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8016566:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016568:	3b01      	subs	r3, #1
 801656a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801656c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801656e:	2b00      	cmp	r3, #0
 8016570:	d19f      	bne.n	80164b2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8016572:	e7ff      	b.n	8016574 <UART_TxISR_16BIT_FIFOEN+0xde>
 8016574:	bf00      	nop
 8016576:	3744      	adds	r7, #68	@ 0x44
 8016578:	46bd      	mov	sp, r7
 801657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657e:	4770      	bx	lr

08016580 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b088      	sub	sp, #32
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	e853 3f00 	ldrex	r3, [r3]
 8016594:	60bb      	str	r3, [r7, #8]
   return(result);
 8016596:	68bb      	ldr	r3, [r7, #8]
 8016598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801659c:	61fb      	str	r3, [r7, #28]
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	461a      	mov	r2, r3
 80165a4:	69fb      	ldr	r3, [r7, #28]
 80165a6:	61bb      	str	r3, [r7, #24]
 80165a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165aa:	6979      	ldr	r1, [r7, #20]
 80165ac:	69ba      	ldr	r2, [r7, #24]
 80165ae:	e841 2300 	strex	r3, r2, [r1]
 80165b2:	613b      	str	r3, [r7, #16]
   return(result);
 80165b4:	693b      	ldr	r3, [r7, #16]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d1e6      	bne.n	8016588 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	2220      	movs	r2, #32
 80165be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2200      	movs	r2, #0
 80165c6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f004 fc11 	bl	801adf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80165ce:	bf00      	nop
 80165d0:	3720      	adds	r7, #32
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bd80      	pop	{r7, pc}

080165d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80165d6:	b480      	push	{r7}
 80165d8:	b083      	sub	sp, #12
 80165da:	af00      	add	r7, sp, #0
 80165dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80165de:	bf00      	nop
 80165e0:	370c      	adds	r7, #12
 80165e2:	46bd      	mov	sp, r7
 80165e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e8:	4770      	bx	lr

080165ea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80165ea:	b480      	push	{r7}
 80165ec:	b083      	sub	sp, #12
 80165ee:	af00      	add	r7, sp, #0
 80165f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80165f2:	bf00      	nop
 80165f4:	370c      	adds	r7, #12
 80165f6:	46bd      	mov	sp, r7
 80165f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165fc:	4770      	bx	lr

080165fe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80165fe:	b480      	push	{r7}
 8016600:	b083      	sub	sp, #12
 8016602:	af00      	add	r7, sp, #0
 8016604:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016606:	bf00      	nop
 8016608:	370c      	adds	r7, #12
 801660a:	46bd      	mov	sp, r7
 801660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016610:	4770      	bx	lr

08016612 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016612:	b480      	push	{r7}
 8016614:	b085      	sub	sp, #20
 8016616:	af00      	add	r7, sp, #0
 8016618:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016620:	2b01      	cmp	r3, #1
 8016622:	d101      	bne.n	8016628 <HAL_UARTEx_DisableFifoMode+0x16>
 8016624:	2302      	movs	r3, #2
 8016626:	e027      	b.n	8016678 <HAL_UARTEx_DisableFifoMode+0x66>
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	2201      	movs	r2, #1
 801662c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	2224      	movs	r2, #36	@ 0x24
 8016634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	681a      	ldr	r2, [r3, #0]
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	f022 0201 	bic.w	r2, r2, #1
 801664e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8016656:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2200      	movs	r2, #0
 801665c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	68fa      	ldr	r2, [r7, #12]
 8016664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2220      	movs	r2, #32
 801666a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	2200      	movs	r2, #0
 8016672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016676:	2300      	movs	r3, #0
}
 8016678:	4618      	mov	r0, r3
 801667a:	3714      	adds	r7, #20
 801667c:	46bd      	mov	sp, r7
 801667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016682:	4770      	bx	lr

08016684 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b084      	sub	sp, #16
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
 801668c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016694:	2b01      	cmp	r3, #1
 8016696:	d101      	bne.n	801669c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016698:	2302      	movs	r3, #2
 801669a:	e02d      	b.n	80166f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	2201      	movs	r2, #1
 80166a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	2224      	movs	r2, #36	@ 0x24
 80166a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	681a      	ldr	r2, [r3, #0]
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	f022 0201 	bic.w	r2, r2, #1
 80166c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	689b      	ldr	r3, [r3, #8]
 80166ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	683a      	ldr	r2, [r7, #0]
 80166d4:	430a      	orrs	r2, r1
 80166d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80166d8:	6878      	ldr	r0, [r7, #4]
 80166da:	f000 f84f 	bl	801677c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	68fa      	ldr	r2, [r7, #12]
 80166e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	2220      	movs	r2, #32
 80166ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2200      	movs	r2, #0
 80166f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80166f6:	2300      	movs	r3, #0
}
 80166f8:	4618      	mov	r0, r3
 80166fa:	3710      	adds	r7, #16
 80166fc:	46bd      	mov	sp, r7
 80166fe:	bd80      	pop	{r7, pc}

08016700 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b084      	sub	sp, #16
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
 8016708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016710:	2b01      	cmp	r3, #1
 8016712:	d101      	bne.n	8016718 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016714:	2302      	movs	r3, #2
 8016716:	e02d      	b.n	8016774 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	2201      	movs	r2, #1
 801671c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	2224      	movs	r2, #36	@ 0x24
 8016724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	681a      	ldr	r2, [r3, #0]
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	f022 0201 	bic.w	r2, r2, #1
 801673e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	689b      	ldr	r3, [r3, #8]
 8016746:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	683a      	ldr	r2, [r7, #0]
 8016750:	430a      	orrs	r2, r1
 8016752:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016754:	6878      	ldr	r0, [r7, #4]
 8016756:	f000 f811 	bl	801677c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	68fa      	ldr	r2, [r7, #12]
 8016760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	2220      	movs	r2, #32
 8016766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	2200      	movs	r2, #0
 801676e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016772:	2300      	movs	r3, #0
}
 8016774:	4618      	mov	r0, r3
 8016776:	3710      	adds	r7, #16
 8016778:	46bd      	mov	sp, r7
 801677a:	bd80      	pop	{r7, pc}

0801677c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801677c:	b480      	push	{r7}
 801677e:	b085      	sub	sp, #20
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016788:	2b00      	cmp	r3, #0
 801678a:	d108      	bne.n	801679e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	2201      	movs	r2, #1
 8016790:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	2201      	movs	r2, #1
 8016798:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801679c:	e031      	b.n	8016802 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801679e:	2310      	movs	r3, #16
 80167a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80167a2:	2310      	movs	r3, #16
 80167a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	689b      	ldr	r3, [r3, #8]
 80167ac:	0e5b      	lsrs	r3, r3, #25
 80167ae:	b2db      	uxtb	r3, r3
 80167b0:	f003 0307 	and.w	r3, r3, #7
 80167b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	689b      	ldr	r3, [r3, #8]
 80167bc:	0f5b      	lsrs	r3, r3, #29
 80167be:	b2db      	uxtb	r3, r3
 80167c0:	f003 0307 	and.w	r3, r3, #7
 80167c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80167c6:	7bbb      	ldrb	r3, [r7, #14]
 80167c8:	7b3a      	ldrb	r2, [r7, #12]
 80167ca:	4911      	ldr	r1, [pc, #68]	@ (8016810 <UARTEx_SetNbDataToProcess+0x94>)
 80167cc:	5c8a      	ldrb	r2, [r1, r2]
 80167ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80167d2:	7b3a      	ldrb	r2, [r7, #12]
 80167d4:	490f      	ldr	r1, [pc, #60]	@ (8016814 <UARTEx_SetNbDataToProcess+0x98>)
 80167d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80167d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80167dc:	b29a      	uxth	r2, r3
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80167e4:	7bfb      	ldrb	r3, [r7, #15]
 80167e6:	7b7a      	ldrb	r2, [r7, #13]
 80167e8:	4909      	ldr	r1, [pc, #36]	@ (8016810 <UARTEx_SetNbDataToProcess+0x94>)
 80167ea:	5c8a      	ldrb	r2, [r1, r2]
 80167ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80167f0:	7b7a      	ldrb	r2, [r7, #13]
 80167f2:	4908      	ldr	r1, [pc, #32]	@ (8016814 <UARTEx_SetNbDataToProcess+0x98>)
 80167f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80167f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80167fa:	b29a      	uxth	r2, r3
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8016802:	bf00      	nop
 8016804:	3714      	adds	r7, #20
 8016806:	46bd      	mov	sp, r7
 8016808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801680c:	4770      	bx	lr
 801680e:	bf00      	nop
 8016810:	08021154 	.word	0x08021154
 8016814:	0802115c 	.word	0x0802115c

08016818 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 8016818:	b480      	push	{r7}
 801681a:	b087      	sub	sp, #28
 801681c:	af00      	add	r7, sp, #0
 801681e:	6078      	str	r0, [r7, #4]
 8016820:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8016822:	683b      	ldr	r3, [r7, #0]
 8016824:	681a      	ldr	r2, [r3, #0]
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801682c:	683a      	ldr	r2, [r7, #0]
 801682e:	6812      	ldr	r2, [r2, #0]
 8016830:	f023 0101 	bic.w	r1, r3, #1
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 801683a:	683b      	ldr	r3, [r7, #0]
 801683c:	689b      	ldr	r3, [r3, #8]
 801683e:	2b08      	cmp	r3, #8
 8016840:	d102      	bne.n	8016848 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8016842:	2340      	movs	r3, #64	@ 0x40
 8016844:	617b      	str	r3, [r7, #20]
 8016846:	e001      	b.n	801684c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8016848:	2300      	movs	r3, #0
 801684a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 801684c:	683b      	ldr	r3, [r7, #0]
 801684e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8016850:	697b      	ldr	r3, [r7, #20]
 8016852:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8016854:	683b      	ldr	r3, [r7, #0]
 8016856:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8016858:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 801685e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8016864:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8016866:	683b      	ldr	r3, [r7, #0]
 8016868:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 801686a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8016870:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8016876:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8016878:	683b      	ldr	r3, [r7, #0]
 801687a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 801687c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 801687e:	683b      	ldr	r3, [r7, #0]
 8016880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 8016882:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 8016888:	431a      	orrs	r2, r3
              Init->WriteBurst);
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 801688e:	4313      	orrs	r3, r2
 8016890:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8016892:	683b      	ldr	r3, [r7, #0]
 8016894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016896:	693a      	ldr	r2, [r7, #16]
 8016898:	4313      	orrs	r3, r2
 801689a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 801689c:	683b      	ldr	r3, [r7, #0]
 801689e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80168a0:	693a      	ldr	r2, [r7, #16]
 80168a2:	4313      	orrs	r3, r2
 80168a4:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80168a6:	683b      	ldr	r3, [r7, #0]
 80168a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80168aa:	693a      	ldr	r2, [r7, #16]
 80168ac:	4313      	orrs	r3, r2
 80168ae:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80168b0:	4b20      	ldr	r3, [pc, #128]	@ (8016934 <FMC_NORSRAM_Init+0x11c>)
 80168b2:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80168ba:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80168c2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80168ca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80168cc:	683b      	ldr	r3, [r7, #0]
 80168ce:	681a      	ldr	r2, [r3, #0]
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	43db      	mvns	r3, r3
 80168da:	ea02 0103 	and.w	r1, r2, r3
 80168de:	683b      	ldr	r3, [r7, #0]
 80168e0:	681a      	ldr	r2, [r3, #0]
 80168e2:	693b      	ldr	r3, [r7, #16]
 80168e4:	4319      	orrs	r1, r3
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80168f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80168f4:	d10c      	bne.n	8016910 <FMC_NORSRAM_Init+0xf8>
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d008      	beq.n	8016910 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801690a:	431a      	orrs	r2, r3
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8016910:	683b      	ldr	r3, [r7, #0]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d006      	beq.n	8016926 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	681a      	ldr	r2, [r3, #0]
 801691c:	683b      	ldr	r3, [r7, #0]
 801691e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016920:	431a      	orrs	r2, r3
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016926:	2300      	movs	r3, #0
}
 8016928:	4618      	mov	r0, r3
 801692a:	371c      	adds	r7, #28
 801692c:	46bd      	mov	sp, r7
 801692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016932:	4770      	bx	lr
 8016934:	0008fb7f 	.word	0x0008fb7f

08016938 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8016938:	b480      	push	{r7}
 801693a:	b087      	sub	sp, #28
 801693c:	af00      	add	r7, sp, #0
 801693e:	60f8      	str	r0, [r7, #12]
 8016940:	60b9      	str	r1, [r7, #8]
 8016942:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8016948:	68bb      	ldr	r3, [r7, #8]
 801694a:	685b      	ldr	r3, [r3, #4]
 801694c:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 801694e:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8016950:	68bb      	ldr	r3, [r7, #8]
 8016952:	689b      	ldr	r3, [r3, #8]
 8016954:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8016956:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8016958:	68bb      	ldr	r3, [r7, #8]
 801695a:	68db      	ldr	r3, [r3, #12]
 801695c:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 801695e:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 8016960:	68bb      	ldr	r3, [r7, #8]
 8016962:	691b      	ldr	r3, [r3, #16]
 8016964:	3b01      	subs	r3, #1
 8016966:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8016968:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 801696a:	68bb      	ldr	r3, [r7, #8]
 801696c:	695b      	ldr	r3, [r3, #20]
 801696e:	3b02      	subs	r3, #2
 8016970:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 8016972:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 801697a:	687a      	ldr	r2, [r7, #4]
 801697c:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 801697e:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801698e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016992:	d113      	bne.n	80169bc <FMC_NORSRAM_Timing_Init+0x84>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	685b      	ldr	r3, [r3, #4]
 8016998:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801699c:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 801699e:	68bb      	ldr	r3, [r7, #8]
 80169a0:	691b      	ldr	r3, [r3, #16]
 80169a2:	3b01      	subs	r3, #1
 80169a4:	051b      	lsls	r3, r3, #20
 80169a6:	697a      	ldr	r2, [r7, #20]
 80169a8:	4313      	orrs	r3, r2
 80169aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	685b      	ldr	r3, [r3, #4]
 80169b0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80169b4:	697b      	ldr	r3, [r7, #20]
 80169b6:	431a      	orrs	r2, r3
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80169bc:	2300      	movs	r3, #0
}
 80169be:	4618      	mov	r0, r3
 80169c0:	371c      	adds	r7, #28
 80169c2:	46bd      	mov	sp, r7
 80169c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c8:	4770      	bx	lr
	...

080169cc <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80169cc:	b480      	push	{r7}
 80169ce:	b085      	sub	sp, #20
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	60f8      	str	r0, [r7, #12]
 80169d4:	60b9      	str	r1, [r7, #8]
 80169d6:	607a      	str	r2, [r7, #4]
 80169d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80169da:	683b      	ldr	r3, [r7, #0]
 80169dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80169e0:	d11d      	bne.n	8016a1e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	687a      	ldr	r2, [r7, #4]
 80169e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80169ea:	4b13      	ldr	r3, [pc, #76]	@ (8016a38 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80169ec:	4013      	ands	r3, r2
 80169ee:	68ba      	ldr	r2, [r7, #8]
 80169f0:	6811      	ldr	r1, [r2, #0]
 80169f2:	68ba      	ldr	r2, [r7, #8]
 80169f4:	6852      	ldr	r2, [r2, #4]
 80169f6:	0112      	lsls	r2, r2, #4
 80169f8:	4311      	orrs	r1, r2
 80169fa:	68ba      	ldr	r2, [r7, #8]
 80169fc:	6892      	ldr	r2, [r2, #8]
 80169fe:	0212      	lsls	r2, r2, #8
 8016a00:	4311      	orrs	r1, r2
 8016a02:	68ba      	ldr	r2, [r7, #8]
 8016a04:	6992      	ldr	r2, [r2, #24]
 8016a06:	4311      	orrs	r1, r2
 8016a08:	68ba      	ldr	r2, [r7, #8]
 8016a0a:	68d2      	ldr	r2, [r2, #12]
 8016a0c:	0412      	lsls	r2, r2, #16
 8016a0e:	430a      	orrs	r2, r1
 8016a10:	ea43 0102 	orr.w	r1, r3, r2
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	687a      	ldr	r2, [r7, #4]
 8016a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8016a1c:	e005      	b.n	8016a2a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	687a      	ldr	r2, [r7, #4]
 8016a22:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8016a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8016a2a:	2300      	movs	r3, #0
}
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	3714      	adds	r7, #20
 8016a30:	46bd      	mov	sp, r7
 8016a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a36:	4770      	bx	lr
 8016a38:	cff00000 	.word	0xcff00000

08016a3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016a3c:	b084      	sub	sp, #16
 8016a3e:	b580      	push	{r7, lr}
 8016a40:	b084      	sub	sp, #16
 8016a42:	af00      	add	r7, sp, #0
 8016a44:	6078      	str	r0, [r7, #4]
 8016a46:	f107 001c 	add.w	r0, r7, #28
 8016a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8016a4e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8016a52:	2b01      	cmp	r3, #1
 8016a54:	d121      	bne.n	8016a9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	68da      	ldr	r2, [r3, #12]
 8016a66:	4b2c      	ldr	r3, [pc, #176]	@ (8016b18 <USB_CoreInit+0xdc>)
 8016a68:	4013      	ands	r3, r2
 8016a6a:	687a      	ldr	r2, [r7, #4]
 8016a6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	68db      	ldr	r3, [r3, #12]
 8016a72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8016a7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016a7e:	2b01      	cmp	r3, #1
 8016a80:	d105      	bne.n	8016a8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	68db      	ldr	r3, [r3, #12]
 8016a86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	f001 fafa 	bl	8018088 <USB_CoreReset>
 8016a94:	4603      	mov	r3, r0
 8016a96:	73fb      	strb	r3, [r7, #15]
 8016a98:	e01b      	b.n	8016ad2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	68db      	ldr	r3, [r3, #12]
 8016a9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8016aa6:	6878      	ldr	r0, [r7, #4]
 8016aa8:	f001 faee 	bl	8018088 <USB_CoreReset>
 8016aac:	4603      	mov	r3, r0
 8016aae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8016ab0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d106      	bne.n	8016ac6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016abc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	639a      	str	r2, [r3, #56]	@ 0x38
 8016ac4:	e005      	b.n	8016ad2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016aca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8016ad2:	7fbb      	ldrb	r3, [r7, #30]
 8016ad4:	2b01      	cmp	r3, #1
 8016ad6:	d116      	bne.n	8016b06 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016adc:	b29a      	uxth	r2, r3
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8016ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8016b1c <USB_CoreInit+0xe0>)
 8016ae8:	4313      	orrs	r3, r2
 8016aea:	687a      	ldr	r2, [r7, #4]
 8016aec:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	689b      	ldr	r3, [r3, #8]
 8016af2:	f043 0206 	orr.w	r2, r3, #6
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	689b      	ldr	r3, [r3, #8]
 8016afe:	f043 0220 	orr.w	r2, r3, #32
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8016b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	3710      	adds	r7, #16
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016b12:	b004      	add	sp, #16
 8016b14:	4770      	bx	lr
 8016b16:	bf00      	nop
 8016b18:	ffbdffbf 	.word	0xffbdffbf
 8016b1c:	03ee0000 	.word	0x03ee0000

08016b20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8016b20:	b480      	push	{r7}
 8016b22:	b087      	sub	sp, #28
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	60f8      	str	r0, [r7, #12]
 8016b28:	60b9      	str	r1, [r7, #8]
 8016b2a:	4613      	mov	r3, r2
 8016b2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8016b2e:	79fb      	ldrb	r3, [r7, #7]
 8016b30:	2b02      	cmp	r3, #2
 8016b32:	d165      	bne.n	8016c00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8016b34:	68bb      	ldr	r3, [r7, #8]
 8016b36:	4a41      	ldr	r2, [pc, #260]	@ (8016c3c <USB_SetTurnaroundTime+0x11c>)
 8016b38:	4293      	cmp	r3, r2
 8016b3a:	d906      	bls.n	8016b4a <USB_SetTurnaroundTime+0x2a>
 8016b3c:	68bb      	ldr	r3, [r7, #8]
 8016b3e:	4a40      	ldr	r2, [pc, #256]	@ (8016c40 <USB_SetTurnaroundTime+0x120>)
 8016b40:	4293      	cmp	r3, r2
 8016b42:	d202      	bcs.n	8016b4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8016b44:	230f      	movs	r3, #15
 8016b46:	617b      	str	r3, [r7, #20]
 8016b48:	e062      	b.n	8016c10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8016b4a:	68bb      	ldr	r3, [r7, #8]
 8016b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8016c40 <USB_SetTurnaroundTime+0x120>)
 8016b4e:	4293      	cmp	r3, r2
 8016b50:	d306      	bcc.n	8016b60 <USB_SetTurnaroundTime+0x40>
 8016b52:	68bb      	ldr	r3, [r7, #8]
 8016b54:	4a3b      	ldr	r2, [pc, #236]	@ (8016c44 <USB_SetTurnaroundTime+0x124>)
 8016b56:	4293      	cmp	r3, r2
 8016b58:	d202      	bcs.n	8016b60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8016b5a:	230e      	movs	r3, #14
 8016b5c:	617b      	str	r3, [r7, #20]
 8016b5e:	e057      	b.n	8016c10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8016b60:	68bb      	ldr	r3, [r7, #8]
 8016b62:	4a38      	ldr	r2, [pc, #224]	@ (8016c44 <USB_SetTurnaroundTime+0x124>)
 8016b64:	4293      	cmp	r3, r2
 8016b66:	d306      	bcc.n	8016b76 <USB_SetTurnaroundTime+0x56>
 8016b68:	68bb      	ldr	r3, [r7, #8]
 8016b6a:	4a37      	ldr	r2, [pc, #220]	@ (8016c48 <USB_SetTurnaroundTime+0x128>)
 8016b6c:	4293      	cmp	r3, r2
 8016b6e:	d202      	bcs.n	8016b76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8016b70:	230d      	movs	r3, #13
 8016b72:	617b      	str	r3, [r7, #20]
 8016b74:	e04c      	b.n	8016c10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8016b76:	68bb      	ldr	r3, [r7, #8]
 8016b78:	4a33      	ldr	r2, [pc, #204]	@ (8016c48 <USB_SetTurnaroundTime+0x128>)
 8016b7a:	4293      	cmp	r3, r2
 8016b7c:	d306      	bcc.n	8016b8c <USB_SetTurnaroundTime+0x6c>
 8016b7e:	68bb      	ldr	r3, [r7, #8]
 8016b80:	4a32      	ldr	r2, [pc, #200]	@ (8016c4c <USB_SetTurnaroundTime+0x12c>)
 8016b82:	4293      	cmp	r3, r2
 8016b84:	d802      	bhi.n	8016b8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8016b86:	230c      	movs	r3, #12
 8016b88:	617b      	str	r3, [r7, #20]
 8016b8a:	e041      	b.n	8016c10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8016b8c:	68bb      	ldr	r3, [r7, #8]
 8016b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8016c4c <USB_SetTurnaroundTime+0x12c>)
 8016b90:	4293      	cmp	r3, r2
 8016b92:	d906      	bls.n	8016ba2 <USB_SetTurnaroundTime+0x82>
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	4a2e      	ldr	r2, [pc, #184]	@ (8016c50 <USB_SetTurnaroundTime+0x130>)
 8016b98:	4293      	cmp	r3, r2
 8016b9a:	d802      	bhi.n	8016ba2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8016b9c:	230b      	movs	r3, #11
 8016b9e:	617b      	str	r3, [r7, #20]
 8016ba0:	e036      	b.n	8016c10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8016ba2:	68bb      	ldr	r3, [r7, #8]
 8016ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8016c50 <USB_SetTurnaroundTime+0x130>)
 8016ba6:	4293      	cmp	r3, r2
 8016ba8:	d906      	bls.n	8016bb8 <USB_SetTurnaroundTime+0x98>
 8016baa:	68bb      	ldr	r3, [r7, #8]
 8016bac:	4a29      	ldr	r2, [pc, #164]	@ (8016c54 <USB_SetTurnaroundTime+0x134>)
 8016bae:	4293      	cmp	r3, r2
 8016bb0:	d802      	bhi.n	8016bb8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8016bb2:	230a      	movs	r3, #10
 8016bb4:	617b      	str	r3, [r7, #20]
 8016bb6:	e02b      	b.n	8016c10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8016bb8:	68bb      	ldr	r3, [r7, #8]
 8016bba:	4a26      	ldr	r2, [pc, #152]	@ (8016c54 <USB_SetTurnaroundTime+0x134>)
 8016bbc:	4293      	cmp	r3, r2
 8016bbe:	d906      	bls.n	8016bce <USB_SetTurnaroundTime+0xae>
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	4a25      	ldr	r2, [pc, #148]	@ (8016c58 <USB_SetTurnaroundTime+0x138>)
 8016bc4:	4293      	cmp	r3, r2
 8016bc6:	d202      	bcs.n	8016bce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8016bc8:	2309      	movs	r3, #9
 8016bca:	617b      	str	r3, [r7, #20]
 8016bcc:	e020      	b.n	8016c10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8016bce:	68bb      	ldr	r3, [r7, #8]
 8016bd0:	4a21      	ldr	r2, [pc, #132]	@ (8016c58 <USB_SetTurnaroundTime+0x138>)
 8016bd2:	4293      	cmp	r3, r2
 8016bd4:	d306      	bcc.n	8016be4 <USB_SetTurnaroundTime+0xc4>
 8016bd6:	68bb      	ldr	r3, [r7, #8]
 8016bd8:	4a20      	ldr	r2, [pc, #128]	@ (8016c5c <USB_SetTurnaroundTime+0x13c>)
 8016bda:	4293      	cmp	r3, r2
 8016bdc:	d802      	bhi.n	8016be4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8016bde:	2308      	movs	r3, #8
 8016be0:	617b      	str	r3, [r7, #20]
 8016be2:	e015      	b.n	8016c10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8016be4:	68bb      	ldr	r3, [r7, #8]
 8016be6:	4a1d      	ldr	r2, [pc, #116]	@ (8016c5c <USB_SetTurnaroundTime+0x13c>)
 8016be8:	4293      	cmp	r3, r2
 8016bea:	d906      	bls.n	8016bfa <USB_SetTurnaroundTime+0xda>
 8016bec:	68bb      	ldr	r3, [r7, #8]
 8016bee:	4a1c      	ldr	r2, [pc, #112]	@ (8016c60 <USB_SetTurnaroundTime+0x140>)
 8016bf0:	4293      	cmp	r3, r2
 8016bf2:	d202      	bcs.n	8016bfa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8016bf4:	2307      	movs	r3, #7
 8016bf6:	617b      	str	r3, [r7, #20]
 8016bf8:	e00a      	b.n	8016c10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8016bfa:	2306      	movs	r3, #6
 8016bfc:	617b      	str	r3, [r7, #20]
 8016bfe:	e007      	b.n	8016c10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8016c00:	79fb      	ldrb	r3, [r7, #7]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d102      	bne.n	8016c0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8016c06:	2309      	movs	r3, #9
 8016c08:	617b      	str	r3, [r7, #20]
 8016c0a:	e001      	b.n	8016c10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8016c0c:	2309      	movs	r3, #9
 8016c0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	68db      	ldr	r3, [r3, #12]
 8016c14:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	68da      	ldr	r2, [r3, #12]
 8016c20:	697b      	ldr	r3, [r7, #20]
 8016c22:	029b      	lsls	r3, r3, #10
 8016c24:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8016c28:	431a      	orrs	r2, r3
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8016c2e:	2300      	movs	r3, #0
}
 8016c30:	4618      	mov	r0, r3
 8016c32:	371c      	adds	r7, #28
 8016c34:	46bd      	mov	sp, r7
 8016c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3a:	4770      	bx	lr
 8016c3c:	00d8acbf 	.word	0x00d8acbf
 8016c40:	00e4e1c0 	.word	0x00e4e1c0
 8016c44:	00f42400 	.word	0x00f42400
 8016c48:	01067380 	.word	0x01067380
 8016c4c:	011a499f 	.word	0x011a499f
 8016c50:	01312cff 	.word	0x01312cff
 8016c54:	014ca43f 	.word	0x014ca43f
 8016c58:	016e3600 	.word	0x016e3600
 8016c5c:	01a6ab1f 	.word	0x01a6ab1f
 8016c60:	01e84800 	.word	0x01e84800

08016c64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8016c64:	b480      	push	{r7}
 8016c66:	b083      	sub	sp, #12
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	689b      	ldr	r3, [r3, #8]
 8016c70:	f043 0201 	orr.w	r2, r3, #1
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016c78:	2300      	movs	r3, #0
}
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	370c      	adds	r7, #12
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c84:	4770      	bx	lr

08016c86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8016c86:	b480      	push	{r7}
 8016c88:	b083      	sub	sp, #12
 8016c8a:	af00      	add	r7, sp, #0
 8016c8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	689b      	ldr	r3, [r3, #8]
 8016c92:	f023 0201 	bic.w	r2, r3, #1
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016c9a:	2300      	movs	r3, #0
}
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	370c      	adds	r7, #12
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca6:	4770      	bx	lr

08016ca8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b084      	sub	sp, #16
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	68db      	ldr	r3, [r3, #12]
 8016cbc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8016cc4:	78fb      	ldrb	r3, [r7, #3]
 8016cc6:	2b01      	cmp	r3, #1
 8016cc8:	d115      	bne.n	8016cf6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	68db      	ldr	r3, [r3, #12]
 8016cce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8016cd6:	200a      	movs	r0, #10
 8016cd8:	f7ee fc9a 	bl	8005610 <HAL_Delay>
      ms += 10U;
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	330a      	adds	r3, #10
 8016ce0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8016ce2:	6878      	ldr	r0, [r7, #4]
 8016ce4:	f001 f93f 	bl	8017f66 <USB_GetMode>
 8016ce8:	4603      	mov	r3, r0
 8016cea:	2b01      	cmp	r3, #1
 8016cec:	d01e      	beq.n	8016d2c <USB_SetCurrentMode+0x84>
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	2bc7      	cmp	r3, #199	@ 0xc7
 8016cf2:	d9f0      	bls.n	8016cd6 <USB_SetCurrentMode+0x2e>
 8016cf4:	e01a      	b.n	8016d2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8016cf6:	78fb      	ldrb	r3, [r7, #3]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d115      	bne.n	8016d28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	68db      	ldr	r3, [r3, #12]
 8016d00:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8016d08:	200a      	movs	r0, #10
 8016d0a:	f7ee fc81 	bl	8005610 <HAL_Delay>
      ms += 10U;
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	330a      	adds	r3, #10
 8016d12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8016d14:	6878      	ldr	r0, [r7, #4]
 8016d16:	f001 f926 	bl	8017f66 <USB_GetMode>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d005      	beq.n	8016d2c <USB_SetCurrentMode+0x84>
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	2bc7      	cmp	r3, #199	@ 0xc7
 8016d24:	d9f0      	bls.n	8016d08 <USB_SetCurrentMode+0x60>
 8016d26:	e001      	b.n	8016d2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8016d28:	2301      	movs	r3, #1
 8016d2a:	e005      	b.n	8016d38 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	2bc8      	cmp	r3, #200	@ 0xc8
 8016d30:	d101      	bne.n	8016d36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8016d32:	2301      	movs	r3, #1
 8016d34:	e000      	b.n	8016d38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8016d36:	2300      	movs	r3, #0
}
 8016d38:	4618      	mov	r0, r3
 8016d3a:	3710      	adds	r7, #16
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	bd80      	pop	{r7, pc}

08016d40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016d40:	b084      	sub	sp, #16
 8016d42:	b580      	push	{r7, lr}
 8016d44:	b086      	sub	sp, #24
 8016d46:	af00      	add	r7, sp, #0
 8016d48:	6078      	str	r0, [r7, #4]
 8016d4a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8016d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8016d52:	2300      	movs	r3, #0
 8016d54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	613b      	str	r3, [r7, #16]
 8016d5e:	e009      	b.n	8016d74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8016d60:	687a      	ldr	r2, [r7, #4]
 8016d62:	693b      	ldr	r3, [r7, #16]
 8016d64:	3340      	adds	r3, #64	@ 0x40
 8016d66:	009b      	lsls	r3, r3, #2
 8016d68:	4413      	add	r3, r2
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8016d6e:	693b      	ldr	r3, [r7, #16]
 8016d70:	3301      	adds	r3, #1
 8016d72:	613b      	str	r3, [r7, #16]
 8016d74:	693b      	ldr	r3, [r7, #16]
 8016d76:	2b0e      	cmp	r3, #14
 8016d78:	d9f2      	bls.n	8016d60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8016d7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d11c      	bne.n	8016dbc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016d88:	685b      	ldr	r3, [r3, #4]
 8016d8a:	68fa      	ldr	r2, [r7, #12]
 8016d8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016d90:	f043 0302 	orr.w	r3, r3, #2
 8016d94:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d9a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	601a      	str	r2, [r3, #0]
 8016dba:	e005      	b.n	8016dc8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016dc0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016dce:	461a      	mov	r2, r3
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8016dd4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8016dd8:	2b01      	cmp	r3, #1
 8016dda:	d10d      	bne.n	8016df8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8016ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d104      	bne.n	8016dee <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8016de4:	2100      	movs	r1, #0
 8016de6:	6878      	ldr	r0, [r7, #4]
 8016de8:	f000 f968 	bl	80170bc <USB_SetDevSpeed>
 8016dec:	e008      	b.n	8016e00 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8016dee:	2101      	movs	r1, #1
 8016df0:	6878      	ldr	r0, [r7, #4]
 8016df2:	f000 f963 	bl	80170bc <USB_SetDevSpeed>
 8016df6:	e003      	b.n	8016e00 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8016df8:	2103      	movs	r1, #3
 8016dfa:	6878      	ldr	r0, [r7, #4]
 8016dfc:	f000 f95e 	bl	80170bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8016e00:	2110      	movs	r1, #16
 8016e02:	6878      	ldr	r0, [r7, #4]
 8016e04:	f000 f8fa 	bl	8016ffc <USB_FlushTxFifo>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d001      	beq.n	8016e12 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8016e0e:	2301      	movs	r3, #1
 8016e10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8016e12:	6878      	ldr	r0, [r7, #4]
 8016e14:	f000 f924 	bl	8017060 <USB_FlushRxFifo>
 8016e18:	4603      	mov	r3, r0
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d001      	beq.n	8016e22 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8016e1e:	2301      	movs	r3, #1
 8016e20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016e28:	461a      	mov	r2, r3
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016e34:	461a      	mov	r2, r3
 8016e36:	2300      	movs	r3, #0
 8016e38:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016e40:	461a      	mov	r2, r3
 8016e42:	2300      	movs	r3, #0
 8016e44:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016e46:	2300      	movs	r3, #0
 8016e48:	613b      	str	r3, [r7, #16]
 8016e4a:	e043      	b.n	8016ed4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016e4c:	693b      	ldr	r3, [r7, #16]
 8016e4e:	015a      	lsls	r2, r3, #5
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	4413      	add	r3, r2
 8016e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016e62:	d118      	bne.n	8016e96 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8016e64:	693b      	ldr	r3, [r7, #16]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d10a      	bne.n	8016e80 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8016e6a:	693b      	ldr	r3, [r7, #16]
 8016e6c:	015a      	lsls	r2, r3, #5
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	4413      	add	r3, r2
 8016e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e76:	461a      	mov	r2, r3
 8016e78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8016e7c:	6013      	str	r3, [r2, #0]
 8016e7e:	e013      	b.n	8016ea8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8016e80:	693b      	ldr	r3, [r7, #16]
 8016e82:	015a      	lsls	r2, r3, #5
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	4413      	add	r3, r2
 8016e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e8c:	461a      	mov	r2, r3
 8016e8e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8016e92:	6013      	str	r3, [r2, #0]
 8016e94:	e008      	b.n	8016ea8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8016e96:	693b      	ldr	r3, [r7, #16]
 8016e98:	015a      	lsls	r2, r3, #5
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	4413      	add	r3, r2
 8016e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ea2:	461a      	mov	r2, r3
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8016ea8:	693b      	ldr	r3, [r7, #16]
 8016eaa:	015a      	lsls	r2, r3, #5
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	4413      	add	r3, r2
 8016eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8016eba:	693b      	ldr	r3, [r7, #16]
 8016ebc:	015a      	lsls	r2, r3, #5
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	4413      	add	r3, r2
 8016ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ec6:	461a      	mov	r2, r3
 8016ec8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8016ecc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016ece:	693b      	ldr	r3, [r7, #16]
 8016ed0:	3301      	adds	r3, #1
 8016ed2:	613b      	str	r3, [r7, #16]
 8016ed4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016ed8:	461a      	mov	r2, r3
 8016eda:	693b      	ldr	r3, [r7, #16]
 8016edc:	4293      	cmp	r3, r2
 8016ede:	d3b5      	bcc.n	8016e4c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	613b      	str	r3, [r7, #16]
 8016ee4:	e043      	b.n	8016f6e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016ee6:	693b      	ldr	r3, [r7, #16]
 8016ee8:	015a      	lsls	r2, r3, #5
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	4413      	add	r3, r2
 8016eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016efc:	d118      	bne.n	8016f30 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8016efe:	693b      	ldr	r3, [r7, #16]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d10a      	bne.n	8016f1a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8016f04:	693b      	ldr	r3, [r7, #16]
 8016f06:	015a      	lsls	r2, r3, #5
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	4413      	add	r3, r2
 8016f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016f10:	461a      	mov	r2, r3
 8016f12:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8016f16:	6013      	str	r3, [r2, #0]
 8016f18:	e013      	b.n	8016f42 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8016f1a:	693b      	ldr	r3, [r7, #16]
 8016f1c:	015a      	lsls	r2, r3, #5
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	4413      	add	r3, r2
 8016f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016f26:	461a      	mov	r2, r3
 8016f28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8016f2c:	6013      	str	r3, [r2, #0]
 8016f2e:	e008      	b.n	8016f42 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8016f30:	693b      	ldr	r3, [r7, #16]
 8016f32:	015a      	lsls	r2, r3, #5
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	4413      	add	r3, r2
 8016f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016f3c:	461a      	mov	r2, r3
 8016f3e:	2300      	movs	r3, #0
 8016f40:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8016f42:	693b      	ldr	r3, [r7, #16]
 8016f44:	015a      	lsls	r2, r3, #5
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	4413      	add	r3, r2
 8016f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016f4e:	461a      	mov	r2, r3
 8016f50:	2300      	movs	r3, #0
 8016f52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8016f54:	693b      	ldr	r3, [r7, #16]
 8016f56:	015a      	lsls	r2, r3, #5
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	4413      	add	r3, r2
 8016f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016f60:	461a      	mov	r2, r3
 8016f62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8016f66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016f68:	693b      	ldr	r3, [r7, #16]
 8016f6a:	3301      	adds	r3, #1
 8016f6c:	613b      	str	r3, [r7, #16]
 8016f6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016f72:	461a      	mov	r2, r3
 8016f74:	693b      	ldr	r3, [r7, #16]
 8016f76:	4293      	cmp	r3, r2
 8016f78:	d3b5      	bcc.n	8016ee6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016f80:	691b      	ldr	r3, [r3, #16]
 8016f82:	68fa      	ldr	r2, [r7, #12]
 8016f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016f8c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	2200      	movs	r2, #0
 8016f92:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8016f9a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8016f9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d105      	bne.n	8016fb0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	699b      	ldr	r3, [r3, #24]
 8016fa8:	f043 0210 	orr.w	r2, r3, #16
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	699a      	ldr	r2, [r3, #24]
 8016fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8016ff4 <USB_DevInit+0x2b4>)
 8016fb6:	4313      	orrs	r3, r2
 8016fb8:	687a      	ldr	r2, [r7, #4]
 8016fba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8016fbc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d005      	beq.n	8016fd0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	699b      	ldr	r3, [r3, #24]
 8016fc8:	f043 0208 	orr.w	r2, r3, #8
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8016fd0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8016fd4:	2b01      	cmp	r3, #1
 8016fd6:	d105      	bne.n	8016fe4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	699a      	ldr	r2, [r3, #24]
 8016fdc:	4b06      	ldr	r3, [pc, #24]	@ (8016ff8 <USB_DevInit+0x2b8>)
 8016fde:	4313      	orrs	r3, r2
 8016fe0:	687a      	ldr	r2, [r7, #4]
 8016fe2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8016fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	3718      	adds	r7, #24
 8016fea:	46bd      	mov	sp, r7
 8016fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016ff0:	b004      	add	sp, #16
 8016ff2:	4770      	bx	lr
 8016ff4:	803c3800 	.word	0x803c3800
 8016ff8:	40000004 	.word	0x40000004

08016ffc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b085      	sub	sp, #20
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
 8017004:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8017006:	2300      	movs	r3, #0
 8017008:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	3301      	adds	r3, #1
 801700e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8017016:	d901      	bls.n	801701c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8017018:	2303      	movs	r3, #3
 801701a:	e01b      	b.n	8017054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	691b      	ldr	r3, [r3, #16]
 8017020:	2b00      	cmp	r3, #0
 8017022:	daf2      	bge.n	801700a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8017024:	2300      	movs	r3, #0
 8017026:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8017028:	683b      	ldr	r3, [r7, #0]
 801702a:	019b      	lsls	r3, r3, #6
 801702c:	f043 0220 	orr.w	r2, r3, #32
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	3301      	adds	r3, #1
 8017038:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8017040:	d901      	bls.n	8017046 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8017042:	2303      	movs	r3, #3
 8017044:	e006      	b.n	8017054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	691b      	ldr	r3, [r3, #16]
 801704a:	f003 0320 	and.w	r3, r3, #32
 801704e:	2b20      	cmp	r3, #32
 8017050:	d0f0      	beq.n	8017034 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8017052:	2300      	movs	r3, #0
}
 8017054:	4618      	mov	r0, r3
 8017056:	3714      	adds	r7, #20
 8017058:	46bd      	mov	sp, r7
 801705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705e:	4770      	bx	lr

08017060 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8017060:	b480      	push	{r7}
 8017062:	b085      	sub	sp, #20
 8017064:	af00      	add	r7, sp, #0
 8017066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8017068:	2300      	movs	r3, #0
 801706a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	3301      	adds	r3, #1
 8017070:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8017078:	d901      	bls.n	801707e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801707a:	2303      	movs	r3, #3
 801707c:	e018      	b.n	80170b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	691b      	ldr	r3, [r3, #16]
 8017082:	2b00      	cmp	r3, #0
 8017084:	daf2      	bge.n	801706c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8017086:	2300      	movs	r3, #0
 8017088:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	2210      	movs	r2, #16
 801708e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	3301      	adds	r3, #1
 8017094:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801709c:	d901      	bls.n	80170a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801709e:	2303      	movs	r3, #3
 80170a0:	e006      	b.n	80170b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	691b      	ldr	r3, [r3, #16]
 80170a6:	f003 0310 	and.w	r3, r3, #16
 80170aa:	2b10      	cmp	r3, #16
 80170ac:	d0f0      	beq.n	8017090 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80170ae:	2300      	movs	r3, #0
}
 80170b0:	4618      	mov	r0, r3
 80170b2:	3714      	adds	r7, #20
 80170b4:	46bd      	mov	sp, r7
 80170b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ba:	4770      	bx	lr

080170bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80170bc:	b480      	push	{r7}
 80170be:	b085      	sub	sp, #20
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	6078      	str	r0, [r7, #4]
 80170c4:	460b      	mov	r3, r1
 80170c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80170d2:	681a      	ldr	r2, [r3, #0]
 80170d4:	78fb      	ldrb	r3, [r7, #3]
 80170d6:	68f9      	ldr	r1, [r7, #12]
 80170d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80170dc:	4313      	orrs	r3, r2
 80170de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80170e0:	2300      	movs	r3, #0
}
 80170e2:	4618      	mov	r0, r3
 80170e4:	3714      	adds	r7, #20
 80170e6:	46bd      	mov	sp, r7
 80170e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ec:	4770      	bx	lr

080170ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80170ee:	b480      	push	{r7}
 80170f0:	b087      	sub	sp, #28
 80170f2:	af00      	add	r7, sp, #0
 80170f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80170fa:	693b      	ldr	r3, [r7, #16]
 80170fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017100:	689b      	ldr	r3, [r3, #8]
 8017102:	f003 0306 	and.w	r3, r3, #6
 8017106:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d102      	bne.n	8017114 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801710e:	2300      	movs	r3, #0
 8017110:	75fb      	strb	r3, [r7, #23]
 8017112:	e00a      	b.n	801712a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	2b02      	cmp	r3, #2
 8017118:	d002      	beq.n	8017120 <USB_GetDevSpeed+0x32>
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	2b06      	cmp	r3, #6
 801711e:	d102      	bne.n	8017126 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8017120:	2302      	movs	r3, #2
 8017122:	75fb      	strb	r3, [r7, #23]
 8017124:	e001      	b.n	801712a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8017126:	230f      	movs	r3, #15
 8017128:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801712a:	7dfb      	ldrb	r3, [r7, #23]
}
 801712c:	4618      	mov	r0, r3
 801712e:	371c      	adds	r7, #28
 8017130:	46bd      	mov	sp, r7
 8017132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017136:	4770      	bx	lr

08017138 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8017138:	b480      	push	{r7}
 801713a:	b085      	sub	sp, #20
 801713c:	af00      	add	r7, sp, #0
 801713e:	6078      	str	r0, [r7, #4]
 8017140:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8017146:	683b      	ldr	r3, [r7, #0]
 8017148:	781b      	ldrb	r3, [r3, #0]
 801714a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801714c:	683b      	ldr	r3, [r7, #0]
 801714e:	785b      	ldrb	r3, [r3, #1]
 8017150:	2b01      	cmp	r3, #1
 8017152:	d139      	bne.n	80171c8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801715a:	69da      	ldr	r2, [r3, #28]
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	781b      	ldrb	r3, [r3, #0]
 8017160:	f003 030f 	and.w	r3, r3, #15
 8017164:	2101      	movs	r1, #1
 8017166:	fa01 f303 	lsl.w	r3, r1, r3
 801716a:	b29b      	uxth	r3, r3
 801716c:	68f9      	ldr	r1, [r7, #12]
 801716e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8017172:	4313      	orrs	r3, r2
 8017174:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8017176:	68bb      	ldr	r3, [r7, #8]
 8017178:	015a      	lsls	r2, r3, #5
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	4413      	add	r3, r2
 801717e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017188:	2b00      	cmp	r3, #0
 801718a:	d153      	bne.n	8017234 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801718c:	68bb      	ldr	r3, [r7, #8]
 801718e:	015a      	lsls	r2, r3, #5
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	4413      	add	r3, r2
 8017194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017198:	681a      	ldr	r2, [r3, #0]
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	689b      	ldr	r3, [r3, #8]
 801719e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	791b      	ldrb	r3, [r3, #4]
 80171a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80171a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80171aa:	68bb      	ldr	r3, [r7, #8]
 80171ac:	059b      	lsls	r3, r3, #22
 80171ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80171b0:	431a      	orrs	r2, r3
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	0159      	lsls	r1, r3, #5
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	440b      	add	r3, r1
 80171ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80171be:	4619      	mov	r1, r3
 80171c0:	4b20      	ldr	r3, [pc, #128]	@ (8017244 <USB_ActivateEndpoint+0x10c>)
 80171c2:	4313      	orrs	r3, r2
 80171c4:	600b      	str	r3, [r1, #0]
 80171c6:	e035      	b.n	8017234 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80171ce:	69da      	ldr	r2, [r3, #28]
 80171d0:	683b      	ldr	r3, [r7, #0]
 80171d2:	781b      	ldrb	r3, [r3, #0]
 80171d4:	f003 030f 	and.w	r3, r3, #15
 80171d8:	2101      	movs	r1, #1
 80171da:	fa01 f303 	lsl.w	r3, r1, r3
 80171de:	041b      	lsls	r3, r3, #16
 80171e0:	68f9      	ldr	r1, [r7, #12]
 80171e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80171e6:	4313      	orrs	r3, r2
 80171e8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80171ea:	68bb      	ldr	r3, [r7, #8]
 80171ec:	015a      	lsls	r2, r3, #5
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	4413      	add	r3, r2
 80171f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d119      	bne.n	8017234 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	015a      	lsls	r2, r3, #5
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	4413      	add	r3, r2
 8017208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801720c:	681a      	ldr	r2, [r3, #0]
 801720e:	683b      	ldr	r3, [r7, #0]
 8017210:	689b      	ldr	r3, [r3, #8]
 8017212:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8017216:	683b      	ldr	r3, [r7, #0]
 8017218:	791b      	ldrb	r3, [r3, #4]
 801721a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801721c:	430b      	orrs	r3, r1
 801721e:	431a      	orrs	r2, r3
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	0159      	lsls	r1, r3, #5
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	440b      	add	r3, r1
 8017228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801722c:	4619      	mov	r1, r3
 801722e:	4b05      	ldr	r3, [pc, #20]	@ (8017244 <USB_ActivateEndpoint+0x10c>)
 8017230:	4313      	orrs	r3, r2
 8017232:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8017234:	2300      	movs	r3, #0
}
 8017236:	4618      	mov	r0, r3
 8017238:	3714      	adds	r7, #20
 801723a:	46bd      	mov	sp, r7
 801723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017240:	4770      	bx	lr
 8017242:	bf00      	nop
 8017244:	10008000 	.word	0x10008000

08017248 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8017248:	b480      	push	{r7}
 801724a:	b085      	sub	sp, #20
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
 8017250:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8017256:	683b      	ldr	r3, [r7, #0]
 8017258:	781b      	ldrb	r3, [r3, #0]
 801725a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801725c:	683b      	ldr	r3, [r7, #0]
 801725e:	785b      	ldrb	r3, [r3, #1]
 8017260:	2b01      	cmp	r3, #1
 8017262:	d161      	bne.n	8017328 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8017264:	68bb      	ldr	r3, [r7, #8]
 8017266:	015a      	lsls	r2, r3, #5
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	4413      	add	r3, r2
 801726c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8017276:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801727a:	d11f      	bne.n	80172bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801727c:	68bb      	ldr	r3, [r7, #8]
 801727e:	015a      	lsls	r2, r3, #5
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	4413      	add	r3, r2
 8017284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	68ba      	ldr	r2, [r7, #8]
 801728c:	0151      	lsls	r1, r2, #5
 801728e:	68fa      	ldr	r2, [r7, #12]
 8017290:	440a      	add	r2, r1
 8017292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017296:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801729a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801729c:	68bb      	ldr	r3, [r7, #8]
 801729e:	015a      	lsls	r2, r3, #5
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	4413      	add	r3, r2
 80172a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	68ba      	ldr	r2, [r7, #8]
 80172ac:	0151      	lsls	r1, r2, #5
 80172ae:	68fa      	ldr	r2, [r7, #12]
 80172b0:	440a      	add	r2, r1
 80172b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80172b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80172ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80172c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	781b      	ldrb	r3, [r3, #0]
 80172c8:	f003 030f 	and.w	r3, r3, #15
 80172cc:	2101      	movs	r1, #1
 80172ce:	fa01 f303 	lsl.w	r3, r1, r3
 80172d2:	b29b      	uxth	r3, r3
 80172d4:	43db      	mvns	r3, r3
 80172d6:	68f9      	ldr	r1, [r7, #12]
 80172d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80172dc:	4013      	ands	r3, r2
 80172de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80172e6:	69da      	ldr	r2, [r3, #28]
 80172e8:	683b      	ldr	r3, [r7, #0]
 80172ea:	781b      	ldrb	r3, [r3, #0]
 80172ec:	f003 030f 	and.w	r3, r3, #15
 80172f0:	2101      	movs	r1, #1
 80172f2:	fa01 f303 	lsl.w	r3, r1, r3
 80172f6:	b29b      	uxth	r3, r3
 80172f8:	43db      	mvns	r3, r3
 80172fa:	68f9      	ldr	r1, [r7, #12]
 80172fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8017300:	4013      	ands	r3, r2
 8017302:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8017304:	68bb      	ldr	r3, [r7, #8]
 8017306:	015a      	lsls	r2, r3, #5
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	4413      	add	r3, r2
 801730c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017310:	681a      	ldr	r2, [r3, #0]
 8017312:	68bb      	ldr	r3, [r7, #8]
 8017314:	0159      	lsls	r1, r3, #5
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	440b      	add	r3, r1
 801731a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801731e:	4619      	mov	r1, r3
 8017320:	4b35      	ldr	r3, [pc, #212]	@ (80173f8 <USB_DeactivateEndpoint+0x1b0>)
 8017322:	4013      	ands	r3, r2
 8017324:	600b      	str	r3, [r1, #0]
 8017326:	e060      	b.n	80173ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017328:	68bb      	ldr	r3, [r7, #8]
 801732a:	015a      	lsls	r2, r3, #5
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	4413      	add	r3, r2
 8017330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801733a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801733e:	d11f      	bne.n	8017380 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8017340:	68bb      	ldr	r3, [r7, #8]
 8017342:	015a      	lsls	r2, r3, #5
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	4413      	add	r3, r2
 8017348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	68ba      	ldr	r2, [r7, #8]
 8017350:	0151      	lsls	r1, r2, #5
 8017352:	68fa      	ldr	r2, [r7, #12]
 8017354:	440a      	add	r2, r1
 8017356:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801735a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801735e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8017360:	68bb      	ldr	r3, [r7, #8]
 8017362:	015a      	lsls	r2, r3, #5
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	4413      	add	r3, r2
 8017368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	68ba      	ldr	r2, [r7, #8]
 8017370:	0151      	lsls	r1, r2, #5
 8017372:	68fa      	ldr	r2, [r7, #12]
 8017374:	440a      	add	r2, r1
 8017376:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801737a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801737e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017386:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	f003 030f 	and.w	r3, r3, #15
 8017390:	2101      	movs	r1, #1
 8017392:	fa01 f303 	lsl.w	r3, r1, r3
 8017396:	041b      	lsls	r3, r3, #16
 8017398:	43db      	mvns	r3, r3
 801739a:	68f9      	ldr	r1, [r7, #12]
 801739c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80173a0:	4013      	ands	r3, r2
 80173a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80173aa:	69da      	ldr	r2, [r3, #28]
 80173ac:	683b      	ldr	r3, [r7, #0]
 80173ae:	781b      	ldrb	r3, [r3, #0]
 80173b0:	f003 030f 	and.w	r3, r3, #15
 80173b4:	2101      	movs	r1, #1
 80173b6:	fa01 f303 	lsl.w	r3, r1, r3
 80173ba:	041b      	lsls	r3, r3, #16
 80173bc:	43db      	mvns	r3, r3
 80173be:	68f9      	ldr	r1, [r7, #12]
 80173c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80173c4:	4013      	ands	r3, r2
 80173c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80173c8:	68bb      	ldr	r3, [r7, #8]
 80173ca:	015a      	lsls	r2, r3, #5
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	4413      	add	r3, r2
 80173d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80173d4:	681a      	ldr	r2, [r3, #0]
 80173d6:	68bb      	ldr	r3, [r7, #8]
 80173d8:	0159      	lsls	r1, r3, #5
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	440b      	add	r3, r1
 80173de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80173e2:	4619      	mov	r1, r3
 80173e4:	4b05      	ldr	r3, [pc, #20]	@ (80173fc <USB_DeactivateEndpoint+0x1b4>)
 80173e6:	4013      	ands	r3, r2
 80173e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80173ea:	2300      	movs	r3, #0
}
 80173ec:	4618      	mov	r0, r3
 80173ee:	3714      	adds	r7, #20
 80173f0:	46bd      	mov	sp, r7
 80173f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f6:	4770      	bx	lr
 80173f8:	ec337800 	.word	0xec337800
 80173fc:	eff37800 	.word	0xeff37800

08017400 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b08a      	sub	sp, #40	@ 0x28
 8017404:	af02      	add	r7, sp, #8
 8017406:	60f8      	str	r0, [r7, #12]
 8017408:	60b9      	str	r1, [r7, #8]
 801740a:	4613      	mov	r3, r2
 801740c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8017412:	68bb      	ldr	r3, [r7, #8]
 8017414:	781b      	ldrb	r3, [r3, #0]
 8017416:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8017418:	68bb      	ldr	r3, [r7, #8]
 801741a:	785b      	ldrb	r3, [r3, #1]
 801741c:	2b01      	cmp	r3, #1
 801741e:	f040 8185 	bne.w	801772c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8017422:	68bb      	ldr	r3, [r7, #8]
 8017424:	691b      	ldr	r3, [r3, #16]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d132      	bne.n	8017490 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801742a:	69bb      	ldr	r3, [r7, #24]
 801742c:	015a      	lsls	r2, r3, #5
 801742e:	69fb      	ldr	r3, [r7, #28]
 8017430:	4413      	add	r3, r2
 8017432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017436:	691a      	ldr	r2, [r3, #16]
 8017438:	69bb      	ldr	r3, [r7, #24]
 801743a:	0159      	lsls	r1, r3, #5
 801743c:	69fb      	ldr	r3, [r7, #28]
 801743e:	440b      	add	r3, r1
 8017440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017444:	4619      	mov	r1, r3
 8017446:	4ba7      	ldr	r3, [pc, #668]	@ (80176e4 <USB_EPStartXfer+0x2e4>)
 8017448:	4013      	ands	r3, r2
 801744a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801744c:	69bb      	ldr	r3, [r7, #24]
 801744e:	015a      	lsls	r2, r3, #5
 8017450:	69fb      	ldr	r3, [r7, #28]
 8017452:	4413      	add	r3, r2
 8017454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017458:	691b      	ldr	r3, [r3, #16]
 801745a:	69ba      	ldr	r2, [r7, #24]
 801745c:	0151      	lsls	r1, r2, #5
 801745e:	69fa      	ldr	r2, [r7, #28]
 8017460:	440a      	add	r2, r1
 8017462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017466:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801746a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801746c:	69bb      	ldr	r3, [r7, #24]
 801746e:	015a      	lsls	r2, r3, #5
 8017470:	69fb      	ldr	r3, [r7, #28]
 8017472:	4413      	add	r3, r2
 8017474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017478:	691a      	ldr	r2, [r3, #16]
 801747a:	69bb      	ldr	r3, [r7, #24]
 801747c:	0159      	lsls	r1, r3, #5
 801747e:	69fb      	ldr	r3, [r7, #28]
 8017480:	440b      	add	r3, r1
 8017482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017486:	4619      	mov	r1, r3
 8017488:	4b97      	ldr	r3, [pc, #604]	@ (80176e8 <USB_EPStartXfer+0x2e8>)
 801748a:	4013      	ands	r3, r2
 801748c:	610b      	str	r3, [r1, #16]
 801748e:	e097      	b.n	80175c0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8017490:	69bb      	ldr	r3, [r7, #24]
 8017492:	015a      	lsls	r2, r3, #5
 8017494:	69fb      	ldr	r3, [r7, #28]
 8017496:	4413      	add	r3, r2
 8017498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801749c:	691a      	ldr	r2, [r3, #16]
 801749e:	69bb      	ldr	r3, [r7, #24]
 80174a0:	0159      	lsls	r1, r3, #5
 80174a2:	69fb      	ldr	r3, [r7, #28]
 80174a4:	440b      	add	r3, r1
 80174a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80174aa:	4619      	mov	r1, r3
 80174ac:	4b8e      	ldr	r3, [pc, #568]	@ (80176e8 <USB_EPStartXfer+0x2e8>)
 80174ae:	4013      	ands	r3, r2
 80174b0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80174b2:	69bb      	ldr	r3, [r7, #24]
 80174b4:	015a      	lsls	r2, r3, #5
 80174b6:	69fb      	ldr	r3, [r7, #28]
 80174b8:	4413      	add	r3, r2
 80174ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80174be:	691a      	ldr	r2, [r3, #16]
 80174c0:	69bb      	ldr	r3, [r7, #24]
 80174c2:	0159      	lsls	r1, r3, #5
 80174c4:	69fb      	ldr	r3, [r7, #28]
 80174c6:	440b      	add	r3, r1
 80174c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80174cc:	4619      	mov	r1, r3
 80174ce:	4b85      	ldr	r3, [pc, #532]	@ (80176e4 <USB_EPStartXfer+0x2e4>)
 80174d0:	4013      	ands	r3, r2
 80174d2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80174d4:	69bb      	ldr	r3, [r7, #24]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d11a      	bne.n	8017510 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80174da:	68bb      	ldr	r3, [r7, #8]
 80174dc:	691a      	ldr	r2, [r3, #16]
 80174de:	68bb      	ldr	r3, [r7, #8]
 80174e0:	689b      	ldr	r3, [r3, #8]
 80174e2:	429a      	cmp	r2, r3
 80174e4:	d903      	bls.n	80174ee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80174e6:	68bb      	ldr	r3, [r7, #8]
 80174e8:	689a      	ldr	r2, [r3, #8]
 80174ea:	68bb      	ldr	r3, [r7, #8]
 80174ec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80174ee:	69bb      	ldr	r3, [r7, #24]
 80174f0:	015a      	lsls	r2, r3, #5
 80174f2:	69fb      	ldr	r3, [r7, #28]
 80174f4:	4413      	add	r3, r2
 80174f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80174fa:	691b      	ldr	r3, [r3, #16]
 80174fc:	69ba      	ldr	r2, [r7, #24]
 80174fe:	0151      	lsls	r1, r2, #5
 8017500:	69fa      	ldr	r2, [r7, #28]
 8017502:	440a      	add	r2, r1
 8017504:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017508:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801750c:	6113      	str	r3, [r2, #16]
 801750e:	e044      	b.n	801759a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8017510:	68bb      	ldr	r3, [r7, #8]
 8017512:	691a      	ldr	r2, [r3, #16]
 8017514:	68bb      	ldr	r3, [r7, #8]
 8017516:	689b      	ldr	r3, [r3, #8]
 8017518:	4413      	add	r3, r2
 801751a:	1e5a      	subs	r2, r3, #1
 801751c:	68bb      	ldr	r3, [r7, #8]
 801751e:	689b      	ldr	r3, [r3, #8]
 8017520:	fbb2 f3f3 	udiv	r3, r2, r3
 8017524:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8017526:	69bb      	ldr	r3, [r7, #24]
 8017528:	015a      	lsls	r2, r3, #5
 801752a:	69fb      	ldr	r3, [r7, #28]
 801752c:	4413      	add	r3, r2
 801752e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017532:	691a      	ldr	r2, [r3, #16]
 8017534:	8afb      	ldrh	r3, [r7, #22]
 8017536:	04d9      	lsls	r1, r3, #19
 8017538:	4b6c      	ldr	r3, [pc, #432]	@ (80176ec <USB_EPStartXfer+0x2ec>)
 801753a:	400b      	ands	r3, r1
 801753c:	69b9      	ldr	r1, [r7, #24]
 801753e:	0148      	lsls	r0, r1, #5
 8017540:	69f9      	ldr	r1, [r7, #28]
 8017542:	4401      	add	r1, r0
 8017544:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8017548:	4313      	orrs	r3, r2
 801754a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 801754c:	68bb      	ldr	r3, [r7, #8]
 801754e:	791b      	ldrb	r3, [r3, #4]
 8017550:	2b01      	cmp	r3, #1
 8017552:	d122      	bne.n	801759a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8017554:	69bb      	ldr	r3, [r7, #24]
 8017556:	015a      	lsls	r2, r3, #5
 8017558:	69fb      	ldr	r3, [r7, #28]
 801755a:	4413      	add	r3, r2
 801755c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017560:	691b      	ldr	r3, [r3, #16]
 8017562:	69ba      	ldr	r2, [r7, #24]
 8017564:	0151      	lsls	r1, r2, #5
 8017566:	69fa      	ldr	r2, [r7, #28]
 8017568:	440a      	add	r2, r1
 801756a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801756e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8017572:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8017574:	69bb      	ldr	r3, [r7, #24]
 8017576:	015a      	lsls	r2, r3, #5
 8017578:	69fb      	ldr	r3, [r7, #28]
 801757a:	4413      	add	r3, r2
 801757c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017580:	691a      	ldr	r2, [r3, #16]
 8017582:	8afb      	ldrh	r3, [r7, #22]
 8017584:	075b      	lsls	r3, r3, #29
 8017586:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 801758a:	69b9      	ldr	r1, [r7, #24]
 801758c:	0148      	lsls	r0, r1, #5
 801758e:	69f9      	ldr	r1, [r7, #28]
 8017590:	4401      	add	r1, r0
 8017592:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8017596:	4313      	orrs	r3, r2
 8017598:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801759a:	69bb      	ldr	r3, [r7, #24]
 801759c:	015a      	lsls	r2, r3, #5
 801759e:	69fb      	ldr	r3, [r7, #28]
 80175a0:	4413      	add	r3, r2
 80175a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80175a6:	691a      	ldr	r2, [r3, #16]
 80175a8:	68bb      	ldr	r3, [r7, #8]
 80175aa:	691b      	ldr	r3, [r3, #16]
 80175ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80175b0:	69b9      	ldr	r1, [r7, #24]
 80175b2:	0148      	lsls	r0, r1, #5
 80175b4:	69f9      	ldr	r1, [r7, #28]
 80175b6:	4401      	add	r1, r0
 80175b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80175bc:	4313      	orrs	r3, r2
 80175be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80175c0:	79fb      	ldrb	r3, [r7, #7]
 80175c2:	2b01      	cmp	r3, #1
 80175c4:	d14b      	bne.n	801765e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80175c6:	68bb      	ldr	r3, [r7, #8]
 80175c8:	69db      	ldr	r3, [r3, #28]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d009      	beq.n	80175e2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80175ce:	69bb      	ldr	r3, [r7, #24]
 80175d0:	015a      	lsls	r2, r3, #5
 80175d2:	69fb      	ldr	r3, [r7, #28]
 80175d4:	4413      	add	r3, r2
 80175d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80175da:	461a      	mov	r2, r3
 80175dc:	68bb      	ldr	r3, [r7, #8]
 80175de:	69db      	ldr	r3, [r3, #28]
 80175e0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80175e2:	68bb      	ldr	r3, [r7, #8]
 80175e4:	791b      	ldrb	r3, [r3, #4]
 80175e6:	2b01      	cmp	r3, #1
 80175e8:	d128      	bne.n	801763c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80175ea:	69fb      	ldr	r3, [r7, #28]
 80175ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80175f0:	689b      	ldr	r3, [r3, #8]
 80175f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d110      	bne.n	801761c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80175fa:	69bb      	ldr	r3, [r7, #24]
 80175fc:	015a      	lsls	r2, r3, #5
 80175fe:	69fb      	ldr	r3, [r7, #28]
 8017600:	4413      	add	r3, r2
 8017602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	69ba      	ldr	r2, [r7, #24]
 801760a:	0151      	lsls	r1, r2, #5
 801760c:	69fa      	ldr	r2, [r7, #28]
 801760e:	440a      	add	r2, r1
 8017610:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017614:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8017618:	6013      	str	r3, [r2, #0]
 801761a:	e00f      	b.n	801763c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801761c:	69bb      	ldr	r3, [r7, #24]
 801761e:	015a      	lsls	r2, r3, #5
 8017620:	69fb      	ldr	r3, [r7, #28]
 8017622:	4413      	add	r3, r2
 8017624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	69ba      	ldr	r2, [r7, #24]
 801762c:	0151      	lsls	r1, r2, #5
 801762e:	69fa      	ldr	r2, [r7, #28]
 8017630:	440a      	add	r2, r1
 8017632:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801763a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801763c:	69bb      	ldr	r3, [r7, #24]
 801763e:	015a      	lsls	r2, r3, #5
 8017640:	69fb      	ldr	r3, [r7, #28]
 8017642:	4413      	add	r3, r2
 8017644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	69ba      	ldr	r2, [r7, #24]
 801764c:	0151      	lsls	r1, r2, #5
 801764e:	69fa      	ldr	r2, [r7, #28]
 8017650:	440a      	add	r2, r1
 8017652:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017656:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801765a:	6013      	str	r3, [r2, #0]
 801765c:	e169      	b.n	8017932 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801765e:	69bb      	ldr	r3, [r7, #24]
 8017660:	015a      	lsls	r2, r3, #5
 8017662:	69fb      	ldr	r3, [r7, #28]
 8017664:	4413      	add	r3, r2
 8017666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	69ba      	ldr	r2, [r7, #24]
 801766e:	0151      	lsls	r1, r2, #5
 8017670:	69fa      	ldr	r2, [r7, #28]
 8017672:	440a      	add	r2, r1
 8017674:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017678:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801767c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801767e:	68bb      	ldr	r3, [r7, #8]
 8017680:	791b      	ldrb	r3, [r3, #4]
 8017682:	2b01      	cmp	r3, #1
 8017684:	d015      	beq.n	80176b2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8017686:	68bb      	ldr	r3, [r7, #8]
 8017688:	691b      	ldr	r3, [r3, #16]
 801768a:	2b00      	cmp	r3, #0
 801768c:	f000 8151 	beq.w	8017932 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8017690:	69fb      	ldr	r3, [r7, #28]
 8017692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017698:	68bb      	ldr	r3, [r7, #8]
 801769a:	781b      	ldrb	r3, [r3, #0]
 801769c:	f003 030f 	and.w	r3, r3, #15
 80176a0:	2101      	movs	r1, #1
 80176a2:	fa01 f303 	lsl.w	r3, r1, r3
 80176a6:	69f9      	ldr	r1, [r7, #28]
 80176a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80176ac:	4313      	orrs	r3, r2
 80176ae:	634b      	str	r3, [r1, #52]	@ 0x34
 80176b0:	e13f      	b.n	8017932 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80176b2:	69fb      	ldr	r3, [r7, #28]
 80176b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80176b8:	689b      	ldr	r3, [r3, #8]
 80176ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d116      	bne.n	80176f0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80176c2:	69bb      	ldr	r3, [r7, #24]
 80176c4:	015a      	lsls	r2, r3, #5
 80176c6:	69fb      	ldr	r3, [r7, #28]
 80176c8:	4413      	add	r3, r2
 80176ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	69ba      	ldr	r2, [r7, #24]
 80176d2:	0151      	lsls	r1, r2, #5
 80176d4:	69fa      	ldr	r2, [r7, #28]
 80176d6:	440a      	add	r2, r1
 80176d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80176dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80176e0:	6013      	str	r3, [r2, #0]
 80176e2:	e015      	b.n	8017710 <USB_EPStartXfer+0x310>
 80176e4:	e007ffff 	.word	0xe007ffff
 80176e8:	fff80000 	.word	0xfff80000
 80176ec:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80176f0:	69bb      	ldr	r3, [r7, #24]
 80176f2:	015a      	lsls	r2, r3, #5
 80176f4:	69fb      	ldr	r3, [r7, #28]
 80176f6:	4413      	add	r3, r2
 80176f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	69ba      	ldr	r2, [r7, #24]
 8017700:	0151      	lsls	r1, r2, #5
 8017702:	69fa      	ldr	r2, [r7, #28]
 8017704:	440a      	add	r2, r1
 8017706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801770a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801770e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8017710:	68bb      	ldr	r3, [r7, #8]
 8017712:	68d9      	ldr	r1, [r3, #12]
 8017714:	68bb      	ldr	r3, [r7, #8]
 8017716:	781a      	ldrb	r2, [r3, #0]
 8017718:	68bb      	ldr	r3, [r7, #8]
 801771a:	691b      	ldr	r3, [r3, #16]
 801771c:	b298      	uxth	r0, r3
 801771e:	79fb      	ldrb	r3, [r7, #7]
 8017720:	9300      	str	r3, [sp, #0]
 8017722:	4603      	mov	r3, r0
 8017724:	68f8      	ldr	r0, [r7, #12]
 8017726:	f000 f9b9 	bl	8017a9c <USB_WritePacket>
 801772a:	e102      	b.n	8017932 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801772c:	69bb      	ldr	r3, [r7, #24]
 801772e:	015a      	lsls	r2, r3, #5
 8017730:	69fb      	ldr	r3, [r7, #28]
 8017732:	4413      	add	r3, r2
 8017734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017738:	691a      	ldr	r2, [r3, #16]
 801773a:	69bb      	ldr	r3, [r7, #24]
 801773c:	0159      	lsls	r1, r3, #5
 801773e:	69fb      	ldr	r3, [r7, #28]
 8017740:	440b      	add	r3, r1
 8017742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017746:	4619      	mov	r1, r3
 8017748:	4b7c      	ldr	r3, [pc, #496]	@ (801793c <USB_EPStartXfer+0x53c>)
 801774a:	4013      	ands	r3, r2
 801774c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801774e:	69bb      	ldr	r3, [r7, #24]
 8017750:	015a      	lsls	r2, r3, #5
 8017752:	69fb      	ldr	r3, [r7, #28]
 8017754:	4413      	add	r3, r2
 8017756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801775a:	691a      	ldr	r2, [r3, #16]
 801775c:	69bb      	ldr	r3, [r7, #24]
 801775e:	0159      	lsls	r1, r3, #5
 8017760:	69fb      	ldr	r3, [r7, #28]
 8017762:	440b      	add	r3, r1
 8017764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017768:	4619      	mov	r1, r3
 801776a:	4b75      	ldr	r3, [pc, #468]	@ (8017940 <USB_EPStartXfer+0x540>)
 801776c:	4013      	ands	r3, r2
 801776e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8017770:	69bb      	ldr	r3, [r7, #24]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d12f      	bne.n	80177d6 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8017776:	68bb      	ldr	r3, [r7, #8]
 8017778:	691b      	ldr	r3, [r3, #16]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d003      	beq.n	8017786 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 801777e:	68bb      	ldr	r3, [r7, #8]
 8017780:	689a      	ldr	r2, [r3, #8]
 8017782:	68bb      	ldr	r3, [r7, #8]
 8017784:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8017786:	68bb      	ldr	r3, [r7, #8]
 8017788:	689a      	ldr	r2, [r3, #8]
 801778a:	68bb      	ldr	r3, [r7, #8]
 801778c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801778e:	69bb      	ldr	r3, [r7, #24]
 8017790:	015a      	lsls	r2, r3, #5
 8017792:	69fb      	ldr	r3, [r7, #28]
 8017794:	4413      	add	r3, r2
 8017796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801779a:	691a      	ldr	r2, [r3, #16]
 801779c:	68bb      	ldr	r3, [r7, #8]
 801779e:	6a1b      	ldr	r3, [r3, #32]
 80177a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80177a4:	69b9      	ldr	r1, [r7, #24]
 80177a6:	0148      	lsls	r0, r1, #5
 80177a8:	69f9      	ldr	r1, [r7, #28]
 80177aa:	4401      	add	r1, r0
 80177ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80177b0:	4313      	orrs	r3, r2
 80177b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80177b4:	69bb      	ldr	r3, [r7, #24]
 80177b6:	015a      	lsls	r2, r3, #5
 80177b8:	69fb      	ldr	r3, [r7, #28]
 80177ba:	4413      	add	r3, r2
 80177bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80177c0:	691b      	ldr	r3, [r3, #16]
 80177c2:	69ba      	ldr	r2, [r7, #24]
 80177c4:	0151      	lsls	r1, r2, #5
 80177c6:	69fa      	ldr	r2, [r7, #28]
 80177c8:	440a      	add	r2, r1
 80177ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80177ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80177d2:	6113      	str	r3, [r2, #16]
 80177d4:	e05f      	b.n	8017896 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80177d6:	68bb      	ldr	r3, [r7, #8]
 80177d8:	691b      	ldr	r3, [r3, #16]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d123      	bne.n	8017826 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80177de:	69bb      	ldr	r3, [r7, #24]
 80177e0:	015a      	lsls	r2, r3, #5
 80177e2:	69fb      	ldr	r3, [r7, #28]
 80177e4:	4413      	add	r3, r2
 80177e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80177ea:	691a      	ldr	r2, [r3, #16]
 80177ec:	68bb      	ldr	r3, [r7, #8]
 80177ee:	689b      	ldr	r3, [r3, #8]
 80177f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80177f4:	69b9      	ldr	r1, [r7, #24]
 80177f6:	0148      	lsls	r0, r1, #5
 80177f8:	69f9      	ldr	r1, [r7, #28]
 80177fa:	4401      	add	r1, r0
 80177fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8017800:	4313      	orrs	r3, r2
 8017802:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017804:	69bb      	ldr	r3, [r7, #24]
 8017806:	015a      	lsls	r2, r3, #5
 8017808:	69fb      	ldr	r3, [r7, #28]
 801780a:	4413      	add	r3, r2
 801780c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017810:	691b      	ldr	r3, [r3, #16]
 8017812:	69ba      	ldr	r2, [r7, #24]
 8017814:	0151      	lsls	r1, r2, #5
 8017816:	69fa      	ldr	r2, [r7, #28]
 8017818:	440a      	add	r2, r1
 801781a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801781e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8017822:	6113      	str	r3, [r2, #16]
 8017824:	e037      	b.n	8017896 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8017826:	68bb      	ldr	r3, [r7, #8]
 8017828:	691a      	ldr	r2, [r3, #16]
 801782a:	68bb      	ldr	r3, [r7, #8]
 801782c:	689b      	ldr	r3, [r3, #8]
 801782e:	4413      	add	r3, r2
 8017830:	1e5a      	subs	r2, r3, #1
 8017832:	68bb      	ldr	r3, [r7, #8]
 8017834:	689b      	ldr	r3, [r3, #8]
 8017836:	fbb2 f3f3 	udiv	r3, r2, r3
 801783a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801783c:	68bb      	ldr	r3, [r7, #8]
 801783e:	689b      	ldr	r3, [r3, #8]
 8017840:	8afa      	ldrh	r2, [r7, #22]
 8017842:	fb03 f202 	mul.w	r2, r3, r2
 8017846:	68bb      	ldr	r3, [r7, #8]
 8017848:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801784a:	69bb      	ldr	r3, [r7, #24]
 801784c:	015a      	lsls	r2, r3, #5
 801784e:	69fb      	ldr	r3, [r7, #28]
 8017850:	4413      	add	r3, r2
 8017852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017856:	691a      	ldr	r2, [r3, #16]
 8017858:	8afb      	ldrh	r3, [r7, #22]
 801785a:	04d9      	lsls	r1, r3, #19
 801785c:	4b39      	ldr	r3, [pc, #228]	@ (8017944 <USB_EPStartXfer+0x544>)
 801785e:	400b      	ands	r3, r1
 8017860:	69b9      	ldr	r1, [r7, #24]
 8017862:	0148      	lsls	r0, r1, #5
 8017864:	69f9      	ldr	r1, [r7, #28]
 8017866:	4401      	add	r1, r0
 8017868:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801786c:	4313      	orrs	r3, r2
 801786e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8017870:	69bb      	ldr	r3, [r7, #24]
 8017872:	015a      	lsls	r2, r3, #5
 8017874:	69fb      	ldr	r3, [r7, #28]
 8017876:	4413      	add	r3, r2
 8017878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801787c:	691a      	ldr	r2, [r3, #16]
 801787e:	68bb      	ldr	r3, [r7, #8]
 8017880:	6a1b      	ldr	r3, [r3, #32]
 8017882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017886:	69b9      	ldr	r1, [r7, #24]
 8017888:	0148      	lsls	r0, r1, #5
 801788a:	69f9      	ldr	r1, [r7, #28]
 801788c:	4401      	add	r1, r0
 801788e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8017892:	4313      	orrs	r3, r2
 8017894:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8017896:	79fb      	ldrb	r3, [r7, #7]
 8017898:	2b01      	cmp	r3, #1
 801789a:	d10d      	bne.n	80178b8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801789c:	68bb      	ldr	r3, [r7, #8]
 801789e:	68db      	ldr	r3, [r3, #12]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d009      	beq.n	80178b8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80178a4:	68bb      	ldr	r3, [r7, #8]
 80178a6:	68d9      	ldr	r1, [r3, #12]
 80178a8:	69bb      	ldr	r3, [r7, #24]
 80178aa:	015a      	lsls	r2, r3, #5
 80178ac:	69fb      	ldr	r3, [r7, #28]
 80178ae:	4413      	add	r3, r2
 80178b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80178b4:	460a      	mov	r2, r1
 80178b6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80178b8:	68bb      	ldr	r3, [r7, #8]
 80178ba:	791b      	ldrb	r3, [r3, #4]
 80178bc:	2b01      	cmp	r3, #1
 80178be:	d128      	bne.n	8017912 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80178c0:	69fb      	ldr	r3, [r7, #28]
 80178c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80178c6:	689b      	ldr	r3, [r3, #8]
 80178c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d110      	bne.n	80178f2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80178d0:	69bb      	ldr	r3, [r7, #24]
 80178d2:	015a      	lsls	r2, r3, #5
 80178d4:	69fb      	ldr	r3, [r7, #28]
 80178d6:	4413      	add	r3, r2
 80178d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	69ba      	ldr	r2, [r7, #24]
 80178e0:	0151      	lsls	r1, r2, #5
 80178e2:	69fa      	ldr	r2, [r7, #28]
 80178e4:	440a      	add	r2, r1
 80178e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80178ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80178ee:	6013      	str	r3, [r2, #0]
 80178f0:	e00f      	b.n	8017912 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80178f2:	69bb      	ldr	r3, [r7, #24]
 80178f4:	015a      	lsls	r2, r3, #5
 80178f6:	69fb      	ldr	r3, [r7, #28]
 80178f8:	4413      	add	r3, r2
 80178fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	69ba      	ldr	r2, [r7, #24]
 8017902:	0151      	lsls	r1, r2, #5
 8017904:	69fa      	ldr	r2, [r7, #28]
 8017906:	440a      	add	r2, r1
 8017908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801790c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017910:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8017912:	69bb      	ldr	r3, [r7, #24]
 8017914:	015a      	lsls	r2, r3, #5
 8017916:	69fb      	ldr	r3, [r7, #28]
 8017918:	4413      	add	r3, r2
 801791a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	69ba      	ldr	r2, [r7, #24]
 8017922:	0151      	lsls	r1, r2, #5
 8017924:	69fa      	ldr	r2, [r7, #28]
 8017926:	440a      	add	r2, r1
 8017928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801792c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8017930:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017932:	2300      	movs	r3, #0
}
 8017934:	4618      	mov	r0, r3
 8017936:	3720      	adds	r7, #32
 8017938:	46bd      	mov	sp, r7
 801793a:	bd80      	pop	{r7, pc}
 801793c:	fff80000 	.word	0xfff80000
 8017940:	e007ffff 	.word	0xe007ffff
 8017944:	1ff80000 	.word	0x1ff80000

08017948 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8017948:	b480      	push	{r7}
 801794a:	b087      	sub	sp, #28
 801794c:	af00      	add	r7, sp, #0
 801794e:	6078      	str	r0, [r7, #4]
 8017950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8017952:	2300      	movs	r3, #0
 8017954:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8017956:	2300      	movs	r3, #0
 8017958:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	785b      	ldrb	r3, [r3, #1]
 8017962:	2b01      	cmp	r3, #1
 8017964:	d14a      	bne.n	80179fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8017966:	683b      	ldr	r3, [r7, #0]
 8017968:	781b      	ldrb	r3, [r3, #0]
 801796a:	015a      	lsls	r2, r3, #5
 801796c:	693b      	ldr	r3, [r7, #16]
 801796e:	4413      	add	r3, r2
 8017970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801797a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801797e:	f040 8086 	bne.w	8017a8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8017982:	683b      	ldr	r3, [r7, #0]
 8017984:	781b      	ldrb	r3, [r3, #0]
 8017986:	015a      	lsls	r2, r3, #5
 8017988:	693b      	ldr	r3, [r7, #16]
 801798a:	4413      	add	r3, r2
 801798c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	683a      	ldr	r2, [r7, #0]
 8017994:	7812      	ldrb	r2, [r2, #0]
 8017996:	0151      	lsls	r1, r2, #5
 8017998:	693a      	ldr	r2, [r7, #16]
 801799a:	440a      	add	r2, r1
 801799c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80179a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80179a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80179a6:	683b      	ldr	r3, [r7, #0]
 80179a8:	781b      	ldrb	r3, [r3, #0]
 80179aa:	015a      	lsls	r2, r3, #5
 80179ac:	693b      	ldr	r3, [r7, #16]
 80179ae:	4413      	add	r3, r2
 80179b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	683a      	ldr	r2, [r7, #0]
 80179b8:	7812      	ldrb	r2, [r2, #0]
 80179ba:	0151      	lsls	r1, r2, #5
 80179bc:	693a      	ldr	r2, [r7, #16]
 80179be:	440a      	add	r2, r1
 80179c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80179c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80179c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	3301      	adds	r3, #1
 80179ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80179d6:	4293      	cmp	r3, r2
 80179d8:	d902      	bls.n	80179e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80179da:	2301      	movs	r3, #1
 80179dc:	75fb      	strb	r3, [r7, #23]
          break;
 80179de:	e056      	b.n	8017a8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80179e0:	683b      	ldr	r3, [r7, #0]
 80179e2:	781b      	ldrb	r3, [r3, #0]
 80179e4:	015a      	lsls	r2, r3, #5
 80179e6:	693b      	ldr	r3, [r7, #16]
 80179e8:	4413      	add	r3, r2
 80179ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80179f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80179f8:	d0e7      	beq.n	80179ca <USB_EPStopXfer+0x82>
 80179fa:	e048      	b.n	8017a8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80179fc:	683b      	ldr	r3, [r7, #0]
 80179fe:	781b      	ldrb	r3, [r3, #0]
 8017a00:	015a      	lsls	r2, r3, #5
 8017a02:	693b      	ldr	r3, [r7, #16]
 8017a04:	4413      	add	r3, r2
 8017a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8017a10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017a14:	d13b      	bne.n	8017a8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8017a16:	683b      	ldr	r3, [r7, #0]
 8017a18:	781b      	ldrb	r3, [r3, #0]
 8017a1a:	015a      	lsls	r2, r3, #5
 8017a1c:	693b      	ldr	r3, [r7, #16]
 8017a1e:	4413      	add	r3, r2
 8017a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	683a      	ldr	r2, [r7, #0]
 8017a28:	7812      	ldrb	r2, [r2, #0]
 8017a2a:	0151      	lsls	r1, r2, #5
 8017a2c:	693a      	ldr	r2, [r7, #16]
 8017a2e:	440a      	add	r2, r1
 8017a30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017a34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8017a38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8017a3a:	683b      	ldr	r3, [r7, #0]
 8017a3c:	781b      	ldrb	r3, [r3, #0]
 8017a3e:	015a      	lsls	r2, r3, #5
 8017a40:	693b      	ldr	r3, [r7, #16]
 8017a42:	4413      	add	r3, r2
 8017a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	683a      	ldr	r2, [r7, #0]
 8017a4c:	7812      	ldrb	r2, [r2, #0]
 8017a4e:	0151      	lsls	r1, r2, #5
 8017a50:	693a      	ldr	r2, [r7, #16]
 8017a52:	440a      	add	r2, r1
 8017a54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017a58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8017a5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	3301      	adds	r3, #1
 8017a62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	f242 7210 	movw	r2, #10000	@ 0x2710
 8017a6a:	4293      	cmp	r3, r2
 8017a6c:	d902      	bls.n	8017a74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8017a6e:	2301      	movs	r3, #1
 8017a70:	75fb      	strb	r3, [r7, #23]
          break;
 8017a72:	e00c      	b.n	8017a8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8017a74:	683b      	ldr	r3, [r7, #0]
 8017a76:	781b      	ldrb	r3, [r3, #0]
 8017a78:	015a      	lsls	r2, r3, #5
 8017a7a:	693b      	ldr	r3, [r7, #16]
 8017a7c:	4413      	add	r3, r2
 8017a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8017a88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017a8c:	d0e7      	beq.n	8017a5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8017a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a90:	4618      	mov	r0, r3
 8017a92:	371c      	adds	r7, #28
 8017a94:	46bd      	mov	sp, r7
 8017a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a9a:	4770      	bx	lr

08017a9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8017a9c:	b480      	push	{r7}
 8017a9e:	b089      	sub	sp, #36	@ 0x24
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	60f8      	str	r0, [r7, #12]
 8017aa4:	60b9      	str	r1, [r7, #8]
 8017aa6:	4611      	mov	r1, r2
 8017aa8:	461a      	mov	r2, r3
 8017aaa:	460b      	mov	r3, r1
 8017aac:	71fb      	strb	r3, [r7, #7]
 8017aae:	4613      	mov	r3, r2
 8017ab0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8017ab6:	68bb      	ldr	r3, [r7, #8]
 8017ab8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8017aba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d123      	bne.n	8017b0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8017ac2:	88bb      	ldrh	r3, [r7, #4]
 8017ac4:	3303      	adds	r3, #3
 8017ac6:	089b      	lsrs	r3, r3, #2
 8017ac8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8017aca:	2300      	movs	r3, #0
 8017acc:	61bb      	str	r3, [r7, #24]
 8017ace:	e018      	b.n	8017b02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8017ad0:	79fb      	ldrb	r3, [r7, #7]
 8017ad2:	031a      	lsls	r2, r3, #12
 8017ad4:	697b      	ldr	r3, [r7, #20]
 8017ad6:	4413      	add	r3, r2
 8017ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017adc:	461a      	mov	r2, r3
 8017ade:	69fb      	ldr	r3, [r7, #28]
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8017ae4:	69fb      	ldr	r3, [r7, #28]
 8017ae6:	3301      	adds	r3, #1
 8017ae8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8017aea:	69fb      	ldr	r3, [r7, #28]
 8017aec:	3301      	adds	r3, #1
 8017aee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8017af0:	69fb      	ldr	r3, [r7, #28]
 8017af2:	3301      	adds	r3, #1
 8017af4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8017af6:	69fb      	ldr	r3, [r7, #28]
 8017af8:	3301      	adds	r3, #1
 8017afa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8017afc:	69bb      	ldr	r3, [r7, #24]
 8017afe:	3301      	adds	r3, #1
 8017b00:	61bb      	str	r3, [r7, #24]
 8017b02:	69ba      	ldr	r2, [r7, #24]
 8017b04:	693b      	ldr	r3, [r7, #16]
 8017b06:	429a      	cmp	r2, r3
 8017b08:	d3e2      	bcc.n	8017ad0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8017b0a:	2300      	movs	r3, #0
}
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	3724      	adds	r7, #36	@ 0x24
 8017b10:	46bd      	mov	sp, r7
 8017b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b16:	4770      	bx	lr

08017b18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8017b18:	b480      	push	{r7}
 8017b1a:	b08b      	sub	sp, #44	@ 0x2c
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	60f8      	str	r0, [r7, #12]
 8017b20:	60b9      	str	r1, [r7, #8]
 8017b22:	4613      	mov	r3, r2
 8017b24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8017b2a:	68bb      	ldr	r3, [r7, #8]
 8017b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8017b2e:	88fb      	ldrh	r3, [r7, #6]
 8017b30:	089b      	lsrs	r3, r3, #2
 8017b32:	b29b      	uxth	r3, r3
 8017b34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8017b36:	88fb      	ldrh	r3, [r7, #6]
 8017b38:	f003 0303 	and.w	r3, r3, #3
 8017b3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8017b3e:	2300      	movs	r3, #0
 8017b40:	623b      	str	r3, [r7, #32]
 8017b42:	e014      	b.n	8017b6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8017b44:	69bb      	ldr	r3, [r7, #24]
 8017b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017b4a:	681a      	ldr	r2, [r3, #0]
 8017b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8017b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b52:	3301      	adds	r3, #1
 8017b54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8017b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b58:	3301      	adds	r3, #1
 8017b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8017b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b5e:	3301      	adds	r3, #1
 8017b60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8017b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b64:	3301      	adds	r3, #1
 8017b66:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8017b68:	6a3b      	ldr	r3, [r7, #32]
 8017b6a:	3301      	adds	r3, #1
 8017b6c:	623b      	str	r3, [r7, #32]
 8017b6e:	6a3a      	ldr	r2, [r7, #32]
 8017b70:	697b      	ldr	r3, [r7, #20]
 8017b72:	429a      	cmp	r2, r3
 8017b74:	d3e6      	bcc.n	8017b44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8017b76:	8bfb      	ldrh	r3, [r7, #30]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d01e      	beq.n	8017bba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8017b80:	69bb      	ldr	r3, [r7, #24]
 8017b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017b86:	461a      	mov	r2, r3
 8017b88:	f107 0310 	add.w	r3, r7, #16
 8017b8c:	6812      	ldr	r2, [r2, #0]
 8017b8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8017b90:	693a      	ldr	r2, [r7, #16]
 8017b92:	6a3b      	ldr	r3, [r7, #32]
 8017b94:	b2db      	uxtb	r3, r3
 8017b96:	00db      	lsls	r3, r3, #3
 8017b98:	fa22 f303 	lsr.w	r3, r2, r3
 8017b9c:	b2da      	uxtb	r2, r3
 8017b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ba0:	701a      	strb	r2, [r3, #0]
      i++;
 8017ba2:	6a3b      	ldr	r3, [r7, #32]
 8017ba4:	3301      	adds	r3, #1
 8017ba6:	623b      	str	r3, [r7, #32]
      pDest++;
 8017ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017baa:	3301      	adds	r3, #1
 8017bac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8017bae:	8bfb      	ldrh	r3, [r7, #30]
 8017bb0:	3b01      	subs	r3, #1
 8017bb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8017bb4:	8bfb      	ldrh	r3, [r7, #30]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d1ea      	bne.n	8017b90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8017bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	372c      	adds	r7, #44	@ 0x2c
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc6:	4770      	bx	lr

08017bc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8017bc8:	b480      	push	{r7}
 8017bca:	b085      	sub	sp, #20
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
 8017bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8017bd6:	683b      	ldr	r3, [r7, #0]
 8017bd8:	781b      	ldrb	r3, [r3, #0]
 8017bda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	785b      	ldrb	r3, [r3, #1]
 8017be0:	2b01      	cmp	r3, #1
 8017be2:	d12c      	bne.n	8017c3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8017be4:	68bb      	ldr	r3, [r7, #8]
 8017be6:	015a      	lsls	r2, r3, #5
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	4413      	add	r3, r2
 8017bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	db12      	blt.n	8017c1c <USB_EPSetStall+0x54>
 8017bf6:	68bb      	ldr	r3, [r7, #8]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d00f      	beq.n	8017c1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8017bfc:	68bb      	ldr	r3, [r7, #8]
 8017bfe:	015a      	lsls	r2, r3, #5
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	4413      	add	r3, r2
 8017c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	68ba      	ldr	r2, [r7, #8]
 8017c0c:	0151      	lsls	r1, r2, #5
 8017c0e:	68fa      	ldr	r2, [r7, #12]
 8017c10:	440a      	add	r2, r1
 8017c12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017c16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8017c1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8017c1c:	68bb      	ldr	r3, [r7, #8]
 8017c1e:	015a      	lsls	r2, r3, #5
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	4413      	add	r3, r2
 8017c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	68ba      	ldr	r2, [r7, #8]
 8017c2c:	0151      	lsls	r1, r2, #5
 8017c2e:	68fa      	ldr	r2, [r7, #12]
 8017c30:	440a      	add	r2, r1
 8017c32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017c36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8017c3a:	6013      	str	r3, [r2, #0]
 8017c3c:	e02b      	b.n	8017c96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8017c3e:	68bb      	ldr	r3, [r7, #8]
 8017c40:	015a      	lsls	r2, r3, #5
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	4413      	add	r3, r2
 8017c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	db12      	blt.n	8017c76 <USB_EPSetStall+0xae>
 8017c50:	68bb      	ldr	r3, [r7, #8]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d00f      	beq.n	8017c76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8017c56:	68bb      	ldr	r3, [r7, #8]
 8017c58:	015a      	lsls	r2, r3, #5
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	4413      	add	r3, r2
 8017c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	68ba      	ldr	r2, [r7, #8]
 8017c66:	0151      	lsls	r1, r2, #5
 8017c68:	68fa      	ldr	r2, [r7, #12]
 8017c6a:	440a      	add	r2, r1
 8017c6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017c70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8017c74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8017c76:	68bb      	ldr	r3, [r7, #8]
 8017c78:	015a      	lsls	r2, r3, #5
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	4413      	add	r3, r2
 8017c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	68ba      	ldr	r2, [r7, #8]
 8017c86:	0151      	lsls	r1, r2, #5
 8017c88:	68fa      	ldr	r2, [r7, #12]
 8017c8a:	440a      	add	r2, r1
 8017c8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017c90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8017c94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017c96:	2300      	movs	r3, #0
}
 8017c98:	4618      	mov	r0, r3
 8017c9a:	3714      	adds	r7, #20
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca2:	4770      	bx	lr

08017ca4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8017ca4:	b480      	push	{r7}
 8017ca6:	b085      	sub	sp, #20
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
 8017cac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8017cb2:	683b      	ldr	r3, [r7, #0]
 8017cb4:	781b      	ldrb	r3, [r3, #0]
 8017cb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8017cb8:	683b      	ldr	r3, [r7, #0]
 8017cba:	785b      	ldrb	r3, [r3, #1]
 8017cbc:	2b01      	cmp	r3, #1
 8017cbe:	d128      	bne.n	8017d12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8017cc0:	68bb      	ldr	r3, [r7, #8]
 8017cc2:	015a      	lsls	r2, r3, #5
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	4413      	add	r3, r2
 8017cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	68ba      	ldr	r2, [r7, #8]
 8017cd0:	0151      	lsls	r1, r2, #5
 8017cd2:	68fa      	ldr	r2, [r7, #12]
 8017cd4:	440a      	add	r2, r1
 8017cd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017cda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8017cde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8017ce0:	683b      	ldr	r3, [r7, #0]
 8017ce2:	791b      	ldrb	r3, [r3, #4]
 8017ce4:	2b03      	cmp	r3, #3
 8017ce6:	d003      	beq.n	8017cf0 <USB_EPClearStall+0x4c>
 8017ce8:	683b      	ldr	r3, [r7, #0]
 8017cea:	791b      	ldrb	r3, [r3, #4]
 8017cec:	2b02      	cmp	r3, #2
 8017cee:	d138      	bne.n	8017d62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8017cf0:	68bb      	ldr	r3, [r7, #8]
 8017cf2:	015a      	lsls	r2, r3, #5
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	4413      	add	r3, r2
 8017cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	68ba      	ldr	r2, [r7, #8]
 8017d00:	0151      	lsls	r1, r2, #5
 8017d02:	68fa      	ldr	r2, [r7, #12]
 8017d04:	440a      	add	r2, r1
 8017d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017d0e:	6013      	str	r3, [r2, #0]
 8017d10:	e027      	b.n	8017d62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8017d12:	68bb      	ldr	r3, [r7, #8]
 8017d14:	015a      	lsls	r2, r3, #5
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	4413      	add	r3, r2
 8017d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	68ba      	ldr	r2, [r7, #8]
 8017d22:	0151      	lsls	r1, r2, #5
 8017d24:	68fa      	ldr	r2, [r7, #12]
 8017d26:	440a      	add	r2, r1
 8017d28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017d2c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8017d30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8017d32:	683b      	ldr	r3, [r7, #0]
 8017d34:	791b      	ldrb	r3, [r3, #4]
 8017d36:	2b03      	cmp	r3, #3
 8017d38:	d003      	beq.n	8017d42 <USB_EPClearStall+0x9e>
 8017d3a:	683b      	ldr	r3, [r7, #0]
 8017d3c:	791b      	ldrb	r3, [r3, #4]
 8017d3e:	2b02      	cmp	r3, #2
 8017d40:	d10f      	bne.n	8017d62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8017d42:	68bb      	ldr	r3, [r7, #8]
 8017d44:	015a      	lsls	r2, r3, #5
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	4413      	add	r3, r2
 8017d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	68ba      	ldr	r2, [r7, #8]
 8017d52:	0151      	lsls	r1, r2, #5
 8017d54:	68fa      	ldr	r2, [r7, #12]
 8017d56:	440a      	add	r2, r1
 8017d58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017d60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8017d62:	2300      	movs	r3, #0
}
 8017d64:	4618      	mov	r0, r3
 8017d66:	3714      	adds	r7, #20
 8017d68:	46bd      	mov	sp, r7
 8017d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d6e:	4770      	bx	lr

08017d70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8017d70:	b480      	push	{r7}
 8017d72:	b085      	sub	sp, #20
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
 8017d78:	460b      	mov	r3, r1
 8017d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	68fa      	ldr	r2, [r7, #12]
 8017d8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8017d8e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8017d92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017d9a:	681a      	ldr	r2, [r3, #0]
 8017d9c:	78fb      	ldrb	r3, [r7, #3]
 8017d9e:	011b      	lsls	r3, r3, #4
 8017da0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8017da4:	68f9      	ldr	r1, [r7, #12]
 8017da6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8017daa:	4313      	orrs	r3, r2
 8017dac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8017dae:	2300      	movs	r3, #0
}
 8017db0:	4618      	mov	r0, r3
 8017db2:	3714      	adds	r7, #20
 8017db4:	46bd      	mov	sp, r7
 8017db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dba:	4770      	bx	lr

08017dbc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8017dbc:	b480      	push	{r7}
 8017dbe:	b085      	sub	sp, #20
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	68fa      	ldr	r2, [r7, #12]
 8017dd2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017dd6:	f023 0303 	bic.w	r3, r3, #3
 8017dda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017de2:	685b      	ldr	r3, [r3, #4]
 8017de4:	68fa      	ldr	r2, [r7, #12]
 8017de6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8017dea:	f023 0302 	bic.w	r3, r3, #2
 8017dee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017df0:	2300      	movs	r3, #0
}
 8017df2:	4618      	mov	r0, r3
 8017df4:	3714      	adds	r7, #20
 8017df6:	46bd      	mov	sp, r7
 8017df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfc:	4770      	bx	lr

08017dfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8017dfe:	b480      	push	{r7}
 8017e00:	b085      	sub	sp, #20
 8017e02:	af00      	add	r7, sp, #0
 8017e04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	68fa      	ldr	r2, [r7, #12]
 8017e14:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017e18:	f023 0303 	bic.w	r3, r3, #3
 8017e1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8017e1e:	68fb      	ldr	r3, [r7, #12]
 8017e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017e24:	685b      	ldr	r3, [r3, #4]
 8017e26:	68fa      	ldr	r2, [r7, #12]
 8017e28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8017e2c:	f043 0302 	orr.w	r3, r3, #2
 8017e30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017e32:	2300      	movs	r3, #0
}
 8017e34:	4618      	mov	r0, r3
 8017e36:	3714      	adds	r7, #20
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3e:	4770      	bx	lr

08017e40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8017e40:	b480      	push	{r7}
 8017e42:	b085      	sub	sp, #20
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	695b      	ldr	r3, [r3, #20]
 8017e4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	699b      	ldr	r3, [r3, #24]
 8017e52:	68fa      	ldr	r2, [r7, #12]
 8017e54:	4013      	ands	r3, r2
 8017e56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8017e58:	68fb      	ldr	r3, [r7, #12]
}
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	3714      	adds	r7, #20
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e64:	4770      	bx	lr

08017e66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8017e66:	b480      	push	{r7}
 8017e68:	b085      	sub	sp, #20
 8017e6a:	af00      	add	r7, sp, #0
 8017e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017e78:	699b      	ldr	r3, [r3, #24]
 8017e7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017e82:	69db      	ldr	r3, [r3, #28]
 8017e84:	68ba      	ldr	r2, [r7, #8]
 8017e86:	4013      	ands	r3, r2
 8017e88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	0c1b      	lsrs	r3, r3, #16
}
 8017e8e:	4618      	mov	r0, r3
 8017e90:	3714      	adds	r7, #20
 8017e92:	46bd      	mov	sp, r7
 8017e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e98:	4770      	bx	lr

08017e9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8017e9a:	b480      	push	{r7}
 8017e9c:	b085      	sub	sp, #20
 8017e9e:	af00      	add	r7, sp, #0
 8017ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017eac:	699b      	ldr	r3, [r3, #24]
 8017eae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017eb6:	69db      	ldr	r3, [r3, #28]
 8017eb8:	68ba      	ldr	r2, [r7, #8]
 8017eba:	4013      	ands	r3, r2
 8017ebc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8017ebe:	68bb      	ldr	r3, [r7, #8]
 8017ec0:	b29b      	uxth	r3, r3
}
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	3714      	adds	r7, #20
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ecc:	4770      	bx	lr

08017ece <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017ece:	b480      	push	{r7}
 8017ed0:	b085      	sub	sp, #20
 8017ed2:	af00      	add	r7, sp, #0
 8017ed4:	6078      	str	r0, [r7, #4]
 8017ed6:	460b      	mov	r3, r1
 8017ed8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8017ede:	78fb      	ldrb	r3, [r7, #3]
 8017ee0:	015a      	lsls	r2, r3, #5
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	4413      	add	r3, r2
 8017ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017eea:	689b      	ldr	r3, [r3, #8]
 8017eec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017ef4:	695b      	ldr	r3, [r3, #20]
 8017ef6:	68ba      	ldr	r2, [r7, #8]
 8017ef8:	4013      	ands	r3, r2
 8017efa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017efc:	68bb      	ldr	r3, [r7, #8]
}
 8017efe:	4618      	mov	r0, r3
 8017f00:	3714      	adds	r7, #20
 8017f02:	46bd      	mov	sp, r7
 8017f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f08:	4770      	bx	lr

08017f0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017f0a:	b480      	push	{r7}
 8017f0c:	b087      	sub	sp, #28
 8017f0e:	af00      	add	r7, sp, #0
 8017f10:	6078      	str	r0, [r7, #4]
 8017f12:	460b      	mov	r3, r1
 8017f14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8017f1a:	697b      	ldr	r3, [r7, #20]
 8017f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017f20:	691b      	ldr	r3, [r3, #16]
 8017f22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8017f24:	697b      	ldr	r3, [r7, #20]
 8017f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017f2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8017f2e:	78fb      	ldrb	r3, [r7, #3]
 8017f30:	f003 030f 	and.w	r3, r3, #15
 8017f34:	68fa      	ldr	r2, [r7, #12]
 8017f36:	fa22 f303 	lsr.w	r3, r2, r3
 8017f3a:	01db      	lsls	r3, r3, #7
 8017f3c:	b2db      	uxtb	r3, r3
 8017f3e:	693a      	ldr	r2, [r7, #16]
 8017f40:	4313      	orrs	r3, r2
 8017f42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8017f44:	78fb      	ldrb	r3, [r7, #3]
 8017f46:	015a      	lsls	r2, r3, #5
 8017f48:	697b      	ldr	r3, [r7, #20]
 8017f4a:	4413      	add	r3, r2
 8017f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017f50:	689b      	ldr	r3, [r3, #8]
 8017f52:	693a      	ldr	r2, [r7, #16]
 8017f54:	4013      	ands	r3, r2
 8017f56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017f58:	68bb      	ldr	r3, [r7, #8]
}
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	371c      	adds	r7, #28
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f64:	4770      	bx	lr

08017f66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8017f66:	b480      	push	{r7}
 8017f68:	b083      	sub	sp, #12
 8017f6a:	af00      	add	r7, sp, #0
 8017f6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	695b      	ldr	r3, [r3, #20]
 8017f72:	f003 0301 	and.w	r3, r3, #1
}
 8017f76:	4618      	mov	r0, r3
 8017f78:	370c      	adds	r7, #12
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f80:	4770      	bx	lr
	...

08017f84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8017f84:	b480      	push	{r7}
 8017f86:	b085      	sub	sp, #20
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017f96:	681a      	ldr	r2, [r3, #0]
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017f9e:	4619      	mov	r1, r3
 8017fa0:	4b09      	ldr	r3, [pc, #36]	@ (8017fc8 <USB_ActivateSetup+0x44>)
 8017fa2:	4013      	ands	r3, r2
 8017fa4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017fac:	685b      	ldr	r3, [r3, #4]
 8017fae:	68fa      	ldr	r2, [r7, #12]
 8017fb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8017fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017fb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017fba:	2300      	movs	r3, #0
}
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	3714      	adds	r7, #20
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc6:	4770      	bx	lr
 8017fc8:	fffff800 	.word	0xfffff800

08017fcc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8017fcc:	b480      	push	{r7}
 8017fce:	b087      	sub	sp, #28
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	60f8      	str	r0, [r7, #12]
 8017fd4:	460b      	mov	r3, r1
 8017fd6:	607a      	str	r2, [r7, #4]
 8017fd8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	333c      	adds	r3, #60	@ 0x3c
 8017fe2:	3304      	adds	r3, #4
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8017fe8:	693b      	ldr	r3, [r7, #16]
 8017fea:	4a26      	ldr	r2, [pc, #152]	@ (8018084 <USB_EP0_OutStart+0xb8>)
 8017fec:	4293      	cmp	r3, r2
 8017fee:	d90a      	bls.n	8018006 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017ff0:	697b      	ldr	r3, [r7, #20]
 8017ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8017ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8018000:	d101      	bne.n	8018006 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8018002:	2300      	movs	r3, #0
 8018004:	e037      	b.n	8018076 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8018006:	697b      	ldr	r3, [r7, #20]
 8018008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801800c:	461a      	mov	r2, r3
 801800e:	2300      	movs	r3, #0
 8018010:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8018012:	697b      	ldr	r3, [r7, #20]
 8018014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8018018:	691b      	ldr	r3, [r3, #16]
 801801a:	697a      	ldr	r2, [r7, #20]
 801801c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8018020:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8018024:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8018026:	697b      	ldr	r3, [r7, #20]
 8018028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801802c:	691b      	ldr	r3, [r3, #16]
 801802e:	697a      	ldr	r2, [r7, #20]
 8018030:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8018034:	f043 0318 	orr.w	r3, r3, #24
 8018038:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8018040:	691b      	ldr	r3, [r3, #16]
 8018042:	697a      	ldr	r2, [r7, #20]
 8018044:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8018048:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801804c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801804e:	7afb      	ldrb	r3, [r7, #11]
 8018050:	2b01      	cmp	r3, #1
 8018052:	d10f      	bne.n	8018074 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8018054:	697b      	ldr	r3, [r7, #20]
 8018056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801805a:	461a      	mov	r2, r3
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8018060:	697b      	ldr	r3, [r7, #20]
 8018062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	697a      	ldr	r2, [r7, #20]
 801806a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801806e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8018072:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8018074:	2300      	movs	r3, #0
}
 8018076:	4618      	mov	r0, r3
 8018078:	371c      	adds	r7, #28
 801807a:	46bd      	mov	sp, r7
 801807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018080:	4770      	bx	lr
 8018082:	bf00      	nop
 8018084:	4f54300a 	.word	0x4f54300a

08018088 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8018088:	b480      	push	{r7}
 801808a:	b085      	sub	sp, #20
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8018090:	2300      	movs	r3, #0
 8018092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	3301      	adds	r3, #1
 8018098:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80180a0:	d901      	bls.n	80180a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80180a2:	2303      	movs	r3, #3
 80180a4:	e01b      	b.n	80180de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	691b      	ldr	r3, [r3, #16]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	daf2      	bge.n	8018094 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80180ae:	2300      	movs	r3, #0
 80180b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	691b      	ldr	r3, [r3, #16]
 80180b6:	f043 0201 	orr.w	r2, r3, #1
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	3301      	adds	r3, #1
 80180c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80180ca:	d901      	bls.n	80180d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80180cc:	2303      	movs	r3, #3
 80180ce:	e006      	b.n	80180de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	691b      	ldr	r3, [r3, #16]
 80180d4:	f003 0301 	and.w	r3, r3, #1
 80180d8:	2b01      	cmp	r3, #1
 80180da:	d0f0      	beq.n	80180be <USB_CoreReset+0x36>

  return HAL_OK;
 80180dc:	2300      	movs	r3, #0
}
 80180de:	4618      	mov	r0, r3
 80180e0:	3714      	adds	r7, #20
 80180e2:	46bd      	mov	sp, r7
 80180e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e8:	4770      	bx	lr
	...

080180ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b084      	sub	sp, #16
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
 80180f4:	460b      	mov	r3, r1
 80180f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80180f8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80180fc:	f002 fd6c 	bl	801abd8 <USBD_static_malloc>
 8018100:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d109      	bne.n	801811c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	32b0      	adds	r2, #176	@ 0xb0
 8018112:	2100      	movs	r1, #0
 8018114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8018118:	2302      	movs	r3, #2
 801811a:	e0d4      	b.n	80182c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801811c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8018120:	2100      	movs	r1, #0
 8018122:	68f8      	ldr	r0, [r7, #12]
 8018124:	f004 fb6c 	bl	801c800 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	32b0      	adds	r2, #176	@ 0xb0
 8018132:	68f9      	ldr	r1, [r7, #12]
 8018134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	32b0      	adds	r2, #176	@ 0xb0
 8018142:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	7c1b      	ldrb	r3, [r3, #16]
 8018150:	2b00      	cmp	r3, #0
 8018152:	d138      	bne.n	80181c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8018154:	4b5e      	ldr	r3, [pc, #376]	@ (80182d0 <USBD_CDC_Init+0x1e4>)
 8018156:	7819      	ldrb	r1, [r3, #0]
 8018158:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801815c:	2202      	movs	r2, #2
 801815e:	6878      	ldr	r0, [r7, #4]
 8018160:	f002 fc17 	bl	801a992 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8018164:	4b5a      	ldr	r3, [pc, #360]	@ (80182d0 <USBD_CDC_Init+0x1e4>)
 8018166:	781b      	ldrb	r3, [r3, #0]
 8018168:	f003 020f 	and.w	r2, r3, #15
 801816c:	6879      	ldr	r1, [r7, #4]
 801816e:	4613      	mov	r3, r2
 8018170:	009b      	lsls	r3, r3, #2
 8018172:	4413      	add	r3, r2
 8018174:	009b      	lsls	r3, r3, #2
 8018176:	440b      	add	r3, r1
 8018178:	3324      	adds	r3, #36	@ 0x24
 801817a:	2201      	movs	r2, #1
 801817c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801817e:	4b55      	ldr	r3, [pc, #340]	@ (80182d4 <USBD_CDC_Init+0x1e8>)
 8018180:	7819      	ldrb	r1, [r3, #0]
 8018182:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018186:	2202      	movs	r2, #2
 8018188:	6878      	ldr	r0, [r7, #4]
 801818a:	f002 fc02 	bl	801a992 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801818e:	4b51      	ldr	r3, [pc, #324]	@ (80182d4 <USBD_CDC_Init+0x1e8>)
 8018190:	781b      	ldrb	r3, [r3, #0]
 8018192:	f003 020f 	and.w	r2, r3, #15
 8018196:	6879      	ldr	r1, [r7, #4]
 8018198:	4613      	mov	r3, r2
 801819a:	009b      	lsls	r3, r3, #2
 801819c:	4413      	add	r3, r2
 801819e:	009b      	lsls	r3, r3, #2
 80181a0:	440b      	add	r3, r1
 80181a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80181a6:	2201      	movs	r2, #1
 80181a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80181aa:	4b4b      	ldr	r3, [pc, #300]	@ (80182d8 <USBD_CDC_Init+0x1ec>)
 80181ac:	781b      	ldrb	r3, [r3, #0]
 80181ae:	f003 020f 	and.w	r2, r3, #15
 80181b2:	6879      	ldr	r1, [r7, #4]
 80181b4:	4613      	mov	r3, r2
 80181b6:	009b      	lsls	r3, r3, #2
 80181b8:	4413      	add	r3, r2
 80181ba:	009b      	lsls	r3, r3, #2
 80181bc:	440b      	add	r3, r1
 80181be:	3326      	adds	r3, #38	@ 0x26
 80181c0:	2210      	movs	r2, #16
 80181c2:	801a      	strh	r2, [r3, #0]
 80181c4:	e035      	b.n	8018232 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80181c6:	4b42      	ldr	r3, [pc, #264]	@ (80182d0 <USBD_CDC_Init+0x1e4>)
 80181c8:	7819      	ldrb	r1, [r3, #0]
 80181ca:	2340      	movs	r3, #64	@ 0x40
 80181cc:	2202      	movs	r2, #2
 80181ce:	6878      	ldr	r0, [r7, #4]
 80181d0:	f002 fbdf 	bl	801a992 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80181d4:	4b3e      	ldr	r3, [pc, #248]	@ (80182d0 <USBD_CDC_Init+0x1e4>)
 80181d6:	781b      	ldrb	r3, [r3, #0]
 80181d8:	f003 020f 	and.w	r2, r3, #15
 80181dc:	6879      	ldr	r1, [r7, #4]
 80181de:	4613      	mov	r3, r2
 80181e0:	009b      	lsls	r3, r3, #2
 80181e2:	4413      	add	r3, r2
 80181e4:	009b      	lsls	r3, r3, #2
 80181e6:	440b      	add	r3, r1
 80181e8:	3324      	adds	r3, #36	@ 0x24
 80181ea:	2201      	movs	r2, #1
 80181ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80181ee:	4b39      	ldr	r3, [pc, #228]	@ (80182d4 <USBD_CDC_Init+0x1e8>)
 80181f0:	7819      	ldrb	r1, [r3, #0]
 80181f2:	2340      	movs	r3, #64	@ 0x40
 80181f4:	2202      	movs	r2, #2
 80181f6:	6878      	ldr	r0, [r7, #4]
 80181f8:	f002 fbcb 	bl	801a992 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80181fc:	4b35      	ldr	r3, [pc, #212]	@ (80182d4 <USBD_CDC_Init+0x1e8>)
 80181fe:	781b      	ldrb	r3, [r3, #0]
 8018200:	f003 020f 	and.w	r2, r3, #15
 8018204:	6879      	ldr	r1, [r7, #4]
 8018206:	4613      	mov	r3, r2
 8018208:	009b      	lsls	r3, r3, #2
 801820a:	4413      	add	r3, r2
 801820c:	009b      	lsls	r3, r3, #2
 801820e:	440b      	add	r3, r1
 8018210:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018214:	2201      	movs	r2, #1
 8018216:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8018218:	4b2f      	ldr	r3, [pc, #188]	@ (80182d8 <USBD_CDC_Init+0x1ec>)
 801821a:	781b      	ldrb	r3, [r3, #0]
 801821c:	f003 020f 	and.w	r2, r3, #15
 8018220:	6879      	ldr	r1, [r7, #4]
 8018222:	4613      	mov	r3, r2
 8018224:	009b      	lsls	r3, r3, #2
 8018226:	4413      	add	r3, r2
 8018228:	009b      	lsls	r3, r3, #2
 801822a:	440b      	add	r3, r1
 801822c:	3326      	adds	r3, #38	@ 0x26
 801822e:	2210      	movs	r2, #16
 8018230:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8018232:	4b29      	ldr	r3, [pc, #164]	@ (80182d8 <USBD_CDC_Init+0x1ec>)
 8018234:	7819      	ldrb	r1, [r3, #0]
 8018236:	2308      	movs	r3, #8
 8018238:	2203      	movs	r2, #3
 801823a:	6878      	ldr	r0, [r7, #4]
 801823c:	f002 fba9 	bl	801a992 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8018240:	4b25      	ldr	r3, [pc, #148]	@ (80182d8 <USBD_CDC_Init+0x1ec>)
 8018242:	781b      	ldrb	r3, [r3, #0]
 8018244:	f003 020f 	and.w	r2, r3, #15
 8018248:	6879      	ldr	r1, [r7, #4]
 801824a:	4613      	mov	r3, r2
 801824c:	009b      	lsls	r3, r3, #2
 801824e:	4413      	add	r3, r2
 8018250:	009b      	lsls	r3, r3, #2
 8018252:	440b      	add	r3, r1
 8018254:	3324      	adds	r3, #36	@ 0x24
 8018256:	2201      	movs	r2, #1
 8018258:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	2200      	movs	r2, #0
 801825e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8018268:	687a      	ldr	r2, [r7, #4]
 801826a:	33b0      	adds	r3, #176	@ 0xb0
 801826c:	009b      	lsls	r3, r3, #2
 801826e:	4413      	add	r3, r2
 8018270:	685b      	ldr	r3, [r3, #4]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	2200      	movs	r2, #0
 801827a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	2200      	movs	r2, #0
 8018282:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801828c:	2b00      	cmp	r3, #0
 801828e:	d101      	bne.n	8018294 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8018290:	2302      	movs	r3, #2
 8018292:	e018      	b.n	80182c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	7c1b      	ldrb	r3, [r3, #16]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d10a      	bne.n	80182b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801829c:	4b0d      	ldr	r3, [pc, #52]	@ (80182d4 <USBD_CDC_Init+0x1e8>)
 801829e:	7819      	ldrb	r1, [r3, #0]
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80182a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80182aa:	6878      	ldr	r0, [r7, #4]
 80182ac:	f002 fc60 	bl	801ab70 <USBD_LL_PrepareReceive>
 80182b0:	e008      	b.n	80182c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80182b2:	4b08      	ldr	r3, [pc, #32]	@ (80182d4 <USBD_CDC_Init+0x1e8>)
 80182b4:	7819      	ldrb	r1, [r3, #0]
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80182bc:	2340      	movs	r3, #64	@ 0x40
 80182be:	6878      	ldr	r0, [r7, #4]
 80182c0:	f002 fc56 	bl	801ab70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80182c4:	2300      	movs	r3, #0
}
 80182c6:	4618      	mov	r0, r3
 80182c8:	3710      	adds	r7, #16
 80182ca:	46bd      	mov	sp, r7
 80182cc:	bd80      	pop	{r7, pc}
 80182ce:	bf00      	nop
 80182d0:	24000117 	.word	0x24000117
 80182d4:	24000118 	.word	0x24000118
 80182d8:	24000119 	.word	0x24000119

080182dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b082      	sub	sp, #8
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	6078      	str	r0, [r7, #4]
 80182e4:	460b      	mov	r3, r1
 80182e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80182e8:	4b3a      	ldr	r3, [pc, #232]	@ (80183d4 <USBD_CDC_DeInit+0xf8>)
 80182ea:	781b      	ldrb	r3, [r3, #0]
 80182ec:	4619      	mov	r1, r3
 80182ee:	6878      	ldr	r0, [r7, #4]
 80182f0:	f002 fb75 	bl	801a9de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80182f4:	4b37      	ldr	r3, [pc, #220]	@ (80183d4 <USBD_CDC_DeInit+0xf8>)
 80182f6:	781b      	ldrb	r3, [r3, #0]
 80182f8:	f003 020f 	and.w	r2, r3, #15
 80182fc:	6879      	ldr	r1, [r7, #4]
 80182fe:	4613      	mov	r3, r2
 8018300:	009b      	lsls	r3, r3, #2
 8018302:	4413      	add	r3, r2
 8018304:	009b      	lsls	r3, r3, #2
 8018306:	440b      	add	r3, r1
 8018308:	3324      	adds	r3, #36	@ 0x24
 801830a:	2200      	movs	r2, #0
 801830c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801830e:	4b32      	ldr	r3, [pc, #200]	@ (80183d8 <USBD_CDC_DeInit+0xfc>)
 8018310:	781b      	ldrb	r3, [r3, #0]
 8018312:	4619      	mov	r1, r3
 8018314:	6878      	ldr	r0, [r7, #4]
 8018316:	f002 fb62 	bl	801a9de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801831a:	4b2f      	ldr	r3, [pc, #188]	@ (80183d8 <USBD_CDC_DeInit+0xfc>)
 801831c:	781b      	ldrb	r3, [r3, #0]
 801831e:	f003 020f 	and.w	r2, r3, #15
 8018322:	6879      	ldr	r1, [r7, #4]
 8018324:	4613      	mov	r3, r2
 8018326:	009b      	lsls	r3, r3, #2
 8018328:	4413      	add	r3, r2
 801832a:	009b      	lsls	r3, r3, #2
 801832c:	440b      	add	r3, r1
 801832e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018332:	2200      	movs	r2, #0
 8018334:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8018336:	4b29      	ldr	r3, [pc, #164]	@ (80183dc <USBD_CDC_DeInit+0x100>)
 8018338:	781b      	ldrb	r3, [r3, #0]
 801833a:	4619      	mov	r1, r3
 801833c:	6878      	ldr	r0, [r7, #4]
 801833e:	f002 fb4e 	bl	801a9de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8018342:	4b26      	ldr	r3, [pc, #152]	@ (80183dc <USBD_CDC_DeInit+0x100>)
 8018344:	781b      	ldrb	r3, [r3, #0]
 8018346:	f003 020f 	and.w	r2, r3, #15
 801834a:	6879      	ldr	r1, [r7, #4]
 801834c:	4613      	mov	r3, r2
 801834e:	009b      	lsls	r3, r3, #2
 8018350:	4413      	add	r3, r2
 8018352:	009b      	lsls	r3, r3, #2
 8018354:	440b      	add	r3, r1
 8018356:	3324      	adds	r3, #36	@ 0x24
 8018358:	2200      	movs	r2, #0
 801835a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801835c:	4b1f      	ldr	r3, [pc, #124]	@ (80183dc <USBD_CDC_DeInit+0x100>)
 801835e:	781b      	ldrb	r3, [r3, #0]
 8018360:	f003 020f 	and.w	r2, r3, #15
 8018364:	6879      	ldr	r1, [r7, #4]
 8018366:	4613      	mov	r3, r2
 8018368:	009b      	lsls	r3, r3, #2
 801836a:	4413      	add	r3, r2
 801836c:	009b      	lsls	r3, r3, #2
 801836e:	440b      	add	r3, r1
 8018370:	3326      	adds	r3, #38	@ 0x26
 8018372:	2200      	movs	r2, #0
 8018374:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	32b0      	adds	r2, #176	@ 0xb0
 8018380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d01f      	beq.n	80183c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801838e:	687a      	ldr	r2, [r7, #4]
 8018390:	33b0      	adds	r3, #176	@ 0xb0
 8018392:	009b      	lsls	r3, r3, #2
 8018394:	4413      	add	r3, r2
 8018396:	685b      	ldr	r3, [r3, #4]
 8018398:	685b      	ldr	r3, [r3, #4]
 801839a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	32b0      	adds	r2, #176	@ 0xb0
 80183a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80183aa:	4618      	mov	r0, r3
 80183ac:	f002 fc22 	bl	801abf4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	32b0      	adds	r2, #176	@ 0xb0
 80183ba:	2100      	movs	r1, #0
 80183bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	2200      	movs	r2, #0
 80183c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80183c8:	2300      	movs	r3, #0
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3708      	adds	r7, #8
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}
 80183d2:	bf00      	nop
 80183d4:	24000117 	.word	0x24000117
 80183d8:	24000118 	.word	0x24000118
 80183dc:	24000119 	.word	0x24000119

080183e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b086      	sub	sp, #24
 80183e4:	af00      	add	r7, sp, #0
 80183e6:	6078      	str	r0, [r7, #4]
 80183e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	32b0      	adds	r2, #176	@ 0xb0
 80183f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80183f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80183fa:	2300      	movs	r3, #0
 80183fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80183fe:	2300      	movs	r3, #0
 8018400:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8018402:	2300      	movs	r3, #0
 8018404:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8018406:	693b      	ldr	r3, [r7, #16]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d101      	bne.n	8018410 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801840c:	2303      	movs	r3, #3
 801840e:	e0bf      	b.n	8018590 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018410:	683b      	ldr	r3, [r7, #0]
 8018412:	781b      	ldrb	r3, [r3, #0]
 8018414:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018418:	2b00      	cmp	r3, #0
 801841a:	d050      	beq.n	80184be <USBD_CDC_Setup+0xde>
 801841c:	2b20      	cmp	r3, #32
 801841e:	f040 80af 	bne.w	8018580 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8018422:	683b      	ldr	r3, [r7, #0]
 8018424:	88db      	ldrh	r3, [r3, #6]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d03a      	beq.n	80184a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801842a:	683b      	ldr	r3, [r7, #0]
 801842c:	781b      	ldrb	r3, [r3, #0]
 801842e:	b25b      	sxtb	r3, r3
 8018430:	2b00      	cmp	r3, #0
 8018432:	da1b      	bge.n	801846c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801843a:	687a      	ldr	r2, [r7, #4]
 801843c:	33b0      	adds	r3, #176	@ 0xb0
 801843e:	009b      	lsls	r3, r3, #2
 8018440:	4413      	add	r3, r2
 8018442:	685b      	ldr	r3, [r3, #4]
 8018444:	689b      	ldr	r3, [r3, #8]
 8018446:	683a      	ldr	r2, [r7, #0]
 8018448:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801844a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801844c:	683a      	ldr	r2, [r7, #0]
 801844e:	88d2      	ldrh	r2, [r2, #6]
 8018450:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	88db      	ldrh	r3, [r3, #6]
 8018456:	2b07      	cmp	r3, #7
 8018458:	bf28      	it	cs
 801845a:	2307      	movcs	r3, #7
 801845c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801845e:	693b      	ldr	r3, [r7, #16]
 8018460:	89fa      	ldrh	r2, [r7, #14]
 8018462:	4619      	mov	r1, r3
 8018464:	6878      	ldr	r0, [r7, #4]
 8018466:	f001 fdbd 	bl	8019fe4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801846a:	e090      	b.n	801858e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801846c:	683b      	ldr	r3, [r7, #0]
 801846e:	785a      	ldrb	r2, [r3, #1]
 8018470:	693b      	ldr	r3, [r7, #16]
 8018472:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8018476:	683b      	ldr	r3, [r7, #0]
 8018478:	88db      	ldrh	r3, [r3, #6]
 801847a:	2b3f      	cmp	r3, #63	@ 0x3f
 801847c:	d803      	bhi.n	8018486 <USBD_CDC_Setup+0xa6>
 801847e:	683b      	ldr	r3, [r7, #0]
 8018480:	88db      	ldrh	r3, [r3, #6]
 8018482:	b2da      	uxtb	r2, r3
 8018484:	e000      	b.n	8018488 <USBD_CDC_Setup+0xa8>
 8018486:	2240      	movs	r2, #64	@ 0x40
 8018488:	693b      	ldr	r3, [r7, #16]
 801848a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801848e:	6939      	ldr	r1, [r7, #16]
 8018490:	693b      	ldr	r3, [r7, #16]
 8018492:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8018496:	461a      	mov	r2, r3
 8018498:	6878      	ldr	r0, [r7, #4]
 801849a:	f001 fdcf 	bl	801a03c <USBD_CtlPrepareRx>
      break;
 801849e:	e076      	b.n	801858e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80184a6:	687a      	ldr	r2, [r7, #4]
 80184a8:	33b0      	adds	r3, #176	@ 0xb0
 80184aa:	009b      	lsls	r3, r3, #2
 80184ac:	4413      	add	r3, r2
 80184ae:	685b      	ldr	r3, [r3, #4]
 80184b0:	689b      	ldr	r3, [r3, #8]
 80184b2:	683a      	ldr	r2, [r7, #0]
 80184b4:	7850      	ldrb	r0, [r2, #1]
 80184b6:	2200      	movs	r2, #0
 80184b8:	6839      	ldr	r1, [r7, #0]
 80184ba:	4798      	blx	r3
      break;
 80184bc:	e067      	b.n	801858e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80184be:	683b      	ldr	r3, [r7, #0]
 80184c0:	785b      	ldrb	r3, [r3, #1]
 80184c2:	2b0b      	cmp	r3, #11
 80184c4:	d851      	bhi.n	801856a <USBD_CDC_Setup+0x18a>
 80184c6:	a201      	add	r2, pc, #4	@ (adr r2, 80184cc <USBD_CDC_Setup+0xec>)
 80184c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184cc:	080184fd 	.word	0x080184fd
 80184d0:	08018579 	.word	0x08018579
 80184d4:	0801856b 	.word	0x0801856b
 80184d8:	0801856b 	.word	0x0801856b
 80184dc:	0801856b 	.word	0x0801856b
 80184e0:	0801856b 	.word	0x0801856b
 80184e4:	0801856b 	.word	0x0801856b
 80184e8:	0801856b 	.word	0x0801856b
 80184ec:	0801856b 	.word	0x0801856b
 80184f0:	0801856b 	.word	0x0801856b
 80184f4:	08018527 	.word	0x08018527
 80184f8:	08018551 	.word	0x08018551
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018502:	b2db      	uxtb	r3, r3
 8018504:	2b03      	cmp	r3, #3
 8018506:	d107      	bne.n	8018518 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8018508:	f107 030a 	add.w	r3, r7, #10
 801850c:	2202      	movs	r2, #2
 801850e:	4619      	mov	r1, r3
 8018510:	6878      	ldr	r0, [r7, #4]
 8018512:	f001 fd67 	bl	8019fe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018516:	e032      	b.n	801857e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8018518:	6839      	ldr	r1, [r7, #0]
 801851a:	6878      	ldr	r0, [r7, #4]
 801851c:	f001 fce5 	bl	8019eea <USBD_CtlError>
            ret = USBD_FAIL;
 8018520:	2303      	movs	r3, #3
 8018522:	75fb      	strb	r3, [r7, #23]
          break;
 8018524:	e02b      	b.n	801857e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801852c:	b2db      	uxtb	r3, r3
 801852e:	2b03      	cmp	r3, #3
 8018530:	d107      	bne.n	8018542 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8018532:	f107 030d 	add.w	r3, r7, #13
 8018536:	2201      	movs	r2, #1
 8018538:	4619      	mov	r1, r3
 801853a:	6878      	ldr	r0, [r7, #4]
 801853c:	f001 fd52 	bl	8019fe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018540:	e01d      	b.n	801857e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8018542:	6839      	ldr	r1, [r7, #0]
 8018544:	6878      	ldr	r0, [r7, #4]
 8018546:	f001 fcd0 	bl	8019eea <USBD_CtlError>
            ret = USBD_FAIL;
 801854a:	2303      	movs	r3, #3
 801854c:	75fb      	strb	r3, [r7, #23]
          break;
 801854e:	e016      	b.n	801857e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018556:	b2db      	uxtb	r3, r3
 8018558:	2b03      	cmp	r3, #3
 801855a:	d00f      	beq.n	801857c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801855c:	6839      	ldr	r1, [r7, #0]
 801855e:	6878      	ldr	r0, [r7, #4]
 8018560:	f001 fcc3 	bl	8019eea <USBD_CtlError>
            ret = USBD_FAIL;
 8018564:	2303      	movs	r3, #3
 8018566:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8018568:	e008      	b.n	801857c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801856a:	6839      	ldr	r1, [r7, #0]
 801856c:	6878      	ldr	r0, [r7, #4]
 801856e:	f001 fcbc 	bl	8019eea <USBD_CtlError>
          ret = USBD_FAIL;
 8018572:	2303      	movs	r3, #3
 8018574:	75fb      	strb	r3, [r7, #23]
          break;
 8018576:	e002      	b.n	801857e <USBD_CDC_Setup+0x19e>
          break;
 8018578:	bf00      	nop
 801857a:	e008      	b.n	801858e <USBD_CDC_Setup+0x1ae>
          break;
 801857c:	bf00      	nop
      }
      break;
 801857e:	e006      	b.n	801858e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8018580:	6839      	ldr	r1, [r7, #0]
 8018582:	6878      	ldr	r0, [r7, #4]
 8018584:	f001 fcb1 	bl	8019eea <USBD_CtlError>
      ret = USBD_FAIL;
 8018588:	2303      	movs	r3, #3
 801858a:	75fb      	strb	r3, [r7, #23]
      break;
 801858c:	bf00      	nop
  }

  return (uint8_t)ret;
 801858e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018590:	4618      	mov	r0, r3
 8018592:	3718      	adds	r7, #24
 8018594:	46bd      	mov	sp, r7
 8018596:	bd80      	pop	{r7, pc}

08018598 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b084      	sub	sp, #16
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
 80185a0:	460b      	mov	r3, r1
 80185a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80185aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	32b0      	adds	r2, #176	@ 0xb0
 80185b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d101      	bne.n	80185c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80185be:	2303      	movs	r3, #3
 80185c0:	e065      	b.n	801868e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	32b0      	adds	r2, #176	@ 0xb0
 80185cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80185d2:	78fb      	ldrb	r3, [r7, #3]
 80185d4:	f003 020f 	and.w	r2, r3, #15
 80185d8:	6879      	ldr	r1, [r7, #4]
 80185da:	4613      	mov	r3, r2
 80185dc:	009b      	lsls	r3, r3, #2
 80185de:	4413      	add	r3, r2
 80185e0:	009b      	lsls	r3, r3, #2
 80185e2:	440b      	add	r3, r1
 80185e4:	3318      	adds	r3, #24
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d02f      	beq.n	801864c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80185ec:	78fb      	ldrb	r3, [r7, #3]
 80185ee:	f003 020f 	and.w	r2, r3, #15
 80185f2:	6879      	ldr	r1, [r7, #4]
 80185f4:	4613      	mov	r3, r2
 80185f6:	009b      	lsls	r3, r3, #2
 80185f8:	4413      	add	r3, r2
 80185fa:	009b      	lsls	r3, r3, #2
 80185fc:	440b      	add	r3, r1
 80185fe:	3318      	adds	r3, #24
 8018600:	681a      	ldr	r2, [r3, #0]
 8018602:	78fb      	ldrb	r3, [r7, #3]
 8018604:	f003 010f 	and.w	r1, r3, #15
 8018608:	68f8      	ldr	r0, [r7, #12]
 801860a:	460b      	mov	r3, r1
 801860c:	00db      	lsls	r3, r3, #3
 801860e:	440b      	add	r3, r1
 8018610:	009b      	lsls	r3, r3, #2
 8018612:	4403      	add	r3, r0
 8018614:	331c      	adds	r3, #28
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	fbb2 f1f3 	udiv	r1, r2, r3
 801861c:	fb01 f303 	mul.w	r3, r1, r3
 8018620:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8018622:	2b00      	cmp	r3, #0
 8018624:	d112      	bne.n	801864c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8018626:	78fb      	ldrb	r3, [r7, #3]
 8018628:	f003 020f 	and.w	r2, r3, #15
 801862c:	6879      	ldr	r1, [r7, #4]
 801862e:	4613      	mov	r3, r2
 8018630:	009b      	lsls	r3, r3, #2
 8018632:	4413      	add	r3, r2
 8018634:	009b      	lsls	r3, r3, #2
 8018636:	440b      	add	r3, r1
 8018638:	3318      	adds	r3, #24
 801863a:	2200      	movs	r2, #0
 801863c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801863e:	78f9      	ldrb	r1, [r7, #3]
 8018640:	2300      	movs	r3, #0
 8018642:	2200      	movs	r2, #0
 8018644:	6878      	ldr	r0, [r7, #4]
 8018646:	f002 fa72 	bl	801ab2e <USBD_LL_Transmit>
 801864a:	e01f      	b.n	801868c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801864c:	68bb      	ldr	r3, [r7, #8]
 801864e:	2200      	movs	r2, #0
 8018650:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801865a:	687a      	ldr	r2, [r7, #4]
 801865c:	33b0      	adds	r3, #176	@ 0xb0
 801865e:	009b      	lsls	r3, r3, #2
 8018660:	4413      	add	r3, r2
 8018662:	685b      	ldr	r3, [r3, #4]
 8018664:	691b      	ldr	r3, [r3, #16]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d010      	beq.n	801868c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8018670:	687a      	ldr	r2, [r7, #4]
 8018672:	33b0      	adds	r3, #176	@ 0xb0
 8018674:	009b      	lsls	r3, r3, #2
 8018676:	4413      	add	r3, r2
 8018678:	685b      	ldr	r3, [r3, #4]
 801867a:	691b      	ldr	r3, [r3, #16]
 801867c:	68ba      	ldr	r2, [r7, #8]
 801867e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8018682:	68ba      	ldr	r2, [r7, #8]
 8018684:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8018688:	78fa      	ldrb	r2, [r7, #3]
 801868a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801868c:	2300      	movs	r3, #0
}
 801868e:	4618      	mov	r0, r3
 8018690:	3710      	adds	r7, #16
 8018692:	46bd      	mov	sp, r7
 8018694:	bd80      	pop	{r7, pc}

08018696 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018696:	b580      	push	{r7, lr}
 8018698:	b084      	sub	sp, #16
 801869a:	af00      	add	r7, sp, #0
 801869c:	6078      	str	r0, [r7, #4]
 801869e:	460b      	mov	r3, r1
 80186a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	32b0      	adds	r2, #176	@ 0xb0
 80186ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	32b0      	adds	r2, #176	@ 0xb0
 80186bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d101      	bne.n	80186c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80186c4:	2303      	movs	r3, #3
 80186c6:	e01a      	b.n	80186fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80186c8:	78fb      	ldrb	r3, [r7, #3]
 80186ca:	4619      	mov	r1, r3
 80186cc:	6878      	ldr	r0, [r7, #4]
 80186ce:	f002 fa70 	bl	801abb2 <USBD_LL_GetRxDataSize>
 80186d2:	4602      	mov	r2, r0
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80186e0:	687a      	ldr	r2, [r7, #4]
 80186e2:	33b0      	adds	r3, #176	@ 0xb0
 80186e4:	009b      	lsls	r3, r3, #2
 80186e6:	4413      	add	r3, r2
 80186e8:	685b      	ldr	r3, [r3, #4]
 80186ea:	68db      	ldr	r3, [r3, #12]
 80186ec:	68fa      	ldr	r2, [r7, #12]
 80186ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80186f2:	68fa      	ldr	r2, [r7, #12]
 80186f4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80186f8:	4611      	mov	r1, r2
 80186fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80186fc:	2300      	movs	r3, #0
}
 80186fe:	4618      	mov	r0, r3
 8018700:	3710      	adds	r7, #16
 8018702:	46bd      	mov	sp, r7
 8018704:	bd80      	pop	{r7, pc}

08018706 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8018706:	b580      	push	{r7, lr}
 8018708:	b084      	sub	sp, #16
 801870a:	af00      	add	r7, sp, #0
 801870c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	32b0      	adds	r2, #176	@ 0xb0
 8018718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801871c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d101      	bne.n	8018728 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8018724:	2303      	movs	r3, #3
 8018726:	e024      	b.n	8018772 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801872e:	687a      	ldr	r2, [r7, #4]
 8018730:	33b0      	adds	r3, #176	@ 0xb0
 8018732:	009b      	lsls	r3, r3, #2
 8018734:	4413      	add	r3, r2
 8018736:	685b      	ldr	r3, [r3, #4]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d019      	beq.n	8018770 <USBD_CDC_EP0_RxReady+0x6a>
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8018742:	2bff      	cmp	r3, #255	@ 0xff
 8018744:	d014      	beq.n	8018770 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801874c:	687a      	ldr	r2, [r7, #4]
 801874e:	33b0      	adds	r3, #176	@ 0xb0
 8018750:	009b      	lsls	r3, r3, #2
 8018752:	4413      	add	r3, r2
 8018754:	685b      	ldr	r3, [r3, #4]
 8018756:	689b      	ldr	r3, [r3, #8]
 8018758:	68fa      	ldr	r2, [r7, #12]
 801875a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801875e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8018760:	68fa      	ldr	r2, [r7, #12]
 8018762:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8018766:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	22ff      	movs	r2, #255	@ 0xff
 801876c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8018770:	2300      	movs	r3, #0
}
 8018772:	4618      	mov	r0, r3
 8018774:	3710      	adds	r7, #16
 8018776:	46bd      	mov	sp, r7
 8018778:	bd80      	pop	{r7, pc}
	...

0801877c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801877c:	b580      	push	{r7, lr}
 801877e:	b086      	sub	sp, #24
 8018780:	af00      	add	r7, sp, #0
 8018782:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018784:	2182      	movs	r1, #130	@ 0x82
 8018786:	4818      	ldr	r0, [pc, #96]	@ (80187e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8018788:	f000 fd4f 	bl	801922a <USBD_GetEpDesc>
 801878c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801878e:	2101      	movs	r1, #1
 8018790:	4815      	ldr	r0, [pc, #84]	@ (80187e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8018792:	f000 fd4a 	bl	801922a <USBD_GetEpDesc>
 8018796:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8018798:	2181      	movs	r1, #129	@ 0x81
 801879a:	4813      	ldr	r0, [pc, #76]	@ (80187e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801879c:	f000 fd45 	bl	801922a <USBD_GetEpDesc>
 80187a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80187a2:	697b      	ldr	r3, [r7, #20]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d002      	beq.n	80187ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80187a8:	697b      	ldr	r3, [r7, #20]
 80187aa:	2210      	movs	r2, #16
 80187ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80187ae:	693b      	ldr	r3, [r7, #16]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d006      	beq.n	80187c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80187b4:	693b      	ldr	r3, [r7, #16]
 80187b6:	2200      	movs	r2, #0
 80187b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80187bc:	711a      	strb	r2, [r3, #4]
 80187be:	2200      	movs	r2, #0
 80187c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d006      	beq.n	80187d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	2200      	movs	r2, #0
 80187cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80187d0:	711a      	strb	r2, [r3, #4]
 80187d2:	2200      	movs	r2, #0
 80187d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	2243      	movs	r2, #67	@ 0x43
 80187da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80187dc:	4b02      	ldr	r3, [pc, #8]	@ (80187e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80187de:	4618      	mov	r0, r3
 80187e0:	3718      	adds	r7, #24
 80187e2:	46bd      	mov	sp, r7
 80187e4:	bd80      	pop	{r7, pc}
 80187e6:	bf00      	nop
 80187e8:	240000d4 	.word	0x240000d4

080187ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b086      	sub	sp, #24
 80187f0:	af00      	add	r7, sp, #0
 80187f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80187f4:	2182      	movs	r1, #130	@ 0x82
 80187f6:	4818      	ldr	r0, [pc, #96]	@ (8018858 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80187f8:	f000 fd17 	bl	801922a <USBD_GetEpDesc>
 80187fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80187fe:	2101      	movs	r1, #1
 8018800:	4815      	ldr	r0, [pc, #84]	@ (8018858 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018802:	f000 fd12 	bl	801922a <USBD_GetEpDesc>
 8018806:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8018808:	2181      	movs	r1, #129	@ 0x81
 801880a:	4813      	ldr	r0, [pc, #76]	@ (8018858 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801880c:	f000 fd0d 	bl	801922a <USBD_GetEpDesc>
 8018810:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018812:	697b      	ldr	r3, [r7, #20]
 8018814:	2b00      	cmp	r3, #0
 8018816:	d002      	beq.n	801881e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8018818:	697b      	ldr	r3, [r7, #20]
 801881a:	2210      	movs	r2, #16
 801881c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801881e:	693b      	ldr	r3, [r7, #16]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d006      	beq.n	8018832 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8018824:	693b      	ldr	r3, [r7, #16]
 8018826:	2200      	movs	r2, #0
 8018828:	711a      	strb	r2, [r3, #4]
 801882a:	2200      	movs	r2, #0
 801882c:	f042 0202 	orr.w	r2, r2, #2
 8018830:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d006      	beq.n	8018846 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	2200      	movs	r2, #0
 801883c:	711a      	strb	r2, [r3, #4]
 801883e:	2200      	movs	r2, #0
 8018840:	f042 0202 	orr.w	r2, r2, #2
 8018844:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	2243      	movs	r2, #67	@ 0x43
 801884a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801884c:	4b02      	ldr	r3, [pc, #8]	@ (8018858 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801884e:	4618      	mov	r0, r3
 8018850:	3718      	adds	r7, #24
 8018852:	46bd      	mov	sp, r7
 8018854:	bd80      	pop	{r7, pc}
 8018856:	bf00      	nop
 8018858:	240000d4 	.word	0x240000d4

0801885c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b086      	sub	sp, #24
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018864:	2182      	movs	r1, #130	@ 0x82
 8018866:	4818      	ldr	r0, [pc, #96]	@ (80188c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8018868:	f000 fcdf 	bl	801922a <USBD_GetEpDesc>
 801886c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801886e:	2101      	movs	r1, #1
 8018870:	4815      	ldr	r0, [pc, #84]	@ (80188c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8018872:	f000 fcda 	bl	801922a <USBD_GetEpDesc>
 8018876:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8018878:	2181      	movs	r1, #129	@ 0x81
 801887a:	4813      	ldr	r0, [pc, #76]	@ (80188c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801887c:	f000 fcd5 	bl	801922a <USBD_GetEpDesc>
 8018880:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018882:	697b      	ldr	r3, [r7, #20]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d002      	beq.n	801888e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8018888:	697b      	ldr	r3, [r7, #20]
 801888a:	2210      	movs	r2, #16
 801888c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801888e:	693b      	ldr	r3, [r7, #16]
 8018890:	2b00      	cmp	r3, #0
 8018892:	d006      	beq.n	80188a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018894:	693b      	ldr	r3, [r7, #16]
 8018896:	2200      	movs	r2, #0
 8018898:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801889c:	711a      	strb	r2, [r3, #4]
 801889e:	2200      	movs	r2, #0
 80188a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d006      	beq.n	80188b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	2200      	movs	r2, #0
 80188ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80188b0:	711a      	strb	r2, [r3, #4]
 80188b2:	2200      	movs	r2, #0
 80188b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	2243      	movs	r2, #67	@ 0x43
 80188ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80188bc:	4b02      	ldr	r3, [pc, #8]	@ (80188c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80188be:	4618      	mov	r0, r3
 80188c0:	3718      	adds	r7, #24
 80188c2:	46bd      	mov	sp, r7
 80188c4:	bd80      	pop	{r7, pc}
 80188c6:	bf00      	nop
 80188c8:	240000d4 	.word	0x240000d4

080188cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80188cc:	b480      	push	{r7}
 80188ce:	b083      	sub	sp, #12
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	220a      	movs	r2, #10
 80188d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80188da:	4b03      	ldr	r3, [pc, #12]	@ (80188e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80188dc:	4618      	mov	r0, r3
 80188de:	370c      	adds	r7, #12
 80188e0:	46bd      	mov	sp, r7
 80188e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188e6:	4770      	bx	lr
 80188e8:	24000090 	.word	0x24000090

080188ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80188ec:	b480      	push	{r7}
 80188ee:	b083      	sub	sp, #12
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
 80188f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80188f6:	683b      	ldr	r3, [r7, #0]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d101      	bne.n	8018900 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80188fc:	2303      	movs	r3, #3
 80188fe:	e009      	b.n	8018914 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8018906:	687a      	ldr	r2, [r7, #4]
 8018908:	33b0      	adds	r3, #176	@ 0xb0
 801890a:	009b      	lsls	r3, r3, #2
 801890c:	4413      	add	r3, r2
 801890e:	683a      	ldr	r2, [r7, #0]
 8018910:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8018912:	2300      	movs	r3, #0
}
 8018914:	4618      	mov	r0, r3
 8018916:	370c      	adds	r7, #12
 8018918:	46bd      	mov	sp, r7
 801891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801891e:	4770      	bx	lr

08018920 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8018920:	b480      	push	{r7}
 8018922:	b087      	sub	sp, #28
 8018924:	af00      	add	r7, sp, #0
 8018926:	60f8      	str	r0, [r7, #12]
 8018928:	60b9      	str	r1, [r7, #8]
 801892a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	32b0      	adds	r2, #176	@ 0xb0
 8018936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801893a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801893c:	697b      	ldr	r3, [r7, #20]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d101      	bne.n	8018946 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8018942:	2303      	movs	r3, #3
 8018944:	e008      	b.n	8018958 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8018946:	697b      	ldr	r3, [r7, #20]
 8018948:	68ba      	ldr	r2, [r7, #8]
 801894a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801894e:	697b      	ldr	r3, [r7, #20]
 8018950:	687a      	ldr	r2, [r7, #4]
 8018952:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8018956:	2300      	movs	r3, #0
}
 8018958:	4618      	mov	r0, r3
 801895a:	371c      	adds	r7, #28
 801895c:	46bd      	mov	sp, r7
 801895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018962:	4770      	bx	lr

08018964 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8018964:	b480      	push	{r7}
 8018966:	b085      	sub	sp, #20
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
 801896c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	32b0      	adds	r2, #176	@ 0xb0
 8018978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801897c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	2b00      	cmp	r3, #0
 8018982:	d101      	bne.n	8018988 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8018984:	2303      	movs	r3, #3
 8018986:	e004      	b.n	8018992 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	683a      	ldr	r2, [r7, #0]
 801898c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8018990:	2300      	movs	r3, #0
}
 8018992:	4618      	mov	r0, r3
 8018994:	3714      	adds	r7, #20
 8018996:	46bd      	mov	sp, r7
 8018998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801899c:	4770      	bx	lr
	...

080189a0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b084      	sub	sp, #16
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	32b0      	adds	r2, #176	@ 0xb0
 80189b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80189b6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80189b8:	2301      	movs	r3, #1
 80189ba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80189bc:	68bb      	ldr	r3, [r7, #8]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d101      	bne.n	80189c6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80189c2:	2303      	movs	r3, #3
 80189c4:	e025      	b.n	8018a12 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80189c6:	68bb      	ldr	r3, [r7, #8]
 80189c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d11f      	bne.n	8018a10 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80189d0:	68bb      	ldr	r3, [r7, #8]
 80189d2:	2201      	movs	r2, #1
 80189d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80189d8:	4b10      	ldr	r3, [pc, #64]	@ (8018a1c <USBD_CDC_TransmitPacket+0x7c>)
 80189da:	781b      	ldrb	r3, [r3, #0]
 80189dc:	f003 020f 	and.w	r2, r3, #15
 80189e0:	68bb      	ldr	r3, [r7, #8]
 80189e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80189e6:	6878      	ldr	r0, [r7, #4]
 80189e8:	4613      	mov	r3, r2
 80189ea:	009b      	lsls	r3, r3, #2
 80189ec:	4413      	add	r3, r2
 80189ee:	009b      	lsls	r3, r3, #2
 80189f0:	4403      	add	r3, r0
 80189f2:	3318      	adds	r3, #24
 80189f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80189f6:	4b09      	ldr	r3, [pc, #36]	@ (8018a1c <USBD_CDC_TransmitPacket+0x7c>)
 80189f8:	7819      	ldrb	r1, [r3, #0]
 80189fa:	68bb      	ldr	r3, [r7, #8]
 80189fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8018a00:	68bb      	ldr	r3, [r7, #8]
 8018a02:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8018a06:	6878      	ldr	r0, [r7, #4]
 8018a08:	f002 f891 	bl	801ab2e <USBD_LL_Transmit>

    ret = USBD_OK;
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8018a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a12:	4618      	mov	r0, r3
 8018a14:	3710      	adds	r7, #16
 8018a16:	46bd      	mov	sp, r7
 8018a18:	bd80      	pop	{r7, pc}
 8018a1a:	bf00      	nop
 8018a1c:	24000117 	.word	0x24000117

08018a20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b084      	sub	sp, #16
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	32b0      	adds	r2, #176	@ 0xb0
 8018a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	32b0      	adds	r2, #176	@ 0xb0
 8018a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d101      	bne.n	8018a4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8018a4a:	2303      	movs	r3, #3
 8018a4c:	e018      	b.n	8018a80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	7c1b      	ldrb	r3, [r3, #16]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d10a      	bne.n	8018a6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8018a56:	4b0c      	ldr	r3, [pc, #48]	@ (8018a88 <USBD_CDC_ReceivePacket+0x68>)
 8018a58:	7819      	ldrb	r1, [r3, #0]
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8018a60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018a64:	6878      	ldr	r0, [r7, #4]
 8018a66:	f002 f883 	bl	801ab70 <USBD_LL_PrepareReceive>
 8018a6a:	e008      	b.n	8018a7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8018a6c:	4b06      	ldr	r3, [pc, #24]	@ (8018a88 <USBD_CDC_ReceivePacket+0x68>)
 8018a6e:	7819      	ldrb	r1, [r3, #0]
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8018a76:	2340      	movs	r3, #64	@ 0x40
 8018a78:	6878      	ldr	r0, [r7, #4]
 8018a7a:	f002 f879 	bl	801ab70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018a7e:	2300      	movs	r3, #0
}
 8018a80:	4618      	mov	r0, r3
 8018a82:	3710      	adds	r7, #16
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bd80      	pop	{r7, pc}
 8018a88:	24000118 	.word	0x24000118

08018a8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b086      	sub	sp, #24
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	60f8      	str	r0, [r7, #12]
 8018a94:	60b9      	str	r1, [r7, #8]
 8018a96:	4613      	mov	r3, r2
 8018a98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d101      	bne.n	8018aa4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8018aa0:	2303      	movs	r3, #3
 8018aa2:	e01f      	b.n	8018ae4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	2200      	movs	r2, #0
 8018aa8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	2200      	movs	r2, #0
 8018ab0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8018abc:	68bb      	ldr	r3, [r7, #8]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d003      	beq.n	8018aca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	68ba      	ldr	r2, [r7, #8]
 8018ac6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	2201      	movs	r2, #1
 8018ace:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	79fa      	ldrb	r2, [r7, #7]
 8018ad6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8018ad8:	68f8      	ldr	r0, [r7, #12]
 8018ada:	f001 feef 	bl	801a8bc <USBD_LL_Init>
 8018ade:	4603      	mov	r3, r0
 8018ae0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8018ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	3718      	adds	r7, #24
 8018ae8:	46bd      	mov	sp, r7
 8018aea:	bd80      	pop	{r7, pc}

08018aec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b084      	sub	sp, #16
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	6078      	str	r0, [r7, #4]
 8018af4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018af6:	2300      	movs	r3, #0
 8018af8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8018afa:	683b      	ldr	r3, [r7, #0]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d101      	bne.n	8018b04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8018b00:	2303      	movs	r3, #3
 8018b02:	e025      	b.n	8018b50 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	683a      	ldr	r2, [r7, #0]
 8018b08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	32ae      	adds	r2, #174	@ 0xae
 8018b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d00f      	beq.n	8018b40 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	32ae      	adds	r2, #174	@ 0xae
 8018b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b30:	f107 020e 	add.w	r2, r7, #14
 8018b34:	4610      	mov	r0, r2
 8018b36:	4798      	blx	r3
 8018b38:	4602      	mov	r2, r0
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018b46:	1c5a      	adds	r2, r3, #1
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8018b4e:	2300      	movs	r3, #0
}
 8018b50:	4618      	mov	r0, r3
 8018b52:	3710      	adds	r7, #16
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}

08018b58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b082      	sub	sp, #8
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8018b60:	6878      	ldr	r0, [r7, #4]
 8018b62:	f001 fefb 	bl	801a95c <USBD_LL_Start>
 8018b66:	4603      	mov	r3, r0
}
 8018b68:	4618      	mov	r0, r3
 8018b6a:	3708      	adds	r7, #8
 8018b6c:	46bd      	mov	sp, r7
 8018b6e:	bd80      	pop	{r7, pc}

08018b70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8018b70:	b480      	push	{r7}
 8018b72:	b083      	sub	sp, #12
 8018b74:	af00      	add	r7, sp, #0
 8018b76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018b78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	370c      	adds	r7, #12
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b84:	4770      	bx	lr

08018b86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018b86:	b580      	push	{r7, lr}
 8018b88:	b084      	sub	sp, #16
 8018b8a:	af00      	add	r7, sp, #0
 8018b8c:	6078      	str	r0, [r7, #4]
 8018b8e:	460b      	mov	r3, r1
 8018b90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8018b92:	2300      	movs	r3, #0
 8018b94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d009      	beq.n	8018bb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	78fa      	ldrb	r2, [r7, #3]
 8018baa:	4611      	mov	r1, r2
 8018bac:	6878      	ldr	r0, [r7, #4]
 8018bae:	4798      	blx	r3
 8018bb0:	4603      	mov	r3, r0
 8018bb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	3710      	adds	r7, #16
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	bd80      	pop	{r7, pc}

08018bbe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018bbe:	b580      	push	{r7, lr}
 8018bc0:	b084      	sub	sp, #16
 8018bc2:	af00      	add	r7, sp, #0
 8018bc4:	6078      	str	r0, [r7, #4]
 8018bc6:	460b      	mov	r3, r1
 8018bc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8018bca:	2300      	movs	r3, #0
 8018bcc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018bd4:	685b      	ldr	r3, [r3, #4]
 8018bd6:	78fa      	ldrb	r2, [r7, #3]
 8018bd8:	4611      	mov	r1, r2
 8018bda:	6878      	ldr	r0, [r7, #4]
 8018bdc:	4798      	blx	r3
 8018bde:	4603      	mov	r3, r0
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d001      	beq.n	8018be8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8018be4:	2303      	movs	r3, #3
 8018be6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bea:	4618      	mov	r0, r3
 8018bec:	3710      	adds	r7, #16
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bd80      	pop	{r7, pc}

08018bf2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8018bf2:	b580      	push	{r7, lr}
 8018bf4:	b084      	sub	sp, #16
 8018bf6:	af00      	add	r7, sp, #0
 8018bf8:	6078      	str	r0, [r7, #4]
 8018bfa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8018c02:	6839      	ldr	r1, [r7, #0]
 8018c04:	4618      	mov	r0, r3
 8018c06:	f001 f936 	bl	8019e76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	2201      	movs	r2, #1
 8018c0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8018c18:	461a      	mov	r2, r3
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8018c26:	f003 031f 	and.w	r3, r3, #31
 8018c2a:	2b02      	cmp	r3, #2
 8018c2c:	d01a      	beq.n	8018c64 <USBD_LL_SetupStage+0x72>
 8018c2e:	2b02      	cmp	r3, #2
 8018c30:	d822      	bhi.n	8018c78 <USBD_LL_SetupStage+0x86>
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d002      	beq.n	8018c3c <USBD_LL_SetupStage+0x4a>
 8018c36:	2b01      	cmp	r3, #1
 8018c38:	d00a      	beq.n	8018c50 <USBD_LL_SetupStage+0x5e>
 8018c3a:	e01d      	b.n	8018c78 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8018c42:	4619      	mov	r1, r3
 8018c44:	6878      	ldr	r0, [r7, #4]
 8018c46:	f000 fb63 	bl	8019310 <USBD_StdDevReq>
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8018c4e:	e020      	b.n	8018c92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8018c56:	4619      	mov	r1, r3
 8018c58:	6878      	ldr	r0, [r7, #4]
 8018c5a:	f000 fbcb 	bl	80193f4 <USBD_StdItfReq>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	73fb      	strb	r3, [r7, #15]
      break;
 8018c62:	e016      	b.n	8018c92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8018c6a:	4619      	mov	r1, r3
 8018c6c:	6878      	ldr	r0, [r7, #4]
 8018c6e:	f000 fc2d 	bl	80194cc <USBD_StdEPReq>
 8018c72:	4603      	mov	r3, r0
 8018c74:	73fb      	strb	r3, [r7, #15]
      break;
 8018c76:	e00c      	b.n	8018c92 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8018c7e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8018c82:	b2db      	uxtb	r3, r3
 8018c84:	4619      	mov	r1, r3
 8018c86:	6878      	ldr	r0, [r7, #4]
 8018c88:	f001 fec8 	bl	801aa1c <USBD_LL_StallEP>
 8018c8c:	4603      	mov	r3, r0
 8018c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8018c90:	bf00      	nop
  }

  return ret;
 8018c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c94:	4618      	mov	r0, r3
 8018c96:	3710      	adds	r7, #16
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	bd80      	pop	{r7, pc}

08018c9c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b086      	sub	sp, #24
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	60f8      	str	r0, [r7, #12]
 8018ca4:	460b      	mov	r3, r1
 8018ca6:	607a      	str	r2, [r7, #4]
 8018ca8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8018caa:	2300      	movs	r3, #0
 8018cac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8018cae:	7afb      	ldrb	r3, [r7, #11]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d16e      	bne.n	8018d92 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8018cba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8018cc2:	2b03      	cmp	r3, #3
 8018cc4:	f040 8098 	bne.w	8018df8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8018cc8:	693b      	ldr	r3, [r7, #16]
 8018cca:	689a      	ldr	r2, [r3, #8]
 8018ccc:	693b      	ldr	r3, [r7, #16]
 8018cce:	68db      	ldr	r3, [r3, #12]
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	d913      	bls.n	8018cfc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8018cd4:	693b      	ldr	r3, [r7, #16]
 8018cd6:	689a      	ldr	r2, [r3, #8]
 8018cd8:	693b      	ldr	r3, [r7, #16]
 8018cda:	68db      	ldr	r3, [r3, #12]
 8018cdc:	1ad2      	subs	r2, r2, r3
 8018cde:	693b      	ldr	r3, [r7, #16]
 8018ce0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8018ce2:	693b      	ldr	r3, [r7, #16]
 8018ce4:	68da      	ldr	r2, [r3, #12]
 8018ce6:	693b      	ldr	r3, [r7, #16]
 8018ce8:	689b      	ldr	r3, [r3, #8]
 8018cea:	4293      	cmp	r3, r2
 8018cec:	bf28      	it	cs
 8018cee:	4613      	movcs	r3, r2
 8018cf0:	461a      	mov	r2, r3
 8018cf2:	6879      	ldr	r1, [r7, #4]
 8018cf4:	68f8      	ldr	r0, [r7, #12]
 8018cf6:	f001 f9be 	bl	801a076 <USBD_CtlContinueRx>
 8018cfa:	e07d      	b.n	8018df8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8018d02:	f003 031f 	and.w	r3, r3, #31
 8018d06:	2b02      	cmp	r3, #2
 8018d08:	d014      	beq.n	8018d34 <USBD_LL_DataOutStage+0x98>
 8018d0a:	2b02      	cmp	r3, #2
 8018d0c:	d81d      	bhi.n	8018d4a <USBD_LL_DataOutStage+0xae>
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d002      	beq.n	8018d18 <USBD_LL_DataOutStage+0x7c>
 8018d12:	2b01      	cmp	r3, #1
 8018d14:	d003      	beq.n	8018d1e <USBD_LL_DataOutStage+0x82>
 8018d16:	e018      	b.n	8018d4a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8018d18:	2300      	movs	r3, #0
 8018d1a:	75bb      	strb	r3, [r7, #22]
            break;
 8018d1c:	e018      	b.n	8018d50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	4619      	mov	r1, r3
 8018d28:	68f8      	ldr	r0, [r7, #12]
 8018d2a:	f000 fa64 	bl	80191f6 <USBD_CoreFindIF>
 8018d2e:	4603      	mov	r3, r0
 8018d30:	75bb      	strb	r3, [r7, #22]
            break;
 8018d32:	e00d      	b.n	8018d50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8018d3a:	b2db      	uxtb	r3, r3
 8018d3c:	4619      	mov	r1, r3
 8018d3e:	68f8      	ldr	r0, [r7, #12]
 8018d40:	f000 fa66 	bl	8019210 <USBD_CoreFindEP>
 8018d44:	4603      	mov	r3, r0
 8018d46:	75bb      	strb	r3, [r7, #22]
            break;
 8018d48:	e002      	b.n	8018d50 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	75bb      	strb	r3, [r7, #22]
            break;
 8018d4e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8018d50:	7dbb      	ldrb	r3, [r7, #22]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d119      	bne.n	8018d8a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018d5c:	b2db      	uxtb	r3, r3
 8018d5e:	2b03      	cmp	r3, #3
 8018d60:	d113      	bne.n	8018d8a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8018d62:	7dba      	ldrb	r2, [r7, #22]
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	32ae      	adds	r2, #174	@ 0xae
 8018d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d6c:	691b      	ldr	r3, [r3, #16]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d00b      	beq.n	8018d8a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8018d72:	7dba      	ldrb	r2, [r7, #22]
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8018d7a:	7dba      	ldrb	r2, [r7, #22]
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	32ae      	adds	r2, #174	@ 0xae
 8018d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d84:	691b      	ldr	r3, [r3, #16]
 8018d86:	68f8      	ldr	r0, [r7, #12]
 8018d88:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8018d8a:	68f8      	ldr	r0, [r7, #12]
 8018d8c:	f001 f984 	bl	801a098 <USBD_CtlSendStatus>
 8018d90:	e032      	b.n	8018df8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8018d92:	7afb      	ldrb	r3, [r7, #11]
 8018d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018d98:	b2db      	uxtb	r3, r3
 8018d9a:	4619      	mov	r1, r3
 8018d9c:	68f8      	ldr	r0, [r7, #12]
 8018d9e:	f000 fa37 	bl	8019210 <USBD_CoreFindEP>
 8018da2:	4603      	mov	r3, r0
 8018da4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018da6:	7dbb      	ldrb	r3, [r7, #22]
 8018da8:	2bff      	cmp	r3, #255	@ 0xff
 8018daa:	d025      	beq.n	8018df8 <USBD_LL_DataOutStage+0x15c>
 8018dac:	7dbb      	ldrb	r3, [r7, #22]
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d122      	bne.n	8018df8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018db2:	68fb      	ldr	r3, [r7, #12]
 8018db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018db8:	b2db      	uxtb	r3, r3
 8018dba:	2b03      	cmp	r3, #3
 8018dbc:	d117      	bne.n	8018dee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8018dbe:	7dba      	ldrb	r2, [r7, #22]
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	32ae      	adds	r2, #174	@ 0xae
 8018dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018dc8:	699b      	ldr	r3, [r3, #24]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d00f      	beq.n	8018dee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8018dce:	7dba      	ldrb	r2, [r7, #22]
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8018dd6:	7dba      	ldrb	r2, [r7, #22]
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	32ae      	adds	r2, #174	@ 0xae
 8018ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018de0:	699b      	ldr	r3, [r3, #24]
 8018de2:	7afa      	ldrb	r2, [r7, #11]
 8018de4:	4611      	mov	r1, r2
 8018de6:	68f8      	ldr	r0, [r7, #12]
 8018de8:	4798      	blx	r3
 8018dea:	4603      	mov	r3, r0
 8018dec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8018dee:	7dfb      	ldrb	r3, [r7, #23]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d001      	beq.n	8018df8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8018df4:	7dfb      	ldrb	r3, [r7, #23]
 8018df6:	e000      	b.n	8018dfa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8018df8:	2300      	movs	r3, #0
}
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	3718      	adds	r7, #24
 8018dfe:	46bd      	mov	sp, r7
 8018e00:	bd80      	pop	{r7, pc}

08018e02 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8018e02:	b580      	push	{r7, lr}
 8018e04:	b086      	sub	sp, #24
 8018e06:	af00      	add	r7, sp, #0
 8018e08:	60f8      	str	r0, [r7, #12]
 8018e0a:	460b      	mov	r3, r1
 8018e0c:	607a      	str	r2, [r7, #4]
 8018e0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8018e10:	7afb      	ldrb	r3, [r7, #11]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d16f      	bne.n	8018ef6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	3314      	adds	r3, #20
 8018e1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8018e1c:	68fb      	ldr	r3, [r7, #12]
 8018e1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8018e22:	2b02      	cmp	r3, #2
 8018e24:	d15a      	bne.n	8018edc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8018e26:	693b      	ldr	r3, [r7, #16]
 8018e28:	689a      	ldr	r2, [r3, #8]
 8018e2a:	693b      	ldr	r3, [r7, #16]
 8018e2c:	68db      	ldr	r3, [r3, #12]
 8018e2e:	429a      	cmp	r2, r3
 8018e30:	d914      	bls.n	8018e5c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018e32:	693b      	ldr	r3, [r7, #16]
 8018e34:	689a      	ldr	r2, [r3, #8]
 8018e36:	693b      	ldr	r3, [r7, #16]
 8018e38:	68db      	ldr	r3, [r3, #12]
 8018e3a:	1ad2      	subs	r2, r2, r3
 8018e3c:	693b      	ldr	r3, [r7, #16]
 8018e3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8018e40:	693b      	ldr	r3, [r7, #16]
 8018e42:	689b      	ldr	r3, [r3, #8]
 8018e44:	461a      	mov	r2, r3
 8018e46:	6879      	ldr	r1, [r7, #4]
 8018e48:	68f8      	ldr	r0, [r7, #12]
 8018e4a:	f001 f8e6 	bl	801a01a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018e4e:	2300      	movs	r3, #0
 8018e50:	2200      	movs	r2, #0
 8018e52:	2100      	movs	r1, #0
 8018e54:	68f8      	ldr	r0, [r7, #12]
 8018e56:	f001 fe8b 	bl	801ab70 <USBD_LL_PrepareReceive>
 8018e5a:	e03f      	b.n	8018edc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8018e5c:	693b      	ldr	r3, [r7, #16]
 8018e5e:	68da      	ldr	r2, [r3, #12]
 8018e60:	693b      	ldr	r3, [r7, #16]
 8018e62:	689b      	ldr	r3, [r3, #8]
 8018e64:	429a      	cmp	r2, r3
 8018e66:	d11c      	bne.n	8018ea2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8018e68:	693b      	ldr	r3, [r7, #16]
 8018e6a:	685a      	ldr	r2, [r3, #4]
 8018e6c:	693b      	ldr	r3, [r7, #16]
 8018e6e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8018e70:	429a      	cmp	r2, r3
 8018e72:	d316      	bcc.n	8018ea2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8018e74:	693b      	ldr	r3, [r7, #16]
 8018e76:	685a      	ldr	r2, [r3, #4]
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8018e7e:	429a      	cmp	r2, r3
 8018e80:	d20f      	bcs.n	8018ea2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8018e82:	2200      	movs	r2, #0
 8018e84:	2100      	movs	r1, #0
 8018e86:	68f8      	ldr	r0, [r7, #12]
 8018e88:	f001 f8c7 	bl	801a01a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	2200      	movs	r2, #0
 8018e90:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018e94:	2300      	movs	r3, #0
 8018e96:	2200      	movs	r2, #0
 8018e98:	2100      	movs	r1, #0
 8018e9a:	68f8      	ldr	r0, [r7, #12]
 8018e9c:	f001 fe68 	bl	801ab70 <USBD_LL_PrepareReceive>
 8018ea0:	e01c      	b.n	8018edc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018ea8:	b2db      	uxtb	r3, r3
 8018eaa:	2b03      	cmp	r3, #3
 8018eac:	d10f      	bne.n	8018ece <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018eb4:	68db      	ldr	r3, [r3, #12]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d009      	beq.n	8018ece <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	2200      	movs	r2, #0
 8018ebe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018ec8:	68db      	ldr	r3, [r3, #12]
 8018eca:	68f8      	ldr	r0, [r7, #12]
 8018ecc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8018ece:	2180      	movs	r1, #128	@ 0x80
 8018ed0:	68f8      	ldr	r0, [r7, #12]
 8018ed2:	f001 fda3 	bl	801aa1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8018ed6:	68f8      	ldr	r0, [r7, #12]
 8018ed8:	f001 f8f1 	bl	801a0be <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d03a      	beq.n	8018f5c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8018ee6:	68f8      	ldr	r0, [r7, #12]
 8018ee8:	f7ff fe42 	bl	8018b70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	2200      	movs	r2, #0
 8018ef0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8018ef4:	e032      	b.n	8018f5c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8018ef6:	7afb      	ldrb	r3, [r7, #11]
 8018ef8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8018efc:	b2db      	uxtb	r3, r3
 8018efe:	4619      	mov	r1, r3
 8018f00:	68f8      	ldr	r0, [r7, #12]
 8018f02:	f000 f985 	bl	8019210 <USBD_CoreFindEP>
 8018f06:	4603      	mov	r3, r0
 8018f08:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018f0a:	7dfb      	ldrb	r3, [r7, #23]
 8018f0c:	2bff      	cmp	r3, #255	@ 0xff
 8018f0e:	d025      	beq.n	8018f5c <USBD_LL_DataInStage+0x15a>
 8018f10:	7dfb      	ldrb	r3, [r7, #23]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d122      	bne.n	8018f5c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018f1c:	b2db      	uxtb	r3, r3
 8018f1e:	2b03      	cmp	r3, #3
 8018f20:	d11c      	bne.n	8018f5c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8018f22:	7dfa      	ldrb	r2, [r7, #23]
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	32ae      	adds	r2, #174	@ 0xae
 8018f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f2c:	695b      	ldr	r3, [r3, #20]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d014      	beq.n	8018f5c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8018f32:	7dfa      	ldrb	r2, [r7, #23]
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8018f3a:	7dfa      	ldrb	r2, [r7, #23]
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	32ae      	adds	r2, #174	@ 0xae
 8018f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f44:	695b      	ldr	r3, [r3, #20]
 8018f46:	7afa      	ldrb	r2, [r7, #11]
 8018f48:	4611      	mov	r1, r2
 8018f4a:	68f8      	ldr	r0, [r7, #12]
 8018f4c:	4798      	blx	r3
 8018f4e:	4603      	mov	r3, r0
 8018f50:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8018f52:	7dbb      	ldrb	r3, [r7, #22]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d001      	beq.n	8018f5c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8018f58:	7dbb      	ldrb	r3, [r7, #22]
 8018f5a:	e000      	b.n	8018f5e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8018f5c:	2300      	movs	r3, #0
}
 8018f5e:	4618      	mov	r0, r3
 8018f60:	3718      	adds	r7, #24
 8018f62:	46bd      	mov	sp, r7
 8018f64:	bd80      	pop	{r7, pc}

08018f66 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8018f66:	b580      	push	{r7, lr}
 8018f68:	b084      	sub	sp, #16
 8018f6a:	af00      	add	r7, sp, #0
 8018f6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8018f6e:	2300      	movs	r3, #0
 8018f70:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	2201      	movs	r2, #1
 8018f76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	2200      	movs	r2, #0
 8018f7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	2200      	movs	r2, #0
 8018f86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	2200      	movs	r2, #0
 8018f94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d014      	beq.n	8018fcc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018fa8:	685b      	ldr	r3, [r3, #4]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d00e      	beq.n	8018fcc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018fb4:	685b      	ldr	r3, [r3, #4]
 8018fb6:	687a      	ldr	r2, [r7, #4]
 8018fb8:	6852      	ldr	r2, [r2, #4]
 8018fba:	b2d2      	uxtb	r2, r2
 8018fbc:	4611      	mov	r1, r2
 8018fbe:	6878      	ldr	r0, [r7, #4]
 8018fc0:	4798      	blx	r3
 8018fc2:	4603      	mov	r3, r0
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d001      	beq.n	8018fcc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8018fc8:	2303      	movs	r3, #3
 8018fca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018fcc:	2340      	movs	r3, #64	@ 0x40
 8018fce:	2200      	movs	r2, #0
 8018fd0:	2100      	movs	r1, #0
 8018fd2:	6878      	ldr	r0, [r7, #4]
 8018fd4:	f001 fcdd 	bl	801a992 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	2201      	movs	r2, #1
 8018fdc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	2240      	movs	r2, #64	@ 0x40
 8018fe4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018fe8:	2340      	movs	r3, #64	@ 0x40
 8018fea:	2200      	movs	r2, #0
 8018fec:	2180      	movs	r1, #128	@ 0x80
 8018fee:	6878      	ldr	r0, [r7, #4]
 8018ff0:	f001 fccf 	bl	801a992 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	2201      	movs	r2, #1
 8018ff8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	2240      	movs	r2, #64	@ 0x40
 8018ffe:	621a      	str	r2, [r3, #32]

  return ret;
 8019000:	7bfb      	ldrb	r3, [r7, #15]
}
 8019002:	4618      	mov	r0, r3
 8019004:	3710      	adds	r7, #16
 8019006:	46bd      	mov	sp, r7
 8019008:	bd80      	pop	{r7, pc}

0801900a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801900a:	b480      	push	{r7}
 801900c:	b083      	sub	sp, #12
 801900e:	af00      	add	r7, sp, #0
 8019010:	6078      	str	r0, [r7, #4]
 8019012:	460b      	mov	r3, r1
 8019014:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	78fa      	ldrb	r2, [r7, #3]
 801901a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801901c:	2300      	movs	r3, #0
}
 801901e:	4618      	mov	r0, r3
 8019020:	370c      	adds	r7, #12
 8019022:	46bd      	mov	sp, r7
 8019024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019028:	4770      	bx	lr

0801902a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801902a:	b480      	push	{r7}
 801902c:	b083      	sub	sp, #12
 801902e:	af00      	add	r7, sp, #0
 8019030:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019038:	b2db      	uxtb	r3, r3
 801903a:	2b04      	cmp	r3, #4
 801903c:	d006      	beq.n	801904c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019044:	b2da      	uxtb	r2, r3
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	2204      	movs	r2, #4
 8019050:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8019054:	2300      	movs	r3, #0
}
 8019056:	4618      	mov	r0, r3
 8019058:	370c      	adds	r7, #12
 801905a:	46bd      	mov	sp, r7
 801905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019060:	4770      	bx	lr

08019062 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8019062:	b480      	push	{r7}
 8019064:	b083      	sub	sp, #12
 8019066:	af00      	add	r7, sp, #0
 8019068:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019070:	b2db      	uxtb	r3, r3
 8019072:	2b04      	cmp	r3, #4
 8019074:	d106      	bne.n	8019084 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801907c:	b2da      	uxtb	r2, r3
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8019084:	2300      	movs	r3, #0
}
 8019086:	4618      	mov	r0, r3
 8019088:	370c      	adds	r7, #12
 801908a:	46bd      	mov	sp, r7
 801908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019090:	4770      	bx	lr

08019092 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8019092:	b580      	push	{r7, lr}
 8019094:	b082      	sub	sp, #8
 8019096:	af00      	add	r7, sp, #0
 8019098:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80190a0:	b2db      	uxtb	r3, r3
 80190a2:	2b03      	cmp	r3, #3
 80190a4:	d110      	bne.n	80190c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d00b      	beq.n	80190c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80190b6:	69db      	ldr	r3, [r3, #28]
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d005      	beq.n	80190c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80190c2:	69db      	ldr	r3, [r3, #28]
 80190c4:	6878      	ldr	r0, [r7, #4]
 80190c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80190c8:	2300      	movs	r3, #0
}
 80190ca:	4618      	mov	r0, r3
 80190cc:	3708      	adds	r7, #8
 80190ce:	46bd      	mov	sp, r7
 80190d0:	bd80      	pop	{r7, pc}

080190d2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80190d2:	b580      	push	{r7, lr}
 80190d4:	b082      	sub	sp, #8
 80190d6:	af00      	add	r7, sp, #0
 80190d8:	6078      	str	r0, [r7, #4]
 80190da:	460b      	mov	r3, r1
 80190dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	32ae      	adds	r2, #174	@ 0xae
 80190e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d101      	bne.n	80190f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80190f0:	2303      	movs	r3, #3
 80190f2:	e01c      	b.n	801912e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80190fa:	b2db      	uxtb	r3, r3
 80190fc:	2b03      	cmp	r3, #3
 80190fe:	d115      	bne.n	801912c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	32ae      	adds	r2, #174	@ 0xae
 801910a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801910e:	6a1b      	ldr	r3, [r3, #32]
 8019110:	2b00      	cmp	r3, #0
 8019112:	d00b      	beq.n	801912c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	32ae      	adds	r2, #174	@ 0xae
 801911e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019122:	6a1b      	ldr	r3, [r3, #32]
 8019124:	78fa      	ldrb	r2, [r7, #3]
 8019126:	4611      	mov	r1, r2
 8019128:	6878      	ldr	r0, [r7, #4]
 801912a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801912c:	2300      	movs	r3, #0
}
 801912e:	4618      	mov	r0, r3
 8019130:	3708      	adds	r7, #8
 8019132:	46bd      	mov	sp, r7
 8019134:	bd80      	pop	{r7, pc}

08019136 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8019136:	b580      	push	{r7, lr}
 8019138:	b082      	sub	sp, #8
 801913a:	af00      	add	r7, sp, #0
 801913c:	6078      	str	r0, [r7, #4]
 801913e:	460b      	mov	r3, r1
 8019140:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	32ae      	adds	r2, #174	@ 0xae
 801914c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d101      	bne.n	8019158 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8019154:	2303      	movs	r3, #3
 8019156:	e01c      	b.n	8019192 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801915e:	b2db      	uxtb	r3, r3
 8019160:	2b03      	cmp	r3, #3
 8019162:	d115      	bne.n	8019190 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	32ae      	adds	r2, #174	@ 0xae
 801916e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019174:	2b00      	cmp	r3, #0
 8019176:	d00b      	beq.n	8019190 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	32ae      	adds	r2, #174	@ 0xae
 8019182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019188:	78fa      	ldrb	r2, [r7, #3]
 801918a:	4611      	mov	r1, r2
 801918c:	6878      	ldr	r0, [r7, #4]
 801918e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8019190:	2300      	movs	r3, #0
}
 8019192:	4618      	mov	r0, r3
 8019194:	3708      	adds	r7, #8
 8019196:	46bd      	mov	sp, r7
 8019198:	bd80      	pop	{r7, pc}

0801919a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801919a:	b480      	push	{r7}
 801919c:	b083      	sub	sp, #12
 801919e:	af00      	add	r7, sp, #0
 80191a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80191a2:	2300      	movs	r3, #0
}
 80191a4:	4618      	mov	r0, r3
 80191a6:	370c      	adds	r7, #12
 80191a8:	46bd      	mov	sp, r7
 80191aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ae:	4770      	bx	lr

080191b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b084      	sub	sp, #16
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80191b8:	2300      	movs	r3, #0
 80191ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	2201      	movs	r2, #1
 80191c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d00e      	beq.n	80191ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80191d4:	685b      	ldr	r3, [r3, #4]
 80191d6:	687a      	ldr	r2, [r7, #4]
 80191d8:	6852      	ldr	r2, [r2, #4]
 80191da:	b2d2      	uxtb	r2, r2
 80191dc:	4611      	mov	r1, r2
 80191de:	6878      	ldr	r0, [r7, #4]
 80191e0:	4798      	blx	r3
 80191e2:	4603      	mov	r3, r0
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d001      	beq.n	80191ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80191e8:	2303      	movs	r3, #3
 80191ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80191ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80191ee:	4618      	mov	r0, r3
 80191f0:	3710      	adds	r7, #16
 80191f2:	46bd      	mov	sp, r7
 80191f4:	bd80      	pop	{r7, pc}

080191f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80191f6:	b480      	push	{r7}
 80191f8:	b083      	sub	sp, #12
 80191fa:	af00      	add	r7, sp, #0
 80191fc:	6078      	str	r0, [r7, #4]
 80191fe:	460b      	mov	r3, r1
 8019200:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8019202:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8019204:	4618      	mov	r0, r3
 8019206:	370c      	adds	r7, #12
 8019208:	46bd      	mov	sp, r7
 801920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801920e:	4770      	bx	lr

08019210 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8019210:	b480      	push	{r7}
 8019212:	b083      	sub	sp, #12
 8019214:	af00      	add	r7, sp, #0
 8019216:	6078      	str	r0, [r7, #4]
 8019218:	460b      	mov	r3, r1
 801921a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801921c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801921e:	4618      	mov	r0, r3
 8019220:	370c      	adds	r7, #12
 8019222:	46bd      	mov	sp, r7
 8019224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019228:	4770      	bx	lr

0801922a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801922a:	b580      	push	{r7, lr}
 801922c:	b086      	sub	sp, #24
 801922e:	af00      	add	r7, sp, #0
 8019230:	6078      	str	r0, [r7, #4]
 8019232:	460b      	mov	r3, r1
 8019234:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801923e:	2300      	movs	r3, #0
 8019240:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	885b      	ldrh	r3, [r3, #2]
 8019246:	b29b      	uxth	r3, r3
 8019248:	68fa      	ldr	r2, [r7, #12]
 801924a:	7812      	ldrb	r2, [r2, #0]
 801924c:	4293      	cmp	r3, r2
 801924e:	d91f      	bls.n	8019290 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	781b      	ldrb	r3, [r3, #0]
 8019254:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8019256:	e013      	b.n	8019280 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8019258:	f107 030a 	add.w	r3, r7, #10
 801925c:	4619      	mov	r1, r3
 801925e:	6978      	ldr	r0, [r7, #20]
 8019260:	f000 f81b 	bl	801929a <USBD_GetNextDesc>
 8019264:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8019266:	697b      	ldr	r3, [r7, #20]
 8019268:	785b      	ldrb	r3, [r3, #1]
 801926a:	2b05      	cmp	r3, #5
 801926c:	d108      	bne.n	8019280 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801926e:	697b      	ldr	r3, [r7, #20]
 8019270:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8019272:	693b      	ldr	r3, [r7, #16]
 8019274:	789b      	ldrb	r3, [r3, #2]
 8019276:	78fa      	ldrb	r2, [r7, #3]
 8019278:	429a      	cmp	r2, r3
 801927a:	d008      	beq.n	801928e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801927c:	2300      	movs	r3, #0
 801927e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	885b      	ldrh	r3, [r3, #2]
 8019284:	b29a      	uxth	r2, r3
 8019286:	897b      	ldrh	r3, [r7, #10]
 8019288:	429a      	cmp	r2, r3
 801928a:	d8e5      	bhi.n	8019258 <USBD_GetEpDesc+0x2e>
 801928c:	e000      	b.n	8019290 <USBD_GetEpDesc+0x66>
          break;
 801928e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8019290:	693b      	ldr	r3, [r7, #16]
}
 8019292:	4618      	mov	r0, r3
 8019294:	3718      	adds	r7, #24
 8019296:	46bd      	mov	sp, r7
 8019298:	bd80      	pop	{r7, pc}

0801929a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801929a:	b480      	push	{r7}
 801929c:	b085      	sub	sp, #20
 801929e:	af00      	add	r7, sp, #0
 80192a0:	6078      	str	r0, [r7, #4]
 80192a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80192a8:	683b      	ldr	r3, [r7, #0]
 80192aa:	881b      	ldrh	r3, [r3, #0]
 80192ac:	68fa      	ldr	r2, [r7, #12]
 80192ae:	7812      	ldrb	r2, [r2, #0]
 80192b0:	4413      	add	r3, r2
 80192b2:	b29a      	uxth	r2, r3
 80192b4:	683b      	ldr	r3, [r7, #0]
 80192b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	781b      	ldrb	r3, [r3, #0]
 80192bc:	461a      	mov	r2, r3
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	4413      	add	r3, r2
 80192c2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80192c4:	68fb      	ldr	r3, [r7, #12]
}
 80192c6:	4618      	mov	r0, r3
 80192c8:	3714      	adds	r7, #20
 80192ca:	46bd      	mov	sp, r7
 80192cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d0:	4770      	bx	lr

080192d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80192d2:	b480      	push	{r7}
 80192d4:	b087      	sub	sp, #28
 80192d6:	af00      	add	r7, sp, #0
 80192d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80192de:	697b      	ldr	r3, [r7, #20]
 80192e0:	781b      	ldrb	r3, [r3, #0]
 80192e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80192e4:	697b      	ldr	r3, [r7, #20]
 80192e6:	3301      	adds	r3, #1
 80192e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80192ea:	697b      	ldr	r3, [r7, #20]
 80192ec:	781b      	ldrb	r3, [r3, #0]
 80192ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80192f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80192f4:	021b      	lsls	r3, r3, #8
 80192f6:	b21a      	sxth	r2, r3
 80192f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80192fc:	4313      	orrs	r3, r2
 80192fe:	b21b      	sxth	r3, r3
 8019300:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8019302:	89fb      	ldrh	r3, [r7, #14]
}
 8019304:	4618      	mov	r0, r3
 8019306:	371c      	adds	r7, #28
 8019308:	46bd      	mov	sp, r7
 801930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801930e:	4770      	bx	lr

08019310 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b084      	sub	sp, #16
 8019314:	af00      	add	r7, sp, #0
 8019316:	6078      	str	r0, [r7, #4]
 8019318:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801931a:	2300      	movs	r3, #0
 801931c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801931e:	683b      	ldr	r3, [r7, #0]
 8019320:	781b      	ldrb	r3, [r3, #0]
 8019322:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8019326:	2b40      	cmp	r3, #64	@ 0x40
 8019328:	d005      	beq.n	8019336 <USBD_StdDevReq+0x26>
 801932a:	2b40      	cmp	r3, #64	@ 0x40
 801932c:	d857      	bhi.n	80193de <USBD_StdDevReq+0xce>
 801932e:	2b00      	cmp	r3, #0
 8019330:	d00f      	beq.n	8019352 <USBD_StdDevReq+0x42>
 8019332:	2b20      	cmp	r3, #32
 8019334:	d153      	bne.n	80193de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	32ae      	adds	r2, #174	@ 0xae
 8019340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019344:	689b      	ldr	r3, [r3, #8]
 8019346:	6839      	ldr	r1, [r7, #0]
 8019348:	6878      	ldr	r0, [r7, #4]
 801934a:	4798      	blx	r3
 801934c:	4603      	mov	r3, r0
 801934e:	73fb      	strb	r3, [r7, #15]
      break;
 8019350:	e04a      	b.n	80193e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	785b      	ldrb	r3, [r3, #1]
 8019356:	2b09      	cmp	r3, #9
 8019358:	d83b      	bhi.n	80193d2 <USBD_StdDevReq+0xc2>
 801935a:	a201      	add	r2, pc, #4	@ (adr r2, 8019360 <USBD_StdDevReq+0x50>)
 801935c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019360:	080193b5 	.word	0x080193b5
 8019364:	080193c9 	.word	0x080193c9
 8019368:	080193d3 	.word	0x080193d3
 801936c:	080193bf 	.word	0x080193bf
 8019370:	080193d3 	.word	0x080193d3
 8019374:	08019393 	.word	0x08019393
 8019378:	08019389 	.word	0x08019389
 801937c:	080193d3 	.word	0x080193d3
 8019380:	080193ab 	.word	0x080193ab
 8019384:	0801939d 	.word	0x0801939d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8019388:	6839      	ldr	r1, [r7, #0]
 801938a:	6878      	ldr	r0, [r7, #4]
 801938c:	f000 fa3c 	bl	8019808 <USBD_GetDescriptor>
          break;
 8019390:	e024      	b.n	80193dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8019392:	6839      	ldr	r1, [r7, #0]
 8019394:	6878      	ldr	r0, [r7, #4]
 8019396:	f000 fbcb 	bl	8019b30 <USBD_SetAddress>
          break;
 801939a:	e01f      	b.n	80193dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801939c:	6839      	ldr	r1, [r7, #0]
 801939e:	6878      	ldr	r0, [r7, #4]
 80193a0:	f000 fc0a 	bl	8019bb8 <USBD_SetConfig>
 80193a4:	4603      	mov	r3, r0
 80193a6:	73fb      	strb	r3, [r7, #15]
          break;
 80193a8:	e018      	b.n	80193dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80193aa:	6839      	ldr	r1, [r7, #0]
 80193ac:	6878      	ldr	r0, [r7, #4]
 80193ae:	f000 fcad 	bl	8019d0c <USBD_GetConfig>
          break;
 80193b2:	e013      	b.n	80193dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80193b4:	6839      	ldr	r1, [r7, #0]
 80193b6:	6878      	ldr	r0, [r7, #4]
 80193b8:	f000 fcde 	bl	8019d78 <USBD_GetStatus>
          break;
 80193bc:	e00e      	b.n	80193dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80193be:	6839      	ldr	r1, [r7, #0]
 80193c0:	6878      	ldr	r0, [r7, #4]
 80193c2:	f000 fd0d 	bl	8019de0 <USBD_SetFeature>
          break;
 80193c6:	e009      	b.n	80193dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80193c8:	6839      	ldr	r1, [r7, #0]
 80193ca:	6878      	ldr	r0, [r7, #4]
 80193cc:	f000 fd31 	bl	8019e32 <USBD_ClrFeature>
          break;
 80193d0:	e004      	b.n	80193dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80193d2:	6839      	ldr	r1, [r7, #0]
 80193d4:	6878      	ldr	r0, [r7, #4]
 80193d6:	f000 fd88 	bl	8019eea <USBD_CtlError>
          break;
 80193da:	bf00      	nop
      }
      break;
 80193dc:	e004      	b.n	80193e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80193de:	6839      	ldr	r1, [r7, #0]
 80193e0:	6878      	ldr	r0, [r7, #4]
 80193e2:	f000 fd82 	bl	8019eea <USBD_CtlError>
      break;
 80193e6:	bf00      	nop
  }

  return ret;
 80193e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80193ea:	4618      	mov	r0, r3
 80193ec:	3710      	adds	r7, #16
 80193ee:	46bd      	mov	sp, r7
 80193f0:	bd80      	pop	{r7, pc}
 80193f2:	bf00      	nop

080193f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80193f4:	b580      	push	{r7, lr}
 80193f6:	b084      	sub	sp, #16
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	6078      	str	r0, [r7, #4]
 80193fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80193fe:	2300      	movs	r3, #0
 8019400:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019402:	683b      	ldr	r3, [r7, #0]
 8019404:	781b      	ldrb	r3, [r3, #0]
 8019406:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801940a:	2b40      	cmp	r3, #64	@ 0x40
 801940c:	d005      	beq.n	801941a <USBD_StdItfReq+0x26>
 801940e:	2b40      	cmp	r3, #64	@ 0x40
 8019410:	d852      	bhi.n	80194b8 <USBD_StdItfReq+0xc4>
 8019412:	2b00      	cmp	r3, #0
 8019414:	d001      	beq.n	801941a <USBD_StdItfReq+0x26>
 8019416:	2b20      	cmp	r3, #32
 8019418:	d14e      	bne.n	80194b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019420:	b2db      	uxtb	r3, r3
 8019422:	3b01      	subs	r3, #1
 8019424:	2b02      	cmp	r3, #2
 8019426:	d840      	bhi.n	80194aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8019428:	683b      	ldr	r3, [r7, #0]
 801942a:	889b      	ldrh	r3, [r3, #4]
 801942c:	b2db      	uxtb	r3, r3
 801942e:	2b01      	cmp	r3, #1
 8019430:	d836      	bhi.n	80194a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8019432:	683b      	ldr	r3, [r7, #0]
 8019434:	889b      	ldrh	r3, [r3, #4]
 8019436:	b2db      	uxtb	r3, r3
 8019438:	4619      	mov	r1, r3
 801943a:	6878      	ldr	r0, [r7, #4]
 801943c:	f7ff fedb 	bl	80191f6 <USBD_CoreFindIF>
 8019440:	4603      	mov	r3, r0
 8019442:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8019444:	7bbb      	ldrb	r3, [r7, #14]
 8019446:	2bff      	cmp	r3, #255	@ 0xff
 8019448:	d01d      	beq.n	8019486 <USBD_StdItfReq+0x92>
 801944a:	7bbb      	ldrb	r3, [r7, #14]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d11a      	bne.n	8019486 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8019450:	7bba      	ldrb	r2, [r7, #14]
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	32ae      	adds	r2, #174	@ 0xae
 8019456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801945a:	689b      	ldr	r3, [r3, #8]
 801945c:	2b00      	cmp	r3, #0
 801945e:	d00f      	beq.n	8019480 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8019460:	7bba      	ldrb	r2, [r7, #14]
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8019468:	7bba      	ldrb	r2, [r7, #14]
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	32ae      	adds	r2, #174	@ 0xae
 801946e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019472:	689b      	ldr	r3, [r3, #8]
 8019474:	6839      	ldr	r1, [r7, #0]
 8019476:	6878      	ldr	r0, [r7, #4]
 8019478:	4798      	blx	r3
 801947a:	4603      	mov	r3, r0
 801947c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801947e:	e004      	b.n	801948a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8019480:	2303      	movs	r3, #3
 8019482:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8019484:	e001      	b.n	801948a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8019486:	2303      	movs	r3, #3
 8019488:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801948a:	683b      	ldr	r3, [r7, #0]
 801948c:	88db      	ldrh	r3, [r3, #6]
 801948e:	2b00      	cmp	r3, #0
 8019490:	d110      	bne.n	80194b4 <USBD_StdItfReq+0xc0>
 8019492:	7bfb      	ldrb	r3, [r7, #15]
 8019494:	2b00      	cmp	r3, #0
 8019496:	d10d      	bne.n	80194b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8019498:	6878      	ldr	r0, [r7, #4]
 801949a:	f000 fdfd 	bl	801a098 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801949e:	e009      	b.n	80194b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80194a0:	6839      	ldr	r1, [r7, #0]
 80194a2:	6878      	ldr	r0, [r7, #4]
 80194a4:	f000 fd21 	bl	8019eea <USBD_CtlError>
          break;
 80194a8:	e004      	b.n	80194b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80194aa:	6839      	ldr	r1, [r7, #0]
 80194ac:	6878      	ldr	r0, [r7, #4]
 80194ae:	f000 fd1c 	bl	8019eea <USBD_CtlError>
          break;
 80194b2:	e000      	b.n	80194b6 <USBD_StdItfReq+0xc2>
          break;
 80194b4:	bf00      	nop
      }
      break;
 80194b6:	e004      	b.n	80194c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80194b8:	6839      	ldr	r1, [r7, #0]
 80194ba:	6878      	ldr	r0, [r7, #4]
 80194bc:	f000 fd15 	bl	8019eea <USBD_CtlError>
      break;
 80194c0:	bf00      	nop
  }

  return ret;
 80194c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80194c4:	4618      	mov	r0, r3
 80194c6:	3710      	adds	r7, #16
 80194c8:	46bd      	mov	sp, r7
 80194ca:	bd80      	pop	{r7, pc}

080194cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80194cc:	b580      	push	{r7, lr}
 80194ce:	b084      	sub	sp, #16
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
 80194d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80194d6:	2300      	movs	r3, #0
 80194d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80194da:	683b      	ldr	r3, [r7, #0]
 80194dc:	889b      	ldrh	r3, [r3, #4]
 80194de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80194e0:	683b      	ldr	r3, [r7, #0]
 80194e2:	781b      	ldrb	r3, [r3, #0]
 80194e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80194e8:	2b40      	cmp	r3, #64	@ 0x40
 80194ea:	d007      	beq.n	80194fc <USBD_StdEPReq+0x30>
 80194ec:	2b40      	cmp	r3, #64	@ 0x40
 80194ee:	f200 817f 	bhi.w	80197f0 <USBD_StdEPReq+0x324>
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d02a      	beq.n	801954c <USBD_StdEPReq+0x80>
 80194f6:	2b20      	cmp	r3, #32
 80194f8:	f040 817a 	bne.w	80197f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80194fc:	7bbb      	ldrb	r3, [r7, #14]
 80194fe:	4619      	mov	r1, r3
 8019500:	6878      	ldr	r0, [r7, #4]
 8019502:	f7ff fe85 	bl	8019210 <USBD_CoreFindEP>
 8019506:	4603      	mov	r3, r0
 8019508:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801950a:	7b7b      	ldrb	r3, [r7, #13]
 801950c:	2bff      	cmp	r3, #255	@ 0xff
 801950e:	f000 8174 	beq.w	80197fa <USBD_StdEPReq+0x32e>
 8019512:	7b7b      	ldrb	r3, [r7, #13]
 8019514:	2b00      	cmp	r3, #0
 8019516:	f040 8170 	bne.w	80197fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801951a:	7b7a      	ldrb	r2, [r7, #13]
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8019522:	7b7a      	ldrb	r2, [r7, #13]
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	32ae      	adds	r2, #174	@ 0xae
 8019528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801952c:	689b      	ldr	r3, [r3, #8]
 801952e:	2b00      	cmp	r3, #0
 8019530:	f000 8163 	beq.w	80197fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8019534:	7b7a      	ldrb	r2, [r7, #13]
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	32ae      	adds	r2, #174	@ 0xae
 801953a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801953e:	689b      	ldr	r3, [r3, #8]
 8019540:	6839      	ldr	r1, [r7, #0]
 8019542:	6878      	ldr	r0, [r7, #4]
 8019544:	4798      	blx	r3
 8019546:	4603      	mov	r3, r0
 8019548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801954a:	e156      	b.n	80197fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801954c:	683b      	ldr	r3, [r7, #0]
 801954e:	785b      	ldrb	r3, [r3, #1]
 8019550:	2b03      	cmp	r3, #3
 8019552:	d008      	beq.n	8019566 <USBD_StdEPReq+0x9a>
 8019554:	2b03      	cmp	r3, #3
 8019556:	f300 8145 	bgt.w	80197e4 <USBD_StdEPReq+0x318>
 801955a:	2b00      	cmp	r3, #0
 801955c:	f000 809b 	beq.w	8019696 <USBD_StdEPReq+0x1ca>
 8019560:	2b01      	cmp	r3, #1
 8019562:	d03c      	beq.n	80195de <USBD_StdEPReq+0x112>
 8019564:	e13e      	b.n	80197e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801956c:	b2db      	uxtb	r3, r3
 801956e:	2b02      	cmp	r3, #2
 8019570:	d002      	beq.n	8019578 <USBD_StdEPReq+0xac>
 8019572:	2b03      	cmp	r3, #3
 8019574:	d016      	beq.n	80195a4 <USBD_StdEPReq+0xd8>
 8019576:	e02c      	b.n	80195d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019578:	7bbb      	ldrb	r3, [r7, #14]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d00d      	beq.n	801959a <USBD_StdEPReq+0xce>
 801957e:	7bbb      	ldrb	r3, [r7, #14]
 8019580:	2b80      	cmp	r3, #128	@ 0x80
 8019582:	d00a      	beq.n	801959a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8019584:	7bbb      	ldrb	r3, [r7, #14]
 8019586:	4619      	mov	r1, r3
 8019588:	6878      	ldr	r0, [r7, #4]
 801958a:	f001 fa47 	bl	801aa1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801958e:	2180      	movs	r1, #128	@ 0x80
 8019590:	6878      	ldr	r0, [r7, #4]
 8019592:	f001 fa43 	bl	801aa1c <USBD_LL_StallEP>
 8019596:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019598:	e020      	b.n	80195dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801959a:	6839      	ldr	r1, [r7, #0]
 801959c:	6878      	ldr	r0, [r7, #4]
 801959e:	f000 fca4 	bl	8019eea <USBD_CtlError>
              break;
 80195a2:	e01b      	b.n	80195dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80195a4:	683b      	ldr	r3, [r7, #0]
 80195a6:	885b      	ldrh	r3, [r3, #2]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d10e      	bne.n	80195ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80195ac:	7bbb      	ldrb	r3, [r7, #14]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d00b      	beq.n	80195ca <USBD_StdEPReq+0xfe>
 80195b2:	7bbb      	ldrb	r3, [r7, #14]
 80195b4:	2b80      	cmp	r3, #128	@ 0x80
 80195b6:	d008      	beq.n	80195ca <USBD_StdEPReq+0xfe>
 80195b8:	683b      	ldr	r3, [r7, #0]
 80195ba:	88db      	ldrh	r3, [r3, #6]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d104      	bne.n	80195ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80195c0:	7bbb      	ldrb	r3, [r7, #14]
 80195c2:	4619      	mov	r1, r3
 80195c4:	6878      	ldr	r0, [r7, #4]
 80195c6:	f001 fa29 	bl	801aa1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80195ca:	6878      	ldr	r0, [r7, #4]
 80195cc:	f000 fd64 	bl	801a098 <USBD_CtlSendStatus>

              break;
 80195d0:	e004      	b.n	80195dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80195d2:	6839      	ldr	r1, [r7, #0]
 80195d4:	6878      	ldr	r0, [r7, #4]
 80195d6:	f000 fc88 	bl	8019eea <USBD_CtlError>
              break;
 80195da:	bf00      	nop
          }
          break;
 80195dc:	e107      	b.n	80197ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80195e4:	b2db      	uxtb	r3, r3
 80195e6:	2b02      	cmp	r3, #2
 80195e8:	d002      	beq.n	80195f0 <USBD_StdEPReq+0x124>
 80195ea:	2b03      	cmp	r3, #3
 80195ec:	d016      	beq.n	801961c <USBD_StdEPReq+0x150>
 80195ee:	e04b      	b.n	8019688 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80195f0:	7bbb      	ldrb	r3, [r7, #14]
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d00d      	beq.n	8019612 <USBD_StdEPReq+0x146>
 80195f6:	7bbb      	ldrb	r3, [r7, #14]
 80195f8:	2b80      	cmp	r3, #128	@ 0x80
 80195fa:	d00a      	beq.n	8019612 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80195fc:	7bbb      	ldrb	r3, [r7, #14]
 80195fe:	4619      	mov	r1, r3
 8019600:	6878      	ldr	r0, [r7, #4]
 8019602:	f001 fa0b 	bl	801aa1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8019606:	2180      	movs	r1, #128	@ 0x80
 8019608:	6878      	ldr	r0, [r7, #4]
 801960a:	f001 fa07 	bl	801aa1c <USBD_LL_StallEP>
 801960e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019610:	e040      	b.n	8019694 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8019612:	6839      	ldr	r1, [r7, #0]
 8019614:	6878      	ldr	r0, [r7, #4]
 8019616:	f000 fc68 	bl	8019eea <USBD_CtlError>
              break;
 801961a:	e03b      	b.n	8019694 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801961c:	683b      	ldr	r3, [r7, #0]
 801961e:	885b      	ldrh	r3, [r3, #2]
 8019620:	2b00      	cmp	r3, #0
 8019622:	d136      	bne.n	8019692 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8019624:	7bbb      	ldrb	r3, [r7, #14]
 8019626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801962a:	2b00      	cmp	r3, #0
 801962c:	d004      	beq.n	8019638 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801962e:	7bbb      	ldrb	r3, [r7, #14]
 8019630:	4619      	mov	r1, r3
 8019632:	6878      	ldr	r0, [r7, #4]
 8019634:	f001 fa11 	bl	801aa5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8019638:	6878      	ldr	r0, [r7, #4]
 801963a:	f000 fd2d 	bl	801a098 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801963e:	7bbb      	ldrb	r3, [r7, #14]
 8019640:	4619      	mov	r1, r3
 8019642:	6878      	ldr	r0, [r7, #4]
 8019644:	f7ff fde4 	bl	8019210 <USBD_CoreFindEP>
 8019648:	4603      	mov	r3, r0
 801964a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801964c:	7b7b      	ldrb	r3, [r7, #13]
 801964e:	2bff      	cmp	r3, #255	@ 0xff
 8019650:	d01f      	beq.n	8019692 <USBD_StdEPReq+0x1c6>
 8019652:	7b7b      	ldrb	r3, [r7, #13]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d11c      	bne.n	8019692 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8019658:	7b7a      	ldrb	r2, [r7, #13]
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8019660:	7b7a      	ldrb	r2, [r7, #13]
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	32ae      	adds	r2, #174	@ 0xae
 8019666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801966a:	689b      	ldr	r3, [r3, #8]
 801966c:	2b00      	cmp	r3, #0
 801966e:	d010      	beq.n	8019692 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8019670:	7b7a      	ldrb	r2, [r7, #13]
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	32ae      	adds	r2, #174	@ 0xae
 8019676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801967a:	689b      	ldr	r3, [r3, #8]
 801967c:	6839      	ldr	r1, [r7, #0]
 801967e:	6878      	ldr	r0, [r7, #4]
 8019680:	4798      	blx	r3
 8019682:	4603      	mov	r3, r0
 8019684:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8019686:	e004      	b.n	8019692 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8019688:	6839      	ldr	r1, [r7, #0]
 801968a:	6878      	ldr	r0, [r7, #4]
 801968c:	f000 fc2d 	bl	8019eea <USBD_CtlError>
              break;
 8019690:	e000      	b.n	8019694 <USBD_StdEPReq+0x1c8>
              break;
 8019692:	bf00      	nop
          }
          break;
 8019694:	e0ab      	b.n	80197ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801969c:	b2db      	uxtb	r3, r3
 801969e:	2b02      	cmp	r3, #2
 80196a0:	d002      	beq.n	80196a8 <USBD_StdEPReq+0x1dc>
 80196a2:	2b03      	cmp	r3, #3
 80196a4:	d032      	beq.n	801970c <USBD_StdEPReq+0x240>
 80196a6:	e097      	b.n	80197d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80196a8:	7bbb      	ldrb	r3, [r7, #14]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d007      	beq.n	80196be <USBD_StdEPReq+0x1f2>
 80196ae:	7bbb      	ldrb	r3, [r7, #14]
 80196b0:	2b80      	cmp	r3, #128	@ 0x80
 80196b2:	d004      	beq.n	80196be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80196b4:	6839      	ldr	r1, [r7, #0]
 80196b6:	6878      	ldr	r0, [r7, #4]
 80196b8:	f000 fc17 	bl	8019eea <USBD_CtlError>
                break;
 80196bc:	e091      	b.n	80197e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80196be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	da0b      	bge.n	80196de <USBD_StdEPReq+0x212>
 80196c6:	7bbb      	ldrb	r3, [r7, #14]
 80196c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80196cc:	4613      	mov	r3, r2
 80196ce:	009b      	lsls	r3, r3, #2
 80196d0:	4413      	add	r3, r2
 80196d2:	009b      	lsls	r3, r3, #2
 80196d4:	3310      	adds	r3, #16
 80196d6:	687a      	ldr	r2, [r7, #4]
 80196d8:	4413      	add	r3, r2
 80196da:	3304      	adds	r3, #4
 80196dc:	e00b      	b.n	80196f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80196de:	7bbb      	ldrb	r3, [r7, #14]
 80196e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80196e4:	4613      	mov	r3, r2
 80196e6:	009b      	lsls	r3, r3, #2
 80196e8:	4413      	add	r3, r2
 80196ea:	009b      	lsls	r3, r3, #2
 80196ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80196f0:	687a      	ldr	r2, [r7, #4]
 80196f2:	4413      	add	r3, r2
 80196f4:	3304      	adds	r3, #4
 80196f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80196f8:	68bb      	ldr	r3, [r7, #8]
 80196fa:	2200      	movs	r2, #0
 80196fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80196fe:	68bb      	ldr	r3, [r7, #8]
 8019700:	2202      	movs	r2, #2
 8019702:	4619      	mov	r1, r3
 8019704:	6878      	ldr	r0, [r7, #4]
 8019706:	f000 fc6d 	bl	8019fe4 <USBD_CtlSendData>
              break;
 801970a:	e06a      	b.n	80197e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801970c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019710:	2b00      	cmp	r3, #0
 8019712:	da11      	bge.n	8019738 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8019714:	7bbb      	ldrb	r3, [r7, #14]
 8019716:	f003 020f 	and.w	r2, r3, #15
 801971a:	6879      	ldr	r1, [r7, #4]
 801971c:	4613      	mov	r3, r2
 801971e:	009b      	lsls	r3, r3, #2
 8019720:	4413      	add	r3, r2
 8019722:	009b      	lsls	r3, r3, #2
 8019724:	440b      	add	r3, r1
 8019726:	3324      	adds	r3, #36	@ 0x24
 8019728:	881b      	ldrh	r3, [r3, #0]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d117      	bne.n	801975e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801972e:	6839      	ldr	r1, [r7, #0]
 8019730:	6878      	ldr	r0, [r7, #4]
 8019732:	f000 fbda 	bl	8019eea <USBD_CtlError>
                  break;
 8019736:	e054      	b.n	80197e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8019738:	7bbb      	ldrb	r3, [r7, #14]
 801973a:	f003 020f 	and.w	r2, r3, #15
 801973e:	6879      	ldr	r1, [r7, #4]
 8019740:	4613      	mov	r3, r2
 8019742:	009b      	lsls	r3, r3, #2
 8019744:	4413      	add	r3, r2
 8019746:	009b      	lsls	r3, r3, #2
 8019748:	440b      	add	r3, r1
 801974a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801974e:	881b      	ldrh	r3, [r3, #0]
 8019750:	2b00      	cmp	r3, #0
 8019752:	d104      	bne.n	801975e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8019754:	6839      	ldr	r1, [r7, #0]
 8019756:	6878      	ldr	r0, [r7, #4]
 8019758:	f000 fbc7 	bl	8019eea <USBD_CtlError>
                  break;
 801975c:	e041      	b.n	80197e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801975e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019762:	2b00      	cmp	r3, #0
 8019764:	da0b      	bge.n	801977e <USBD_StdEPReq+0x2b2>
 8019766:	7bbb      	ldrb	r3, [r7, #14]
 8019768:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801976c:	4613      	mov	r3, r2
 801976e:	009b      	lsls	r3, r3, #2
 8019770:	4413      	add	r3, r2
 8019772:	009b      	lsls	r3, r3, #2
 8019774:	3310      	adds	r3, #16
 8019776:	687a      	ldr	r2, [r7, #4]
 8019778:	4413      	add	r3, r2
 801977a:	3304      	adds	r3, #4
 801977c:	e00b      	b.n	8019796 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801977e:	7bbb      	ldrb	r3, [r7, #14]
 8019780:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019784:	4613      	mov	r3, r2
 8019786:	009b      	lsls	r3, r3, #2
 8019788:	4413      	add	r3, r2
 801978a:	009b      	lsls	r3, r3, #2
 801978c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8019790:	687a      	ldr	r2, [r7, #4]
 8019792:	4413      	add	r3, r2
 8019794:	3304      	adds	r3, #4
 8019796:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8019798:	7bbb      	ldrb	r3, [r7, #14]
 801979a:	2b00      	cmp	r3, #0
 801979c:	d002      	beq.n	80197a4 <USBD_StdEPReq+0x2d8>
 801979e:	7bbb      	ldrb	r3, [r7, #14]
 80197a0:	2b80      	cmp	r3, #128	@ 0x80
 80197a2:	d103      	bne.n	80197ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80197a4:	68bb      	ldr	r3, [r7, #8]
 80197a6:	2200      	movs	r2, #0
 80197a8:	601a      	str	r2, [r3, #0]
 80197aa:	e00e      	b.n	80197ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80197ac:	7bbb      	ldrb	r3, [r7, #14]
 80197ae:	4619      	mov	r1, r3
 80197b0:	6878      	ldr	r0, [r7, #4]
 80197b2:	f001 f971 	bl	801aa98 <USBD_LL_IsStallEP>
 80197b6:	4603      	mov	r3, r0
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d003      	beq.n	80197c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80197bc:	68bb      	ldr	r3, [r7, #8]
 80197be:	2201      	movs	r2, #1
 80197c0:	601a      	str	r2, [r3, #0]
 80197c2:	e002      	b.n	80197ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80197c4:	68bb      	ldr	r3, [r7, #8]
 80197c6:	2200      	movs	r2, #0
 80197c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80197ca:	68bb      	ldr	r3, [r7, #8]
 80197cc:	2202      	movs	r2, #2
 80197ce:	4619      	mov	r1, r3
 80197d0:	6878      	ldr	r0, [r7, #4]
 80197d2:	f000 fc07 	bl	8019fe4 <USBD_CtlSendData>
              break;
 80197d6:	e004      	b.n	80197e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80197d8:	6839      	ldr	r1, [r7, #0]
 80197da:	6878      	ldr	r0, [r7, #4]
 80197dc:	f000 fb85 	bl	8019eea <USBD_CtlError>
              break;
 80197e0:	bf00      	nop
          }
          break;
 80197e2:	e004      	b.n	80197ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80197e4:	6839      	ldr	r1, [r7, #0]
 80197e6:	6878      	ldr	r0, [r7, #4]
 80197e8:	f000 fb7f 	bl	8019eea <USBD_CtlError>
          break;
 80197ec:	bf00      	nop
      }
      break;
 80197ee:	e005      	b.n	80197fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80197f0:	6839      	ldr	r1, [r7, #0]
 80197f2:	6878      	ldr	r0, [r7, #4]
 80197f4:	f000 fb79 	bl	8019eea <USBD_CtlError>
      break;
 80197f8:	e000      	b.n	80197fc <USBD_StdEPReq+0x330>
      break;
 80197fa:	bf00      	nop
  }

  return ret;
 80197fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80197fe:	4618      	mov	r0, r3
 8019800:	3710      	adds	r7, #16
 8019802:	46bd      	mov	sp, r7
 8019804:	bd80      	pop	{r7, pc}
	...

08019808 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019808:	b580      	push	{r7, lr}
 801980a:	b084      	sub	sp, #16
 801980c:	af00      	add	r7, sp, #0
 801980e:	6078      	str	r0, [r7, #4]
 8019810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8019812:	2300      	movs	r3, #0
 8019814:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8019816:	2300      	movs	r3, #0
 8019818:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801981a:	2300      	movs	r3, #0
 801981c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801981e:	683b      	ldr	r3, [r7, #0]
 8019820:	885b      	ldrh	r3, [r3, #2]
 8019822:	0a1b      	lsrs	r3, r3, #8
 8019824:	b29b      	uxth	r3, r3
 8019826:	3b01      	subs	r3, #1
 8019828:	2b0e      	cmp	r3, #14
 801982a:	f200 8152 	bhi.w	8019ad2 <USBD_GetDescriptor+0x2ca>
 801982e:	a201      	add	r2, pc, #4	@ (adr r2, 8019834 <USBD_GetDescriptor+0x2c>)
 8019830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019834:	080198a5 	.word	0x080198a5
 8019838:	080198bd 	.word	0x080198bd
 801983c:	080198fd 	.word	0x080198fd
 8019840:	08019ad3 	.word	0x08019ad3
 8019844:	08019ad3 	.word	0x08019ad3
 8019848:	08019a73 	.word	0x08019a73
 801984c:	08019a9f 	.word	0x08019a9f
 8019850:	08019ad3 	.word	0x08019ad3
 8019854:	08019ad3 	.word	0x08019ad3
 8019858:	08019ad3 	.word	0x08019ad3
 801985c:	08019ad3 	.word	0x08019ad3
 8019860:	08019ad3 	.word	0x08019ad3
 8019864:	08019ad3 	.word	0x08019ad3
 8019868:	08019ad3 	.word	0x08019ad3
 801986c:	08019871 	.word	0x08019871
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019876:	69db      	ldr	r3, [r3, #28]
 8019878:	2b00      	cmp	r3, #0
 801987a:	d00b      	beq.n	8019894 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019882:	69db      	ldr	r3, [r3, #28]
 8019884:	687a      	ldr	r2, [r7, #4]
 8019886:	7c12      	ldrb	r2, [r2, #16]
 8019888:	f107 0108 	add.w	r1, r7, #8
 801988c:	4610      	mov	r0, r2
 801988e:	4798      	blx	r3
 8019890:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019892:	e126      	b.n	8019ae2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019894:	6839      	ldr	r1, [r7, #0]
 8019896:	6878      	ldr	r0, [r7, #4]
 8019898:	f000 fb27 	bl	8019eea <USBD_CtlError>
        err++;
 801989c:	7afb      	ldrb	r3, [r7, #11]
 801989e:	3301      	adds	r3, #1
 80198a0:	72fb      	strb	r3, [r7, #11]
      break;
 80198a2:	e11e      	b.n	8019ae2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	687a      	ldr	r2, [r7, #4]
 80198ae:	7c12      	ldrb	r2, [r2, #16]
 80198b0:	f107 0108 	add.w	r1, r7, #8
 80198b4:	4610      	mov	r0, r2
 80198b6:	4798      	blx	r3
 80198b8:	60f8      	str	r0, [r7, #12]
      break;
 80198ba:	e112      	b.n	8019ae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	7c1b      	ldrb	r3, [r3, #16]
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d10d      	bne.n	80198e0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80198ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80198cc:	f107 0208 	add.w	r2, r7, #8
 80198d0:	4610      	mov	r0, r2
 80198d2:	4798      	blx	r3
 80198d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	3301      	adds	r3, #1
 80198da:	2202      	movs	r2, #2
 80198dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80198de:	e100      	b.n	8019ae2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80198e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80198e8:	f107 0208 	add.w	r2, r7, #8
 80198ec:	4610      	mov	r0, r2
 80198ee:	4798      	blx	r3
 80198f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80198f2:	68fb      	ldr	r3, [r7, #12]
 80198f4:	3301      	adds	r3, #1
 80198f6:	2202      	movs	r2, #2
 80198f8:	701a      	strb	r2, [r3, #0]
      break;
 80198fa:	e0f2      	b.n	8019ae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80198fc:	683b      	ldr	r3, [r7, #0]
 80198fe:	885b      	ldrh	r3, [r3, #2]
 8019900:	b2db      	uxtb	r3, r3
 8019902:	2b05      	cmp	r3, #5
 8019904:	f200 80ac 	bhi.w	8019a60 <USBD_GetDescriptor+0x258>
 8019908:	a201      	add	r2, pc, #4	@ (adr r2, 8019910 <USBD_GetDescriptor+0x108>)
 801990a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801990e:	bf00      	nop
 8019910:	08019929 	.word	0x08019929
 8019914:	0801995d 	.word	0x0801995d
 8019918:	08019991 	.word	0x08019991
 801991c:	080199c5 	.word	0x080199c5
 8019920:	080199f9 	.word	0x080199f9
 8019924:	08019a2d 	.word	0x08019a2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801992e:	685b      	ldr	r3, [r3, #4]
 8019930:	2b00      	cmp	r3, #0
 8019932:	d00b      	beq.n	801994c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801993a:	685b      	ldr	r3, [r3, #4]
 801993c:	687a      	ldr	r2, [r7, #4]
 801993e:	7c12      	ldrb	r2, [r2, #16]
 8019940:	f107 0108 	add.w	r1, r7, #8
 8019944:	4610      	mov	r0, r2
 8019946:	4798      	blx	r3
 8019948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801994a:	e091      	b.n	8019a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801994c:	6839      	ldr	r1, [r7, #0]
 801994e:	6878      	ldr	r0, [r7, #4]
 8019950:	f000 facb 	bl	8019eea <USBD_CtlError>
            err++;
 8019954:	7afb      	ldrb	r3, [r7, #11]
 8019956:	3301      	adds	r3, #1
 8019958:	72fb      	strb	r3, [r7, #11]
          break;
 801995a:	e089      	b.n	8019a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019962:	689b      	ldr	r3, [r3, #8]
 8019964:	2b00      	cmp	r3, #0
 8019966:	d00b      	beq.n	8019980 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801996e:	689b      	ldr	r3, [r3, #8]
 8019970:	687a      	ldr	r2, [r7, #4]
 8019972:	7c12      	ldrb	r2, [r2, #16]
 8019974:	f107 0108 	add.w	r1, r7, #8
 8019978:	4610      	mov	r0, r2
 801997a:	4798      	blx	r3
 801997c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801997e:	e077      	b.n	8019a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019980:	6839      	ldr	r1, [r7, #0]
 8019982:	6878      	ldr	r0, [r7, #4]
 8019984:	f000 fab1 	bl	8019eea <USBD_CtlError>
            err++;
 8019988:	7afb      	ldrb	r3, [r7, #11]
 801998a:	3301      	adds	r3, #1
 801998c:	72fb      	strb	r3, [r7, #11]
          break;
 801998e:	e06f      	b.n	8019a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019996:	68db      	ldr	r3, [r3, #12]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d00b      	beq.n	80199b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80199a2:	68db      	ldr	r3, [r3, #12]
 80199a4:	687a      	ldr	r2, [r7, #4]
 80199a6:	7c12      	ldrb	r2, [r2, #16]
 80199a8:	f107 0108 	add.w	r1, r7, #8
 80199ac:	4610      	mov	r0, r2
 80199ae:	4798      	blx	r3
 80199b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80199b2:	e05d      	b.n	8019a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80199b4:	6839      	ldr	r1, [r7, #0]
 80199b6:	6878      	ldr	r0, [r7, #4]
 80199b8:	f000 fa97 	bl	8019eea <USBD_CtlError>
            err++;
 80199bc:	7afb      	ldrb	r3, [r7, #11]
 80199be:	3301      	adds	r3, #1
 80199c0:	72fb      	strb	r3, [r7, #11]
          break;
 80199c2:	e055      	b.n	8019a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80199ca:	691b      	ldr	r3, [r3, #16]
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d00b      	beq.n	80199e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80199d6:	691b      	ldr	r3, [r3, #16]
 80199d8:	687a      	ldr	r2, [r7, #4]
 80199da:	7c12      	ldrb	r2, [r2, #16]
 80199dc:	f107 0108 	add.w	r1, r7, #8
 80199e0:	4610      	mov	r0, r2
 80199e2:	4798      	blx	r3
 80199e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80199e6:	e043      	b.n	8019a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80199e8:	6839      	ldr	r1, [r7, #0]
 80199ea:	6878      	ldr	r0, [r7, #4]
 80199ec:	f000 fa7d 	bl	8019eea <USBD_CtlError>
            err++;
 80199f0:	7afb      	ldrb	r3, [r7, #11]
 80199f2:	3301      	adds	r3, #1
 80199f4:	72fb      	strb	r3, [r7, #11]
          break;
 80199f6:	e03b      	b.n	8019a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80199fe:	695b      	ldr	r3, [r3, #20]
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d00b      	beq.n	8019a1c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019a0a:	695b      	ldr	r3, [r3, #20]
 8019a0c:	687a      	ldr	r2, [r7, #4]
 8019a0e:	7c12      	ldrb	r2, [r2, #16]
 8019a10:	f107 0108 	add.w	r1, r7, #8
 8019a14:	4610      	mov	r0, r2
 8019a16:	4798      	blx	r3
 8019a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019a1a:	e029      	b.n	8019a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019a1c:	6839      	ldr	r1, [r7, #0]
 8019a1e:	6878      	ldr	r0, [r7, #4]
 8019a20:	f000 fa63 	bl	8019eea <USBD_CtlError>
            err++;
 8019a24:	7afb      	ldrb	r3, [r7, #11]
 8019a26:	3301      	adds	r3, #1
 8019a28:	72fb      	strb	r3, [r7, #11]
          break;
 8019a2a:	e021      	b.n	8019a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019a32:	699b      	ldr	r3, [r3, #24]
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d00b      	beq.n	8019a50 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019a3e:	699b      	ldr	r3, [r3, #24]
 8019a40:	687a      	ldr	r2, [r7, #4]
 8019a42:	7c12      	ldrb	r2, [r2, #16]
 8019a44:	f107 0108 	add.w	r1, r7, #8
 8019a48:	4610      	mov	r0, r2
 8019a4a:	4798      	blx	r3
 8019a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019a4e:	e00f      	b.n	8019a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019a50:	6839      	ldr	r1, [r7, #0]
 8019a52:	6878      	ldr	r0, [r7, #4]
 8019a54:	f000 fa49 	bl	8019eea <USBD_CtlError>
            err++;
 8019a58:	7afb      	ldrb	r3, [r7, #11]
 8019a5a:	3301      	adds	r3, #1
 8019a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8019a5e:	e007      	b.n	8019a70 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8019a60:	6839      	ldr	r1, [r7, #0]
 8019a62:	6878      	ldr	r0, [r7, #4]
 8019a64:	f000 fa41 	bl	8019eea <USBD_CtlError>
          err++;
 8019a68:	7afb      	ldrb	r3, [r7, #11]
 8019a6a:	3301      	adds	r3, #1
 8019a6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8019a6e:	bf00      	nop
      }
      break;
 8019a70:	e037      	b.n	8019ae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	7c1b      	ldrb	r3, [r3, #16]
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d109      	bne.n	8019a8e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019a82:	f107 0208 	add.w	r2, r7, #8
 8019a86:	4610      	mov	r0, r2
 8019a88:	4798      	blx	r3
 8019a8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019a8c:	e029      	b.n	8019ae2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019a8e:	6839      	ldr	r1, [r7, #0]
 8019a90:	6878      	ldr	r0, [r7, #4]
 8019a92:	f000 fa2a 	bl	8019eea <USBD_CtlError>
        err++;
 8019a96:	7afb      	ldrb	r3, [r7, #11]
 8019a98:	3301      	adds	r3, #1
 8019a9a:	72fb      	strb	r3, [r7, #11]
      break;
 8019a9c:	e021      	b.n	8019ae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	7c1b      	ldrb	r3, [r3, #16]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d10d      	bne.n	8019ac2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019aae:	f107 0208 	add.w	r2, r7, #8
 8019ab2:	4610      	mov	r0, r2
 8019ab4:	4798      	blx	r3
 8019ab6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	3301      	adds	r3, #1
 8019abc:	2207      	movs	r2, #7
 8019abe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019ac0:	e00f      	b.n	8019ae2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019ac2:	6839      	ldr	r1, [r7, #0]
 8019ac4:	6878      	ldr	r0, [r7, #4]
 8019ac6:	f000 fa10 	bl	8019eea <USBD_CtlError>
        err++;
 8019aca:	7afb      	ldrb	r3, [r7, #11]
 8019acc:	3301      	adds	r3, #1
 8019ace:	72fb      	strb	r3, [r7, #11]
      break;
 8019ad0:	e007      	b.n	8019ae2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8019ad2:	6839      	ldr	r1, [r7, #0]
 8019ad4:	6878      	ldr	r0, [r7, #4]
 8019ad6:	f000 fa08 	bl	8019eea <USBD_CtlError>
      err++;
 8019ada:	7afb      	ldrb	r3, [r7, #11]
 8019adc:	3301      	adds	r3, #1
 8019ade:	72fb      	strb	r3, [r7, #11]
      break;
 8019ae0:	bf00      	nop
  }

  if (err != 0U)
 8019ae2:	7afb      	ldrb	r3, [r7, #11]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d11e      	bne.n	8019b26 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8019ae8:	683b      	ldr	r3, [r7, #0]
 8019aea:	88db      	ldrh	r3, [r3, #6]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d016      	beq.n	8019b1e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8019af0:	893b      	ldrh	r3, [r7, #8]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d00e      	beq.n	8019b14 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8019af6:	683b      	ldr	r3, [r7, #0]
 8019af8:	88da      	ldrh	r2, [r3, #6]
 8019afa:	893b      	ldrh	r3, [r7, #8]
 8019afc:	4293      	cmp	r3, r2
 8019afe:	bf28      	it	cs
 8019b00:	4613      	movcs	r3, r2
 8019b02:	b29b      	uxth	r3, r3
 8019b04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8019b06:	893b      	ldrh	r3, [r7, #8]
 8019b08:	461a      	mov	r2, r3
 8019b0a:	68f9      	ldr	r1, [r7, #12]
 8019b0c:	6878      	ldr	r0, [r7, #4]
 8019b0e:	f000 fa69 	bl	8019fe4 <USBD_CtlSendData>
 8019b12:	e009      	b.n	8019b28 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8019b14:	6839      	ldr	r1, [r7, #0]
 8019b16:	6878      	ldr	r0, [r7, #4]
 8019b18:	f000 f9e7 	bl	8019eea <USBD_CtlError>
 8019b1c:	e004      	b.n	8019b28 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8019b1e:	6878      	ldr	r0, [r7, #4]
 8019b20:	f000 faba 	bl	801a098 <USBD_CtlSendStatus>
 8019b24:	e000      	b.n	8019b28 <USBD_GetDescriptor+0x320>
    return;
 8019b26:	bf00      	nop
  }
}
 8019b28:	3710      	adds	r7, #16
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	bd80      	pop	{r7, pc}
 8019b2e:	bf00      	nop

08019b30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019b30:	b580      	push	{r7, lr}
 8019b32:	b084      	sub	sp, #16
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	6078      	str	r0, [r7, #4]
 8019b38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8019b3a:	683b      	ldr	r3, [r7, #0]
 8019b3c:	889b      	ldrh	r3, [r3, #4]
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d131      	bne.n	8019ba6 <USBD_SetAddress+0x76>
 8019b42:	683b      	ldr	r3, [r7, #0]
 8019b44:	88db      	ldrh	r3, [r3, #6]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d12d      	bne.n	8019ba6 <USBD_SetAddress+0x76>
 8019b4a:	683b      	ldr	r3, [r7, #0]
 8019b4c:	885b      	ldrh	r3, [r3, #2]
 8019b4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8019b50:	d829      	bhi.n	8019ba6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8019b52:	683b      	ldr	r3, [r7, #0]
 8019b54:	885b      	ldrh	r3, [r3, #2]
 8019b56:	b2db      	uxtb	r3, r3
 8019b58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019b5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019b64:	b2db      	uxtb	r3, r3
 8019b66:	2b03      	cmp	r3, #3
 8019b68:	d104      	bne.n	8019b74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8019b6a:	6839      	ldr	r1, [r7, #0]
 8019b6c:	6878      	ldr	r0, [r7, #4]
 8019b6e:	f000 f9bc 	bl	8019eea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019b72:	e01d      	b.n	8019bb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	7bfa      	ldrb	r2, [r7, #15]
 8019b78:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8019b7c:	7bfb      	ldrb	r3, [r7, #15]
 8019b7e:	4619      	mov	r1, r3
 8019b80:	6878      	ldr	r0, [r7, #4]
 8019b82:	f000 ffb5 	bl	801aaf0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8019b86:	6878      	ldr	r0, [r7, #4]
 8019b88:	f000 fa86 	bl	801a098 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8019b8c:	7bfb      	ldrb	r3, [r7, #15]
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d004      	beq.n	8019b9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	2202      	movs	r2, #2
 8019b96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019b9a:	e009      	b.n	8019bb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	2201      	movs	r2, #1
 8019ba0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019ba4:	e004      	b.n	8019bb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8019ba6:	6839      	ldr	r1, [r7, #0]
 8019ba8:	6878      	ldr	r0, [r7, #4]
 8019baa:	f000 f99e 	bl	8019eea <USBD_CtlError>
  }
}
 8019bae:	bf00      	nop
 8019bb0:	bf00      	nop
 8019bb2:	3710      	adds	r7, #16
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	bd80      	pop	{r7, pc}

08019bb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	b084      	sub	sp, #16
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
 8019bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8019bc6:	683b      	ldr	r3, [r7, #0]
 8019bc8:	885b      	ldrh	r3, [r3, #2]
 8019bca:	b2da      	uxtb	r2, r3
 8019bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8019d08 <USBD_SetConfig+0x150>)
 8019bce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8019bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8019d08 <USBD_SetConfig+0x150>)
 8019bd2:	781b      	ldrb	r3, [r3, #0]
 8019bd4:	2b01      	cmp	r3, #1
 8019bd6:	d905      	bls.n	8019be4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8019bd8:	6839      	ldr	r1, [r7, #0]
 8019bda:	6878      	ldr	r0, [r7, #4]
 8019bdc:	f000 f985 	bl	8019eea <USBD_CtlError>
    return USBD_FAIL;
 8019be0:	2303      	movs	r3, #3
 8019be2:	e08c      	b.n	8019cfe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019bea:	b2db      	uxtb	r3, r3
 8019bec:	2b02      	cmp	r3, #2
 8019bee:	d002      	beq.n	8019bf6 <USBD_SetConfig+0x3e>
 8019bf0:	2b03      	cmp	r3, #3
 8019bf2:	d029      	beq.n	8019c48 <USBD_SetConfig+0x90>
 8019bf4:	e075      	b.n	8019ce2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8019bf6:	4b44      	ldr	r3, [pc, #272]	@ (8019d08 <USBD_SetConfig+0x150>)
 8019bf8:	781b      	ldrb	r3, [r3, #0]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d020      	beq.n	8019c40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8019bfe:	4b42      	ldr	r3, [pc, #264]	@ (8019d08 <USBD_SetConfig+0x150>)
 8019c00:	781b      	ldrb	r3, [r3, #0]
 8019c02:	461a      	mov	r2, r3
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019c08:	4b3f      	ldr	r3, [pc, #252]	@ (8019d08 <USBD_SetConfig+0x150>)
 8019c0a:	781b      	ldrb	r3, [r3, #0]
 8019c0c:	4619      	mov	r1, r3
 8019c0e:	6878      	ldr	r0, [r7, #4]
 8019c10:	f7fe ffb9 	bl	8018b86 <USBD_SetClassConfig>
 8019c14:	4603      	mov	r3, r0
 8019c16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8019c18:	7bfb      	ldrb	r3, [r7, #15]
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d008      	beq.n	8019c30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8019c1e:	6839      	ldr	r1, [r7, #0]
 8019c20:	6878      	ldr	r0, [r7, #4]
 8019c22:	f000 f962 	bl	8019eea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	2202      	movs	r2, #2
 8019c2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8019c2e:	e065      	b.n	8019cfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8019c30:	6878      	ldr	r0, [r7, #4]
 8019c32:	f000 fa31 	bl	801a098 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	2203      	movs	r2, #3
 8019c3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8019c3e:	e05d      	b.n	8019cfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8019c40:	6878      	ldr	r0, [r7, #4]
 8019c42:	f000 fa29 	bl	801a098 <USBD_CtlSendStatus>
      break;
 8019c46:	e059      	b.n	8019cfc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8019c48:	4b2f      	ldr	r3, [pc, #188]	@ (8019d08 <USBD_SetConfig+0x150>)
 8019c4a:	781b      	ldrb	r3, [r3, #0]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d112      	bne.n	8019c76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	2202      	movs	r2, #2
 8019c54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8019c58:	4b2b      	ldr	r3, [pc, #172]	@ (8019d08 <USBD_SetConfig+0x150>)
 8019c5a:	781b      	ldrb	r3, [r3, #0]
 8019c5c:	461a      	mov	r2, r3
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8019c62:	4b29      	ldr	r3, [pc, #164]	@ (8019d08 <USBD_SetConfig+0x150>)
 8019c64:	781b      	ldrb	r3, [r3, #0]
 8019c66:	4619      	mov	r1, r3
 8019c68:	6878      	ldr	r0, [r7, #4]
 8019c6a:	f7fe ffa8 	bl	8018bbe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8019c6e:	6878      	ldr	r0, [r7, #4]
 8019c70:	f000 fa12 	bl	801a098 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8019c74:	e042      	b.n	8019cfc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8019c76:	4b24      	ldr	r3, [pc, #144]	@ (8019d08 <USBD_SetConfig+0x150>)
 8019c78:	781b      	ldrb	r3, [r3, #0]
 8019c7a:	461a      	mov	r2, r3
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	685b      	ldr	r3, [r3, #4]
 8019c80:	429a      	cmp	r2, r3
 8019c82:	d02a      	beq.n	8019cda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	685b      	ldr	r3, [r3, #4]
 8019c88:	b2db      	uxtb	r3, r3
 8019c8a:	4619      	mov	r1, r3
 8019c8c:	6878      	ldr	r0, [r7, #4]
 8019c8e:	f7fe ff96 	bl	8018bbe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8019c92:	4b1d      	ldr	r3, [pc, #116]	@ (8019d08 <USBD_SetConfig+0x150>)
 8019c94:	781b      	ldrb	r3, [r3, #0]
 8019c96:	461a      	mov	r2, r3
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8019d08 <USBD_SetConfig+0x150>)
 8019c9e:	781b      	ldrb	r3, [r3, #0]
 8019ca0:	4619      	mov	r1, r3
 8019ca2:	6878      	ldr	r0, [r7, #4]
 8019ca4:	f7fe ff6f 	bl	8018b86 <USBD_SetClassConfig>
 8019ca8:	4603      	mov	r3, r0
 8019caa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8019cac:	7bfb      	ldrb	r3, [r7, #15]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d00f      	beq.n	8019cd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8019cb2:	6839      	ldr	r1, [r7, #0]
 8019cb4:	6878      	ldr	r0, [r7, #4]
 8019cb6:	f000 f918 	bl	8019eea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	685b      	ldr	r3, [r3, #4]
 8019cbe:	b2db      	uxtb	r3, r3
 8019cc0:	4619      	mov	r1, r3
 8019cc2:	6878      	ldr	r0, [r7, #4]
 8019cc4:	f7fe ff7b 	bl	8018bbe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	2202      	movs	r2, #2
 8019ccc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8019cd0:	e014      	b.n	8019cfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8019cd2:	6878      	ldr	r0, [r7, #4]
 8019cd4:	f000 f9e0 	bl	801a098 <USBD_CtlSendStatus>
      break;
 8019cd8:	e010      	b.n	8019cfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8019cda:	6878      	ldr	r0, [r7, #4]
 8019cdc:	f000 f9dc 	bl	801a098 <USBD_CtlSendStatus>
      break;
 8019ce0:	e00c      	b.n	8019cfc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8019ce2:	6839      	ldr	r1, [r7, #0]
 8019ce4:	6878      	ldr	r0, [r7, #4]
 8019ce6:	f000 f900 	bl	8019eea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8019cea:	4b07      	ldr	r3, [pc, #28]	@ (8019d08 <USBD_SetConfig+0x150>)
 8019cec:	781b      	ldrb	r3, [r3, #0]
 8019cee:	4619      	mov	r1, r3
 8019cf0:	6878      	ldr	r0, [r7, #4]
 8019cf2:	f7fe ff64 	bl	8018bbe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8019cf6:	2303      	movs	r3, #3
 8019cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8019cfa:	bf00      	nop
  }

  return ret;
 8019cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8019cfe:	4618      	mov	r0, r3
 8019d00:	3710      	adds	r7, #16
 8019d02:	46bd      	mov	sp, r7
 8019d04:	bd80      	pop	{r7, pc}
 8019d06:	bf00      	nop
 8019d08:	24001034 	.word	0x24001034

08019d0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019d0c:	b580      	push	{r7, lr}
 8019d0e:	b082      	sub	sp, #8
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	6078      	str	r0, [r7, #4]
 8019d14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8019d16:	683b      	ldr	r3, [r7, #0]
 8019d18:	88db      	ldrh	r3, [r3, #6]
 8019d1a:	2b01      	cmp	r3, #1
 8019d1c:	d004      	beq.n	8019d28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8019d1e:	6839      	ldr	r1, [r7, #0]
 8019d20:	6878      	ldr	r0, [r7, #4]
 8019d22:	f000 f8e2 	bl	8019eea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8019d26:	e023      	b.n	8019d70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019d2e:	b2db      	uxtb	r3, r3
 8019d30:	2b02      	cmp	r3, #2
 8019d32:	dc02      	bgt.n	8019d3a <USBD_GetConfig+0x2e>
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	dc03      	bgt.n	8019d40 <USBD_GetConfig+0x34>
 8019d38:	e015      	b.n	8019d66 <USBD_GetConfig+0x5a>
 8019d3a:	2b03      	cmp	r3, #3
 8019d3c:	d00b      	beq.n	8019d56 <USBD_GetConfig+0x4a>
 8019d3e:	e012      	b.n	8019d66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	2200      	movs	r2, #0
 8019d44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	3308      	adds	r3, #8
 8019d4a:	2201      	movs	r2, #1
 8019d4c:	4619      	mov	r1, r3
 8019d4e:	6878      	ldr	r0, [r7, #4]
 8019d50:	f000 f948 	bl	8019fe4 <USBD_CtlSendData>
        break;
 8019d54:	e00c      	b.n	8019d70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	3304      	adds	r3, #4
 8019d5a:	2201      	movs	r2, #1
 8019d5c:	4619      	mov	r1, r3
 8019d5e:	6878      	ldr	r0, [r7, #4]
 8019d60:	f000 f940 	bl	8019fe4 <USBD_CtlSendData>
        break;
 8019d64:	e004      	b.n	8019d70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8019d66:	6839      	ldr	r1, [r7, #0]
 8019d68:	6878      	ldr	r0, [r7, #4]
 8019d6a:	f000 f8be 	bl	8019eea <USBD_CtlError>
        break;
 8019d6e:	bf00      	nop
}
 8019d70:	bf00      	nop
 8019d72:	3708      	adds	r7, #8
 8019d74:	46bd      	mov	sp, r7
 8019d76:	bd80      	pop	{r7, pc}

08019d78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019d78:	b580      	push	{r7, lr}
 8019d7a:	b082      	sub	sp, #8
 8019d7c:	af00      	add	r7, sp, #0
 8019d7e:	6078      	str	r0, [r7, #4]
 8019d80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019d88:	b2db      	uxtb	r3, r3
 8019d8a:	3b01      	subs	r3, #1
 8019d8c:	2b02      	cmp	r3, #2
 8019d8e:	d81e      	bhi.n	8019dce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8019d90:	683b      	ldr	r3, [r7, #0]
 8019d92:	88db      	ldrh	r3, [r3, #6]
 8019d94:	2b02      	cmp	r3, #2
 8019d96:	d004      	beq.n	8019da2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8019d98:	6839      	ldr	r1, [r7, #0]
 8019d9a:	6878      	ldr	r0, [r7, #4]
 8019d9c:	f000 f8a5 	bl	8019eea <USBD_CtlError>
        break;
 8019da0:	e01a      	b.n	8019dd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	2201      	movs	r2, #1
 8019da6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d005      	beq.n	8019dbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	68db      	ldr	r3, [r3, #12]
 8019db6:	f043 0202 	orr.w	r2, r3, #2
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	330c      	adds	r3, #12
 8019dc2:	2202      	movs	r2, #2
 8019dc4:	4619      	mov	r1, r3
 8019dc6:	6878      	ldr	r0, [r7, #4]
 8019dc8:	f000 f90c 	bl	8019fe4 <USBD_CtlSendData>
      break;
 8019dcc:	e004      	b.n	8019dd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8019dce:	6839      	ldr	r1, [r7, #0]
 8019dd0:	6878      	ldr	r0, [r7, #4]
 8019dd2:	f000 f88a 	bl	8019eea <USBD_CtlError>
      break;
 8019dd6:	bf00      	nop
  }
}
 8019dd8:	bf00      	nop
 8019dda:	3708      	adds	r7, #8
 8019ddc:	46bd      	mov	sp, r7
 8019dde:	bd80      	pop	{r7, pc}

08019de0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019de0:	b580      	push	{r7, lr}
 8019de2:	b082      	sub	sp, #8
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	6078      	str	r0, [r7, #4]
 8019de8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8019dea:	683b      	ldr	r3, [r7, #0]
 8019dec:	885b      	ldrh	r3, [r3, #2]
 8019dee:	2b01      	cmp	r3, #1
 8019df0:	d107      	bne.n	8019e02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	2201      	movs	r2, #1
 8019df6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8019dfa:	6878      	ldr	r0, [r7, #4]
 8019dfc:	f000 f94c 	bl	801a098 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8019e00:	e013      	b.n	8019e2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8019e02:	683b      	ldr	r3, [r7, #0]
 8019e04:	885b      	ldrh	r3, [r3, #2]
 8019e06:	2b02      	cmp	r3, #2
 8019e08:	d10b      	bne.n	8019e22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8019e0a:	683b      	ldr	r3, [r7, #0]
 8019e0c:	889b      	ldrh	r3, [r3, #4]
 8019e0e:	0a1b      	lsrs	r3, r3, #8
 8019e10:	b29b      	uxth	r3, r3
 8019e12:	b2da      	uxtb	r2, r3
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8019e1a:	6878      	ldr	r0, [r7, #4]
 8019e1c:	f000 f93c 	bl	801a098 <USBD_CtlSendStatus>
}
 8019e20:	e003      	b.n	8019e2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8019e22:	6839      	ldr	r1, [r7, #0]
 8019e24:	6878      	ldr	r0, [r7, #4]
 8019e26:	f000 f860 	bl	8019eea <USBD_CtlError>
}
 8019e2a:	bf00      	nop
 8019e2c:	3708      	adds	r7, #8
 8019e2e:	46bd      	mov	sp, r7
 8019e30:	bd80      	pop	{r7, pc}

08019e32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019e32:	b580      	push	{r7, lr}
 8019e34:	b082      	sub	sp, #8
 8019e36:	af00      	add	r7, sp, #0
 8019e38:	6078      	str	r0, [r7, #4]
 8019e3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019e42:	b2db      	uxtb	r3, r3
 8019e44:	3b01      	subs	r3, #1
 8019e46:	2b02      	cmp	r3, #2
 8019e48:	d80b      	bhi.n	8019e62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8019e4a:	683b      	ldr	r3, [r7, #0]
 8019e4c:	885b      	ldrh	r3, [r3, #2]
 8019e4e:	2b01      	cmp	r3, #1
 8019e50:	d10c      	bne.n	8019e6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	2200      	movs	r2, #0
 8019e56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8019e5a:	6878      	ldr	r0, [r7, #4]
 8019e5c:	f000 f91c 	bl	801a098 <USBD_CtlSendStatus>
      }
      break;
 8019e60:	e004      	b.n	8019e6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8019e62:	6839      	ldr	r1, [r7, #0]
 8019e64:	6878      	ldr	r0, [r7, #4]
 8019e66:	f000 f840 	bl	8019eea <USBD_CtlError>
      break;
 8019e6a:	e000      	b.n	8019e6e <USBD_ClrFeature+0x3c>
      break;
 8019e6c:	bf00      	nop
  }
}
 8019e6e:	bf00      	nop
 8019e70:	3708      	adds	r7, #8
 8019e72:	46bd      	mov	sp, r7
 8019e74:	bd80      	pop	{r7, pc}

08019e76 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8019e76:	b580      	push	{r7, lr}
 8019e78:	b084      	sub	sp, #16
 8019e7a:	af00      	add	r7, sp, #0
 8019e7c:	6078      	str	r0, [r7, #4]
 8019e7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8019e80:	683b      	ldr	r3, [r7, #0]
 8019e82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	781a      	ldrb	r2, [r3, #0]
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	3301      	adds	r3, #1
 8019e90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	781a      	ldrb	r2, [r3, #0]
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8019e9a:	68fb      	ldr	r3, [r7, #12]
 8019e9c:	3301      	adds	r3, #1
 8019e9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8019ea0:	68f8      	ldr	r0, [r7, #12]
 8019ea2:	f7ff fa16 	bl	80192d2 <SWAPBYTE>
 8019ea6:	4603      	mov	r3, r0
 8019ea8:	461a      	mov	r2, r3
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	3301      	adds	r3, #1
 8019eb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	3301      	adds	r3, #1
 8019eb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8019eba:	68f8      	ldr	r0, [r7, #12]
 8019ebc:	f7ff fa09 	bl	80192d2 <SWAPBYTE>
 8019ec0:	4603      	mov	r3, r0
 8019ec2:	461a      	mov	r2, r3
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	3301      	adds	r3, #1
 8019ecc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	3301      	adds	r3, #1
 8019ed2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8019ed4:	68f8      	ldr	r0, [r7, #12]
 8019ed6:	f7ff f9fc 	bl	80192d2 <SWAPBYTE>
 8019eda:	4603      	mov	r3, r0
 8019edc:	461a      	mov	r2, r3
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	80da      	strh	r2, [r3, #6]
}
 8019ee2:	bf00      	nop
 8019ee4:	3710      	adds	r7, #16
 8019ee6:	46bd      	mov	sp, r7
 8019ee8:	bd80      	pop	{r7, pc}

08019eea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019eea:	b580      	push	{r7, lr}
 8019eec:	b082      	sub	sp, #8
 8019eee:	af00      	add	r7, sp, #0
 8019ef0:	6078      	str	r0, [r7, #4]
 8019ef2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8019ef4:	2180      	movs	r1, #128	@ 0x80
 8019ef6:	6878      	ldr	r0, [r7, #4]
 8019ef8:	f000 fd90 	bl	801aa1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8019efc:	2100      	movs	r1, #0
 8019efe:	6878      	ldr	r0, [r7, #4]
 8019f00:	f000 fd8c 	bl	801aa1c <USBD_LL_StallEP>
}
 8019f04:	bf00      	nop
 8019f06:	3708      	adds	r7, #8
 8019f08:	46bd      	mov	sp, r7
 8019f0a:	bd80      	pop	{r7, pc}

08019f0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8019f0c:	b580      	push	{r7, lr}
 8019f0e:	b086      	sub	sp, #24
 8019f10:	af00      	add	r7, sp, #0
 8019f12:	60f8      	str	r0, [r7, #12]
 8019f14:	60b9      	str	r1, [r7, #8]
 8019f16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8019f18:	2300      	movs	r3, #0
 8019f1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8019f1c:	68fb      	ldr	r3, [r7, #12]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d042      	beq.n	8019fa8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8019f26:	6938      	ldr	r0, [r7, #16]
 8019f28:	f000 f842 	bl	8019fb0 <USBD_GetLen>
 8019f2c:	4603      	mov	r3, r0
 8019f2e:	3301      	adds	r3, #1
 8019f30:	005b      	lsls	r3, r3, #1
 8019f32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019f36:	d808      	bhi.n	8019f4a <USBD_GetString+0x3e>
 8019f38:	6938      	ldr	r0, [r7, #16]
 8019f3a:	f000 f839 	bl	8019fb0 <USBD_GetLen>
 8019f3e:	4603      	mov	r3, r0
 8019f40:	3301      	adds	r3, #1
 8019f42:	b29b      	uxth	r3, r3
 8019f44:	005b      	lsls	r3, r3, #1
 8019f46:	b29a      	uxth	r2, r3
 8019f48:	e001      	b.n	8019f4e <USBD_GetString+0x42>
 8019f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8019f52:	7dfb      	ldrb	r3, [r7, #23]
 8019f54:	68ba      	ldr	r2, [r7, #8]
 8019f56:	4413      	add	r3, r2
 8019f58:	687a      	ldr	r2, [r7, #4]
 8019f5a:	7812      	ldrb	r2, [r2, #0]
 8019f5c:	701a      	strb	r2, [r3, #0]
  idx++;
 8019f5e:	7dfb      	ldrb	r3, [r7, #23]
 8019f60:	3301      	adds	r3, #1
 8019f62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8019f64:	7dfb      	ldrb	r3, [r7, #23]
 8019f66:	68ba      	ldr	r2, [r7, #8]
 8019f68:	4413      	add	r3, r2
 8019f6a:	2203      	movs	r2, #3
 8019f6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8019f6e:	7dfb      	ldrb	r3, [r7, #23]
 8019f70:	3301      	adds	r3, #1
 8019f72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8019f74:	e013      	b.n	8019f9e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8019f76:	7dfb      	ldrb	r3, [r7, #23]
 8019f78:	68ba      	ldr	r2, [r7, #8]
 8019f7a:	4413      	add	r3, r2
 8019f7c:	693a      	ldr	r2, [r7, #16]
 8019f7e:	7812      	ldrb	r2, [r2, #0]
 8019f80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8019f82:	693b      	ldr	r3, [r7, #16]
 8019f84:	3301      	adds	r3, #1
 8019f86:	613b      	str	r3, [r7, #16]
    idx++;
 8019f88:	7dfb      	ldrb	r3, [r7, #23]
 8019f8a:	3301      	adds	r3, #1
 8019f8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8019f8e:	7dfb      	ldrb	r3, [r7, #23]
 8019f90:	68ba      	ldr	r2, [r7, #8]
 8019f92:	4413      	add	r3, r2
 8019f94:	2200      	movs	r2, #0
 8019f96:	701a      	strb	r2, [r3, #0]
    idx++;
 8019f98:	7dfb      	ldrb	r3, [r7, #23]
 8019f9a:	3301      	adds	r3, #1
 8019f9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8019f9e:	693b      	ldr	r3, [r7, #16]
 8019fa0:	781b      	ldrb	r3, [r3, #0]
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d1e7      	bne.n	8019f76 <USBD_GetString+0x6a>
 8019fa6:	e000      	b.n	8019faa <USBD_GetString+0x9e>
    return;
 8019fa8:	bf00      	nop
  }
}
 8019faa:	3718      	adds	r7, #24
 8019fac:	46bd      	mov	sp, r7
 8019fae:	bd80      	pop	{r7, pc}

08019fb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8019fb0:	b480      	push	{r7}
 8019fb2:	b085      	sub	sp, #20
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019fb8:	2300      	movs	r3, #0
 8019fba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8019fc0:	e005      	b.n	8019fce <USBD_GetLen+0x1e>
  {
    len++;
 8019fc2:	7bfb      	ldrb	r3, [r7, #15]
 8019fc4:	3301      	adds	r3, #1
 8019fc6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8019fc8:	68bb      	ldr	r3, [r7, #8]
 8019fca:	3301      	adds	r3, #1
 8019fcc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8019fce:	68bb      	ldr	r3, [r7, #8]
 8019fd0:	781b      	ldrb	r3, [r3, #0]
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	d1f5      	bne.n	8019fc2 <USBD_GetLen+0x12>
  }

  return len;
 8019fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8019fd8:	4618      	mov	r0, r3
 8019fda:	3714      	adds	r7, #20
 8019fdc:	46bd      	mov	sp, r7
 8019fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe2:	4770      	bx	lr

08019fe4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8019fe4:	b580      	push	{r7, lr}
 8019fe6:	b084      	sub	sp, #16
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	60f8      	str	r0, [r7, #12]
 8019fec:	60b9      	str	r1, [r7, #8]
 8019fee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	2202      	movs	r2, #2
 8019ff4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	687a      	ldr	r2, [r7, #4]
 8019ffc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	687a      	ldr	r2, [r7, #4]
 801a002:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	68ba      	ldr	r2, [r7, #8]
 801a008:	2100      	movs	r1, #0
 801a00a:	68f8      	ldr	r0, [r7, #12]
 801a00c:	f000 fd8f 	bl	801ab2e <USBD_LL_Transmit>

  return USBD_OK;
 801a010:	2300      	movs	r3, #0
}
 801a012:	4618      	mov	r0, r3
 801a014:	3710      	adds	r7, #16
 801a016:	46bd      	mov	sp, r7
 801a018:	bd80      	pop	{r7, pc}

0801a01a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801a01a:	b580      	push	{r7, lr}
 801a01c:	b084      	sub	sp, #16
 801a01e:	af00      	add	r7, sp, #0
 801a020:	60f8      	str	r0, [r7, #12]
 801a022:	60b9      	str	r1, [r7, #8]
 801a024:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	68ba      	ldr	r2, [r7, #8]
 801a02a:	2100      	movs	r1, #0
 801a02c:	68f8      	ldr	r0, [r7, #12]
 801a02e:	f000 fd7e 	bl	801ab2e <USBD_LL_Transmit>

  return USBD_OK;
 801a032:	2300      	movs	r3, #0
}
 801a034:	4618      	mov	r0, r3
 801a036:	3710      	adds	r7, #16
 801a038:	46bd      	mov	sp, r7
 801a03a:	bd80      	pop	{r7, pc}

0801a03c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801a03c:	b580      	push	{r7, lr}
 801a03e:	b084      	sub	sp, #16
 801a040:	af00      	add	r7, sp, #0
 801a042:	60f8      	str	r0, [r7, #12]
 801a044:	60b9      	str	r1, [r7, #8]
 801a046:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	2203      	movs	r2, #3
 801a04c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801a050:	68fb      	ldr	r3, [r7, #12]
 801a052:	687a      	ldr	r2, [r7, #4]
 801a054:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	687a      	ldr	r2, [r7, #4]
 801a05c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	68ba      	ldr	r2, [r7, #8]
 801a064:	2100      	movs	r1, #0
 801a066:	68f8      	ldr	r0, [r7, #12]
 801a068:	f000 fd82 	bl	801ab70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801a06c:	2300      	movs	r3, #0
}
 801a06e:	4618      	mov	r0, r3
 801a070:	3710      	adds	r7, #16
 801a072:	46bd      	mov	sp, r7
 801a074:	bd80      	pop	{r7, pc}

0801a076 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801a076:	b580      	push	{r7, lr}
 801a078:	b084      	sub	sp, #16
 801a07a:	af00      	add	r7, sp, #0
 801a07c:	60f8      	str	r0, [r7, #12]
 801a07e:	60b9      	str	r1, [r7, #8]
 801a080:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	68ba      	ldr	r2, [r7, #8]
 801a086:	2100      	movs	r1, #0
 801a088:	68f8      	ldr	r0, [r7, #12]
 801a08a:	f000 fd71 	bl	801ab70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801a08e:	2300      	movs	r3, #0
}
 801a090:	4618      	mov	r0, r3
 801a092:	3710      	adds	r7, #16
 801a094:	46bd      	mov	sp, r7
 801a096:	bd80      	pop	{r7, pc}

0801a098 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801a098:	b580      	push	{r7, lr}
 801a09a:	b082      	sub	sp, #8
 801a09c:	af00      	add	r7, sp, #0
 801a09e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	2204      	movs	r2, #4
 801a0a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	2200      	movs	r2, #0
 801a0ac:	2100      	movs	r1, #0
 801a0ae:	6878      	ldr	r0, [r7, #4]
 801a0b0:	f000 fd3d 	bl	801ab2e <USBD_LL_Transmit>

  return USBD_OK;
 801a0b4:	2300      	movs	r3, #0
}
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	3708      	adds	r7, #8
 801a0ba:	46bd      	mov	sp, r7
 801a0bc:	bd80      	pop	{r7, pc}

0801a0be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801a0be:	b580      	push	{r7, lr}
 801a0c0:	b082      	sub	sp, #8
 801a0c2:	af00      	add	r7, sp, #0
 801a0c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	2205      	movs	r2, #5
 801a0ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a0ce:	2300      	movs	r3, #0
 801a0d0:	2200      	movs	r2, #0
 801a0d2:	2100      	movs	r1, #0
 801a0d4:	6878      	ldr	r0, [r7, #4]
 801a0d6:	f000 fd4b 	bl	801ab70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801a0da:	2300      	movs	r3, #0
}
 801a0dc:	4618      	mov	r0, r3
 801a0de:	3708      	adds	r7, #8
 801a0e0:	46bd      	mov	sp, r7
 801a0e2:	bd80      	pop	{r7, pc}

0801a0e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a0e4:	b580      	push	{r7, lr}
 801a0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a0e8:	2200      	movs	r2, #0
 801a0ea:	4913      	ldr	r1, [pc, #76]	@ (801a138 <MX_USB_DEVICE_Init+0x54>)
 801a0ec:	4813      	ldr	r0, [pc, #76]	@ (801a13c <MX_USB_DEVICE_Init+0x58>)
 801a0ee:	f7fe fccd 	bl	8018a8c <USBD_Init>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d001      	beq.n	801a0fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a0f8:	f7ea f942 	bl	8004380 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801a0fc:	4910      	ldr	r1, [pc, #64]	@ (801a140 <MX_USB_DEVICE_Init+0x5c>)
 801a0fe:	480f      	ldr	r0, [pc, #60]	@ (801a13c <MX_USB_DEVICE_Init+0x58>)
 801a100:	f7fe fcf4 	bl	8018aec <USBD_RegisterClass>
 801a104:	4603      	mov	r3, r0
 801a106:	2b00      	cmp	r3, #0
 801a108:	d001      	beq.n	801a10e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a10a:	f7ea f939 	bl	8004380 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801a10e:	490d      	ldr	r1, [pc, #52]	@ (801a144 <MX_USB_DEVICE_Init+0x60>)
 801a110:	480a      	ldr	r0, [pc, #40]	@ (801a13c <MX_USB_DEVICE_Init+0x58>)
 801a112:	f7fe fbeb 	bl	80188ec <USBD_CDC_RegisterInterface>
 801a116:	4603      	mov	r3, r0
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d001      	beq.n	801a120 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a11c:	f7ea f930 	bl	8004380 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a120:	4806      	ldr	r0, [pc, #24]	@ (801a13c <MX_USB_DEVICE_Init+0x58>)
 801a122:	f7fe fd19 	bl	8018b58 <USBD_Start>
 801a126:	4603      	mov	r3, r0
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d001      	beq.n	801a130 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a12c:	f7ea f928 	bl	8004380 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a130:	f7f3 fd92 	bl	800dc58 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a134:	bf00      	nop
 801a136:	bd80      	pop	{r7, pc}
 801a138:	24000138 	.word	0x24000138
 801a13c:	24001038 	.word	0x24001038
 801a140:	2400009c 	.word	0x2400009c
 801a144:	24000124 	.word	0x24000124

0801a148 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801a148:	b580      	push	{r7, lr}
 801a14a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801a14c:	2200      	movs	r2, #0
 801a14e:	4905      	ldr	r1, [pc, #20]	@ (801a164 <CDC_Init_FS+0x1c>)
 801a150:	4805      	ldr	r0, [pc, #20]	@ (801a168 <CDC_Init_FS+0x20>)
 801a152:	f7fe fbe5 	bl	8018920 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801a156:	4905      	ldr	r1, [pc, #20]	@ (801a16c <CDC_Init_FS+0x24>)
 801a158:	4803      	ldr	r0, [pc, #12]	@ (801a168 <CDC_Init_FS+0x20>)
 801a15a:	f7fe fc03 	bl	8018964 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a15e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801a160:	4618      	mov	r0, r3
 801a162:	bd80      	pop	{r7, pc}
 801a164:	24001b14 	.word	0x24001b14
 801a168:	24001038 	.word	0x24001038
 801a16c:	24001314 	.word	0x24001314

0801a170 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801a170:	b480      	push	{r7}
 801a172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a174:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a176:	4618      	mov	r0, r3
 801a178:	46bd      	mov	sp, r7
 801a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a17e:	4770      	bx	lr

0801a180 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a180:	b480      	push	{r7}
 801a182:	b083      	sub	sp, #12
 801a184:	af00      	add	r7, sp, #0
 801a186:	4603      	mov	r3, r0
 801a188:	6039      	str	r1, [r7, #0]
 801a18a:	71fb      	strb	r3, [r7, #7]
 801a18c:	4613      	mov	r3, r2
 801a18e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801a190:	79fb      	ldrb	r3, [r7, #7]
 801a192:	2b23      	cmp	r3, #35	@ 0x23
 801a194:	f200 8098 	bhi.w	801a2c8 <CDC_Control_FS+0x148>
 801a198:	a201      	add	r2, pc, #4	@ (adr r2, 801a1a0 <CDC_Control_FS+0x20>)
 801a19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a19e:	bf00      	nop
 801a1a0:	0801a2c9 	.word	0x0801a2c9
 801a1a4:	0801a2c9 	.word	0x0801a2c9
 801a1a8:	0801a2c9 	.word	0x0801a2c9
 801a1ac:	0801a2c9 	.word	0x0801a2c9
 801a1b0:	0801a2c9 	.word	0x0801a2c9
 801a1b4:	0801a2c9 	.word	0x0801a2c9
 801a1b8:	0801a2c9 	.word	0x0801a2c9
 801a1bc:	0801a2c9 	.word	0x0801a2c9
 801a1c0:	0801a2c9 	.word	0x0801a2c9
 801a1c4:	0801a2c9 	.word	0x0801a2c9
 801a1c8:	0801a2c9 	.word	0x0801a2c9
 801a1cc:	0801a2c9 	.word	0x0801a2c9
 801a1d0:	0801a2c9 	.word	0x0801a2c9
 801a1d4:	0801a2c9 	.word	0x0801a2c9
 801a1d8:	0801a2c9 	.word	0x0801a2c9
 801a1dc:	0801a2c9 	.word	0x0801a2c9
 801a1e0:	0801a2c9 	.word	0x0801a2c9
 801a1e4:	0801a2c9 	.word	0x0801a2c9
 801a1e8:	0801a2c9 	.word	0x0801a2c9
 801a1ec:	0801a2c9 	.word	0x0801a2c9
 801a1f0:	0801a2c9 	.word	0x0801a2c9
 801a1f4:	0801a2c9 	.word	0x0801a2c9
 801a1f8:	0801a2c9 	.word	0x0801a2c9
 801a1fc:	0801a2c9 	.word	0x0801a2c9
 801a200:	0801a2c9 	.word	0x0801a2c9
 801a204:	0801a2c9 	.word	0x0801a2c9
 801a208:	0801a2c9 	.word	0x0801a2c9
 801a20c:	0801a2c9 	.word	0x0801a2c9
 801a210:	0801a2c9 	.word	0x0801a2c9
 801a214:	0801a2c9 	.word	0x0801a2c9
 801a218:	0801a2c9 	.word	0x0801a2c9
 801a21c:	0801a2c9 	.word	0x0801a2c9
 801a220:	0801a231 	.word	0x0801a231
 801a224:	0801a275 	.word	0x0801a275
 801a228:	0801a2c9 	.word	0x0801a2c9
 801a22c:	0801a2c9 	.word	0x0801a2c9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 801a230:	683b      	ldr	r3, [r7, #0]
 801a232:	781b      	ldrb	r3, [r3, #0]
 801a234:	461a      	mov	r2, r3
 801a236:	683b      	ldr	r3, [r7, #0]
 801a238:	3301      	adds	r3, #1
 801a23a:	781b      	ldrb	r3, [r3, #0]
 801a23c:	021b      	lsls	r3, r3, #8
 801a23e:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 801a240:	683b      	ldr	r3, [r7, #0]
 801a242:	3302      	adds	r3, #2
 801a244:	781b      	ldrb	r3, [r3, #0]
 801a246:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 801a248:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 801a24a:	683b      	ldr	r3, [r7, #0]
 801a24c:	3303      	adds	r3, #3
 801a24e:	781b      	ldrb	r3, [r3, #0]
 801a250:	061b      	lsls	r3, r3, #24
 801a252:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 801a254:	461a      	mov	r2, r3
 801a256:	4b20      	ldr	r3, [pc, #128]	@ (801a2d8 <CDC_Control_FS+0x158>)
 801a258:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 801a25a:	683b      	ldr	r3, [r7, #0]
 801a25c:	791a      	ldrb	r2, [r3, #4]
 801a25e:	4b1e      	ldr	r3, [pc, #120]	@ (801a2d8 <CDC_Control_FS+0x158>)
 801a260:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 801a262:	683b      	ldr	r3, [r7, #0]
 801a264:	795a      	ldrb	r2, [r3, #5]
 801a266:	4b1c      	ldr	r3, [pc, #112]	@ (801a2d8 <CDC_Control_FS+0x158>)
 801a268:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 801a26a:	683b      	ldr	r3, [r7, #0]
 801a26c:	799a      	ldrb	r2, [r3, #6]
 801a26e:	4b1a      	ldr	r3, [pc, #104]	@ (801a2d8 <CDC_Control_FS+0x158>)
 801a270:	719a      	strb	r2, [r3, #6]

    break;
 801a272:	e02a      	b.n	801a2ca <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 801a274:	4b18      	ldr	r3, [pc, #96]	@ (801a2d8 <CDC_Control_FS+0x158>)
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	b2da      	uxtb	r2, r3
 801a27a:	683b      	ldr	r3, [r7, #0]
 801a27c:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 801a27e:	4b16      	ldr	r3, [pc, #88]	@ (801a2d8 <CDC_Control_FS+0x158>)
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	0a1a      	lsrs	r2, r3, #8
 801a284:	683b      	ldr	r3, [r7, #0]
 801a286:	3301      	adds	r3, #1
 801a288:	b2d2      	uxtb	r2, r2
 801a28a:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 801a28c:	4b12      	ldr	r3, [pc, #72]	@ (801a2d8 <CDC_Control_FS+0x158>)
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	0c1a      	lsrs	r2, r3, #16
 801a292:	683b      	ldr	r3, [r7, #0]
 801a294:	3302      	adds	r3, #2
 801a296:	b2d2      	uxtb	r2, r2
 801a298:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 801a29a:	4b0f      	ldr	r3, [pc, #60]	@ (801a2d8 <CDC_Control_FS+0x158>)
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	0e1a      	lsrs	r2, r3, #24
 801a2a0:	683b      	ldr	r3, [r7, #0]
 801a2a2:	3303      	adds	r3, #3
 801a2a4:	b2d2      	uxtb	r2, r2
 801a2a6:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 801a2a8:	683b      	ldr	r3, [r7, #0]
 801a2aa:	3304      	adds	r3, #4
 801a2ac:	4a0a      	ldr	r2, [pc, #40]	@ (801a2d8 <CDC_Control_FS+0x158>)
 801a2ae:	7912      	ldrb	r2, [r2, #4]
 801a2b0:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 801a2b2:	683b      	ldr	r3, [r7, #0]
 801a2b4:	3305      	adds	r3, #5
 801a2b6:	4a08      	ldr	r2, [pc, #32]	@ (801a2d8 <CDC_Control_FS+0x158>)
 801a2b8:	7952      	ldrb	r2, [r2, #5]
 801a2ba:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 801a2bc:	683b      	ldr	r3, [r7, #0]
 801a2be:	3306      	adds	r3, #6
 801a2c0:	4a05      	ldr	r2, [pc, #20]	@ (801a2d8 <CDC_Control_FS+0x158>)
 801a2c2:	7992      	ldrb	r2, [r2, #6]
 801a2c4:	701a      	strb	r2, [r3, #0]

    break;
 801a2c6:	e000      	b.n	801a2ca <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a2c8:	bf00      	nop
  }

  return (USBD_OK);
 801a2ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a2cc:	4618      	mov	r0, r3
 801a2ce:	370c      	adds	r7, #12
 801a2d0:	46bd      	mov	sp, r7
 801a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d6:	4770      	bx	lr
 801a2d8:	2400011c 	.word	0x2400011c

0801a2dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801a2dc:	b580      	push	{r7, lr}
 801a2de:	b084      	sub	sp, #16
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	6078      	str	r0, [r7, #4]
 801a2e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801a2e6:	6879      	ldr	r1, [r7, #4]
 801a2e8:	480d      	ldr	r0, [pc, #52]	@ (801a320 <CDC_Receive_FS+0x44>)
 801a2ea:	f7fe fb3b 	bl	8018964 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801a2ee:	480c      	ldr	r0, [pc, #48]	@ (801a320 <CDC_Receive_FS+0x44>)
 801a2f0:	f7fe fb96 	bl	8018a20 <USBD_CDC_ReceivePacket>
  if ((Len!=0)&&(Buf!=0)) {
 801a2f4:	683b      	ldr	r3, [r7, #0]
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d00d      	beq.n	801a316 <CDC_Receive_FS+0x3a>
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d00a      	beq.n	801a316 <CDC_Receive_FS+0x3a>
	  uint16_t length = *Len;
 801a300:	683b      	ldr	r3, [r7, #0]
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	81fb      	strh	r3, [r7, #14]
	  if (length>0) {
 801a306:	89fb      	ldrh	r3, [r7, #14]
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d004      	beq.n	801a316 <CDC_Receive_FS+0x3a>
		  USB_Receive(Buf, length);
 801a30c:	89fb      	ldrh	r3, [r7, #14]
 801a30e:	4619      	mov	r1, r3
 801a310:	6878      	ldr	r0, [r7, #4]
 801a312:	f000 f83e 	bl	801a392 <USB_Receive>
	  }
  }
  return (USBD_OK);
 801a316:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801a318:	4618      	mov	r0, r3
 801a31a:	3710      	adds	r7, #16
 801a31c:	46bd      	mov	sp, r7
 801a31e:	bd80      	pop	{r7, pc}
 801a320:	24001038 	.word	0x24001038

0801a324 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801a324:	b580      	push	{r7, lr}
 801a326:	b084      	sub	sp, #16
 801a328:	af00      	add	r7, sp, #0
 801a32a:	6078      	str	r0, [r7, #4]
 801a32c:	460b      	mov	r3, r1
 801a32e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801a330:	2300      	movs	r3, #0
 801a332:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801a334:	4b0d      	ldr	r3, [pc, #52]	@ (801a36c <CDC_Transmit_FS+0x48>)
 801a336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801a33a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801a33c:	68bb      	ldr	r3, [r7, #8]
 801a33e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801a342:	2b00      	cmp	r3, #0
 801a344:	d001      	beq.n	801a34a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801a346:	2301      	movs	r3, #1
 801a348:	e00b      	b.n	801a362 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801a34a:	887b      	ldrh	r3, [r7, #2]
 801a34c:	461a      	mov	r2, r3
 801a34e:	6879      	ldr	r1, [r7, #4]
 801a350:	4806      	ldr	r0, [pc, #24]	@ (801a36c <CDC_Transmit_FS+0x48>)
 801a352:	f7fe fae5 	bl	8018920 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801a356:	4805      	ldr	r0, [pc, #20]	@ (801a36c <CDC_Transmit_FS+0x48>)
 801a358:	f7fe fb22 	bl	80189a0 <USBD_CDC_TransmitPacket>
 801a35c:	4603      	mov	r3, r0
 801a35e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801a360:	7bfb      	ldrb	r3, [r7, #15]
}
 801a362:	4618      	mov	r0, r3
 801a364:	3710      	adds	r7, #16
 801a366:	46bd      	mov	sp, r7
 801a368:	bd80      	pop	{r7, pc}
 801a36a:	bf00      	nop
 801a36c:	24001038 	.word	0x24001038

0801a370 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a370:	b480      	push	{r7}
 801a372:	b087      	sub	sp, #28
 801a374:	af00      	add	r7, sp, #0
 801a376:	60f8      	str	r0, [r7, #12]
 801a378:	60b9      	str	r1, [r7, #8]
 801a37a:	4613      	mov	r3, r2
 801a37c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a37e:	2300      	movs	r3, #0
 801a380:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801a382:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a386:	4618      	mov	r0, r3
 801a388:	371c      	adds	r7, #28
 801a38a:	46bd      	mov	sp, r7
 801a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a390:	4770      	bx	lr

0801a392 <USB_Receive>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
__weak uint8_t USB_Receive(uint8_t* Buf, uint16_t length)
{
 801a392:	b580      	push	{r7, lr}
 801a394:	b082      	sub	sp, #8
 801a396:	af00      	add	r7, sp, #0
 801a398:	6078      	str	r0, [r7, #4]
 801a39a:	460b      	mov	r3, r1
 801a39c:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS(Buf, length);
 801a39e:	887b      	ldrh	r3, [r7, #2]
 801a3a0:	4619      	mov	r1, r3
 801a3a2:	6878      	ldr	r0, [r7, #4]
 801a3a4:	f7ff ffbe 	bl	801a324 <CDC_Transmit_FS>

	return USBD_OK;
 801a3a8:	2300      	movs	r3, #0
}
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	3708      	adds	r7, #8
 801a3ae:	46bd      	mov	sp, r7
 801a3b0:	bd80      	pop	{r7, pc}
	...

0801a3b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a3b4:	b480      	push	{r7}
 801a3b6:	b083      	sub	sp, #12
 801a3b8:	af00      	add	r7, sp, #0
 801a3ba:	4603      	mov	r3, r0
 801a3bc:	6039      	str	r1, [r7, #0]
 801a3be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a3c0:	683b      	ldr	r3, [r7, #0]
 801a3c2:	2212      	movs	r2, #18
 801a3c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a3c6:	4b03      	ldr	r3, [pc, #12]	@ (801a3d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 801a3c8:	4618      	mov	r0, r3
 801a3ca:	370c      	adds	r7, #12
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3d2:	4770      	bx	lr
 801a3d4:	24000158 	.word	0x24000158

0801a3d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a3d8:	b480      	push	{r7}
 801a3da:	b083      	sub	sp, #12
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	4603      	mov	r3, r0
 801a3e0:	6039      	str	r1, [r7, #0]
 801a3e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a3e4:	683b      	ldr	r3, [r7, #0]
 801a3e6:	2204      	movs	r2, #4
 801a3e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a3ea:	4b03      	ldr	r3, [pc, #12]	@ (801a3f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801a3ec:	4618      	mov	r0, r3
 801a3ee:	370c      	adds	r7, #12
 801a3f0:	46bd      	mov	sp, r7
 801a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3f6:	4770      	bx	lr
 801a3f8:	2400016c 	.word	0x2400016c

0801a3fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b082      	sub	sp, #8
 801a400:	af00      	add	r7, sp, #0
 801a402:	4603      	mov	r3, r0
 801a404:	6039      	str	r1, [r7, #0]
 801a406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a408:	79fb      	ldrb	r3, [r7, #7]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d105      	bne.n	801a41a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a40e:	683a      	ldr	r2, [r7, #0]
 801a410:	4907      	ldr	r1, [pc, #28]	@ (801a430 <USBD_FS_ProductStrDescriptor+0x34>)
 801a412:	4808      	ldr	r0, [pc, #32]	@ (801a434 <USBD_FS_ProductStrDescriptor+0x38>)
 801a414:	f7ff fd7a 	bl	8019f0c <USBD_GetString>
 801a418:	e004      	b.n	801a424 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a41a:	683a      	ldr	r2, [r7, #0]
 801a41c:	4904      	ldr	r1, [pc, #16]	@ (801a430 <USBD_FS_ProductStrDescriptor+0x34>)
 801a41e:	4805      	ldr	r0, [pc, #20]	@ (801a434 <USBD_FS_ProductStrDescriptor+0x38>)
 801a420:	f7ff fd74 	bl	8019f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a424:	4b02      	ldr	r3, [pc, #8]	@ (801a430 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801a426:	4618      	mov	r0, r3
 801a428:	3708      	adds	r7, #8
 801a42a:	46bd      	mov	sp, r7
 801a42c:	bd80      	pop	{r7, pc}
 801a42e:	bf00      	nop
 801a430:	24002314 	.word	0x24002314
 801a434:	0801f3a4 	.word	0x0801f3a4

0801a438 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a438:	b580      	push	{r7, lr}
 801a43a:	b082      	sub	sp, #8
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	4603      	mov	r3, r0
 801a440:	6039      	str	r1, [r7, #0]
 801a442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a444:	683a      	ldr	r2, [r7, #0]
 801a446:	4904      	ldr	r1, [pc, #16]	@ (801a458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a448:	4804      	ldr	r0, [pc, #16]	@ (801a45c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a44a:	f7ff fd5f 	bl	8019f0c <USBD_GetString>
  return USBD_StrDesc;
 801a44e:	4b02      	ldr	r3, [pc, #8]	@ (801a458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a450:	4618      	mov	r0, r3
 801a452:	3708      	adds	r7, #8
 801a454:	46bd      	mov	sp, r7
 801a456:	bd80      	pop	{r7, pc}
 801a458:	24002314 	.word	0x24002314
 801a45c:	0801f3bc 	.word	0x0801f3bc

0801a460 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a460:	b580      	push	{r7, lr}
 801a462:	b082      	sub	sp, #8
 801a464:	af00      	add	r7, sp, #0
 801a466:	4603      	mov	r3, r0
 801a468:	6039      	str	r1, [r7, #0]
 801a46a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a46c:	683b      	ldr	r3, [r7, #0]
 801a46e:	221a      	movs	r2, #26
 801a470:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a472:	f000 f843 	bl	801a4fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a476:	4b02      	ldr	r3, [pc, #8]	@ (801a480 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a478:	4618      	mov	r0, r3
 801a47a:	3708      	adds	r7, #8
 801a47c:	46bd      	mov	sp, r7
 801a47e:	bd80      	pop	{r7, pc}
 801a480:	24000170 	.word	0x24000170

0801a484 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a484:	b580      	push	{r7, lr}
 801a486:	b082      	sub	sp, #8
 801a488:	af00      	add	r7, sp, #0
 801a48a:	4603      	mov	r3, r0
 801a48c:	6039      	str	r1, [r7, #0]
 801a48e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a490:	79fb      	ldrb	r3, [r7, #7]
 801a492:	2b00      	cmp	r3, #0
 801a494:	d105      	bne.n	801a4a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a496:	683a      	ldr	r2, [r7, #0]
 801a498:	4907      	ldr	r1, [pc, #28]	@ (801a4b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a49a:	4808      	ldr	r0, [pc, #32]	@ (801a4bc <USBD_FS_ConfigStrDescriptor+0x38>)
 801a49c:	f7ff fd36 	bl	8019f0c <USBD_GetString>
 801a4a0:	e004      	b.n	801a4ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a4a2:	683a      	ldr	r2, [r7, #0]
 801a4a4:	4904      	ldr	r1, [pc, #16]	@ (801a4b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a4a6:	4805      	ldr	r0, [pc, #20]	@ (801a4bc <USBD_FS_ConfigStrDescriptor+0x38>)
 801a4a8:	f7ff fd30 	bl	8019f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a4ac:	4b02      	ldr	r3, [pc, #8]	@ (801a4b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	3708      	adds	r7, #8
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	bd80      	pop	{r7, pc}
 801a4b6:	bf00      	nop
 801a4b8:	24002314 	.word	0x24002314
 801a4bc:	0801f3d0 	.word	0x0801f3d0

0801a4c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a4c0:	b580      	push	{r7, lr}
 801a4c2:	b082      	sub	sp, #8
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	4603      	mov	r3, r0
 801a4c8:	6039      	str	r1, [r7, #0]
 801a4ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a4cc:	79fb      	ldrb	r3, [r7, #7]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d105      	bne.n	801a4de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a4d2:	683a      	ldr	r2, [r7, #0]
 801a4d4:	4907      	ldr	r1, [pc, #28]	@ (801a4f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a4d6:	4808      	ldr	r0, [pc, #32]	@ (801a4f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a4d8:	f7ff fd18 	bl	8019f0c <USBD_GetString>
 801a4dc:	e004      	b.n	801a4e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a4de:	683a      	ldr	r2, [r7, #0]
 801a4e0:	4904      	ldr	r1, [pc, #16]	@ (801a4f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a4e2:	4805      	ldr	r0, [pc, #20]	@ (801a4f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a4e4:	f7ff fd12 	bl	8019f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a4e8:	4b02      	ldr	r3, [pc, #8]	@ (801a4f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	3708      	adds	r7, #8
 801a4ee:	46bd      	mov	sp, r7
 801a4f0:	bd80      	pop	{r7, pc}
 801a4f2:	bf00      	nop
 801a4f4:	24002314 	.word	0x24002314
 801a4f8:	0801f3dc 	.word	0x0801f3dc

0801a4fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b084      	sub	sp, #16
 801a500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a502:	4b0f      	ldr	r3, [pc, #60]	@ (801a540 <Get_SerialNum+0x44>)
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a508:	4b0e      	ldr	r3, [pc, #56]	@ (801a544 <Get_SerialNum+0x48>)
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a50e:	4b0e      	ldr	r3, [pc, #56]	@ (801a548 <Get_SerialNum+0x4c>)
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a514:	68fa      	ldr	r2, [r7, #12]
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	4413      	add	r3, r2
 801a51a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d009      	beq.n	801a536 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a522:	2208      	movs	r2, #8
 801a524:	4909      	ldr	r1, [pc, #36]	@ (801a54c <Get_SerialNum+0x50>)
 801a526:	68f8      	ldr	r0, [r7, #12]
 801a528:	f000 f814 	bl	801a554 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a52c:	2204      	movs	r2, #4
 801a52e:	4908      	ldr	r1, [pc, #32]	@ (801a550 <Get_SerialNum+0x54>)
 801a530:	68b8      	ldr	r0, [r7, #8]
 801a532:	f000 f80f 	bl	801a554 <IntToUnicode>
  }
}
 801a536:	bf00      	nop
 801a538:	3710      	adds	r7, #16
 801a53a:	46bd      	mov	sp, r7
 801a53c:	bd80      	pop	{r7, pc}
 801a53e:	bf00      	nop
 801a540:	1ff1e800 	.word	0x1ff1e800
 801a544:	1ff1e804 	.word	0x1ff1e804
 801a548:	1ff1e808 	.word	0x1ff1e808
 801a54c:	24000172 	.word	0x24000172
 801a550:	24000182 	.word	0x24000182

0801a554 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a554:	b480      	push	{r7}
 801a556:	b087      	sub	sp, #28
 801a558:	af00      	add	r7, sp, #0
 801a55a:	60f8      	str	r0, [r7, #12]
 801a55c:	60b9      	str	r1, [r7, #8]
 801a55e:	4613      	mov	r3, r2
 801a560:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a562:	2300      	movs	r3, #0
 801a564:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a566:	2300      	movs	r3, #0
 801a568:	75fb      	strb	r3, [r7, #23]
 801a56a:	e027      	b.n	801a5bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a56c:	68fb      	ldr	r3, [r7, #12]
 801a56e:	0f1b      	lsrs	r3, r3, #28
 801a570:	2b09      	cmp	r3, #9
 801a572:	d80b      	bhi.n	801a58c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a574:	68fb      	ldr	r3, [r7, #12]
 801a576:	0f1b      	lsrs	r3, r3, #28
 801a578:	b2da      	uxtb	r2, r3
 801a57a:	7dfb      	ldrb	r3, [r7, #23]
 801a57c:	005b      	lsls	r3, r3, #1
 801a57e:	4619      	mov	r1, r3
 801a580:	68bb      	ldr	r3, [r7, #8]
 801a582:	440b      	add	r3, r1
 801a584:	3230      	adds	r2, #48	@ 0x30
 801a586:	b2d2      	uxtb	r2, r2
 801a588:	701a      	strb	r2, [r3, #0]
 801a58a:	e00a      	b.n	801a5a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	0f1b      	lsrs	r3, r3, #28
 801a590:	b2da      	uxtb	r2, r3
 801a592:	7dfb      	ldrb	r3, [r7, #23]
 801a594:	005b      	lsls	r3, r3, #1
 801a596:	4619      	mov	r1, r3
 801a598:	68bb      	ldr	r3, [r7, #8]
 801a59a:	440b      	add	r3, r1
 801a59c:	3237      	adds	r2, #55	@ 0x37
 801a59e:	b2d2      	uxtb	r2, r2
 801a5a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a5a2:	68fb      	ldr	r3, [r7, #12]
 801a5a4:	011b      	lsls	r3, r3, #4
 801a5a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a5a8:	7dfb      	ldrb	r3, [r7, #23]
 801a5aa:	005b      	lsls	r3, r3, #1
 801a5ac:	3301      	adds	r3, #1
 801a5ae:	68ba      	ldr	r2, [r7, #8]
 801a5b0:	4413      	add	r3, r2
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a5b6:	7dfb      	ldrb	r3, [r7, #23]
 801a5b8:	3301      	adds	r3, #1
 801a5ba:	75fb      	strb	r3, [r7, #23]
 801a5bc:	7dfa      	ldrb	r2, [r7, #23]
 801a5be:	79fb      	ldrb	r3, [r7, #7]
 801a5c0:	429a      	cmp	r2, r3
 801a5c2:	d3d3      	bcc.n	801a56c <IntToUnicode+0x18>
  }
}
 801a5c4:	bf00      	nop
 801a5c6:	bf00      	nop
 801a5c8:	371c      	adds	r7, #28
 801a5ca:	46bd      	mov	sp, r7
 801a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d0:	4770      	bx	lr
	...

0801a5d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a5d4:	b580      	push	{r7, lr}
 801a5d6:	b0ba      	sub	sp, #232	@ 0xe8
 801a5d8:	af00      	add	r7, sp, #0
 801a5da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a5dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801a5e0:	2200      	movs	r2, #0
 801a5e2:	601a      	str	r2, [r3, #0]
 801a5e4:	605a      	str	r2, [r3, #4]
 801a5e6:	609a      	str	r2, [r3, #8]
 801a5e8:	60da      	str	r2, [r3, #12]
 801a5ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a5ec:	f107 0310 	add.w	r3, r7, #16
 801a5f0:	22c0      	movs	r2, #192	@ 0xc0
 801a5f2:	2100      	movs	r1, #0
 801a5f4:	4618      	mov	r0, r3
 801a5f6:	f002 f903 	bl	801c800 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	4a33      	ldr	r2, [pc, #204]	@ (801a6cc <HAL_PCD_MspInit+0xf8>)
 801a600:	4293      	cmp	r3, r2
 801a602:	d15f      	bne.n	801a6c4 <HAL_PCD_MspInit+0xf0>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a604:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801a608:	f04f 0300 	mov.w	r3, #0
 801a60c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 801a610:	2319      	movs	r3, #25
 801a612:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 801a614:	23c0      	movs	r3, #192	@ 0xc0
 801a616:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 801a618:	2302      	movs	r3, #2
 801a61a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 801a61c:	2304      	movs	r3, #4
 801a61e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 801a620:	2302      	movs	r3, #2
 801a622:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 801a624:	2300      	movs	r3, #0
 801a626:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 801a628:	2300      	movs	r3, #0
 801a62a:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 801a62c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a634:	f107 0310 	add.w	r3, r7, #16
 801a638:	4618      	mov	r0, r3
 801a63a:	f7f4 fc69 	bl	800ef10 <HAL_RCCEx_PeriphCLKConfig>
 801a63e:	4603      	mov	r3, r0
 801a640:	2b00      	cmp	r3, #0
 801a642:	d001      	beq.n	801a648 <HAL_PCD_MspInit+0x74>
    {
      Error_Handler();
 801a644:	f7e9 fe9c 	bl	8004380 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a648:	f7f3 fb06 	bl	800dc58 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a64c:	4b20      	ldr	r3, [pc, #128]	@ (801a6d0 <HAL_PCD_MspInit+0xfc>)
 801a64e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a652:	4a1f      	ldr	r2, [pc, #124]	@ (801a6d0 <HAL_PCD_MspInit+0xfc>)
 801a654:	f043 0301 	orr.w	r3, r3, #1
 801a658:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801a65c:	4b1c      	ldr	r3, [pc, #112]	@ (801a6d0 <HAL_PCD_MspInit+0xfc>)
 801a65e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a662:	f003 0301 	and.w	r3, r3, #1
 801a666:	60fb      	str	r3, [r7, #12]
 801a668:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a66a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801a66e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a672:	2302      	movs	r3, #2
 801a674:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a678:	2300      	movs	r3, #0
 801a67a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a67e:	2300      	movs	r3, #0
 801a680:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801a684:	230a      	movs	r3, #10
 801a686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a68a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801a68e:	4619      	mov	r1, r3
 801a690:	4810      	ldr	r0, [pc, #64]	@ (801a6d4 <HAL_PCD_MspInit+0x100>)
 801a692:	f7f0 fdcd 	bl	800b230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a696:	4b0e      	ldr	r3, [pc, #56]	@ (801a6d0 <HAL_PCD_MspInit+0xfc>)
 801a698:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a69c:	4a0c      	ldr	r2, [pc, #48]	@ (801a6d0 <HAL_PCD_MspInit+0xfc>)
 801a69e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801a6a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801a6a6:	4b0a      	ldr	r3, [pc, #40]	@ (801a6d0 <HAL_PCD_MspInit+0xfc>)
 801a6a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a6ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801a6b0:	60bb      	str	r3, [r7, #8]
 801a6b2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801a6b4:	2200      	movs	r2, #0
 801a6b6:	2100      	movs	r1, #0
 801a6b8:	2065      	movs	r0, #101	@ 0x65
 801a6ba:	f7ec fd1d 	bl	80070f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a6be:	2065      	movs	r0, #101	@ 0x65
 801a6c0:	f7ec fd34 	bl	800712c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a6c4:	bf00      	nop
 801a6c6:	37e8      	adds	r7, #232	@ 0xe8
 801a6c8:	46bd      	mov	sp, r7
 801a6ca:	bd80      	pop	{r7, pc}
 801a6cc:	40080000 	.word	0x40080000
 801a6d0:	58024400 	.word	0x58024400
 801a6d4:	58020000 	.word	0x58020000

0801a6d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a6d8:	b580      	push	{r7, lr}
 801a6da:	b082      	sub	sp, #8
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801a6ec:	4619      	mov	r1, r3
 801a6ee:	4610      	mov	r0, r2
 801a6f0:	f7fe fa7f 	bl	8018bf2 <USBD_LL_SetupStage>
}
 801a6f4:	bf00      	nop
 801a6f6:	3708      	adds	r7, #8
 801a6f8:	46bd      	mov	sp, r7
 801a6fa:	bd80      	pop	{r7, pc}

0801a6fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a6fc:	b580      	push	{r7, lr}
 801a6fe:	b082      	sub	sp, #8
 801a700:	af00      	add	r7, sp, #0
 801a702:	6078      	str	r0, [r7, #4]
 801a704:	460b      	mov	r3, r1
 801a706:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a70e:	78fa      	ldrb	r2, [r7, #3]
 801a710:	6879      	ldr	r1, [r7, #4]
 801a712:	4613      	mov	r3, r2
 801a714:	00db      	lsls	r3, r3, #3
 801a716:	4413      	add	r3, r2
 801a718:	009b      	lsls	r3, r3, #2
 801a71a:	440b      	add	r3, r1
 801a71c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801a720:	681a      	ldr	r2, [r3, #0]
 801a722:	78fb      	ldrb	r3, [r7, #3]
 801a724:	4619      	mov	r1, r3
 801a726:	f7fe fab9 	bl	8018c9c <USBD_LL_DataOutStage>
}
 801a72a:	bf00      	nop
 801a72c:	3708      	adds	r7, #8
 801a72e:	46bd      	mov	sp, r7
 801a730:	bd80      	pop	{r7, pc}

0801a732 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a732:	b580      	push	{r7, lr}
 801a734:	b082      	sub	sp, #8
 801a736:	af00      	add	r7, sp, #0
 801a738:	6078      	str	r0, [r7, #4]
 801a73a:	460b      	mov	r3, r1
 801a73c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a744:	78fa      	ldrb	r2, [r7, #3]
 801a746:	6879      	ldr	r1, [r7, #4]
 801a748:	4613      	mov	r3, r2
 801a74a:	00db      	lsls	r3, r3, #3
 801a74c:	4413      	add	r3, r2
 801a74e:	009b      	lsls	r3, r3, #2
 801a750:	440b      	add	r3, r1
 801a752:	3320      	adds	r3, #32
 801a754:	681a      	ldr	r2, [r3, #0]
 801a756:	78fb      	ldrb	r3, [r7, #3]
 801a758:	4619      	mov	r1, r3
 801a75a:	f7fe fb52 	bl	8018e02 <USBD_LL_DataInStage>
}
 801a75e:	bf00      	nop
 801a760:	3708      	adds	r7, #8
 801a762:	46bd      	mov	sp, r7
 801a764:	bd80      	pop	{r7, pc}

0801a766 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a766:	b580      	push	{r7, lr}
 801a768:	b082      	sub	sp, #8
 801a76a:	af00      	add	r7, sp, #0
 801a76c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a774:	4618      	mov	r0, r3
 801a776:	f7fe fc8c 	bl	8019092 <USBD_LL_SOF>
}
 801a77a:	bf00      	nop
 801a77c:	3708      	adds	r7, #8
 801a77e:	46bd      	mov	sp, r7
 801a780:	bd80      	pop	{r7, pc}

0801a782 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a782:	b580      	push	{r7, lr}
 801a784:	b084      	sub	sp, #16
 801a786:	af00      	add	r7, sp, #0
 801a788:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a78a:	2301      	movs	r3, #1
 801a78c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	79db      	ldrb	r3, [r3, #7]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d102      	bne.n	801a79c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a796:	2300      	movs	r3, #0
 801a798:	73fb      	strb	r3, [r7, #15]
 801a79a:	e008      	b.n	801a7ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	79db      	ldrb	r3, [r3, #7]
 801a7a0:	2b02      	cmp	r3, #2
 801a7a2:	d102      	bne.n	801a7aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a7a4:	2301      	movs	r3, #1
 801a7a6:	73fb      	strb	r3, [r7, #15]
 801a7a8:	e001      	b.n	801a7ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a7aa:	f7e9 fde9 	bl	8004380 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a7b4:	7bfa      	ldrb	r2, [r7, #15]
 801a7b6:	4611      	mov	r1, r2
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	f7fe fc26 	bl	801900a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	f7fe fbce 	bl	8018f66 <USBD_LL_Reset>
}
 801a7ca:	bf00      	nop
 801a7cc:	3710      	adds	r7, #16
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	bd80      	pop	{r7, pc}
	...

0801a7d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	b082      	sub	sp, #8
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	f7fe fc21 	bl	801902a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	687a      	ldr	r2, [r7, #4]
 801a7f4:	6812      	ldr	r2, [r2, #0]
 801a7f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801a7fa:	f043 0301 	orr.w	r3, r3, #1
 801a7fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	7adb      	ldrb	r3, [r3, #11]
 801a804:	2b00      	cmp	r3, #0
 801a806:	d005      	beq.n	801a814 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a808:	4b04      	ldr	r3, [pc, #16]	@ (801a81c <HAL_PCD_SuspendCallback+0x48>)
 801a80a:	691b      	ldr	r3, [r3, #16]
 801a80c:	4a03      	ldr	r2, [pc, #12]	@ (801a81c <HAL_PCD_SuspendCallback+0x48>)
 801a80e:	f043 0306 	orr.w	r3, r3, #6
 801a812:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a814:	bf00      	nop
 801a816:	3708      	adds	r7, #8
 801a818:	46bd      	mov	sp, r7
 801a81a:	bd80      	pop	{r7, pc}
 801a81c:	e000ed00 	.word	0xe000ed00

0801a820 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a820:	b580      	push	{r7, lr}
 801a822:	b082      	sub	sp, #8
 801a824:	af00      	add	r7, sp, #0
 801a826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a82e:	4618      	mov	r0, r3
 801a830:	f7fe fc17 	bl	8019062 <USBD_LL_Resume>
}
 801a834:	bf00      	nop
 801a836:	3708      	adds	r7, #8
 801a838:	46bd      	mov	sp, r7
 801a83a:	bd80      	pop	{r7, pc}

0801a83c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a83c:	b580      	push	{r7, lr}
 801a83e:	b082      	sub	sp, #8
 801a840:	af00      	add	r7, sp, #0
 801a842:	6078      	str	r0, [r7, #4]
 801a844:	460b      	mov	r3, r1
 801a846:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a84e:	78fa      	ldrb	r2, [r7, #3]
 801a850:	4611      	mov	r1, r2
 801a852:	4618      	mov	r0, r3
 801a854:	f7fe fc6f 	bl	8019136 <USBD_LL_IsoOUTIncomplete>
}
 801a858:	bf00      	nop
 801a85a:	3708      	adds	r7, #8
 801a85c:	46bd      	mov	sp, r7
 801a85e:	bd80      	pop	{r7, pc}

0801a860 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a860:	b580      	push	{r7, lr}
 801a862:	b082      	sub	sp, #8
 801a864:	af00      	add	r7, sp, #0
 801a866:	6078      	str	r0, [r7, #4]
 801a868:	460b      	mov	r3, r1
 801a86a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a872:	78fa      	ldrb	r2, [r7, #3]
 801a874:	4611      	mov	r1, r2
 801a876:	4618      	mov	r0, r3
 801a878:	f7fe fc2b 	bl	80190d2 <USBD_LL_IsoINIncomplete>
}
 801a87c:	bf00      	nop
 801a87e:	3708      	adds	r7, #8
 801a880:	46bd      	mov	sp, r7
 801a882:	bd80      	pop	{r7, pc}

0801a884 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a884:	b580      	push	{r7, lr}
 801a886:	b082      	sub	sp, #8
 801a888:	af00      	add	r7, sp, #0
 801a88a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a892:	4618      	mov	r0, r3
 801a894:	f7fe fc81 	bl	801919a <USBD_LL_DevConnected>
}
 801a898:	bf00      	nop
 801a89a:	3708      	adds	r7, #8
 801a89c:	46bd      	mov	sp, r7
 801a89e:	bd80      	pop	{r7, pc}

0801a8a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8a0:	b580      	push	{r7, lr}
 801a8a2:	b082      	sub	sp, #8
 801a8a4:	af00      	add	r7, sp, #0
 801a8a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	f7fe fc7e 	bl	80191b0 <USBD_LL_DevDisconnected>
}
 801a8b4:	bf00      	nop
 801a8b6:	3708      	adds	r7, #8
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	bd80      	pop	{r7, pc}

0801a8bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a8bc:	b580      	push	{r7, lr}
 801a8be:	b082      	sub	sp, #8
 801a8c0:	af00      	add	r7, sp, #0
 801a8c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	781b      	ldrb	r3, [r3, #0]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d13e      	bne.n	801a94a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801a8cc:	4a21      	ldr	r2, [pc, #132]	@ (801a954 <USBD_LL_Init+0x98>)
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	4a1f      	ldr	r2, [pc, #124]	@ (801a954 <USBD_LL_Init+0x98>)
 801a8d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a8dc:	4b1d      	ldr	r3, [pc, #116]	@ (801a954 <USBD_LL_Init+0x98>)
 801a8de:	4a1e      	ldr	r2, [pc, #120]	@ (801a958 <USBD_LL_Init+0x9c>)
 801a8e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801a8e2:	4b1c      	ldr	r3, [pc, #112]	@ (801a954 <USBD_LL_Init+0x98>)
 801a8e4:	2209      	movs	r2, #9
 801a8e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801a8e8:	4b1a      	ldr	r3, [pc, #104]	@ (801a954 <USBD_LL_Init+0x98>)
 801a8ea:	2202      	movs	r2, #2
 801a8ec:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a8ee:	4b19      	ldr	r3, [pc, #100]	@ (801a954 <USBD_LL_Init+0x98>)
 801a8f0:	2200      	movs	r2, #0
 801a8f2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a8f4:	4b17      	ldr	r3, [pc, #92]	@ (801a954 <USBD_LL_Init+0x98>)
 801a8f6:	2202      	movs	r2, #2
 801a8f8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a8fa:	4b16      	ldr	r3, [pc, #88]	@ (801a954 <USBD_LL_Init+0x98>)
 801a8fc:	2200      	movs	r2, #0
 801a8fe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801a900:	4b14      	ldr	r3, [pc, #80]	@ (801a954 <USBD_LL_Init+0x98>)
 801a902:	2200      	movs	r2, #0
 801a904:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801a906:	4b13      	ldr	r3, [pc, #76]	@ (801a954 <USBD_LL_Init+0x98>)
 801a908:	2200      	movs	r2, #0
 801a90a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801a90c:	4b11      	ldr	r3, [pc, #68]	@ (801a954 <USBD_LL_Init+0x98>)
 801a90e:	2200      	movs	r2, #0
 801a910:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801a912:	4b10      	ldr	r3, [pc, #64]	@ (801a954 <USBD_LL_Init+0x98>)
 801a914:	2200      	movs	r2, #0
 801a916:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801a918:	4b0e      	ldr	r3, [pc, #56]	@ (801a954 <USBD_LL_Init+0x98>)
 801a91a:	2200      	movs	r2, #0
 801a91c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801a91e:	480d      	ldr	r0, [pc, #52]	@ (801a954 <USBD_LL_Init+0x98>)
 801a920:	f7f1 febf 	bl	800c6a2 <HAL_PCD_Init>
 801a924:	4603      	mov	r3, r0
 801a926:	2b00      	cmp	r3, #0
 801a928:	d001      	beq.n	801a92e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801a92a:	f7e9 fd29 	bl	8004380 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801a92e:	2180      	movs	r1, #128	@ 0x80
 801a930:	4808      	ldr	r0, [pc, #32]	@ (801a954 <USBD_LL_Init+0x98>)
 801a932:	f7f3 f916 	bl	800db62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801a936:	2240      	movs	r2, #64	@ 0x40
 801a938:	2100      	movs	r1, #0
 801a93a:	4806      	ldr	r0, [pc, #24]	@ (801a954 <USBD_LL_Init+0x98>)
 801a93c:	f7f3 f8ca 	bl	800dad4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801a940:	2280      	movs	r2, #128	@ 0x80
 801a942:	2101      	movs	r1, #1
 801a944:	4803      	ldr	r0, [pc, #12]	@ (801a954 <USBD_LL_Init+0x98>)
 801a946:	f7f3 f8c5 	bl	800dad4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801a94a:	2300      	movs	r3, #0
}
 801a94c:	4618      	mov	r0, r3
 801a94e:	3708      	adds	r7, #8
 801a950:	46bd      	mov	sp, r7
 801a952:	bd80      	pop	{r7, pc}
 801a954:	24002514 	.word	0x24002514
 801a958:	40080000 	.word	0x40080000

0801a95c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a95c:	b580      	push	{r7, lr}
 801a95e:	b084      	sub	sp, #16
 801a960:	af00      	add	r7, sp, #0
 801a962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a964:	2300      	movs	r3, #0
 801a966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a968:	2300      	movs	r3, #0
 801a96a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a972:	4618      	mov	r0, r3
 801a974:	f7f1 ffa1 	bl	800c8ba <HAL_PCD_Start>
 801a978:	4603      	mov	r3, r0
 801a97a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a97c:	7bfb      	ldrb	r3, [r7, #15]
 801a97e:	4618      	mov	r0, r3
 801a980:	f000 f942 	bl	801ac08 <USBD_Get_USB_Status>
 801a984:	4603      	mov	r3, r0
 801a986:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a988:	7bbb      	ldrb	r3, [r7, #14]
}
 801a98a:	4618      	mov	r0, r3
 801a98c:	3710      	adds	r7, #16
 801a98e:	46bd      	mov	sp, r7
 801a990:	bd80      	pop	{r7, pc}

0801a992 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a992:	b580      	push	{r7, lr}
 801a994:	b084      	sub	sp, #16
 801a996:	af00      	add	r7, sp, #0
 801a998:	6078      	str	r0, [r7, #4]
 801a99a:	4608      	mov	r0, r1
 801a99c:	4611      	mov	r1, r2
 801a99e:	461a      	mov	r2, r3
 801a9a0:	4603      	mov	r3, r0
 801a9a2:	70fb      	strb	r3, [r7, #3]
 801a9a4:	460b      	mov	r3, r1
 801a9a6:	70bb      	strb	r3, [r7, #2]
 801a9a8:	4613      	mov	r3, r2
 801a9aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a9ba:	78bb      	ldrb	r3, [r7, #2]
 801a9bc:	883a      	ldrh	r2, [r7, #0]
 801a9be:	78f9      	ldrb	r1, [r7, #3]
 801a9c0:	f7f2 fca2 	bl	800d308 <HAL_PCD_EP_Open>
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a9c8:	7bfb      	ldrb	r3, [r7, #15]
 801a9ca:	4618      	mov	r0, r3
 801a9cc:	f000 f91c 	bl	801ac08 <USBD_Get_USB_Status>
 801a9d0:	4603      	mov	r3, r0
 801a9d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a9d4:	7bbb      	ldrb	r3, [r7, #14]
}
 801a9d6:	4618      	mov	r0, r3
 801a9d8:	3710      	adds	r7, #16
 801a9da:	46bd      	mov	sp, r7
 801a9dc:	bd80      	pop	{r7, pc}

0801a9de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a9de:	b580      	push	{r7, lr}
 801a9e0:	b084      	sub	sp, #16
 801a9e2:	af00      	add	r7, sp, #0
 801a9e4:	6078      	str	r0, [r7, #4]
 801a9e6:	460b      	mov	r3, r1
 801a9e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a9f8:	78fa      	ldrb	r2, [r7, #3]
 801a9fa:	4611      	mov	r1, r2
 801a9fc:	4618      	mov	r0, r3
 801a9fe:	f7f2 fced 	bl	800d3dc <HAL_PCD_EP_Close>
 801aa02:	4603      	mov	r3, r0
 801aa04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aa06:	7bfb      	ldrb	r3, [r7, #15]
 801aa08:	4618      	mov	r0, r3
 801aa0a:	f000 f8fd 	bl	801ac08 <USBD_Get_USB_Status>
 801aa0e:	4603      	mov	r3, r0
 801aa10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aa12:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa14:	4618      	mov	r0, r3
 801aa16:	3710      	adds	r7, #16
 801aa18:	46bd      	mov	sp, r7
 801aa1a:	bd80      	pop	{r7, pc}

0801aa1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	b084      	sub	sp, #16
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	6078      	str	r0, [r7, #4]
 801aa24:	460b      	mov	r3, r1
 801aa26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aa28:	2300      	movs	r3, #0
 801aa2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801aa36:	78fa      	ldrb	r2, [r7, #3]
 801aa38:	4611      	mov	r1, r2
 801aa3a:	4618      	mov	r0, r3
 801aa3c:	f7f2 fda5 	bl	800d58a <HAL_PCD_EP_SetStall>
 801aa40:	4603      	mov	r3, r0
 801aa42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aa44:	7bfb      	ldrb	r3, [r7, #15]
 801aa46:	4618      	mov	r0, r3
 801aa48:	f000 f8de 	bl	801ac08 <USBD_Get_USB_Status>
 801aa4c:	4603      	mov	r3, r0
 801aa4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aa50:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa52:	4618      	mov	r0, r3
 801aa54:	3710      	adds	r7, #16
 801aa56:	46bd      	mov	sp, r7
 801aa58:	bd80      	pop	{r7, pc}

0801aa5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aa5a:	b580      	push	{r7, lr}
 801aa5c:	b084      	sub	sp, #16
 801aa5e:	af00      	add	r7, sp, #0
 801aa60:	6078      	str	r0, [r7, #4]
 801aa62:	460b      	mov	r3, r1
 801aa64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aa66:	2300      	movs	r3, #0
 801aa68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801aa74:	78fa      	ldrb	r2, [r7, #3]
 801aa76:	4611      	mov	r1, r2
 801aa78:	4618      	mov	r0, r3
 801aa7a:	f7f2 fde9 	bl	800d650 <HAL_PCD_EP_ClrStall>
 801aa7e:	4603      	mov	r3, r0
 801aa80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aa82:	7bfb      	ldrb	r3, [r7, #15]
 801aa84:	4618      	mov	r0, r3
 801aa86:	f000 f8bf 	bl	801ac08 <USBD_Get_USB_Status>
 801aa8a:	4603      	mov	r3, r0
 801aa8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aa8e:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa90:	4618      	mov	r0, r3
 801aa92:	3710      	adds	r7, #16
 801aa94:	46bd      	mov	sp, r7
 801aa96:	bd80      	pop	{r7, pc}

0801aa98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aa98:	b480      	push	{r7}
 801aa9a:	b085      	sub	sp, #20
 801aa9c:	af00      	add	r7, sp, #0
 801aa9e:	6078      	str	r0, [r7, #4]
 801aaa0:	460b      	mov	r3, r1
 801aaa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801aaaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801aaac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	da0b      	bge.n	801aacc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801aab4:	78fb      	ldrb	r3, [r7, #3]
 801aab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801aaba:	68f9      	ldr	r1, [r7, #12]
 801aabc:	4613      	mov	r3, r2
 801aabe:	00db      	lsls	r3, r3, #3
 801aac0:	4413      	add	r3, r2
 801aac2:	009b      	lsls	r3, r3, #2
 801aac4:	440b      	add	r3, r1
 801aac6:	3316      	adds	r3, #22
 801aac8:	781b      	ldrb	r3, [r3, #0]
 801aaca:	e00b      	b.n	801aae4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801aacc:	78fb      	ldrb	r3, [r7, #3]
 801aace:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801aad2:	68f9      	ldr	r1, [r7, #12]
 801aad4:	4613      	mov	r3, r2
 801aad6:	00db      	lsls	r3, r3, #3
 801aad8:	4413      	add	r3, r2
 801aada:	009b      	lsls	r3, r3, #2
 801aadc:	440b      	add	r3, r1
 801aade:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801aae2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801aae4:	4618      	mov	r0, r3
 801aae6:	3714      	adds	r7, #20
 801aae8:	46bd      	mov	sp, r7
 801aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaee:	4770      	bx	lr

0801aaf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b084      	sub	sp, #16
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	6078      	str	r0, [r7, #4]
 801aaf8:	460b      	mov	r3, r1
 801aafa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aafc:	2300      	movs	r3, #0
 801aafe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab00:	2300      	movs	r3, #0
 801ab02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ab0a:	78fa      	ldrb	r2, [r7, #3]
 801ab0c:	4611      	mov	r1, r2
 801ab0e:	4618      	mov	r0, r3
 801ab10:	f7f2 fbd6 	bl	800d2c0 <HAL_PCD_SetAddress>
 801ab14:	4603      	mov	r3, r0
 801ab16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab18:	7bfb      	ldrb	r3, [r7, #15]
 801ab1a:	4618      	mov	r0, r3
 801ab1c:	f000 f874 	bl	801ac08 <USBD_Get_USB_Status>
 801ab20:	4603      	mov	r3, r0
 801ab22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab24:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab26:	4618      	mov	r0, r3
 801ab28:	3710      	adds	r7, #16
 801ab2a:	46bd      	mov	sp, r7
 801ab2c:	bd80      	pop	{r7, pc}

0801ab2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ab2e:	b580      	push	{r7, lr}
 801ab30:	b086      	sub	sp, #24
 801ab32:	af00      	add	r7, sp, #0
 801ab34:	60f8      	str	r0, [r7, #12]
 801ab36:	607a      	str	r2, [r7, #4]
 801ab38:	603b      	str	r3, [r7, #0]
 801ab3a:	460b      	mov	r3, r1
 801ab3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab3e:	2300      	movs	r3, #0
 801ab40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab42:	2300      	movs	r3, #0
 801ab44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801ab4c:	7af9      	ldrb	r1, [r7, #11]
 801ab4e:	683b      	ldr	r3, [r7, #0]
 801ab50:	687a      	ldr	r2, [r7, #4]
 801ab52:	f7f2 fce0 	bl	800d516 <HAL_PCD_EP_Transmit>
 801ab56:	4603      	mov	r3, r0
 801ab58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab5a:	7dfb      	ldrb	r3, [r7, #23]
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	f000 f853 	bl	801ac08 <USBD_Get_USB_Status>
 801ab62:	4603      	mov	r3, r0
 801ab64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ab66:	7dbb      	ldrb	r3, [r7, #22]
}
 801ab68:	4618      	mov	r0, r3
 801ab6a:	3718      	adds	r7, #24
 801ab6c:	46bd      	mov	sp, r7
 801ab6e:	bd80      	pop	{r7, pc}

0801ab70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ab70:	b580      	push	{r7, lr}
 801ab72:	b086      	sub	sp, #24
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	60f8      	str	r0, [r7, #12]
 801ab78:	607a      	str	r2, [r7, #4]
 801ab7a:	603b      	str	r3, [r7, #0]
 801ab7c:	460b      	mov	r3, r1
 801ab7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab80:	2300      	movs	r3, #0
 801ab82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab84:	2300      	movs	r3, #0
 801ab86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801ab8e:	7af9      	ldrb	r1, [r7, #11]
 801ab90:	683b      	ldr	r3, [r7, #0]
 801ab92:	687a      	ldr	r2, [r7, #4]
 801ab94:	f7f2 fc6c 	bl	800d470 <HAL_PCD_EP_Receive>
 801ab98:	4603      	mov	r3, r0
 801ab9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab9c:	7dfb      	ldrb	r3, [r7, #23]
 801ab9e:	4618      	mov	r0, r3
 801aba0:	f000 f832 	bl	801ac08 <USBD_Get_USB_Status>
 801aba4:	4603      	mov	r3, r0
 801aba6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801aba8:	7dbb      	ldrb	r3, [r7, #22]
}
 801abaa:	4618      	mov	r0, r3
 801abac:	3718      	adds	r7, #24
 801abae:	46bd      	mov	sp, r7
 801abb0:	bd80      	pop	{r7, pc}

0801abb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801abb2:	b580      	push	{r7, lr}
 801abb4:	b082      	sub	sp, #8
 801abb6:	af00      	add	r7, sp, #0
 801abb8:	6078      	str	r0, [r7, #4]
 801abba:	460b      	mov	r3, r1
 801abbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801abc4:	78fa      	ldrb	r2, [r7, #3]
 801abc6:	4611      	mov	r1, r2
 801abc8:	4618      	mov	r0, r3
 801abca:	f7f2 fc8c 	bl	800d4e6 <HAL_PCD_EP_GetRxCount>
 801abce:	4603      	mov	r3, r0
}
 801abd0:	4618      	mov	r0, r3
 801abd2:	3708      	adds	r7, #8
 801abd4:	46bd      	mov	sp, r7
 801abd6:	bd80      	pop	{r7, pc}

0801abd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801abd8:	b480      	push	{r7}
 801abda:	b083      	sub	sp, #12
 801abdc:	af00      	add	r7, sp, #0
 801abde:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801abe0:	4b03      	ldr	r3, [pc, #12]	@ (801abf0 <USBD_static_malloc+0x18>)
}
 801abe2:	4618      	mov	r0, r3
 801abe4:	370c      	adds	r7, #12
 801abe6:	46bd      	mov	sp, r7
 801abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abec:	4770      	bx	lr
 801abee:	bf00      	nop
 801abf0:	240029f8 	.word	0x240029f8

0801abf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801abf4:	b480      	push	{r7}
 801abf6:	b083      	sub	sp, #12
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801abfc:	bf00      	nop
 801abfe:	370c      	adds	r7, #12
 801ac00:	46bd      	mov	sp, r7
 801ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac06:	4770      	bx	lr

0801ac08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ac08:	b480      	push	{r7}
 801ac0a:	b085      	sub	sp, #20
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	4603      	mov	r3, r0
 801ac10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac12:	2300      	movs	r3, #0
 801ac14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ac16:	79fb      	ldrb	r3, [r7, #7]
 801ac18:	2b03      	cmp	r3, #3
 801ac1a:	d817      	bhi.n	801ac4c <USBD_Get_USB_Status+0x44>
 801ac1c:	a201      	add	r2, pc, #4	@ (adr r2, 801ac24 <USBD_Get_USB_Status+0x1c>)
 801ac1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac22:	bf00      	nop
 801ac24:	0801ac35 	.word	0x0801ac35
 801ac28:	0801ac3b 	.word	0x0801ac3b
 801ac2c:	0801ac41 	.word	0x0801ac41
 801ac30:	0801ac47 	.word	0x0801ac47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ac34:	2300      	movs	r3, #0
 801ac36:	73fb      	strb	r3, [r7, #15]
    break;
 801ac38:	e00b      	b.n	801ac52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ac3a:	2303      	movs	r3, #3
 801ac3c:	73fb      	strb	r3, [r7, #15]
    break;
 801ac3e:	e008      	b.n	801ac52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ac40:	2301      	movs	r3, #1
 801ac42:	73fb      	strb	r3, [r7, #15]
    break;
 801ac44:	e005      	b.n	801ac52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ac46:	2303      	movs	r3, #3
 801ac48:	73fb      	strb	r3, [r7, #15]
    break;
 801ac4a:	e002      	b.n	801ac52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ac4c:	2303      	movs	r3, #3
 801ac4e:	73fb      	strb	r3, [r7, #15]
    break;
 801ac50:	bf00      	nop
  }
  return usb_status;
 801ac52:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac54:	4618      	mov	r0, r3
 801ac56:	3714      	adds	r7, #20
 801ac58:	46bd      	mov	sp, r7
 801ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac5e:	4770      	bx	lr

0801ac60 <CommTXTask>:
#endif
}
#endif

char CommTXTask(UART_DATA_t *uart_data)
{
 801ac60:	b580      	push	{r7, lr}
 801ac62:	b084      	sub	sp, #16
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	6078      	str	r0, [r7, #4]
	if (uart_data->TX_DMA_Lock) return 1;
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801ac6e:	b2db      	uxtb	r3, r3
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d001      	beq.n	801ac78 <CommTXTask+0x18>
 801ac74:	2301      	movs	r3, #1
 801ac76:	e084      	b.n	801ad82 <CommTXTask+0x122>
	if (uart_data->TX_Buffer_head!=uart_data->TX_Buffer_tail)
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801ac84:	429a      	cmp	r2, r3
 801ac86:	d07b      	beq.n	801ad80 <CommTXTask+0x120>
	{
		uart_data->TX_DMA_Lock = 1;
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	2201      	movs	r2, #1
 801ac8c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
		int16_t DMA_tx_buffer_len;
		if (uart_data->TX_Buffer_head > uart_data->TX_Buffer_tail) {
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801ac9c:	429a      	cmp	r2, r3
 801ac9e:	dd0b      	ble.n	801acb8 <CommTXTask+0x58>
			DMA_tx_buffer_len = uart_data->TX_Buffer_head - uart_data->TX_Buffer_tail;
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801aca6:	b29a      	uxth	r2, r3
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801acae:	b29b      	uxth	r3, r3
 801acb0:	1ad3      	subs	r3, r2, r3
 801acb2:	b29b      	uxth	r3, r3
 801acb4:	81fb      	strh	r3, [r7, #14]
 801acb6:	e00f      	b.n	801acd8 <CommTXTask+0x78>
		} else {
#ifdef	TX_BUFFER_SIZE
			DMA_tx_buffer_len = TX_BUFFER_SIZE - uart_data->TX_Buffer_tail;
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801acbe:	b29b      	uxth	r3, r3
 801acc0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801acc4:	b29b      	uxth	r3, r3
 801acc6:	81fb      	strh	r3, [r7, #14]
#else
			DMA_tx_buffer_len = uart_data->TX_Buffer_size - uart_data->TX_Buffer_tail;
#endif
			DMA_tx_buffer_len += uart_data->TX_Buffer_head;
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801acce:	b29a      	uxth	r2, r3
 801acd0:	89fb      	ldrh	r3, [r7, #14]
 801acd2:	4413      	add	r3, r2
 801acd4:	b29b      	uxth	r3, r3
 801acd6:	81fb      	strh	r3, [r7, #14]
		}
		if (DMA_tx_buffer_len>TX_DMA_BUFFER_SIZE) DMA_tx_buffer_len = TX_DMA_BUFFER_SIZE;
 801acd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801acdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ace0:	dd02      	ble.n	801ace8 <CommTXTask+0x88>
 801ace2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801ace6:	81fb      	strh	r3, [r7, #14]
		for (uint16_t _i = 0; _i<DMA_tx_buffer_len; _i++) {
 801ace8:	2300      	movs	r3, #0
 801acea:	81bb      	strh	r3, [r7, #12]
 801acec:	e01e      	b.n	801ad2c <CommTXTask+0xcc>
			uart_data->TX_DMA_Buffer[_i] = uart_data->TX_Buffer[uart_data->TX_Buffer_tail++];
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 801acf4:	b293      	uxth	r3, r2
 801acf6:	3301      	adds	r3, #1
 801acf8:	b29b      	uxth	r3, r3
 801acfa:	b219      	sxth	r1, r3
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	82d9      	strh	r1, [r3, #22]
 801ad00:	4611      	mov	r1, r2
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 801ad08:	89bb      	ldrh	r3, [r7, #12]
 801ad0a:	4413      	add	r3, r2
 801ad0c:	687a      	ldr	r2, [r7, #4]
 801ad0e:	440a      	add	r2, r1
 801ad10:	7e12      	ldrb	r2, [r2, #24]
 801ad12:	701a      	strb	r2, [r3, #0]
#ifdef	TX_BUFFER_SIZE
			if (uart_data->TX_Buffer_tail >= TX_BUFFER_SIZE) uart_data->TX_Buffer_tail = 0;
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801ad1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ad1e:	db02      	blt.n	801ad26 <CommTXTask+0xc6>
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	2200      	movs	r2, #0
 801ad24:	82da      	strh	r2, [r3, #22]
		for (uint16_t _i = 0; _i<DMA_tx_buffer_len; _i++) {
 801ad26:	89bb      	ldrh	r3, [r7, #12]
 801ad28:	3301      	adds	r3, #1
 801ad2a:	81bb      	strh	r3, [r7, #12]
 801ad2c:	89ba      	ldrh	r2, [r7, #12]
 801ad2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ad32:	429a      	cmp	r2, r3
 801ad34:	dbdb      	blt.n	801acee <CommTXTask+0x8e>
#else
			if (uart_data->TX_Buffer_tail >= uart_data->TX_Buffer_size) uart_data->TX_Buffer_tail = 0;
#endif
		}

		UART_HandleTypeDef* huart = uart_data->huart;
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	681b      	ldr	r3, [r3, #0]
 801ad3a:	60bb      	str	r3, [r7, #8]

		if (huart->hdmatx!=NULL)
 801ad3c:	68bb      	ldr	r3, [r7, #8]
 801ad3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d00c      	beq.n	801ad5e <CommTXTask+0xfe>
		{
			if (HAL_UART_Transmit_DMA(huart, uart_data->TX_DMA_Buffer, DMA_tx_buffer_len)==HAL_OK)
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 801ad4a:	89fa      	ldrh	r2, [r7, #14]
 801ad4c:	4619      	mov	r1, r3
 801ad4e:	68b8      	ldr	r0, [r7, #8]
 801ad50:	f7f9 fbee 	bl	8014530 <HAL_UART_Transmit_DMA>
 801ad54:	4603      	mov	r3, r0
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d10e      	bne.n	801ad78 <CommTXTask+0x118>
			{
				return 1;
 801ad5a:	2301      	movs	r3, #1
 801ad5c:	e011      	b.n	801ad82 <CommTXTask+0x122>
			}
		}
		else
		{
			if (HAL_UART_Transmit_IT(huart, uart_data->TX_DMA_Buffer, DMA_tx_buffer_len)==HAL_OK)
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 801ad64:	89fa      	ldrh	r2, [r7, #14]
 801ad66:	4619      	mov	r1, r3
 801ad68:	68b8      	ldr	r0, [r7, #8]
 801ad6a:	f7f9 fb4d 	bl	8014408 <HAL_UART_Transmit_IT>
 801ad6e:	4603      	mov	r3, r0
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d101      	bne.n	801ad78 <CommTXTask+0x118>
			{
				return 1;
 801ad74:	2301      	movs	r3, #1
 801ad76:	e004      	b.n	801ad82 <CommTXTask+0x122>
			}
		}
		uart_data->TX_DMA_Lock = 0;
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	2200      	movs	r2, #0
 801ad7c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
	}
	return 0;
 801ad80:	2300      	movs	r3, #0
}
 801ad82:	4618      	mov	r0, r3
 801ad84:	3710      	adds	r7, #16
 801ad86:	46bd      	mov	sp, r7
 801ad88:	bd80      	pop	{r7, pc}

0801ad8a <CommUARTPutChar>:

void CommUARTPutChar(UART_DATA_t *uart_data, char ch)
{
 801ad8a:	b580      	push	{r7, lr}
 801ad8c:	b084      	sub	sp, #16
 801ad8e:	af00      	add	r7, sp, #0
 801ad90:	6078      	str	r0, [r7, #4]
 801ad92:	460b      	mov	r3, r1
 801ad94:	70fb      	strb	r3, [r7, #3]
	uint16_t _tx_head = uart_data->TX_Buffer_head;
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801ad9c:	81fb      	strh	r3, [r7, #14]
	uart_data->TX_Buffer[_tx_head++] = ch;
 801ad9e:	89fb      	ldrh	r3, [r7, #14]
 801ada0:	1c5a      	adds	r2, r3, #1
 801ada2:	81fa      	strh	r2, [r7, #14]
 801ada4:	461a      	mov	r2, r3
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	4413      	add	r3, r2
 801adaa:	78fa      	ldrb	r2, [r7, #3]
 801adac:	761a      	strb	r2, [r3, #24]
#ifdef	TX_BUFFER_SIZE
	if (_tx_head>=TX_BUFFER_SIZE) _tx_head = 0;
 801adae:	89fb      	ldrh	r3, [r7, #14]
 801adb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801adb4:	d301      	bcc.n	801adba <CommUARTPutChar+0x30>
 801adb6:	2300      	movs	r3, #0
 801adb8:	81fb      	strh	r3, [r7, #14]
#else
	if (_tx_head>=uart_data->TX_Buffer_size) _tx_head = 0;
#endif
	if (_tx_head==uart_data->TX_Buffer_tail) {
 801adba:	89fb      	ldrh	r3, [r7, #14]
 801adbc:	687a      	ldr	r2, [r7, #4]
 801adbe:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 801adc2:	4293      	cmp	r3, r2
 801adc4:	d10c      	bne.n	801ade0 <CommUARTPutChar+0x56>
		while (uart_data->TX_DMA_Lock) osDelay(1);
 801adc6:	e002      	b.n	801adce <CommUARTPutChar+0x44>
 801adc8:	2001      	movs	r0, #1
 801adca:	f7ea fc21 	bl	8005610 <HAL_Delay>
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801add4:	b2db      	uxtb	r3, r3
 801add6:	2b00      	cmp	r3, #0
 801add8:	d1f6      	bne.n	801adc8 <CommUARTPutChar+0x3e>
		CommTXTask(uart_data);
 801adda:	6878      	ldr	r0, [r7, #4]
 801addc:	f7ff ff40 	bl	801ac60 <CommTXTask>
	}
	uart_data->TX_Buffer_head = _tx_head;
 801ade0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	829a      	strh	r2, [r3, #20]
}
 801ade8:	bf00      	nop
 801adea:	3710      	adds	r7, #16
 801adec:	46bd      	mov	sp, r7
 801adee:	bd80      	pop	{r7, pc}

0801adf0 <HAL_UART_TxCpltCallback>:
#ifdef huart_debug
extern UART_DATA_t debug_data;
#endif

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801adf0:	b480      	push	{r7}
 801adf2:	b083      	sub	sp, #12
 801adf4:	af00      	add	r7, sp, #0
 801adf6:	6078      	str	r0, [r7, #4]
		uart8_data.TX_DMA_Lock = 0;
		return;
	}
#endif
#ifdef huart_debug
	if (huart==debug_data.huart)
 801adf8:	4b07      	ldr	r3, [pc, #28]	@ (801ae18 <HAL_UART_TxCpltCallback+0x28>)
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	687a      	ldr	r2, [r7, #4]
 801adfe:	429a      	cmp	r2, r3
 801ae00:	d104      	bne.n	801ae0c <HAL_UART_TxCpltCallback+0x1c>
	{
		debug_data.TX_DMA_Lock = 0;
 801ae02:	4b05      	ldr	r3, [pc, #20]	@ (801ae18 <HAL_UART_TxCpltCallback+0x28>)
 801ae04:	2200      	movs	r2, #0
 801ae06:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
		return;
 801ae0a:	bf00      	nop
//	{
//		Debug_TxCpltCallback();
//		return;
//	}
#endif
}
 801ae0c:	370c      	adds	r7, #12
 801ae0e:	46bd      	mov	sp, r7
 801ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae14:	4770      	bx	lr
 801ae16:	bf00      	nop
 801ae18:	24000190 	.word	0x24000190

0801ae1c <Process_ErrorCallback>:

void Process_ErrorCallback(UART_DATA_t* uart_data, uint32_t error)
{
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b082      	sub	sp, #8
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	6078      	str	r0, [r7, #4]
 801ae24:	6039      	str	r1, [r7, #0]
	uart_data->ErrorCode = error;
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	683a      	ldr	r2, [r7, #0]
 801ae2a:	609a      	str	r2, [r3, #8]
	if (error&(HAL_UART_ERROR_FE|HAL_UART_ERROR_NE|HAL_UART_ERROR_ORE))
 801ae2c:	683b      	ldr	r3, [r7, #0]
 801ae2e:	f003 030e 	and.w	r3, r3, #14
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d00e      	beq.n	801ae54 <Process_ErrorCallback+0x38>
	{
		uart_data->RX_DMA_Buffer_head = 0;
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	2200      	movs	r2, #0
 801ae3a:	819a      	strh	r2, [r3, #12]
		uart_data->RX_DMA_Buffer_tail = 0;
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	2200      	movs	r2, #0
 801ae40:	81da      	strh	r2, [r3, #14]

		HAL_UART_Receive_DMA(uart_data->huart, uart_data->RX_DMA_Buffer, RX_DMA_BUFFER_SIZE);
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	6818      	ldr	r0, [r3, #0]
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	691b      	ldr	r3, [r3, #16]
 801ae4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ae4e:	4619      	mov	r1, r3
 801ae50:	f7f9 fbee 	bl	8014630 <HAL_UART_Receive_DMA>
	}
	if (error&HAL_UART_ERROR_DMA)
 801ae54:	683b      	ldr	r3, [r7, #0]
 801ae56:	f003 0310 	and.w	r3, r3, #16
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d003      	beq.n	801ae66 <Process_ErrorCallback+0x4a>
	{
		uart_data->TX_DMA_Lock = 0;
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	2200      	movs	r2, #0
 801ae62:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
	}
}
 801ae66:	bf00      	nop
 801ae68:	3708      	adds	r7, #8
 801ae6a:	46bd      	mov	sp, r7
 801ae6c:	bd80      	pop	{r7, pc}
	...

0801ae70 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801ae70:	b580      	push	{r7, lr}
 801ae72:	b084      	sub	sp, #16
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	6078      	str	r0, [r7, #4]
	uint32_t error = huart->ErrorCode;
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ae7e:	60fb      	str	r3, [r7, #12]
	huart->ErrorCode = 0;
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	2200      	movs	r2, #0
 801ae84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
		Process_ErrorCallback(&uart8_data, error);
		return;
	}
#endif
#ifdef huart_debug
	if (huart==debug_data.huart)
 801ae88:	4b08      	ldr	r3, [pc, #32]	@ (801aeac <HAL_UART_ErrorCallback+0x3c>)
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	687a      	ldr	r2, [r7, #4]
 801ae8e:	429a      	cmp	r2, r3
 801ae90:	d108      	bne.n	801aea4 <HAL_UART_ErrorCallback+0x34>
	{
		DebugPrint("\r\n Debug UART Error = %8lX", error);
 801ae92:	68f9      	ldr	r1, [r7, #12]
 801ae94:	4806      	ldr	r0, [pc, #24]	@ (801aeb0 <HAL_UART_ErrorCallback+0x40>)
 801ae96:	f000 fe0f 	bl	801bab8 <DebugPrint>
		Process_ErrorCallback(&debug_data, error);
 801ae9a:	68f9      	ldr	r1, [r7, #12]
 801ae9c:	4803      	ldr	r0, [pc, #12]	@ (801aeac <HAL_UART_ErrorCallback+0x3c>)
 801ae9e:	f7ff ffbd 	bl	801ae1c <Process_ErrorCallback>
		return;
 801aea2:	bf00      	nop
	}
#endif
}
 801aea4:	3710      	adds	r7, #16
 801aea6:	46bd      	mov	sp, r7
 801aea8:	bd80      	pop	{r7, pc}
 801aeaa:	bf00      	nop
 801aeac:	24000190 	.word	0x24000190
 801aeb0:	0801f420 	.word	0x0801f420

0801aeb4 <ProcessReceive>:

void ProcessReceive(UART_DATA_t* uart_data)
{
 801aeb4:	b580      	push	{r7, lr}
 801aeb6:	b086      	sub	sp, #24
 801aeb8:	af00      	add	r7, sp, #0
 801aeba:	6078      	str	r0, [r7, #4]
	uint16_t pos = RX_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart_data->huart->hdmarx);
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	4a86      	ldr	r2, [pc, #536]	@ (801b0e0 <ProcessReceive+0x22c>)
 801aec8:	4293      	cmp	r3, r2
 801aeca:	d077      	beq.n	801afbc <ProcessReceive+0x108>
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	4a83      	ldr	r2, [pc, #524]	@ (801b0e4 <ProcessReceive+0x230>)
 801aed8:	4293      	cmp	r3, r2
 801aeda:	d06f      	beq.n	801afbc <ProcessReceive+0x108>
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	4a80      	ldr	r2, [pc, #512]	@ (801b0e8 <ProcessReceive+0x234>)
 801aee8:	4293      	cmp	r3, r2
 801aeea:	d067      	beq.n	801afbc <ProcessReceive+0x108>
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	4a7d      	ldr	r2, [pc, #500]	@ (801b0ec <ProcessReceive+0x238>)
 801aef8:	4293      	cmp	r3, r2
 801aefa:	d05f      	beq.n	801afbc <ProcessReceive+0x108>
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	4a7a      	ldr	r2, [pc, #488]	@ (801b0f0 <ProcessReceive+0x23c>)
 801af08:	4293      	cmp	r3, r2
 801af0a:	d057      	beq.n	801afbc <ProcessReceive+0x108>
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	4a77      	ldr	r2, [pc, #476]	@ (801b0f4 <ProcessReceive+0x240>)
 801af18:	4293      	cmp	r3, r2
 801af1a:	d04f      	beq.n	801afbc <ProcessReceive+0x108>
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	4a74      	ldr	r2, [pc, #464]	@ (801b0f8 <ProcessReceive+0x244>)
 801af28:	4293      	cmp	r3, r2
 801af2a:	d047      	beq.n	801afbc <ProcessReceive+0x108>
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	4a71      	ldr	r2, [pc, #452]	@ (801b0fc <ProcessReceive+0x248>)
 801af38:	4293      	cmp	r3, r2
 801af3a:	d03f      	beq.n	801afbc <ProcessReceive+0x108>
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	4a6e      	ldr	r2, [pc, #440]	@ (801b100 <ProcessReceive+0x24c>)
 801af48:	4293      	cmp	r3, r2
 801af4a:	d037      	beq.n	801afbc <ProcessReceive+0x108>
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	4a6b      	ldr	r2, [pc, #428]	@ (801b104 <ProcessReceive+0x250>)
 801af58:	4293      	cmp	r3, r2
 801af5a:	d02f      	beq.n	801afbc <ProcessReceive+0x108>
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	4a68      	ldr	r2, [pc, #416]	@ (801b108 <ProcessReceive+0x254>)
 801af68:	4293      	cmp	r3, r2
 801af6a:	d027      	beq.n	801afbc <ProcessReceive+0x108>
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	4a65      	ldr	r2, [pc, #404]	@ (801b10c <ProcessReceive+0x258>)
 801af78:	4293      	cmp	r3, r2
 801af7a:	d01f      	beq.n	801afbc <ProcessReceive+0x108>
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	4a62      	ldr	r2, [pc, #392]	@ (801b110 <ProcessReceive+0x25c>)
 801af88:	4293      	cmp	r3, r2
 801af8a:	d017      	beq.n	801afbc <ProcessReceive+0x108>
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	4a5f      	ldr	r2, [pc, #380]	@ (801b114 <ProcessReceive+0x260>)
 801af98:	4293      	cmp	r3, r2
 801af9a:	d00f      	beq.n	801afbc <ProcessReceive+0x108>
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	4a5c      	ldr	r2, [pc, #368]	@ (801b118 <ProcessReceive+0x264>)
 801afa8:	4293      	cmp	r3, r2
 801afaa:	d007      	beq.n	801afbc <ProcessReceive+0x108>
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	4a59      	ldr	r2, [pc, #356]	@ (801b11c <ProcessReceive+0x268>)
 801afb8:	4293      	cmp	r3, r2
 801afba:	d10a      	bne.n	801afd2 <ProcessReceive+0x11e>
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	685b      	ldr	r3, [r3, #4]
 801afc8:	b29b      	uxth	r3, r3
 801afca:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801afce:	b29b      	uxth	r3, r3
 801afd0:	e009      	b.n	801afe6 <ProcessReceive+0x132>
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	685b      	ldr	r3, [r3, #4]
 801afde:	b29b      	uxth	r3, r3
 801afe0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801afe4:	b29b      	uxth	r3, r3
 801afe6:	823b      	strh	r3, [r7, #16]
	if (pos != uart_data->RX_DMA_Buffer_head)
 801afe8:	8a3b      	ldrh	r3, [r7, #16]
 801afea:	687a      	ldr	r2, [r7, #4]
 801afec:	8992      	ldrh	r2, [r2, #12]
 801afee:	b212      	sxth	r2, r2
 801aff0:	4293      	cmp	r3, r2
 801aff2:	d071      	beq.n	801b0d8 <ProcessReceive+0x224>
	{
		uart_data->RX_DMA_Buffer_head = pos;
 801aff4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	819a      	strh	r2, [r3, #12]
		if (pos>uart_data->RX_DMA_Buffer_tail)
 801affc:	8a3b      	ldrh	r3, [r7, #16]
 801affe:	687a      	ldr	r2, [r7, #4]
 801b000:	89d2      	ldrh	r2, [r2, #14]
 801b002:	b212      	sxth	r2, r2
 801b004:	4293      	cmp	r3, r2
 801b006:	dd22      	ble.n	801b04e <ProcessReceive+0x19a>
		{
			for (uint16_t count = pos - uart_data->RX_DMA_Buffer_tail; count>0; count--)
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	89db      	ldrh	r3, [r3, #14]
 801b00c:	b21b      	sxth	r3, r3
 801b00e:	b29b      	uxth	r3, r3
 801b010:	8a3a      	ldrh	r2, [r7, #16]
 801b012:	1ad3      	subs	r3, r2, r3
 801b014:	82fb      	strh	r3, [r7, #22]
 801b016:	e016      	b.n	801b046 <ProcessReceive+0x192>
			{
				uint8_t _rxchar = uart_data->RX_DMA_Buffer[uart_data->RX_DMA_Buffer_tail++];
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	691b      	ldr	r3, [r3, #16]
 801b01c:	687a      	ldr	r2, [r7, #4]
 801b01e:	89d2      	ldrh	r2, [r2, #14]
 801b020:	b211      	sxth	r1, r2
 801b022:	b28a      	uxth	r2, r1
 801b024:	3201      	adds	r2, #1
 801b026:	b292      	uxth	r2, r2
 801b028:	b210      	sxth	r0, r2
 801b02a:	687a      	ldr	r2, [r7, #4]
 801b02c:	81d0      	strh	r0, [r2, #14]
 801b02e:	460a      	mov	r2, r1
 801b030:	4413      	add	r3, r2
 801b032:	781b      	ldrb	r3, [r3, #0]
 801b034:	737b      	strb	r3, [r7, #13]
				uart_data->COMM_rcv(_rxchar);
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	685b      	ldr	r3, [r3, #4]
 801b03a:	7b7a      	ldrb	r2, [r7, #13]
 801b03c:	4610      	mov	r0, r2
 801b03e:	4798      	blx	r3
			for (uint16_t count = pos - uart_data->RX_DMA_Buffer_tail; count>0; count--)
 801b040:	8afb      	ldrh	r3, [r7, #22]
 801b042:	3b01      	subs	r3, #1
 801b044:	82fb      	strh	r3, [r7, #22]
 801b046:	8afb      	ldrh	r3, [r7, #22]
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d1e5      	bne.n	801b018 <ProcessReceive+0x164>
					uart_data->COMM_rcv(_rxchar);
				}
			}
		}
	}
}
 801b04c:	e044      	b.n	801b0d8 <ProcessReceive+0x224>
			for (uint16_t count = RX_DMA_BUFFER_SIZE - uart_data->RX_DMA_Buffer_tail; count>0; count--)
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	89db      	ldrh	r3, [r3, #14]
 801b052:	b21b      	sxth	r3, r3
 801b054:	b29b      	uxth	r3, r3
 801b056:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801b05a:	82bb      	strh	r3, [r7, #20]
 801b05c:	e016      	b.n	801b08c <ProcessReceive+0x1d8>
				uint8_t _rxchar = uart_data->RX_DMA_Buffer[uart_data->RX_DMA_Buffer_tail++];
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	691b      	ldr	r3, [r3, #16]
 801b062:	687a      	ldr	r2, [r7, #4]
 801b064:	89d2      	ldrh	r2, [r2, #14]
 801b066:	b211      	sxth	r1, r2
 801b068:	b28a      	uxth	r2, r1
 801b06a:	3201      	adds	r2, #1
 801b06c:	b292      	uxth	r2, r2
 801b06e:	b210      	sxth	r0, r2
 801b070:	687a      	ldr	r2, [r7, #4]
 801b072:	81d0      	strh	r0, [r2, #14]
 801b074:	460a      	mov	r2, r1
 801b076:	4413      	add	r3, r2
 801b078:	781b      	ldrb	r3, [r3, #0]
 801b07a:	73bb      	strb	r3, [r7, #14]
				uart_data->COMM_rcv(_rxchar);
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	685b      	ldr	r3, [r3, #4]
 801b080:	7bba      	ldrb	r2, [r7, #14]
 801b082:	4610      	mov	r0, r2
 801b084:	4798      	blx	r3
			for (uint16_t count = RX_DMA_BUFFER_SIZE - uart_data->RX_DMA_Buffer_tail; count>0; count--)
 801b086:	8abb      	ldrh	r3, [r7, #20]
 801b088:	3b01      	subs	r3, #1
 801b08a:	82bb      	strh	r3, [r7, #20]
 801b08c:	8abb      	ldrh	r3, [r7, #20]
 801b08e:	2b00      	cmp	r3, #0
 801b090:	d1e5      	bne.n	801b05e <ProcessReceive+0x1aa>
			uart_data->RX_DMA_Buffer_tail = 0;
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	2200      	movs	r2, #0
 801b096:	81da      	strh	r2, [r3, #14]
			if (pos>0)
 801b098:	8a3b      	ldrh	r3, [r7, #16]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d01c      	beq.n	801b0d8 <ProcessReceive+0x224>
				for (uint16_t count = pos; count>0; count--)
 801b09e:	8a3b      	ldrh	r3, [r7, #16]
 801b0a0:	827b      	strh	r3, [r7, #18]
 801b0a2:	e016      	b.n	801b0d2 <ProcessReceive+0x21e>
					uint8_t _rxchar = uart_data->RX_DMA_Buffer[uart_data->RX_DMA_Buffer_tail++];
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	691b      	ldr	r3, [r3, #16]
 801b0a8:	687a      	ldr	r2, [r7, #4]
 801b0aa:	89d2      	ldrh	r2, [r2, #14]
 801b0ac:	b211      	sxth	r1, r2
 801b0ae:	b28a      	uxth	r2, r1
 801b0b0:	3201      	adds	r2, #1
 801b0b2:	b292      	uxth	r2, r2
 801b0b4:	b210      	sxth	r0, r2
 801b0b6:	687a      	ldr	r2, [r7, #4]
 801b0b8:	81d0      	strh	r0, [r2, #14]
 801b0ba:	460a      	mov	r2, r1
 801b0bc:	4413      	add	r3, r2
 801b0be:	781b      	ldrb	r3, [r3, #0]
 801b0c0:	73fb      	strb	r3, [r7, #15]
					uart_data->COMM_rcv(_rxchar);
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	685b      	ldr	r3, [r3, #4]
 801b0c6:	7bfa      	ldrb	r2, [r7, #15]
 801b0c8:	4610      	mov	r0, r2
 801b0ca:	4798      	blx	r3
				for (uint16_t count = pos; count>0; count--)
 801b0cc:	8a7b      	ldrh	r3, [r7, #18]
 801b0ce:	3b01      	subs	r3, #1
 801b0d0:	827b      	strh	r3, [r7, #18]
 801b0d2:	8a7b      	ldrh	r3, [r7, #18]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d1e5      	bne.n	801b0a4 <ProcessReceive+0x1f0>
}
 801b0d8:	bf00      	nop
 801b0da:	3718      	adds	r7, #24
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	bd80      	pop	{r7, pc}
 801b0e0:	40020010 	.word	0x40020010
 801b0e4:	40020028 	.word	0x40020028
 801b0e8:	40020040 	.word	0x40020040
 801b0ec:	40020058 	.word	0x40020058
 801b0f0:	40020070 	.word	0x40020070
 801b0f4:	40020088 	.word	0x40020088
 801b0f8:	400200a0 	.word	0x400200a0
 801b0fc:	400200b8 	.word	0x400200b8
 801b100:	40020410 	.word	0x40020410
 801b104:	40020428 	.word	0x40020428
 801b108:	40020440 	.word	0x40020440
 801b10c:	40020458 	.word	0x40020458
 801b110:	40020470 	.word	0x40020470
 801b114:	40020488 	.word	0x40020488
 801b118:	400204a0 	.word	0x400204a0
 801b11c:	400204b8 	.word	0x400204b8

0801b120 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801b120:	b580      	push	{r7, lr}
 801b122:	b082      	sub	sp, #8
 801b124:	af00      	add	r7, sp, #0
 801b126:	6078      	str	r0, [r7, #4]
		ProcessReceive(&uart8_data);
		return;
	}
#endif
#ifdef huart_debug
	if (huart==debug_data.huart)
 801b128:	4b05      	ldr	r3, [pc, #20]	@ (801b140 <HAL_UART_RxCpltCallback+0x20>)
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	687a      	ldr	r2, [r7, #4]
 801b12e:	429a      	cmp	r2, r3
 801b130:	d103      	bne.n	801b13a <HAL_UART_RxCpltCallback+0x1a>
	{
		ProcessReceive(&debug_data);
 801b132:	4803      	ldr	r0, [pc, #12]	@ (801b140 <HAL_UART_RxCpltCallback+0x20>)
 801b134:	f7ff febe 	bl	801aeb4 <ProcessReceive>
		return;
 801b138:	bf00      	nop
	}
#endif
}
 801b13a:	3708      	adds	r7, #8
 801b13c:	46bd      	mov	sp, r7
 801b13e:	bd80      	pop	{r7, pc}
 801b140:	24000190 	.word	0x24000190

0801b144 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b144:	b580      	push	{r7, lr}
 801b146:	b082      	sub	sp, #8
 801b148:	af00      	add	r7, sp, #0
 801b14a:	6078      	str	r0, [r7, #4]
	HAL_UART_RxCpltCallback(huart);
 801b14c:	6878      	ldr	r0, [r7, #4]
 801b14e:	f7ff ffe7 	bl	801b120 <HAL_UART_RxCpltCallback>
}
 801b152:	bf00      	nop
 801b154:	3708      	adds	r7, #8
 801b156:	46bd      	mov	sp, r7
 801b158:	bd80      	pop	{r7, pc}
	...

0801b15c <do_dump>:
	.TX_DMA_Buffer = dbg_TX_DMA_Buffer,
};
#endif

unsigned int do_dump(void)
{
 801b15c:	b5b0      	push	{r4, r5, r7, lr}
 801b15e:	b088      	sub	sp, #32
 801b160:	af00      	add	r7, sp, #0
	int i1;
	unsigned char *pByte_Val, byte_val;
	char ascii_result[18];
	_old_debug_dump_beg = _debug_dump_beg;
 801b162:	4b3e      	ldr	r3, [pc, #248]	@ (801b25c <do_dump+0x100>)
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	4a3e      	ldr	r2, [pc, #248]	@ (801b260 <do_dump+0x104>)
 801b168:	6013      	str	r3, [r2, #0]

	DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 801b16a:	4b3c      	ldr	r3, [pc, #240]	@ (801b25c <do_dump+0x100>)
 801b16c:	681b      	ldr	r3, [r3, #0]
 801b16e:	f023 030f 	bic.w	r3, r3, #15
 801b172:	4619      	mov	r1, r3
 801b174:	483b      	ldr	r0, [pc, #236]	@ (801b264 <do_dump+0x108>)
 801b176:	f000 fc9f 	bl	801bab8 <DebugPrint>
	strcpy(ascii_result,"................");
 801b17a:	1d3b      	adds	r3, r7, #4
 801b17c:	4a3a      	ldr	r2, [pc, #232]	@ (801b268 <do_dump+0x10c>)
 801b17e:	461c      	mov	r4, r3
 801b180:	4615      	mov	r5, r2
 801b182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b186:	682b      	ldr	r3, [r5, #0]
 801b188:	7023      	strb	r3, [r4, #0]
	for (i1=0;i1<(_debug_dump_beg & 0x000f);i1++) DebugSend("   ");
 801b18a:	2300      	movs	r3, #0
 801b18c:	61fb      	str	r3, [r7, #28]
 801b18e:	e005      	b.n	801b19c <do_dump+0x40>
 801b190:	4836      	ldr	r0, [pc, #216]	@ (801b26c <do_dump+0x110>)
 801b192:	f000 fc77 	bl	801ba84 <DebugSend>
 801b196:	69fb      	ldr	r3, [r7, #28]
 801b198:	3301      	adds	r3, #1
 801b19a:	61fb      	str	r3, [r7, #28]
 801b19c:	4b2f      	ldr	r3, [pc, #188]	@ (801b25c <do_dump+0x100>)
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	f003 020f 	and.w	r2, r3, #15
 801b1a4:	69fb      	ldr	r3, [r7, #28]
 801b1a6:	429a      	cmp	r2, r3
 801b1a8:	d8f2      	bhi.n	801b190 <do_dump+0x34>
	while (_debug_dump_beg <= _debug_dump_end)
 801b1aa:	e049      	b.n	801b240 <do_dump+0xe4>
	{
		pByte_Val = (unsigned char *)_debug_dump_beg++;
 801b1ac:	4b2b      	ldr	r3, [pc, #172]	@ (801b25c <do_dump+0x100>)
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	1c5a      	adds	r2, r3, #1
 801b1b2:	492a      	ldr	r1, [pc, #168]	@ (801b25c <do_dump+0x100>)
 801b1b4:	600a      	str	r2, [r1, #0]
 801b1b6:	61bb      	str	r3, [r7, #24]
		byte_val = *pByte_Val;
 801b1b8:	69bb      	ldr	r3, [r7, #24]
 801b1ba:	781b      	ldrb	r3, [r3, #0]
 801b1bc:	75fb      	strb	r3, [r7, #23]
		DebugPrint("%02x ",byte_val);
 801b1be:	7dfb      	ldrb	r3, [r7, #23]
 801b1c0:	4619      	mov	r1, r3
 801b1c2:	482b      	ldr	r0, [pc, #172]	@ (801b270 <do_dump+0x114>)
 801b1c4:	f000 fc78 	bl	801bab8 <DebugPrint>
		if (!iscntrl(byte_val&0x7f)) ascii_result[i1] = byte_val;
 801b1c8:	7dfb      	ldrb	r3, [r7, #23]
 801b1ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b1ce:	3301      	adds	r3, #1
 801b1d0:	4a28      	ldr	r2, [pc, #160]	@ (801b274 <do_dump+0x118>)
 801b1d2:	4413      	add	r3, r2
 801b1d4:	781b      	ldrb	r3, [r3, #0]
 801b1d6:	f003 0320 	and.w	r3, r3, #32
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d104      	bne.n	801b1e8 <do_dump+0x8c>
 801b1de:	1d3a      	adds	r2, r7, #4
 801b1e0:	69fb      	ldr	r3, [r7, #28]
 801b1e2:	4413      	add	r3, r2
 801b1e4:	7dfa      	ldrb	r2, [r7, #23]
 801b1e6:	701a      	strb	r2, [r3, #0]
		i1++;
 801b1e8:	69fb      	ldr	r3, [r7, #28]
 801b1ea:	3301      	adds	r3, #1
 801b1ec:	61fb      	str	r3, [r7, #28]
		if (!(_debug_dump_beg & 0x000f))
 801b1ee:	4b1b      	ldr	r3, [pc, #108]	@ (801b25c <do_dump+0x100>)
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	f003 030f 	and.w	r3, r3, #15
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d122      	bne.n	801b240 <do_dump+0xe4>
		{
			DebugSend("  ");
 801b1fa:	481f      	ldr	r0, [pc, #124]	@ (801b278 <do_dump+0x11c>)
 801b1fc:	f000 fc42 	bl	801ba84 <DebugSend>
			DebugSend(ascii_result);
 801b200:	1d3b      	adds	r3, r7, #4
 801b202:	4618      	mov	r0, r3
 801b204:	f000 fc3e 	bl	801ba84 <DebugSend>
			i1 = 0;
 801b208:	2300      	movs	r3, #0
 801b20a:	61fb      	str	r3, [r7, #28]
			strcpy(ascii_result,"................");
 801b20c:	1d3b      	adds	r3, r7, #4
 801b20e:	4a16      	ldr	r2, [pc, #88]	@ (801b268 <do_dump+0x10c>)
 801b210:	461c      	mov	r4, r3
 801b212:	4615      	mov	r5, r2
 801b214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b218:	682b      	ldr	r3, [r5, #0]
 801b21a:	7023      	strb	r3, [r4, #0]
			if (_debug_dump_beg==0) break;
 801b21c:	4b0f      	ldr	r3, [pc, #60]	@ (801b25c <do_dump+0x100>)
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	2b00      	cmp	r3, #0
 801b222:	d014      	beq.n	801b24e <do_dump+0xf2>
			if (_debug_dump_beg <= _debug_dump_end)
 801b224:	4b0d      	ldr	r3, [pc, #52]	@ (801b25c <do_dump+0x100>)
 801b226:	681a      	ldr	r2, [r3, #0]
 801b228:	4b14      	ldr	r3, [pc, #80]	@ (801b27c <do_dump+0x120>)
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	429a      	cmp	r2, r3
 801b22e:	d807      	bhi.n	801b240 <do_dump+0xe4>
			{
				DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 801b230:	4b0a      	ldr	r3, [pc, #40]	@ (801b25c <do_dump+0x100>)
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	f023 030f 	bic.w	r3, r3, #15
 801b238:	4619      	mov	r1, r3
 801b23a:	480a      	ldr	r0, [pc, #40]	@ (801b264 <do_dump+0x108>)
 801b23c:	f000 fc3c 	bl	801bab8 <DebugPrint>
	while (_debug_dump_beg <= _debug_dump_end)
 801b240:	4b06      	ldr	r3, [pc, #24]	@ (801b25c <do_dump+0x100>)
 801b242:	681a      	ldr	r2, [r3, #0]
 801b244:	4b0d      	ldr	r3, [pc, #52]	@ (801b27c <do_dump+0x120>)
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	429a      	cmp	r2, r3
 801b24a:	d9af      	bls.n	801b1ac <do_dump+0x50>
 801b24c:	e000      	b.n	801b250 <do_dump+0xf4>
			if (_debug_dump_beg==0) break;
 801b24e:	bf00      	nop
			}
		}
	}
	return (_debug_dump_beg);
 801b250:	4b02      	ldr	r3, [pc, #8]	@ (801b25c <do_dump+0x100>)
 801b252:	681b      	ldr	r3, [r3, #0]
}
 801b254:	4618      	mov	r0, r3
 801b256:	3720      	adds	r7, #32
 801b258:	46bd      	mov	sp, r7
 801b25a:	bdb0      	pop	{r4, r5, r7, pc}
 801b25c:	24002c18 	.word	0x24002c18
 801b260:	24002c1c 	.word	0x24002c1c
 801b264:	0801f43c 	.word	0x0801f43c
 801b268:	0801f448 	.word	0x0801f448
 801b26c:	0801f45c 	.word	0x0801f45c
 801b270:	0801f460 	.word	0x0801f460
 801b274:	080212ee 	.word	0x080212ee
 801b278:	0801f468 	.word	0x0801f468
 801b27c:	24002c20 	.word	0x24002c20

0801b280 <debug_parse>:


void debug_parse(char *cmd_line)
{
 801b280:	b580      	push	{r7, lr}
 801b282:	b088      	sub	sp, #32
 801b284:	af02      	add	r7, sp, #8
 801b286:	6078      	str	r0, [r7, #4]
	static uint32_t temp1=0,temp2=0,temp3=0,temp4=0;
	uint16_t tempword;
	uint8_t tempbyte;
	char *next_line;

	while (*cmd_line == ' ') cmd_line++;
 801b288:	e002      	b.n	801b290 <debug_parse+0x10>
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	3301      	adds	r3, #1
 801b28e:	607b      	str	r3, [r7, #4]
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	781b      	ldrb	r3, [r3, #0]
 801b294:	2b20      	cmp	r3, #32
 801b296:	d0f8      	beq.n	801b28a <debug_parse+0xa>

	switch (toupper(*cmd_line++))
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	1c5a      	adds	r2, r3, #1
 801b29c:	607a      	str	r2, [r7, #4]
 801b29e:	781b      	ldrb	r3, [r3, #0]
 801b2a0:	75fb      	strb	r3, [r7, #23]
 801b2a2:	7dfb      	ldrb	r3, [r7, #23]
 801b2a4:	3301      	adds	r3, #1
 801b2a6:	4aa5      	ldr	r2, [pc, #660]	@ (801b53c <debug_parse+0x2bc>)
 801b2a8:	4413      	add	r3, r2
 801b2aa:	781b      	ldrb	r3, [r3, #0]
 801b2ac:	f003 0303 	and.w	r3, r3, #3
 801b2b0:	2b02      	cmp	r3, #2
 801b2b2:	d102      	bne.n	801b2ba <debug_parse+0x3a>
 801b2b4:	7dfb      	ldrb	r3, [r7, #23]
 801b2b6:	3b20      	subs	r3, #32
 801b2b8:	e000      	b.n	801b2bc <debug_parse+0x3c>
 801b2ba:	7dfb      	ldrb	r3, [r7, #23]
 801b2bc:	3b3f      	subs	r3, #63	@ 0x3f
 801b2be:	2b1b      	cmp	r3, #27
 801b2c0:	f200 8307 	bhi.w	801b8d2 <debug_parse+0x652>
 801b2c4:	a201      	add	r2, pc, #4	@ (adr r2, 801b2cc <debug_parse+0x4c>)
 801b2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b2ca:	bf00      	nop
 801b2cc:	0801b33d 	.word	0x0801b33d
 801b2d0:	0801b8d3 	.word	0x0801b8d3
 801b2d4:	0801b8b5 	.word	0x0801b8b5
 801b2d8:	0801b8b5 	.word	0x0801b8b5
 801b2dc:	0801b8b5 	.word	0x0801b8b5
 801b2e0:	0801b349 	.word	0x0801b349
 801b2e4:	0801b3b7 	.word	0x0801b3b7
 801b2e8:	0801b3d5 	.word	0x0801b3d5
 801b2ec:	0801b8b5 	.word	0x0801b8b5
 801b2f0:	0801b8b5 	.word	0x0801b8b5
 801b2f4:	0801b3f9 	.word	0x0801b3f9
 801b2f8:	0801b439 	.word	0x0801b439
 801b2fc:	0801b8b5 	.word	0x0801b8b5
 801b300:	0801b471 	.word	0x0801b471
 801b304:	0801b4b5 	.word	0x0801b4b5
 801b308:	0801b50b 	.word	0x0801b50b
 801b30c:	0801b599 	.word	0x0801b599
 801b310:	0801b5e7 	.word	0x0801b5e7
 801b314:	0801b8b5 	.word	0x0801b8b5
 801b318:	0801b8b5 	.word	0x0801b8b5
 801b31c:	0801b8b5 	.word	0x0801b8b5
 801b320:	0801b5f3 	.word	0x0801b5f3
 801b324:	0801b631 	.word	0x0801b631
 801b328:	0801b6b9 	.word	0x0801b6b9
 801b32c:	0801b709 	.word	0x0801b709
 801b330:	0801b7a1 	.word	0x0801b7a1
 801b334:	0801b7ad 	.word	0x0801b7ad
 801b338:	0801b815 	.word	0x0801b815
	{
	case '?':
		DebugPrint("\r\n Compile Date: %s, Time: %s",__DATE__,__TIME__);
 801b33c:	4a80      	ldr	r2, [pc, #512]	@ (801b540 <debug_parse+0x2c0>)
 801b33e:	4981      	ldr	r1, [pc, #516]	@ (801b544 <debug_parse+0x2c4>)
 801b340:	4881      	ldr	r0, [pc, #516]	@ (801b548 <debug_parse+0x2c8>)
 801b342:	f000 fbb9 	bl	801bab8 <DebugPrint>
		break;
 801b346:	e2c4      	b.n	801b8d2 <debug_parse+0x652>
	case 'C':  // compare
	{
	}
		break;
	case 'D':  // dump
		next_line = cmd_line;
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	60bb      	str	r3, [r7, #8]
		temp2 = strtoul(next_line, &next_line, 16);
 801b34c:	68bb      	ldr	r3, [r7, #8]
 801b34e:	f107 0108 	add.w	r1, r7, #8
 801b352:	2210      	movs	r2, #16
 801b354:	4618      	mov	r0, r3
 801b356:	f000 fc55 	bl	801bc04 <strtoul>
 801b35a:	4603      	mov	r3, r0
 801b35c:	4a7b      	ldr	r2, [pc, #492]	@ (801b54c <debug_parse+0x2cc>)
 801b35e:	6013      	str	r3, [r2, #0]
		if (temp2>0) {
 801b360:	4b7a      	ldr	r3, [pc, #488]	@ (801b54c <debug_parse+0x2cc>)
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	2b00      	cmp	r3, #0
 801b366:	d01e      	beq.n	801b3a6 <debug_parse+0x126>
			_debug_dump_beg = temp2;
 801b368:	4b78      	ldr	r3, [pc, #480]	@ (801b54c <debug_parse+0x2cc>)
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	4a78      	ldr	r2, [pc, #480]	@ (801b550 <debug_parse+0x2d0>)
 801b36e:	6013      	str	r3, [r2, #0]
			temp3 = strtoul(next_line, &next_line, 16);
 801b370:	68bb      	ldr	r3, [r7, #8]
 801b372:	f107 0108 	add.w	r1, r7, #8
 801b376:	2210      	movs	r2, #16
 801b378:	4618      	mov	r0, r3
 801b37a:	f000 fc43 	bl	801bc04 <strtoul>
 801b37e:	4603      	mov	r3, r0
 801b380:	4a74      	ldr	r2, [pc, #464]	@ (801b554 <debug_parse+0x2d4>)
 801b382:	6013      	str	r3, [r2, #0]
			if (temp3>temp2) {
 801b384:	4b73      	ldr	r3, [pc, #460]	@ (801b554 <debug_parse+0x2d4>)
 801b386:	681a      	ldr	r2, [r3, #0]
 801b388:	4b70      	ldr	r3, [pc, #448]	@ (801b54c <debug_parse+0x2cc>)
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	429a      	cmp	r2, r3
 801b38e:	d904      	bls.n	801b39a <debug_parse+0x11a>
				_debug_dump_end = temp3;
 801b390:	4b70      	ldr	r3, [pc, #448]	@ (801b554 <debug_parse+0x2d4>)
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	4a70      	ldr	r2, [pc, #448]	@ (801b558 <debug_parse+0x2d8>)
 801b396:	6013      	str	r3, [r2, #0]
 801b398:	e00a      	b.n	801b3b0 <debug_parse+0x130>
			} else {
				_debug_dump_end = _debug_dump_beg + 127;
 801b39a:	4b6d      	ldr	r3, [pc, #436]	@ (801b550 <debug_parse+0x2d0>)
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	337f      	adds	r3, #127	@ 0x7f
 801b3a0:	4a6d      	ldr	r2, [pc, #436]	@ (801b558 <debug_parse+0x2d8>)
 801b3a2:	6013      	str	r3, [r2, #0]
 801b3a4:	e004      	b.n	801b3b0 <debug_parse+0x130>
			}
		} else {
			_debug_dump_end = _debug_dump_beg + 127;
 801b3a6:	4b6a      	ldr	r3, [pc, #424]	@ (801b550 <debug_parse+0x2d0>)
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	337f      	adds	r3, #127	@ 0x7f
 801b3ac:	4a6a      	ldr	r2, [pc, #424]	@ (801b558 <debug_parse+0x2d8>)
 801b3ae:	6013      	str	r3, [r2, #0]
		}
		do_dump();
 801b3b0:	f7ff fed4 	bl	801b15c <do_dump>
		break;
 801b3b4:	e28d      	b.n	801b8d2 <debug_parse+0x652>
	case 'E':  // read unsigned int
		tempbyte = 0;
 801b3b6:	2300      	movs	r3, #0
 801b3b8:	74fb      	strb	r3, [r7, #19]
		if (sscanf(cmd_line,"%lx",&temp1)==1) {
 801b3ba:	4a68      	ldr	r2, [pc, #416]	@ (801b55c <debug_parse+0x2dc>)
 801b3bc:	4968      	ldr	r1, [pc, #416]	@ (801b560 <debug_parse+0x2e0>)
 801b3be:	6878      	ldr	r0, [r7, #4]
 801b3c0:	f001 f98c 	bl	801c6dc <siscanf>
 801b3c4:	4603      	mov	r3, r0
 801b3c6:	2b01      	cmp	r3, #1
 801b3c8:	f040 8276 	bne.w	801b8b8 <debug_parse+0x638>
			tempbyte = temp1;
 801b3cc:	4b63      	ldr	r3, [pc, #396]	@ (801b55c <debug_parse+0x2dc>)
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	74fb      	strb	r3, [r7, #19]
		}
		break;
 801b3d2:	e271      	b.n	801b8b8 <debug_parse+0x638>
	case 'F':  // fill
		params = sscanf(cmd_line,"%lx %lx %lx",&temp2,&temp3,&temp4);
 801b3d4:	4b63      	ldr	r3, [pc, #396]	@ (801b564 <debug_parse+0x2e4>)
 801b3d6:	9300      	str	r3, [sp, #0]
 801b3d8:	4b5e      	ldr	r3, [pc, #376]	@ (801b554 <debug_parse+0x2d4>)
 801b3da:	4a5c      	ldr	r2, [pc, #368]	@ (801b54c <debug_parse+0x2cc>)
 801b3dc:	4962      	ldr	r1, [pc, #392]	@ (801b568 <debug_parse+0x2e8>)
 801b3de:	6878      	ldr	r0, [r7, #4]
 801b3e0:	f001 f97c 	bl	801c6dc <siscanf>
 801b3e4:	60f8      	str	r0, [r7, #12]
		switch (params) {
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	2b03      	cmp	r3, #3
 801b3ea:	d003      	beq.n	801b3f4 <debug_parse+0x174>
		case 3:
			break;
		default:
			{
				DebugSend(" ?? \r\n");
 801b3ec:	485f      	ldr	r0, [pc, #380]	@ (801b56c <debug_parse+0x2ec>)
 801b3ee:	f000 fb49 	bl	801ba84 <DebugSend>
			}
			break;
 801b3f2:	e000      	b.n	801b3f6 <debug_parse+0x176>
			break;
 801b3f4:	bf00      	nop
		}
		break;
 801b3f6:	e26c      	b.n	801b8d2 <debug_parse+0x652>
	case 'G':  // go
		break;
	case 'H':  // hex
		break;
	case 'I':  // read byte
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 801b3f8:	4a58      	ldr	r2, [pc, #352]	@ (801b55c <debug_parse+0x2dc>)
 801b3fa:	4959      	ldr	r1, [pc, #356]	@ (801b560 <debug_parse+0x2e0>)
 801b3fc:	6878      	ldr	r0, [r7, #4]
 801b3fe:	f001 f96d 	bl	801c6dc <siscanf>
 801b402:	4603      	mov	r3, r0
 801b404:	2b01      	cmp	r3, #1
 801b406:	f040 8259 	bne.w	801b8bc <debug_parse+0x63c>
		{
			debug_port = (unsigned char*)temp1;
 801b40a:	4b54      	ldr	r3, [pc, #336]	@ (801b55c <debug_parse+0x2dc>)
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	461a      	mov	r2, r3
 801b410:	4b57      	ldr	r3, [pc, #348]	@ (801b570 <debug_parse+0x2f0>)
 801b412:	601a      	str	r2, [r3, #0]
			tempbyte = *(unsigned char*)debug_port;
 801b414:	4b56      	ldr	r3, [pc, #344]	@ (801b570 <debug_parse+0x2f0>)
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	781b      	ldrb	r3, [r3, #0]
 801b41a:	74fb      	strb	r3, [r7, #19]
			DebugPrint("\r\n %08x -> %02x",(int)debug_port,tempbyte);
 801b41c:	4b54      	ldr	r3, [pc, #336]	@ (801b570 <debug_parse+0x2f0>)
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	4619      	mov	r1, r3
 801b422:	7cfb      	ldrb	r3, [r7, #19]
 801b424:	461a      	mov	r2, r3
 801b426:	4853      	ldr	r0, [pc, #332]	@ (801b574 <debug_parse+0x2f4>)
 801b428:	f000 fb46 	bl	801bab8 <DebugPrint>
			debug_port += sizeof(tempbyte);
 801b42c:	4b50      	ldr	r3, [pc, #320]	@ (801b570 <debug_parse+0x2f0>)
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	3301      	adds	r3, #1
 801b432:	4a4f      	ldr	r2, [pc, #316]	@ (801b570 <debug_parse+0x2f0>)
 801b434:	6013      	str	r3, [r2, #0]
		}
		break;
 801b436:	e241      	b.n	801b8bc <debug_parse+0x63c>
	case 'J':  // read word
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 801b438:	4a48      	ldr	r2, [pc, #288]	@ (801b55c <debug_parse+0x2dc>)
 801b43a:	4949      	ldr	r1, [pc, #292]	@ (801b560 <debug_parse+0x2e0>)
 801b43c:	6878      	ldr	r0, [r7, #4]
 801b43e:	f001 f94d 	bl	801c6dc <siscanf>
 801b442:	4603      	mov	r3, r0
 801b444:	2b01      	cmp	r3, #1
 801b446:	d106      	bne.n	801b456 <debug_parse+0x1d6>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 801b448:	4b44      	ldr	r3, [pc, #272]	@ (801b55c <debug_parse+0x2dc>)
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	f023 0301 	bic.w	r3, r3, #1
 801b450:	461a      	mov	r2, r3
 801b452:	4b47      	ldr	r3, [pc, #284]	@ (801b570 <debug_parse+0x2f0>)
 801b454:	601a      	str	r2, [r3, #0]
		}
		tempword = *(unsigned short*)debug_port;
 801b456:	4b46      	ldr	r3, [pc, #280]	@ (801b570 <debug_parse+0x2f0>)
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	881b      	ldrh	r3, [r3, #0]
 801b45c:	82bb      	strh	r3, [r7, #20]
		DebugPrint("\r\n %08X -> %04X",(int)debug_port,tempword);
 801b45e:	4b44      	ldr	r3, [pc, #272]	@ (801b570 <debug_parse+0x2f0>)
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	4619      	mov	r1, r3
 801b464:	8abb      	ldrh	r3, [r7, #20]
 801b466:	461a      	mov	r2, r3
 801b468:	4843      	ldr	r0, [pc, #268]	@ (801b578 <debug_parse+0x2f8>)
 801b46a:	f000 fb25 	bl	801bab8 <DebugPrint>
		break;
 801b46e:	e230      	b.n	801b8d2 <debug_parse+0x652>
	case 'K':
		break;
	case 'L':  // load
		DebugPrint("\r\n HAL_RCC_GetSysClockFreq() = %8ld;", HAL_RCC_GetSysClockFreq()/1000000l);
 801b470:	f7f3 fb36 	bl	800eae0 <HAL_RCC_GetSysClockFreq>
 801b474:	4603      	mov	r3, r0
 801b476:	4a41      	ldr	r2, [pc, #260]	@ (801b57c <debug_parse+0x2fc>)
 801b478:	fba2 2303 	umull	r2, r3, r2, r3
 801b47c:	0c9b      	lsrs	r3, r3, #18
 801b47e:	4619      	mov	r1, r3
 801b480:	483f      	ldr	r0, [pc, #252]	@ (801b580 <debug_parse+0x300>)
 801b482:	f000 fb19 	bl	801bab8 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetHCLKFreq() = %8ld;", HAL_RCC_GetHCLKFreq()/1000000l);
 801b486:	f7f3 fca5 	bl	800edd4 <HAL_RCC_GetHCLKFreq>
 801b48a:	4603      	mov	r3, r0
 801b48c:	4a3b      	ldr	r2, [pc, #236]	@ (801b57c <debug_parse+0x2fc>)
 801b48e:	fba2 2303 	umull	r2, r3, r2, r3
 801b492:	0c9b      	lsrs	r3, r3, #18
 801b494:	4619      	mov	r1, r3
 801b496:	483b      	ldr	r0, [pc, #236]	@ (801b584 <debug_parse+0x304>)
 801b498:	f000 fb0e 	bl	801bab8 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetPCLK1Freq() = %8ld;", HAL_RCC_GetPCLK1Freq()/1000000l);
 801b49c:	f7f3 fcca 	bl	800ee34 <HAL_RCC_GetPCLK1Freq>
 801b4a0:	4603      	mov	r3, r0
 801b4a2:	4a36      	ldr	r2, [pc, #216]	@ (801b57c <debug_parse+0x2fc>)
 801b4a4:	fba2 2303 	umull	r2, r3, r2, r3
 801b4a8:	0c9b      	lsrs	r3, r3, #18
 801b4aa:	4619      	mov	r1, r3
 801b4ac:	4836      	ldr	r0, [pc, #216]	@ (801b588 <debug_parse+0x308>)
 801b4ae:	f000 fb03 	bl	801bab8 <DebugPrint>
		break;
 801b4b2:	e20e      	b.n	801b8d2 <debug_parse+0x652>
	case 'M':  // write unsigned int
		if (sscanf(cmd_line,"%lX %lX",&temp1,&temp2)==2)
 801b4b4:	4b25      	ldr	r3, [pc, #148]	@ (801b54c <debug_parse+0x2cc>)
 801b4b6:	4a29      	ldr	r2, [pc, #164]	@ (801b55c <debug_parse+0x2dc>)
 801b4b8:	4934      	ldr	r1, [pc, #208]	@ (801b58c <debug_parse+0x30c>)
 801b4ba:	6878      	ldr	r0, [r7, #4]
 801b4bc:	f001 f90e 	bl	801c6dc <siscanf>
 801b4c0:	4603      	mov	r3, r0
 801b4c2:	2b02      	cmp	r3, #2
 801b4c4:	d11a      	bne.n	801b4fc <debug_parse+0x27c>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFC);
 801b4c6:	4b25      	ldr	r3, [pc, #148]	@ (801b55c <debug_parse+0x2dc>)
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	f023 0303 	bic.w	r3, r3, #3
 801b4ce:	461a      	mov	r2, r3
 801b4d0:	4b27      	ldr	r3, [pc, #156]	@ (801b570 <debug_parse+0x2f0>)
 801b4d2:	601a      	str	r2, [r3, #0]
			DebugPrint("\r\n %08X <- %08X",(int)debug_port,temp2);
 801b4d4:	4b26      	ldr	r3, [pc, #152]	@ (801b570 <debug_parse+0x2f0>)
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	4619      	mov	r1, r3
 801b4da:	4b1c      	ldr	r3, [pc, #112]	@ (801b54c <debug_parse+0x2cc>)
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	461a      	mov	r2, r3
 801b4e0:	482b      	ldr	r0, [pc, #172]	@ (801b590 <debug_parse+0x310>)
 801b4e2:	f000 fae9 	bl	801bab8 <DebugPrint>
			*(unsigned int*)debug_port = temp2;
 801b4e6:	4b22      	ldr	r3, [pc, #136]	@ (801b570 <debug_parse+0x2f0>)
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	4a18      	ldr	r2, [pc, #96]	@ (801b54c <debug_parse+0x2cc>)
 801b4ec:	6812      	ldr	r2, [r2, #0]
 801b4ee:	601a      	str	r2, [r3, #0]
			debug_port += sizeof(int);
 801b4f0:	4b1f      	ldr	r3, [pc, #124]	@ (801b570 <debug_parse+0x2f0>)
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	3304      	adds	r3, #4
 801b4f6:	4a1e      	ldr	r2, [pc, #120]	@ (801b570 <debug_parse+0x2f0>)
 801b4f8:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 801b4fa:	e1ea      	b.n	801b8d2 <debug_parse+0x652>
			DebugSend(" ?? \r\n");
 801b4fc:	481b      	ldr	r0, [pc, #108]	@ (801b56c <debug_parse+0x2ec>)
 801b4fe:	f000 fac1 	bl	801ba84 <DebugSend>
		break;
 801b502:	e1e6      	b.n	801b8d2 <debug_parse+0x652>
	case 'N':  // name
		while ((*cmd_line==' ')&&(*cmd_line!=0)) cmd_line++;
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	3301      	adds	r3, #1
 801b508:	607b      	str	r3, [r7, #4]
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	781b      	ldrb	r3, [r3, #0]
 801b50e:	2b20      	cmp	r3, #32
 801b510:	d103      	bne.n	801b51a <debug_parse+0x29a>
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	781b      	ldrb	r3, [r3, #0]
 801b516:	2b00      	cmp	r3, #0
 801b518:	d1f4      	bne.n	801b504 <debug_parse+0x284>
		DebugSend("\r\n");
 801b51a:	481e      	ldr	r0, [pc, #120]	@ (801b594 <debug_parse+0x314>)
 801b51c:	f000 fab2 	bl	801ba84 <DebugSend>
		while (*cmd_line!=0) {
 801b520:	e007      	b.n	801b532 <debug_parse+0x2b2>
			DebugPutChar(*cmd_line);
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	781b      	ldrb	r3, [r3, #0]
 801b526:	4618      	mov	r0, r3
 801b528:	f000 fa9c 	bl	801ba64 <DebugPutChar>
			cmd_line++;
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	3301      	adds	r3, #1
 801b530:	607b      	str	r3, [r7, #4]
		while (*cmd_line!=0) {
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	781b      	ldrb	r3, [r3, #0]
 801b536:	2b00      	cmp	r3, #0
 801b538:	d1f3      	bne.n	801b522 <debug_parse+0x2a2>
		}
		break;
 801b53a:	e1ca      	b.n	801b8d2 <debug_parse+0x652>
 801b53c:	080212ee 	.word	0x080212ee
 801b540:	0801f46c 	.word	0x0801f46c
 801b544:	0801f478 	.word	0x0801f478
 801b548:	0801f484 	.word	0x0801f484
 801b54c:	24002d30 	.word	0x24002d30
 801b550:	24002c18 	.word	0x24002c18
 801b554:	24002d34 	.word	0x24002d34
 801b558:	24002c20 	.word	0x24002c20
 801b55c:	24002d38 	.word	0x24002d38
 801b560:	0801f4a4 	.word	0x0801f4a4
 801b564:	24002d3c 	.word	0x24002d3c
 801b568:	0801f4a8 	.word	0x0801f4a8
 801b56c:	0801f4b4 	.word	0x0801f4b4
 801b570:	2400018c 	.word	0x2400018c
 801b574:	0801f4bc 	.word	0x0801f4bc
 801b578:	0801f4cc 	.word	0x0801f4cc
 801b57c:	431bde83 	.word	0x431bde83
 801b580:	0801f4dc 	.word	0x0801f4dc
 801b584:	0801f504 	.word	0x0801f504
 801b588:	0801f528 	.word	0x0801f528
 801b58c:	0801f54c 	.word	0x0801f54c
 801b590:	0801f554 	.word	0x0801f554
 801b594:	0801f564 	.word	0x0801f564
	case 'O':  // output byte
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 801b598:	4bb3      	ldr	r3, [pc, #716]	@ (801b868 <debug_parse+0x5e8>)
 801b59a:	4ab4      	ldr	r2, [pc, #720]	@ (801b86c <debug_parse+0x5ec>)
 801b59c:	49b4      	ldr	r1, [pc, #720]	@ (801b870 <debug_parse+0x5f0>)
 801b59e:	6878      	ldr	r0, [r7, #4]
 801b5a0:	f001 f89c 	bl	801c6dc <siscanf>
 801b5a4:	4603      	mov	r3, r0
 801b5a6:	2b02      	cmp	r3, #2
 801b5a8:	d119      	bne.n	801b5de <debug_parse+0x35e>
		{
			debug_port = (unsigned char*)temp1;
 801b5aa:	4bb0      	ldr	r3, [pc, #704]	@ (801b86c <debug_parse+0x5ec>)
 801b5ac:	681b      	ldr	r3, [r3, #0]
 801b5ae:	461a      	mov	r2, r3
 801b5b0:	4bb0      	ldr	r3, [pc, #704]	@ (801b874 <debug_parse+0x5f4>)
 801b5b2:	601a      	str	r2, [r3, #0]
			tempbyte = temp2;
 801b5b4:	4bac      	ldr	r3, [pc, #688]	@ (801b868 <debug_parse+0x5e8>)
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	74fb      	strb	r3, [r7, #19]
			DebugPrint("\r\n %08X <- %02X",(int)debug_port,tempbyte);
 801b5ba:	4bae      	ldr	r3, [pc, #696]	@ (801b874 <debug_parse+0x5f4>)
 801b5bc:	681b      	ldr	r3, [r3, #0]
 801b5be:	4619      	mov	r1, r3
 801b5c0:	7cfb      	ldrb	r3, [r7, #19]
 801b5c2:	461a      	mov	r2, r3
 801b5c4:	48ac      	ldr	r0, [pc, #688]	@ (801b878 <debug_parse+0x5f8>)
 801b5c6:	f000 fa77 	bl	801bab8 <DebugPrint>
			*debug_port = tempbyte;
 801b5ca:	4baa      	ldr	r3, [pc, #680]	@ (801b874 <debug_parse+0x5f4>)
 801b5cc:	681b      	ldr	r3, [r3, #0]
 801b5ce:	7cfa      	ldrb	r2, [r7, #19]
 801b5d0:	701a      	strb	r2, [r3, #0]
			debug_port += sizeof(tempbyte);
 801b5d2:	4ba8      	ldr	r3, [pc, #672]	@ (801b874 <debug_parse+0x5f4>)
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	3301      	adds	r3, #1
 801b5d8:	4aa6      	ldr	r2, [pc, #664]	@ (801b874 <debug_parse+0x5f4>)
 801b5da:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 801b5dc:	e179      	b.n	801b8d2 <debug_parse+0x652>
			DebugSend(" ?? \r\n");
 801b5de:	48a7      	ldr	r0, [pc, #668]	@ (801b87c <debug_parse+0x5fc>)
 801b5e0:	f000 fa50 	bl	801ba84 <DebugSend>
		break;
 801b5e4:	e175      	b.n	801b8d2 <debug_parse+0x652>
	case 'P':  // proceed
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 801b5e6:	4aa1      	ldr	r2, [pc, #644]	@ (801b86c <debug_parse+0x5ec>)
 801b5e8:	49a5      	ldr	r1, [pc, #660]	@ (801b880 <debug_parse+0x600>)
 801b5ea:	6878      	ldr	r0, [r7, #4]
 801b5ec:	f001 f876 	bl	801c6dc <siscanf>
		{
		}
		else
		{
		}
		break;
 801b5f0:	e16f      	b.n	801b8d2 <debug_parse+0x652>
	case 'R':  // register
		break;
	case 'S':  // search
		break;
	case 'T':  // Test
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 801b5f2:	4a9e      	ldr	r2, [pc, #632]	@ (801b86c <debug_parse+0x5ec>)
 801b5f4:	49a2      	ldr	r1, [pc, #648]	@ (801b880 <debug_parse+0x600>)
 801b5f6:	6878      	ldr	r0, [r7, #4]
 801b5f8:	f001 f870 	bl	801c6dc <siscanf>
 801b5fc:	4603      	mov	r3, r0
 801b5fe:	2b01      	cmp	r3, #1
 801b600:	f000 815e 	beq.w	801b8c0 <debug_parse+0x640>
		{
		}
		else
		{
			bTest = !bTest;
 801b604:	4b9f      	ldr	r3, [pc, #636]	@ (801b884 <debug_parse+0x604>)
 801b606:	781b      	ldrb	r3, [r3, #0]
 801b608:	2b00      	cmp	r3, #0
 801b60a:	bf0c      	ite	eq
 801b60c:	2301      	moveq	r3, #1
 801b60e:	2300      	movne	r3, #0
 801b610:	b2db      	uxtb	r3, r3
 801b612:	461a      	mov	r2, r3
 801b614:	4b9b      	ldr	r3, [pc, #620]	@ (801b884 <debug_parse+0x604>)
 801b616:	701a      	strb	r2, [r3, #0]
			if (bTest)
 801b618:	4b9a      	ldr	r3, [pc, #616]	@ (801b884 <debug_parse+0x604>)
 801b61a:	781b      	ldrb	r3, [r3, #0]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d003      	beq.n	801b628 <debug_parse+0x3a8>
			{
				DebugSend("\r\n Test ON!");
 801b620:	4899      	ldr	r0, [pc, #612]	@ (801b888 <debug_parse+0x608>)
 801b622:	f000 fa2f 	bl	801ba84 <DebugSend>
			else
			{
				DebugSend("\r\n Test OFF!");
			}
		}
		break;
 801b626:	e14b      	b.n	801b8c0 <debug_parse+0x640>
				DebugSend("\r\n Test OFF!");
 801b628:	4898      	ldr	r0, [pc, #608]	@ (801b88c <debug_parse+0x60c>)
 801b62a:	f000 fa2b 	bl	801ba84 <DebugSend>
		break;
 801b62e:	e147      	b.n	801b8c0 <debug_parse+0x640>
	case 'U':
		if (sscanf(cmd_line,"%ld %ld",&temp1,&temp2)==2)
 801b630:	4b8d      	ldr	r3, [pc, #564]	@ (801b868 <debug_parse+0x5e8>)
 801b632:	4a8e      	ldr	r2, [pc, #568]	@ (801b86c <debug_parse+0x5ec>)
 801b634:	4996      	ldr	r1, [pc, #600]	@ (801b890 <debug_parse+0x610>)
 801b636:	6878      	ldr	r0, [r7, #4]
 801b638:	f001 f850 	bl	801c6dc <siscanf>
 801b63c:	4603      	mov	r3, r0
 801b63e:	2b02      	cmp	r3, #2
 801b640:	f000 8140 	beq.w	801b8c4 <debug_parse+0x644>
		{
		}
		else
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 801b644:	4a89      	ldr	r2, [pc, #548]	@ (801b86c <debug_parse+0x5ec>)
 801b646:	498e      	ldr	r1, [pc, #568]	@ (801b880 <debug_parse+0x600>)
 801b648:	6878      	ldr	r0, [r7, #4]
 801b64a:	f001 f847 	bl	801c6dc <siscanf>
 801b64e:	4603      	mov	r3, r0
 801b650:	2b01      	cmp	r3, #1
 801b652:	f040 8137 	bne.w	801b8c4 <debug_parse+0x644>
		{
			switch (temp1){
 801b656:	4b85      	ldr	r3, [pc, #532]	@ (801b86c <debug_parse+0x5ec>)
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	2b12      	cmp	r3, #18
 801b65c:	f200 8132 	bhi.w	801b8c4 <debug_parse+0x644>
 801b660:	a201      	add	r2, pc, #4	@ (adr r2, 801b668 <debug_parse+0x3e8>)
 801b662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b666:	bf00      	nop
 801b668:	0801b6b5 	.word	0x0801b6b5
 801b66c:	0801b6b5 	.word	0x0801b6b5
 801b670:	0801b6b5 	.word	0x0801b6b5
 801b674:	0801b6b5 	.word	0x0801b6b5
 801b678:	0801b6b5 	.word	0x0801b6b5
 801b67c:	0801b6b5 	.word	0x0801b6b5
 801b680:	0801b6b5 	.word	0x0801b6b5
 801b684:	0801b6b5 	.word	0x0801b6b5
 801b688:	0801b6b5 	.word	0x0801b6b5
 801b68c:	0801b6b5 	.word	0x0801b6b5
 801b690:	0801b6b5 	.word	0x0801b6b5
 801b694:	0801b6b5 	.word	0x0801b6b5
 801b698:	0801b6b5 	.word	0x0801b6b5
 801b69c:	0801b6b5 	.word	0x0801b6b5
 801b6a0:	0801b6b5 	.word	0x0801b6b5
 801b6a4:	0801b6b5 	.word	0x0801b6b5
 801b6a8:	0801b6b5 	.word	0x0801b6b5
 801b6ac:	0801b6b5 	.word	0x0801b6b5
 801b6b0:	0801b6b5 	.word	0x0801b6b5
			case 0:
				break;
 801b6b4:	bf00      	nop
			}
		}
		else
		{
		}
		break;
 801b6b6:	e105      	b.n	801b8c4 <debug_parse+0x644>
	case 'V':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 801b6b8:	4a6c      	ldr	r2, [pc, #432]	@ (801b86c <debug_parse+0x5ec>)
 801b6ba:	4971      	ldr	r1, [pc, #452]	@ (801b880 <debug_parse+0x600>)
 801b6bc:	6878      	ldr	r0, [r7, #4]
 801b6be:	f001 f80d 	bl	801c6dc <siscanf>
 801b6c2:	4603      	mov	r3, r0
 801b6c4:	2b01      	cmp	r3, #1
 801b6c6:	f040 80ff 	bne.w	801b8c8 <debug_parse+0x648>
		{
			switch (temp1){
 801b6ca:	4b68      	ldr	r3, [pc, #416]	@ (801b86c <debug_parse+0x5ec>)
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	2b09      	cmp	r3, #9
 801b6d0:	f200 80fa 	bhi.w	801b8c8 <debug_parse+0x648>
 801b6d4:	a201      	add	r2, pc, #4	@ (adr r2, 801b6dc <debug_parse+0x45c>)
 801b6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b6da:	bf00      	nop
 801b6dc:	0801b705 	.word	0x0801b705
 801b6e0:	0801b705 	.word	0x0801b705
 801b6e4:	0801b705 	.word	0x0801b705
 801b6e8:	0801b705 	.word	0x0801b705
 801b6ec:	0801b705 	.word	0x0801b705
 801b6f0:	0801b705 	.word	0x0801b705
 801b6f4:	0801b705 	.word	0x0801b705
 801b6f8:	0801b705 	.word	0x0801b705
 801b6fc:	0801b705 	.word	0x0801b705
 801b700:	0801b705 	.word	0x0801b705
			case 0:	//V0
				break;
 801b704:	bf00      	nop
				break;
			case 9:	//V9
				break;
			}
		}
		break;
 801b706:	e0df      	b.n	801b8c8 <debug_parse+0x648>
	case 'W':  // write word
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 801b708:	4b57      	ldr	r3, [pc, #348]	@ (801b868 <debug_parse+0x5e8>)
 801b70a:	4a58      	ldr	r2, [pc, #352]	@ (801b86c <debug_parse+0x5ec>)
 801b70c:	4958      	ldr	r1, [pc, #352]	@ (801b870 <debug_parse+0x5f0>)
 801b70e:	6878      	ldr	r0, [r7, #4]
 801b710:	f000 ffe4 	bl	801c6dc <siscanf>
 801b714:	4603      	mov	r3, r0
 801b716:	2b02      	cmp	r3, #2
 801b718:	d11b      	bne.n	801b752 <debug_parse+0x4d2>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 801b71a:	4b54      	ldr	r3, [pc, #336]	@ (801b86c <debug_parse+0x5ec>)
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	f023 0301 	bic.w	r3, r3, #1
 801b722:	461a      	mov	r2, r3
 801b724:	4b53      	ldr	r3, [pc, #332]	@ (801b874 <debug_parse+0x5f4>)
 801b726:	601a      	str	r2, [r3, #0]
			tempword = temp2;
 801b728:	4b4f      	ldr	r3, [pc, #316]	@ (801b868 <debug_parse+0x5e8>)
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	82bb      	strh	r3, [r7, #20]
			DebugPrint("\r\n %08X <- %04X",(int)debug_port,tempword);
 801b72e:	4b51      	ldr	r3, [pc, #324]	@ (801b874 <debug_parse+0x5f4>)
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	4619      	mov	r1, r3
 801b734:	8abb      	ldrh	r3, [r7, #20]
 801b736:	461a      	mov	r2, r3
 801b738:	4856      	ldr	r0, [pc, #344]	@ (801b894 <debug_parse+0x614>)
 801b73a:	f000 f9bd 	bl	801bab8 <DebugPrint>
			*(unsigned short*)debug_port = tempword;
 801b73e:	4b4d      	ldr	r3, [pc, #308]	@ (801b874 <debug_parse+0x5f4>)
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	8aba      	ldrh	r2, [r7, #20]
 801b744:	801a      	strh	r2, [r3, #0]
			debug_port += sizeof(tempword);
 801b746:	4b4b      	ldr	r3, [pc, #300]	@ (801b874 <debug_parse+0x5f4>)
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	3302      	adds	r3, #2
 801b74c:	4a49      	ldr	r2, [pc, #292]	@ (801b874 <debug_parse+0x5f4>)
 801b74e:	6013      	str	r3, [r2, #0]
				{
				}
				break;
			}
		}
		break;
 801b750:	e0bc      	b.n	801b8cc <debug_parse+0x64c>
		else if (sscanf(cmd_line,"%ld",&temp1)==1)
 801b752:	4a46      	ldr	r2, [pc, #280]	@ (801b86c <debug_parse+0x5ec>)
 801b754:	494a      	ldr	r1, [pc, #296]	@ (801b880 <debug_parse+0x600>)
 801b756:	6878      	ldr	r0, [r7, #4]
 801b758:	f000 ffc0 	bl	801c6dc <siscanf>
 801b75c:	4603      	mov	r3, r0
 801b75e:	2b01      	cmp	r3, #1
 801b760:	f040 80b4 	bne.w	801b8cc <debug_parse+0x64c>
			switch (temp1){
 801b764:	4b41      	ldr	r3, [pc, #260]	@ (801b86c <debug_parse+0x5ec>)
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	2b09      	cmp	r3, #9
 801b76a:	f200 80af 	bhi.w	801b8cc <debug_parse+0x64c>
 801b76e:	a201      	add	r2, pc, #4	@ (adr r2, 801b774 <debug_parse+0x4f4>)
 801b770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b774:	0801b79d 	.word	0x0801b79d
 801b778:	0801b79d 	.word	0x0801b79d
 801b77c:	0801b79d 	.word	0x0801b79d
 801b780:	0801b79d 	.word	0x0801b79d
 801b784:	0801b79d 	.word	0x0801b79d
 801b788:	0801b79d 	.word	0x0801b79d
 801b78c:	0801b79d 	.word	0x0801b79d
 801b790:	0801b79d 	.word	0x0801b79d
 801b794:	0801b79d 	.word	0x0801b79d
 801b798:	0801b79d 	.word	0x0801b79d
			break;
 801b79c:	bf00      	nop
		break;
 801b79e:	e095      	b.n	801b8cc <debug_parse+0x64c>
	case 'X':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 801b7a0:	4a32      	ldr	r2, [pc, #200]	@ (801b86c <debug_parse+0x5ec>)
 801b7a2:	4937      	ldr	r1, [pc, #220]	@ (801b880 <debug_parse+0x600>)
 801b7a4:	6878      	ldr	r0, [r7, #4]
 801b7a6:	f000 ff99 	bl	801c6dc <siscanf>
			//DoDebugMain(temp1);
		}
		else
		{
		}
		break;
 801b7aa:	e092      	b.n	801b8d2 <debug_parse+0x652>
	case 'Y':
		temp4 = sscanf(cmd_line,"%ld %lx",&temp1,&temp2);
 801b7ac:	4b2e      	ldr	r3, [pc, #184]	@ (801b868 <debug_parse+0x5e8>)
 801b7ae:	4a2f      	ldr	r2, [pc, #188]	@ (801b86c <debug_parse+0x5ec>)
 801b7b0:	4939      	ldr	r1, [pc, #228]	@ (801b898 <debug_parse+0x618>)
 801b7b2:	6878      	ldr	r0, [r7, #4]
 801b7b4:	f000 ff92 	bl	801c6dc <siscanf>
 801b7b8:	4603      	mov	r3, r0
 801b7ba:	461a      	mov	r2, r3
 801b7bc:	4b37      	ldr	r3, [pc, #220]	@ (801b89c <debug_parse+0x61c>)
 801b7be:	601a      	str	r2, [r3, #0]
		{
			switch (temp1){
 801b7c0:	4b2a      	ldr	r3, [pc, #168]	@ (801b86c <debug_parse+0x5ec>)
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	2b0f      	cmp	r3, #15
 801b7c6:	f200 8083 	bhi.w	801b8d0 <debug_parse+0x650>
 801b7ca:	a201      	add	r2, pc, #4	@ (adr r2, 801b7d0 <debug_parse+0x550>)
 801b7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7d0:	0801b811 	.word	0x0801b811
 801b7d4:	0801b811 	.word	0x0801b811
 801b7d8:	0801b811 	.word	0x0801b811
 801b7dc:	0801b811 	.word	0x0801b811
 801b7e0:	0801b811 	.word	0x0801b811
 801b7e4:	0801b811 	.word	0x0801b811
 801b7e8:	0801b811 	.word	0x0801b811
 801b7ec:	0801b811 	.word	0x0801b811
 801b7f0:	0801b811 	.word	0x0801b811
 801b7f4:	0801b811 	.word	0x0801b811
 801b7f8:	0801b811 	.word	0x0801b811
 801b7fc:	0801b811 	.word	0x0801b811
 801b800:	0801b811 	.word	0x0801b811
 801b804:	0801b811 	.word	0x0801b811
 801b808:	0801b811 	.word	0x0801b811
 801b80c:	0801b811 	.word	0x0801b811
			case 0:	//Y0
				{
				}
				break;
 801b810:	bf00      	nop
				{
				}
				break;
			}
		}
		break;
 801b812:	e05d      	b.n	801b8d0 <debug_parse+0x650>
	case 'Z':
		if (sscanf(cmd_line,"%li %li",&temp1,&temp2)==2)
 801b814:	4b14      	ldr	r3, [pc, #80]	@ (801b868 <debug_parse+0x5e8>)
 801b816:	4a15      	ldr	r2, [pc, #84]	@ (801b86c <debug_parse+0x5ec>)
 801b818:	4921      	ldr	r1, [pc, #132]	@ (801b8a0 <debug_parse+0x620>)
 801b81a:	6878      	ldr	r0, [r7, #4]
 801b81c:	f000 ff5e 	bl	801c6dc <siscanf>
 801b820:	4603      	mov	r3, r0
 801b822:	2b02      	cmp	r3, #2
 801b824:	d105      	bne.n	801b832 <debug_parse+0x5b2>
		{
			DebugMain(temp1);
 801b826:	4b11      	ldr	r3, [pc, #68]	@ (801b86c <debug_parse+0x5ec>)
 801b828:	681b      	ldr	r3, [r3, #0]
 801b82a:	4618      	mov	r0, r3
 801b82c:	f7e8 fc5e 	bl	80040ec <DebugMain>
		{
			_debug_dump_beg = _old_debug_dump_beg;
			_debug_dump_end = _debug_dump_beg + 127;
			do_dump();
		}
		break;
 801b830:	e04f      	b.n	801b8d2 <debug_parse+0x652>
		if (sscanf(cmd_line,"%li",&temp1)==1)
 801b832:	4a0e      	ldr	r2, [pc, #56]	@ (801b86c <debug_parse+0x5ec>)
 801b834:	491b      	ldr	r1, [pc, #108]	@ (801b8a4 <debug_parse+0x624>)
 801b836:	6878      	ldr	r0, [r7, #4]
 801b838:	f000 ff50 	bl	801c6dc <siscanf>
 801b83c:	4603      	mov	r3, r0
 801b83e:	2b01      	cmp	r3, #1
 801b840:	d105      	bne.n	801b84e <debug_parse+0x5ce>
			DebugMain(temp1);
 801b842:	4b0a      	ldr	r3, [pc, #40]	@ (801b86c <debug_parse+0x5ec>)
 801b844:	681b      	ldr	r3, [r3, #0]
 801b846:	4618      	mov	r0, r3
 801b848:	f7e8 fc50 	bl	80040ec <DebugMain>
		break;
 801b84c:	e041      	b.n	801b8d2 <debug_parse+0x652>
			_debug_dump_beg = _old_debug_dump_beg;
 801b84e:	4b16      	ldr	r3, [pc, #88]	@ (801b8a8 <debug_parse+0x628>)
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	4a16      	ldr	r2, [pc, #88]	@ (801b8ac <debug_parse+0x62c>)
 801b854:	6013      	str	r3, [r2, #0]
			_debug_dump_end = _debug_dump_beg + 127;
 801b856:	4b15      	ldr	r3, [pc, #84]	@ (801b8ac <debug_parse+0x62c>)
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	337f      	adds	r3, #127	@ 0x7f
 801b85c:	4a14      	ldr	r2, [pc, #80]	@ (801b8b0 <debug_parse+0x630>)
 801b85e:	6013      	str	r3, [r2, #0]
			do_dump();
 801b860:	f7ff fc7c 	bl	801b15c <do_dump>
		break;
 801b864:	e035      	b.n	801b8d2 <debug_parse+0x652>
 801b866:	bf00      	nop
 801b868:	24002d30 	.word	0x24002d30
 801b86c:	24002d38 	.word	0x24002d38
 801b870:	0801f568 	.word	0x0801f568
 801b874:	2400018c 	.word	0x2400018c
 801b878:	0801f570 	.word	0x0801f570
 801b87c:	0801f4b4 	.word	0x0801f4b4
 801b880:	0801f580 	.word	0x0801f580
 801b884:	24002c24 	.word	0x24002c24
 801b888:	0801f584 	.word	0x0801f584
 801b88c:	0801f590 	.word	0x0801f590
 801b890:	0801f5a0 	.word	0x0801f5a0
 801b894:	0801f5a8 	.word	0x0801f5a8
 801b898:	0801f5b8 	.word	0x0801f5b8
 801b89c:	24002d3c 	.word	0x24002d3c
 801b8a0:	0801f5c0 	.word	0x0801f5c0
 801b8a4:	0801f5c8 	.word	0x0801f5c8
 801b8a8:	24002c1c 	.word	0x24002c1c
 801b8ac:	24002c18 	.word	0x24002c18
 801b8b0:	24002c20 	.word	0x24002c20
		break;
 801b8b4:	bf00      	nop
 801b8b6:	e00c      	b.n	801b8d2 <debug_parse+0x652>
		break;
 801b8b8:	bf00      	nop
 801b8ba:	e00a      	b.n	801b8d2 <debug_parse+0x652>
		break;
 801b8bc:	bf00      	nop
 801b8be:	e008      	b.n	801b8d2 <debug_parse+0x652>
		break;
 801b8c0:	bf00      	nop
 801b8c2:	e006      	b.n	801b8d2 <debug_parse+0x652>
		break;
 801b8c4:	bf00      	nop
 801b8c6:	e004      	b.n	801b8d2 <debug_parse+0x652>
		break;
 801b8c8:	bf00      	nop
 801b8ca:	e002      	b.n	801b8d2 <debug_parse+0x652>
		break;
 801b8cc:	bf00      	nop
 801b8ce:	e000      	b.n	801b8d2 <debug_parse+0x652>
		break;
 801b8d0:	bf00      	nop
	default:
		;
	}
}
 801b8d2:	bf00      	nop
 801b8d4:	3718      	adds	r7, #24
 801b8d6:	46bd      	mov	sp, r7
 801b8d8:	bd80      	pop	{r7, pc}
 801b8da:	bf00      	nop

0801b8dc <debug_rcv>:

static int  lineptr = 0;
static char linebuff[256];

void debug_rcv(uint8_t ch)
{
 801b8dc:	b580      	push	{r7, lr}
 801b8de:	b082      	sub	sp, #8
 801b8e0:	af00      	add	r7, sp, #0
 801b8e2:	4603      	mov	r3, r0
 801b8e4:	71fb      	strb	r3, [r7, #7]
	if ((ch=='\r') || (lineptr==255))
 801b8e6:	79fb      	ldrb	r3, [r7, #7]
 801b8e8:	2b0d      	cmp	r3, #13
 801b8ea:	d003      	beq.n	801b8f4 <debug_rcv+0x18>
 801b8ec:	4b21      	ldr	r3, [pc, #132]	@ (801b974 <debug_rcv+0x98>)
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	2bff      	cmp	r3, #255	@ 0xff
 801b8f2:	d112      	bne.n	801b91a <debug_rcv+0x3e>
	{
		linebuff[lineptr] = 0;
 801b8f4:	4b1f      	ldr	r3, [pc, #124]	@ (801b974 <debug_rcv+0x98>)
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	4a1f      	ldr	r2, [pc, #124]	@ (801b978 <debug_rcv+0x9c>)
 801b8fa:	2100      	movs	r1, #0
 801b8fc:	54d1      	strb	r1, [r2, r3]
		if (lineptr)
 801b8fe:	4b1d      	ldr	r3, [pc, #116]	@ (801b974 <debug_rcv+0x98>)
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	2b00      	cmp	r3, #0
 801b904:	d002      	beq.n	801b90c <debug_rcv+0x30>
		{
			debug_parse(linebuff);
 801b906:	481c      	ldr	r0, [pc, #112]	@ (801b978 <debug_rcv+0x9c>)
 801b908:	f7ff fcba 	bl	801b280 <debug_parse>
		}
		lineptr = 0;
 801b90c:	4b19      	ldr	r3, [pc, #100]	@ (801b974 <debug_rcv+0x98>)
 801b90e:	2200      	movs	r2, #0
 801b910:	601a      	str	r2, [r3, #0]
		SendDebugPrompt;
 801b912:	481a      	ldr	r0, [pc, #104]	@ (801b97c <debug_rcv+0xa0>)
 801b914:	f000 f8b6 	bl	801ba84 <DebugSend>
 801b918:	e027      	b.n	801b96a <debug_rcv+0x8e>
	}
	else if (iscntrl(ch))
 801b91a:	79fb      	ldrb	r3, [r7, #7]
 801b91c:	3301      	adds	r3, #1
 801b91e:	4a18      	ldr	r2, [pc, #96]	@ (801b980 <debug_rcv+0xa4>)
 801b920:	4413      	add	r3, r2
 801b922:	781b      	ldrb	r3, [r3, #0]
 801b924:	f003 0320 	and.w	r3, r3, #32
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d010      	beq.n	801b94e <debug_rcv+0x72>
	{
		switch (ch)
 801b92c:	79fb      	ldrb	r3, [r7, #7]
 801b92e:	2b08      	cmp	r3, #8
 801b930:	d11b      	bne.n	801b96a <debug_rcv+0x8e>
		{
		case BS:
			if (lineptr)
 801b932:	4b10      	ldr	r3, [pc, #64]	@ (801b974 <debug_rcv+0x98>)
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	2b00      	cmp	r3, #0
 801b938:	d016      	beq.n	801b968 <debug_rcv+0x8c>
			{
				DebugPutChar(ch);
 801b93a:	79fb      	ldrb	r3, [r7, #7]
 801b93c:	4618      	mov	r0, r3
 801b93e:	f000 f891 	bl	801ba64 <DebugPutChar>
				lineptr--;
 801b942:	4b0c      	ldr	r3, [pc, #48]	@ (801b974 <debug_rcv+0x98>)
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	3b01      	subs	r3, #1
 801b948:	4a0a      	ldr	r2, [pc, #40]	@ (801b974 <debug_rcv+0x98>)
 801b94a:	6013      	str	r3, [r2, #0]
			}
			break;
 801b94c:	e00c      	b.n	801b968 <debug_rcv+0x8c>
		}
	}
	else
	{
		linebuff[lineptr++] = ch;
 801b94e:	4b09      	ldr	r3, [pc, #36]	@ (801b974 <debug_rcv+0x98>)
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	1c5a      	adds	r2, r3, #1
 801b954:	4907      	ldr	r1, [pc, #28]	@ (801b974 <debug_rcv+0x98>)
 801b956:	600a      	str	r2, [r1, #0]
 801b958:	4907      	ldr	r1, [pc, #28]	@ (801b978 <debug_rcv+0x9c>)
 801b95a:	79fa      	ldrb	r2, [r7, #7]
 801b95c:	54ca      	strb	r2, [r1, r3]
		DebugPutChar(ch);
 801b95e:	79fb      	ldrb	r3, [r7, #7]
 801b960:	4618      	mov	r0, r3
 801b962:	f000 f87f 	bl	801ba64 <DebugPutChar>
		//__io_putchar(ch);
	}
	//ResetTimer(DEBUGTIMER);
}
 801b966:	e000      	b.n	801b96a <debug_rcv+0x8e>
			break;
 801b968:	bf00      	nop
}
 801b96a:	bf00      	nop
 801b96c:	3708      	adds	r7, #8
 801b96e:	46bd      	mov	sp, r7
 801b970:	bd80      	pop	{r7, pc}
 801b972:	bf00      	nop
 801b974:	24002c28 	.word	0x24002c28
 801b978:	24002c2c 	.word	0x24002c2c
 801b97c:	0801f5cc 	.word	0x0801f5cc
 801b980:	080212ee 	.word	0x080212ee

0801b984 <DebugInit>:
	{
	}
}

void DebugInit(void)
{
 801b984:	b580      	push	{r7, lr}
 801b986:	af00      	add	r7, sp, #0
#ifdef huart_debug
	debug_data.huart = &huart_debug;
 801b988:	4b18      	ldr	r3, [pc, #96]	@ (801b9ec <DebugInit+0x68>)
 801b98a:	4a19      	ldr	r2, [pc, #100]	@ (801b9f0 <DebugInit+0x6c>)
 801b98c:	601a      	str	r2, [r3, #0]
#ifndef	TX_BUFFER_SIZE
	debug_data.TX_Buffer_size = DBG_TX_BUFFER_SIZE;
	debug_data.TX_Buffer = dbg_tx_buffer;
#endif
	debug_data.COMM_rcv = debug_rcv;
 801b98e:	4b17      	ldr	r3, [pc, #92]	@ (801b9ec <DebugInit+0x68>)
 801b990:	4a18      	ldr	r2, [pc, #96]	@ (801b9f4 <DebugInit+0x70>)
 801b992:	605a      	str	r2, [r3, #4]
	debug_data.RX_DMA_Buffer_head = 0;
 801b994:	4b15      	ldr	r3, [pc, #84]	@ (801b9ec <DebugInit+0x68>)
 801b996:	2200      	movs	r2, #0
 801b998:	819a      	strh	r2, [r3, #12]
	debug_data.RX_DMA_Buffer_tail = 0;
 801b99a:	4b14      	ldr	r3, [pc, #80]	@ (801b9ec <DebugInit+0x68>)
 801b99c:	2200      	movs	r2, #0
 801b99e:	81da      	strh	r2, [r3, #14]
	debug_data.TX_Buffer_head = 0;
 801b9a0:	4b12      	ldr	r3, [pc, #72]	@ (801b9ec <DebugInit+0x68>)
 801b9a2:	2200      	movs	r2, #0
 801b9a4:	829a      	strh	r2, [r3, #20]
	debug_data.TX_Buffer_tail = 0;
 801b9a6:	4b11      	ldr	r3, [pc, #68]	@ (801b9ec <DebugInit+0x68>)
 801b9a8:	2200      	movs	r2, #0
 801b9aa:	82da      	strh	r2, [r3, #22]
	debug_data.TX_DMA_Lock = 0;
 801b9ac:	4b0f      	ldr	r3, [pc, #60]	@ (801b9ec <DebugInit+0x68>)
 801b9ae:	2200      	movs	r2, #0
 801b9b0:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
	if (debug_data.huart->hdmarx) {
 801b9b4:	4b0d      	ldr	r3, [pc, #52]	@ (801b9ec <DebugInit+0x68>)
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d008      	beq.n	801b9d2 <DebugInit+0x4e>
		HAL_UART_Receive_DMA(debug_data.huart,
 801b9c0:	4b0a      	ldr	r3, [pc, #40]	@ (801b9ec <DebugInit+0x68>)
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	4a09      	ldr	r2, [pc, #36]	@ (801b9ec <DebugInit+0x68>)
 801b9c6:	6911      	ldr	r1, [r2, #16]
 801b9c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b9cc:	4618      	mov	r0, r3
 801b9ce:	f7f8 fe2f 	bl	8014630 <HAL_UART_Receive_DMA>
				debug_data.RX_DMA_Buffer, RX_DMA_BUFFER_SIZE);
	}
#endif
	DebugPrint("\r\n  Welcome to Debug Console ver STM1.1!");
 801b9d2:	4809      	ldr	r0, [pc, #36]	@ (801b9f8 <DebugInit+0x74>)
 801b9d4:	f000 f870 	bl	801bab8 <DebugPrint>
	DebugPrint("\r\n Compile Date: %s, Time: %s",__DATE__,__TIME__);
 801b9d8:	4a08      	ldr	r2, [pc, #32]	@ (801b9fc <DebugInit+0x78>)
 801b9da:	4909      	ldr	r1, [pc, #36]	@ (801ba00 <DebugInit+0x7c>)
 801b9dc:	4809      	ldr	r0, [pc, #36]	@ (801ba04 <DebugInit+0x80>)
 801b9de:	f000 f86b 	bl	801bab8 <DebugPrint>
	SendDebugPrompt;
 801b9e2:	4809      	ldr	r0, [pc, #36]	@ (801ba08 <DebugInit+0x84>)
 801b9e4:	f000 f84e 	bl	801ba84 <DebugSend>
}
 801b9e8:	bf00      	nop
 801b9ea:	bd80      	pop	{r7, pc}
 801b9ec:	24000190 	.word	0x24000190
 801b9f0:	24000e18 	.word	0x24000e18
 801b9f4:	0801b8dd 	.word	0x0801b8dd
 801b9f8:	0801f5d4 	.word	0x0801f5d4
 801b9fc:	0801f46c 	.word	0x0801f46c
 801ba00:	0801f478 	.word	0x0801f478
 801ba04:	0801f484 	.word	0x0801f484
 801ba08:	0801f5cc 	.word	0x0801f5cc

0801ba0c <DebugTask>:
static char DebugLock = 0;

#define	_USE_SOF_	0

void DebugTask(void)
{
 801ba0c:	b580      	push	{r7, lr}
 801ba0e:	b082      	sub	sp, #8
 801ba10:	af00      	add	r7, sp, #0
#ifdef huart_debug
	if (!DebugLock)
 801ba12:	4b11      	ldr	r3, [pc, #68]	@ (801ba58 <DebugTask+0x4c>)
 801ba14:	781b      	ldrb	r3, [r3, #0]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d117      	bne.n	801ba4a <DebugTask+0x3e>
	{
		DebugLock = 1;	//prevent recursion
 801ba1a:	4b0f      	ldr	r3, [pc, #60]	@ (801ba58 <DebugTask+0x4c>)
 801ba1c:	2201      	movs	r2, #1
 801ba1e:	701a      	strb	r2, [r3, #0]
		if (huart_debug.hdmarx==NULL)
 801ba20:	4b0e      	ldr	r3, [pc, #56]	@ (801ba5c <DebugTask+0x50>)
 801ba22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d10c      	bne.n	801ba44 <DebugTask+0x38>
		{
			uint8_t rx_char;
			if (HAL_UART_Receive(&huart_debug, &rx_char, 1, 0)==HAL_OK)
 801ba2a:	1df9      	adds	r1, r7, #7
 801ba2c:	2300      	movs	r3, #0
 801ba2e:	2201      	movs	r2, #1
 801ba30:	480a      	ldr	r0, [pc, #40]	@ (801ba5c <DebugTask+0x50>)
 801ba32:	f7f8 fc21 	bl	8014278 <HAL_UART_Receive>
 801ba36:	4603      	mov	r3, r0
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d103      	bne.n	801ba44 <DebugTask+0x38>
			{
				debug_rcv(rx_char);
 801ba3c:	79fb      	ldrb	r3, [r7, #7]
 801ba3e:	4618      	mov	r0, r3
 801ba40:	f7ff ff4c 	bl	801b8dc <debug_rcv>
				ResetTimer(DEBUGTIMER);
				debug_idle();
			}
	#endif
		}
		DebugLock = 0;
 801ba44:	4b04      	ldr	r3, [pc, #16]	@ (801ba58 <DebugTask+0x4c>)
 801ba46:	2200      	movs	r2, #0
 801ba48:	701a      	strb	r2, [r3, #0]
	}
	CommTXTask(&debug_data);
 801ba4a:	4805      	ldr	r0, [pc, #20]	@ (801ba60 <DebugTask+0x54>)
 801ba4c:	f7ff f908 	bl	801ac60 <CommTXTask>
	}
	#if (_USE_SOF_==0)
	DoDebugSerial();
	#endif
#endif
}
 801ba50:	bf00      	nop
 801ba52:	3708      	adds	r7, #8
 801ba54:	46bd      	mov	sp, r7
 801ba56:	bd80      	pop	{r7, pc}
 801ba58:	24002d2c 	.word	0x24002d2c
 801ba5c:	24000e18 	.word	0x24000e18
 801ba60:	24000190 	.word	0x24000190

0801ba64 <DebugPutChar>:
#if _USE_SOF_
volatile uint8_t USB_Lock = 0;
#endif

void DebugPutChar(char ch)
{
 801ba64:	b580      	push	{r7, lr}
 801ba66:	b082      	sub	sp, #8
 801ba68:	af00      	add	r7, sp, #0
 801ba6a:	4603      	mov	r3, r0
 801ba6c:	71fb      	strb	r3, [r7, #7]
#ifdef huart_debug
	CommUARTPutChar(&debug_data, ch);
 801ba6e:	79fb      	ldrb	r3, [r7, #7]
 801ba70:	4619      	mov	r1, r3
 801ba72:	4803      	ldr	r0, [pc, #12]	@ (801ba80 <DebugPutChar+0x1c>)
 801ba74:	f7ff f989 	bl	801ad8a <CommUARTPutChar>
	}
 #if _USE_SOF_
	USB_Lock = 0;
 #endif
#endif
}
 801ba78:	bf00      	nop
 801ba7a:	3708      	adds	r7, #8
 801ba7c:	46bd      	mov	sp, r7
 801ba7e:	bd80      	pop	{r7, pc}
 801ba80:	24000190 	.word	0x24000190

0801ba84 <DebugSend>:

void DebugSend(char *message)
{
 801ba84:	b580      	push	{r7, lr}
 801ba86:	b084      	sub	sp, #16
 801ba88:	af00      	add	r7, sp, #0
 801ba8a:	6078      	str	r0, [r7, #4]
	char ch = *message;
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	781b      	ldrb	r3, [r3, #0]
 801ba90:	73fb      	strb	r3, [r7, #15]

	while (ch != '\0')
 801ba92:	e009      	b.n	801baa8 <DebugSend+0x24>
	{
		DebugPutChar(ch);
 801ba94:	7bfb      	ldrb	r3, [r7, #15]
 801ba96:	4618      	mov	r0, r3
 801ba98:	f7ff ffe4 	bl	801ba64 <DebugPutChar>
		message++;
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	3301      	adds	r3, #1
 801baa0:	607b      	str	r3, [r7, #4]
		ch = *message;
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	781b      	ldrb	r3, [r3, #0]
 801baa6:	73fb      	strb	r3, [r7, #15]
	while (ch != '\0')
 801baa8:	7bfb      	ldrb	r3, [r7, #15]
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d1f2      	bne.n	801ba94 <DebugSend+0x10>
	}
}
 801baae:	bf00      	nop
 801bab0:	bf00      	nop
 801bab2:	3710      	adds	r7, #16
 801bab4:	46bd      	mov	sp, r7
 801bab6:	bd80      	pop	{r7, pc}

0801bab8 <DebugPrint>:

void DebugPrint(const char *format, ...)
{
 801bab8:	b40f      	push	{r0, r1, r2, r3}
 801baba:	b580      	push	{r7, lr}
 801babc:	b096      	sub	sp, #88	@ 0x58
 801babe:	af00      	add	r7, sp, #0
	char debug_result[82];
	va_list argptr;
    va_start(argptr, format);
 801bac0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801bac4:	603b      	str	r3, [r7, #0]
    vsprintf(debug_result, format, argptr);
 801bac6:	1d3b      	adds	r3, r7, #4
 801bac8:	683a      	ldr	r2, [r7, #0]
 801baca:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801bacc:	4618      	mov	r0, r3
 801bace:	f000 fe8d 	bl	801c7ec <vsiprintf>
    va_end(argptr);
	DebugSend(debug_result);
 801bad2:	1d3b      	adds	r3, r7, #4
 801bad4:	4618      	mov	r0, r3
 801bad6:	f7ff ffd5 	bl	801ba84 <DebugSend>
}
 801bada:	bf00      	nop
 801badc:	3758      	adds	r7, #88	@ 0x58
 801bade:	46bd      	mov	sp, r7
 801bae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801bae4:	b004      	add	sp, #16
 801bae6:	4770      	bx	lr

0801bae8 <__assert_func>:
 801bae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801baea:	4614      	mov	r4, r2
 801baec:	461a      	mov	r2, r3
 801baee:	4b09      	ldr	r3, [pc, #36]	@ (801bb14 <__assert_func+0x2c>)
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	4605      	mov	r5, r0
 801baf4:	68d8      	ldr	r0, [r3, #12]
 801baf6:	b14c      	cbz	r4, 801bb0c <__assert_func+0x24>
 801baf8:	4b07      	ldr	r3, [pc, #28]	@ (801bb18 <__assert_func+0x30>)
 801bafa:	9100      	str	r1, [sp, #0]
 801bafc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bb00:	4906      	ldr	r1, [pc, #24]	@ (801bb1c <__assert_func+0x34>)
 801bb02:	462b      	mov	r3, r5
 801bb04:	f000 fd62 	bl	801c5cc <fiprintf>
 801bb08:	f000 fef9 	bl	801c8fe <abort>
 801bb0c:	4b04      	ldr	r3, [pc, #16]	@ (801bb20 <__assert_func+0x38>)
 801bb0e:	461c      	mov	r4, r3
 801bb10:	e7f3      	b.n	801bafa <__assert_func+0x12>
 801bb12:	bf00      	nop
 801bb14:	240005bc 	.word	0x240005bc
 801bb18:	08021164 	.word	0x08021164
 801bb1c:	08021171 	.word	0x08021171
 801bb20:	0802119f 	.word	0x0802119f

0801bb24 <_strtoul_l.isra.0>:
 801bb24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb28:	4e34      	ldr	r6, [pc, #208]	@ (801bbfc <_strtoul_l.isra.0+0xd8>)
 801bb2a:	4686      	mov	lr, r0
 801bb2c:	460d      	mov	r5, r1
 801bb2e:	4628      	mov	r0, r5
 801bb30:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bb34:	5d37      	ldrb	r7, [r6, r4]
 801bb36:	f017 0708 	ands.w	r7, r7, #8
 801bb3a:	d1f8      	bne.n	801bb2e <_strtoul_l.isra.0+0xa>
 801bb3c:	2c2d      	cmp	r4, #45	@ 0x2d
 801bb3e:	d110      	bne.n	801bb62 <_strtoul_l.isra.0+0x3e>
 801bb40:	782c      	ldrb	r4, [r5, #0]
 801bb42:	2701      	movs	r7, #1
 801bb44:	1c85      	adds	r5, r0, #2
 801bb46:	f033 0010 	bics.w	r0, r3, #16
 801bb4a:	d115      	bne.n	801bb78 <_strtoul_l.isra.0+0x54>
 801bb4c:	2c30      	cmp	r4, #48	@ 0x30
 801bb4e:	d10d      	bne.n	801bb6c <_strtoul_l.isra.0+0x48>
 801bb50:	7828      	ldrb	r0, [r5, #0]
 801bb52:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801bb56:	2858      	cmp	r0, #88	@ 0x58
 801bb58:	d108      	bne.n	801bb6c <_strtoul_l.isra.0+0x48>
 801bb5a:	786c      	ldrb	r4, [r5, #1]
 801bb5c:	3502      	adds	r5, #2
 801bb5e:	2310      	movs	r3, #16
 801bb60:	e00a      	b.n	801bb78 <_strtoul_l.isra.0+0x54>
 801bb62:	2c2b      	cmp	r4, #43	@ 0x2b
 801bb64:	bf04      	itt	eq
 801bb66:	782c      	ldrbeq	r4, [r5, #0]
 801bb68:	1c85      	addeq	r5, r0, #2
 801bb6a:	e7ec      	b.n	801bb46 <_strtoul_l.isra.0+0x22>
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d1f6      	bne.n	801bb5e <_strtoul_l.isra.0+0x3a>
 801bb70:	2c30      	cmp	r4, #48	@ 0x30
 801bb72:	bf14      	ite	ne
 801bb74:	230a      	movne	r3, #10
 801bb76:	2308      	moveq	r3, #8
 801bb78:	f04f 38ff 	mov.w	r8, #4294967295
 801bb7c:	2600      	movs	r6, #0
 801bb7e:	fbb8 f8f3 	udiv	r8, r8, r3
 801bb82:	fb03 f908 	mul.w	r9, r3, r8
 801bb86:	ea6f 0909 	mvn.w	r9, r9
 801bb8a:	4630      	mov	r0, r6
 801bb8c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801bb90:	f1bc 0f09 	cmp.w	ip, #9
 801bb94:	d810      	bhi.n	801bbb8 <_strtoul_l.isra.0+0x94>
 801bb96:	4664      	mov	r4, ip
 801bb98:	42a3      	cmp	r3, r4
 801bb9a:	dd1e      	ble.n	801bbda <_strtoul_l.isra.0+0xb6>
 801bb9c:	f1b6 3fff 	cmp.w	r6, #4294967295
 801bba0:	d007      	beq.n	801bbb2 <_strtoul_l.isra.0+0x8e>
 801bba2:	4580      	cmp	r8, r0
 801bba4:	d316      	bcc.n	801bbd4 <_strtoul_l.isra.0+0xb0>
 801bba6:	d101      	bne.n	801bbac <_strtoul_l.isra.0+0x88>
 801bba8:	45a1      	cmp	r9, r4
 801bbaa:	db13      	blt.n	801bbd4 <_strtoul_l.isra.0+0xb0>
 801bbac:	fb00 4003 	mla	r0, r0, r3, r4
 801bbb0:	2601      	movs	r6, #1
 801bbb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bbb6:	e7e9      	b.n	801bb8c <_strtoul_l.isra.0+0x68>
 801bbb8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801bbbc:	f1bc 0f19 	cmp.w	ip, #25
 801bbc0:	d801      	bhi.n	801bbc6 <_strtoul_l.isra.0+0xa2>
 801bbc2:	3c37      	subs	r4, #55	@ 0x37
 801bbc4:	e7e8      	b.n	801bb98 <_strtoul_l.isra.0+0x74>
 801bbc6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801bbca:	f1bc 0f19 	cmp.w	ip, #25
 801bbce:	d804      	bhi.n	801bbda <_strtoul_l.isra.0+0xb6>
 801bbd0:	3c57      	subs	r4, #87	@ 0x57
 801bbd2:	e7e1      	b.n	801bb98 <_strtoul_l.isra.0+0x74>
 801bbd4:	f04f 36ff 	mov.w	r6, #4294967295
 801bbd8:	e7eb      	b.n	801bbb2 <_strtoul_l.isra.0+0x8e>
 801bbda:	1c73      	adds	r3, r6, #1
 801bbdc:	d106      	bne.n	801bbec <_strtoul_l.isra.0+0xc8>
 801bbde:	2322      	movs	r3, #34	@ 0x22
 801bbe0:	f8ce 3000 	str.w	r3, [lr]
 801bbe4:	4630      	mov	r0, r6
 801bbe6:	b932      	cbnz	r2, 801bbf6 <_strtoul_l.isra.0+0xd2>
 801bbe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bbec:	b107      	cbz	r7, 801bbf0 <_strtoul_l.isra.0+0xcc>
 801bbee:	4240      	negs	r0, r0
 801bbf0:	2a00      	cmp	r2, #0
 801bbf2:	d0f9      	beq.n	801bbe8 <_strtoul_l.isra.0+0xc4>
 801bbf4:	b106      	cbz	r6, 801bbf8 <_strtoul_l.isra.0+0xd4>
 801bbf6:	1e69      	subs	r1, r5, #1
 801bbf8:	6011      	str	r1, [r2, #0]
 801bbfa:	e7f5      	b.n	801bbe8 <_strtoul_l.isra.0+0xc4>
 801bbfc:	080212ef 	.word	0x080212ef

0801bc00 <_strtoul_r>:
 801bc00:	f7ff bf90 	b.w	801bb24 <_strtoul_l.isra.0>

0801bc04 <strtoul>:
 801bc04:	4613      	mov	r3, r2
 801bc06:	460a      	mov	r2, r1
 801bc08:	4601      	mov	r1, r0
 801bc0a:	4802      	ldr	r0, [pc, #8]	@ (801bc14 <strtoul+0x10>)
 801bc0c:	6800      	ldr	r0, [r0, #0]
 801bc0e:	f7ff bf89 	b.w	801bb24 <_strtoul_l.isra.0>
 801bc12:	bf00      	nop
 801bc14:	240005bc 	.word	0x240005bc

0801bc18 <__cvt>:
 801bc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc1a:	ed2d 8b02 	vpush	{d8}
 801bc1e:	eeb0 8b40 	vmov.f64	d8, d0
 801bc22:	b085      	sub	sp, #20
 801bc24:	4617      	mov	r7, r2
 801bc26:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801bc28:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bc2a:	ee18 2a90 	vmov	r2, s17
 801bc2e:	f025 0520 	bic.w	r5, r5, #32
 801bc32:	2a00      	cmp	r2, #0
 801bc34:	bfb6      	itet	lt
 801bc36:	222d      	movlt	r2, #45	@ 0x2d
 801bc38:	2200      	movge	r2, #0
 801bc3a:	eeb1 8b40 	vneglt.f64	d8, d0
 801bc3e:	2d46      	cmp	r5, #70	@ 0x46
 801bc40:	460c      	mov	r4, r1
 801bc42:	701a      	strb	r2, [r3, #0]
 801bc44:	d004      	beq.n	801bc50 <__cvt+0x38>
 801bc46:	2d45      	cmp	r5, #69	@ 0x45
 801bc48:	d100      	bne.n	801bc4c <__cvt+0x34>
 801bc4a:	3401      	adds	r4, #1
 801bc4c:	2102      	movs	r1, #2
 801bc4e:	e000      	b.n	801bc52 <__cvt+0x3a>
 801bc50:	2103      	movs	r1, #3
 801bc52:	ab03      	add	r3, sp, #12
 801bc54:	9301      	str	r3, [sp, #4]
 801bc56:	ab02      	add	r3, sp, #8
 801bc58:	9300      	str	r3, [sp, #0]
 801bc5a:	4622      	mov	r2, r4
 801bc5c:	4633      	mov	r3, r6
 801bc5e:	eeb0 0b48 	vmov.f64	d0, d8
 801bc62:	f000 fedd 	bl	801ca20 <_dtoa_r>
 801bc66:	2d47      	cmp	r5, #71	@ 0x47
 801bc68:	d114      	bne.n	801bc94 <__cvt+0x7c>
 801bc6a:	07fb      	lsls	r3, r7, #31
 801bc6c:	d50a      	bpl.n	801bc84 <__cvt+0x6c>
 801bc6e:	1902      	adds	r2, r0, r4
 801bc70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801bc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc78:	bf08      	it	eq
 801bc7a:	9203      	streq	r2, [sp, #12]
 801bc7c:	2130      	movs	r1, #48	@ 0x30
 801bc7e:	9b03      	ldr	r3, [sp, #12]
 801bc80:	4293      	cmp	r3, r2
 801bc82:	d319      	bcc.n	801bcb8 <__cvt+0xa0>
 801bc84:	9b03      	ldr	r3, [sp, #12]
 801bc86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bc88:	1a1b      	subs	r3, r3, r0
 801bc8a:	6013      	str	r3, [r2, #0]
 801bc8c:	b005      	add	sp, #20
 801bc8e:	ecbd 8b02 	vpop	{d8}
 801bc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc94:	2d46      	cmp	r5, #70	@ 0x46
 801bc96:	eb00 0204 	add.w	r2, r0, r4
 801bc9a:	d1e9      	bne.n	801bc70 <__cvt+0x58>
 801bc9c:	7803      	ldrb	r3, [r0, #0]
 801bc9e:	2b30      	cmp	r3, #48	@ 0x30
 801bca0:	d107      	bne.n	801bcb2 <__cvt+0x9a>
 801bca2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801bca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcaa:	bf1c      	itt	ne
 801bcac:	f1c4 0401 	rsbne	r4, r4, #1
 801bcb0:	6034      	strne	r4, [r6, #0]
 801bcb2:	6833      	ldr	r3, [r6, #0]
 801bcb4:	441a      	add	r2, r3
 801bcb6:	e7db      	b.n	801bc70 <__cvt+0x58>
 801bcb8:	1c5c      	adds	r4, r3, #1
 801bcba:	9403      	str	r4, [sp, #12]
 801bcbc:	7019      	strb	r1, [r3, #0]
 801bcbe:	e7de      	b.n	801bc7e <__cvt+0x66>

0801bcc0 <__exponent>:
 801bcc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bcc2:	2900      	cmp	r1, #0
 801bcc4:	bfba      	itte	lt
 801bcc6:	4249      	neglt	r1, r1
 801bcc8:	232d      	movlt	r3, #45	@ 0x2d
 801bcca:	232b      	movge	r3, #43	@ 0x2b
 801bccc:	2909      	cmp	r1, #9
 801bcce:	7002      	strb	r2, [r0, #0]
 801bcd0:	7043      	strb	r3, [r0, #1]
 801bcd2:	dd29      	ble.n	801bd28 <__exponent+0x68>
 801bcd4:	f10d 0307 	add.w	r3, sp, #7
 801bcd8:	461d      	mov	r5, r3
 801bcda:	270a      	movs	r7, #10
 801bcdc:	461a      	mov	r2, r3
 801bcde:	fbb1 f6f7 	udiv	r6, r1, r7
 801bce2:	fb07 1416 	mls	r4, r7, r6, r1
 801bce6:	3430      	adds	r4, #48	@ 0x30
 801bce8:	f802 4c01 	strb.w	r4, [r2, #-1]
 801bcec:	460c      	mov	r4, r1
 801bcee:	2c63      	cmp	r4, #99	@ 0x63
 801bcf0:	f103 33ff 	add.w	r3, r3, #4294967295
 801bcf4:	4631      	mov	r1, r6
 801bcf6:	dcf1      	bgt.n	801bcdc <__exponent+0x1c>
 801bcf8:	3130      	adds	r1, #48	@ 0x30
 801bcfa:	1e94      	subs	r4, r2, #2
 801bcfc:	f803 1c01 	strb.w	r1, [r3, #-1]
 801bd00:	1c41      	adds	r1, r0, #1
 801bd02:	4623      	mov	r3, r4
 801bd04:	42ab      	cmp	r3, r5
 801bd06:	d30a      	bcc.n	801bd1e <__exponent+0x5e>
 801bd08:	f10d 0309 	add.w	r3, sp, #9
 801bd0c:	1a9b      	subs	r3, r3, r2
 801bd0e:	42ac      	cmp	r4, r5
 801bd10:	bf88      	it	hi
 801bd12:	2300      	movhi	r3, #0
 801bd14:	3302      	adds	r3, #2
 801bd16:	4403      	add	r3, r0
 801bd18:	1a18      	subs	r0, r3, r0
 801bd1a:	b003      	add	sp, #12
 801bd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd1e:	f813 6b01 	ldrb.w	r6, [r3], #1
 801bd22:	f801 6f01 	strb.w	r6, [r1, #1]!
 801bd26:	e7ed      	b.n	801bd04 <__exponent+0x44>
 801bd28:	2330      	movs	r3, #48	@ 0x30
 801bd2a:	3130      	adds	r1, #48	@ 0x30
 801bd2c:	7083      	strb	r3, [r0, #2]
 801bd2e:	70c1      	strb	r1, [r0, #3]
 801bd30:	1d03      	adds	r3, r0, #4
 801bd32:	e7f1      	b.n	801bd18 <__exponent+0x58>
 801bd34:	0000      	movs	r0, r0
	...

0801bd38 <_printf_float>:
 801bd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd3c:	b08d      	sub	sp, #52	@ 0x34
 801bd3e:	460c      	mov	r4, r1
 801bd40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801bd44:	4616      	mov	r6, r2
 801bd46:	461f      	mov	r7, r3
 801bd48:	4605      	mov	r5, r0
 801bd4a:	f000 fd61 	bl	801c810 <_localeconv_r>
 801bd4e:	f8d0 b000 	ldr.w	fp, [r0]
 801bd52:	4658      	mov	r0, fp
 801bd54:	f7e4 fb14 	bl	8000380 <strlen>
 801bd58:	2300      	movs	r3, #0
 801bd5a:	930a      	str	r3, [sp, #40]	@ 0x28
 801bd5c:	f8d8 3000 	ldr.w	r3, [r8]
 801bd60:	f894 9018 	ldrb.w	r9, [r4, #24]
 801bd64:	6822      	ldr	r2, [r4, #0]
 801bd66:	9005      	str	r0, [sp, #20]
 801bd68:	3307      	adds	r3, #7
 801bd6a:	f023 0307 	bic.w	r3, r3, #7
 801bd6e:	f103 0108 	add.w	r1, r3, #8
 801bd72:	f8c8 1000 	str.w	r1, [r8]
 801bd76:	ed93 0b00 	vldr	d0, [r3]
 801bd7a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801bfd8 <_printf_float+0x2a0>
 801bd7e:	eeb0 7bc0 	vabs.f64	d7, d0
 801bd82:	eeb4 7b46 	vcmp.f64	d7, d6
 801bd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd8a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801bd8e:	dd24      	ble.n	801bdda <_printf_float+0xa2>
 801bd90:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801bd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd98:	d502      	bpl.n	801bda0 <_printf_float+0x68>
 801bd9a:	232d      	movs	r3, #45	@ 0x2d
 801bd9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bda0:	498f      	ldr	r1, [pc, #572]	@ (801bfe0 <_printf_float+0x2a8>)
 801bda2:	4b90      	ldr	r3, [pc, #576]	@ (801bfe4 <_printf_float+0x2ac>)
 801bda4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 801bda8:	bf8c      	ite	hi
 801bdaa:	4688      	movhi	r8, r1
 801bdac:	4698      	movls	r8, r3
 801bdae:	f022 0204 	bic.w	r2, r2, #4
 801bdb2:	2303      	movs	r3, #3
 801bdb4:	6123      	str	r3, [r4, #16]
 801bdb6:	6022      	str	r2, [r4, #0]
 801bdb8:	f04f 0a00 	mov.w	sl, #0
 801bdbc:	9700      	str	r7, [sp, #0]
 801bdbe:	4633      	mov	r3, r6
 801bdc0:	aa0b      	add	r2, sp, #44	@ 0x2c
 801bdc2:	4621      	mov	r1, r4
 801bdc4:	4628      	mov	r0, r5
 801bdc6:	f000 f9d1 	bl	801c16c <_printf_common>
 801bdca:	3001      	adds	r0, #1
 801bdcc:	f040 8089 	bne.w	801bee2 <_printf_float+0x1aa>
 801bdd0:	f04f 30ff 	mov.w	r0, #4294967295
 801bdd4:	b00d      	add	sp, #52	@ 0x34
 801bdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdda:	eeb4 0b40 	vcmp.f64	d0, d0
 801bdde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bde2:	d709      	bvc.n	801bdf8 <_printf_float+0xc0>
 801bde4:	ee10 3a90 	vmov	r3, s1
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	bfbc      	itt	lt
 801bdec:	232d      	movlt	r3, #45	@ 0x2d
 801bdee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801bdf2:	497d      	ldr	r1, [pc, #500]	@ (801bfe8 <_printf_float+0x2b0>)
 801bdf4:	4b7d      	ldr	r3, [pc, #500]	@ (801bfec <_printf_float+0x2b4>)
 801bdf6:	e7d5      	b.n	801bda4 <_printf_float+0x6c>
 801bdf8:	6863      	ldr	r3, [r4, #4]
 801bdfa:	1c59      	adds	r1, r3, #1
 801bdfc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 801be00:	d139      	bne.n	801be76 <_printf_float+0x13e>
 801be02:	2306      	movs	r3, #6
 801be04:	6063      	str	r3, [r4, #4]
 801be06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801be0a:	2300      	movs	r3, #0
 801be0c:	6022      	str	r2, [r4, #0]
 801be0e:	9303      	str	r3, [sp, #12]
 801be10:	ab0a      	add	r3, sp, #40	@ 0x28
 801be12:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801be16:	ab09      	add	r3, sp, #36	@ 0x24
 801be18:	9300      	str	r3, [sp, #0]
 801be1a:	6861      	ldr	r1, [r4, #4]
 801be1c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801be20:	4628      	mov	r0, r5
 801be22:	f7ff fef9 	bl	801bc18 <__cvt>
 801be26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801be2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801be2c:	4680      	mov	r8, r0
 801be2e:	d129      	bne.n	801be84 <_printf_float+0x14c>
 801be30:	1cc8      	adds	r0, r1, #3
 801be32:	db02      	blt.n	801be3a <_printf_float+0x102>
 801be34:	6863      	ldr	r3, [r4, #4]
 801be36:	4299      	cmp	r1, r3
 801be38:	dd41      	ble.n	801bebe <_printf_float+0x186>
 801be3a:	f1a9 0902 	sub.w	r9, r9, #2
 801be3e:	fa5f f989 	uxtb.w	r9, r9
 801be42:	3901      	subs	r1, #1
 801be44:	464a      	mov	r2, r9
 801be46:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801be4a:	9109      	str	r1, [sp, #36]	@ 0x24
 801be4c:	f7ff ff38 	bl	801bcc0 <__exponent>
 801be50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801be52:	1813      	adds	r3, r2, r0
 801be54:	2a01      	cmp	r2, #1
 801be56:	4682      	mov	sl, r0
 801be58:	6123      	str	r3, [r4, #16]
 801be5a:	dc02      	bgt.n	801be62 <_printf_float+0x12a>
 801be5c:	6822      	ldr	r2, [r4, #0]
 801be5e:	07d2      	lsls	r2, r2, #31
 801be60:	d501      	bpl.n	801be66 <_printf_float+0x12e>
 801be62:	3301      	adds	r3, #1
 801be64:	6123      	str	r3, [r4, #16]
 801be66:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d0a6      	beq.n	801bdbc <_printf_float+0x84>
 801be6e:	232d      	movs	r3, #45	@ 0x2d
 801be70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801be74:	e7a2      	b.n	801bdbc <_printf_float+0x84>
 801be76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801be7a:	d1c4      	bne.n	801be06 <_printf_float+0xce>
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d1c2      	bne.n	801be06 <_printf_float+0xce>
 801be80:	2301      	movs	r3, #1
 801be82:	e7bf      	b.n	801be04 <_printf_float+0xcc>
 801be84:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801be88:	d9db      	bls.n	801be42 <_printf_float+0x10a>
 801be8a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801be8e:	d118      	bne.n	801bec2 <_printf_float+0x18a>
 801be90:	2900      	cmp	r1, #0
 801be92:	6863      	ldr	r3, [r4, #4]
 801be94:	dd0b      	ble.n	801beae <_printf_float+0x176>
 801be96:	6121      	str	r1, [r4, #16]
 801be98:	b913      	cbnz	r3, 801bea0 <_printf_float+0x168>
 801be9a:	6822      	ldr	r2, [r4, #0]
 801be9c:	07d0      	lsls	r0, r2, #31
 801be9e:	d502      	bpl.n	801bea6 <_printf_float+0x16e>
 801bea0:	3301      	adds	r3, #1
 801bea2:	440b      	add	r3, r1
 801bea4:	6123      	str	r3, [r4, #16]
 801bea6:	65a1      	str	r1, [r4, #88]	@ 0x58
 801bea8:	f04f 0a00 	mov.w	sl, #0
 801beac:	e7db      	b.n	801be66 <_printf_float+0x12e>
 801beae:	b913      	cbnz	r3, 801beb6 <_printf_float+0x17e>
 801beb0:	6822      	ldr	r2, [r4, #0]
 801beb2:	07d2      	lsls	r2, r2, #31
 801beb4:	d501      	bpl.n	801beba <_printf_float+0x182>
 801beb6:	3302      	adds	r3, #2
 801beb8:	e7f4      	b.n	801bea4 <_printf_float+0x16c>
 801beba:	2301      	movs	r3, #1
 801bebc:	e7f2      	b.n	801bea4 <_printf_float+0x16c>
 801bebe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801bec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bec4:	4299      	cmp	r1, r3
 801bec6:	db05      	blt.n	801bed4 <_printf_float+0x19c>
 801bec8:	6823      	ldr	r3, [r4, #0]
 801beca:	6121      	str	r1, [r4, #16]
 801becc:	07d8      	lsls	r0, r3, #31
 801bece:	d5ea      	bpl.n	801bea6 <_printf_float+0x16e>
 801bed0:	1c4b      	adds	r3, r1, #1
 801bed2:	e7e7      	b.n	801bea4 <_printf_float+0x16c>
 801bed4:	2900      	cmp	r1, #0
 801bed6:	bfd4      	ite	le
 801bed8:	f1c1 0202 	rsble	r2, r1, #2
 801bedc:	2201      	movgt	r2, #1
 801bede:	4413      	add	r3, r2
 801bee0:	e7e0      	b.n	801bea4 <_printf_float+0x16c>
 801bee2:	6823      	ldr	r3, [r4, #0]
 801bee4:	055a      	lsls	r2, r3, #21
 801bee6:	d407      	bmi.n	801bef8 <_printf_float+0x1c0>
 801bee8:	6923      	ldr	r3, [r4, #16]
 801beea:	4642      	mov	r2, r8
 801beec:	4631      	mov	r1, r6
 801beee:	4628      	mov	r0, r5
 801bef0:	47b8      	blx	r7
 801bef2:	3001      	adds	r0, #1
 801bef4:	d12a      	bne.n	801bf4c <_printf_float+0x214>
 801bef6:	e76b      	b.n	801bdd0 <_printf_float+0x98>
 801bef8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801befc:	f240 80e0 	bls.w	801c0c0 <_printf_float+0x388>
 801bf00:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801bf04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bf08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf0c:	d133      	bne.n	801bf76 <_printf_float+0x23e>
 801bf0e:	4a38      	ldr	r2, [pc, #224]	@ (801bff0 <_printf_float+0x2b8>)
 801bf10:	2301      	movs	r3, #1
 801bf12:	4631      	mov	r1, r6
 801bf14:	4628      	mov	r0, r5
 801bf16:	47b8      	blx	r7
 801bf18:	3001      	adds	r0, #1
 801bf1a:	f43f af59 	beq.w	801bdd0 <_printf_float+0x98>
 801bf1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801bf22:	4543      	cmp	r3, r8
 801bf24:	db02      	blt.n	801bf2c <_printf_float+0x1f4>
 801bf26:	6823      	ldr	r3, [r4, #0]
 801bf28:	07d8      	lsls	r0, r3, #31
 801bf2a:	d50f      	bpl.n	801bf4c <_printf_float+0x214>
 801bf2c:	9b05      	ldr	r3, [sp, #20]
 801bf2e:	465a      	mov	r2, fp
 801bf30:	4631      	mov	r1, r6
 801bf32:	4628      	mov	r0, r5
 801bf34:	47b8      	blx	r7
 801bf36:	3001      	adds	r0, #1
 801bf38:	f43f af4a 	beq.w	801bdd0 <_printf_float+0x98>
 801bf3c:	f04f 0900 	mov.w	r9, #0
 801bf40:	f108 38ff 	add.w	r8, r8, #4294967295
 801bf44:	f104 0a1a 	add.w	sl, r4, #26
 801bf48:	45c8      	cmp	r8, r9
 801bf4a:	dc09      	bgt.n	801bf60 <_printf_float+0x228>
 801bf4c:	6823      	ldr	r3, [r4, #0]
 801bf4e:	079b      	lsls	r3, r3, #30
 801bf50:	f100 8107 	bmi.w	801c162 <_printf_float+0x42a>
 801bf54:	68e0      	ldr	r0, [r4, #12]
 801bf56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf58:	4298      	cmp	r0, r3
 801bf5a:	bfb8      	it	lt
 801bf5c:	4618      	movlt	r0, r3
 801bf5e:	e739      	b.n	801bdd4 <_printf_float+0x9c>
 801bf60:	2301      	movs	r3, #1
 801bf62:	4652      	mov	r2, sl
 801bf64:	4631      	mov	r1, r6
 801bf66:	4628      	mov	r0, r5
 801bf68:	47b8      	blx	r7
 801bf6a:	3001      	adds	r0, #1
 801bf6c:	f43f af30 	beq.w	801bdd0 <_printf_float+0x98>
 801bf70:	f109 0901 	add.w	r9, r9, #1
 801bf74:	e7e8      	b.n	801bf48 <_printf_float+0x210>
 801bf76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	dc3b      	bgt.n	801bff4 <_printf_float+0x2bc>
 801bf7c:	4a1c      	ldr	r2, [pc, #112]	@ (801bff0 <_printf_float+0x2b8>)
 801bf7e:	2301      	movs	r3, #1
 801bf80:	4631      	mov	r1, r6
 801bf82:	4628      	mov	r0, r5
 801bf84:	47b8      	blx	r7
 801bf86:	3001      	adds	r0, #1
 801bf88:	f43f af22 	beq.w	801bdd0 <_printf_float+0x98>
 801bf8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801bf90:	ea59 0303 	orrs.w	r3, r9, r3
 801bf94:	d102      	bne.n	801bf9c <_printf_float+0x264>
 801bf96:	6823      	ldr	r3, [r4, #0]
 801bf98:	07d9      	lsls	r1, r3, #31
 801bf9a:	d5d7      	bpl.n	801bf4c <_printf_float+0x214>
 801bf9c:	9b05      	ldr	r3, [sp, #20]
 801bf9e:	465a      	mov	r2, fp
 801bfa0:	4631      	mov	r1, r6
 801bfa2:	4628      	mov	r0, r5
 801bfa4:	47b8      	blx	r7
 801bfa6:	3001      	adds	r0, #1
 801bfa8:	f43f af12 	beq.w	801bdd0 <_printf_float+0x98>
 801bfac:	f04f 0a00 	mov.w	sl, #0
 801bfb0:	f104 0b1a 	add.w	fp, r4, #26
 801bfb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfb6:	425b      	negs	r3, r3
 801bfb8:	4553      	cmp	r3, sl
 801bfba:	dc01      	bgt.n	801bfc0 <_printf_float+0x288>
 801bfbc:	464b      	mov	r3, r9
 801bfbe:	e794      	b.n	801beea <_printf_float+0x1b2>
 801bfc0:	2301      	movs	r3, #1
 801bfc2:	465a      	mov	r2, fp
 801bfc4:	4631      	mov	r1, r6
 801bfc6:	4628      	mov	r0, r5
 801bfc8:	47b8      	blx	r7
 801bfca:	3001      	adds	r0, #1
 801bfcc:	f43f af00 	beq.w	801bdd0 <_printf_float+0x98>
 801bfd0:	f10a 0a01 	add.w	sl, sl, #1
 801bfd4:	e7ee      	b.n	801bfb4 <_printf_float+0x27c>
 801bfd6:	bf00      	nop
 801bfd8:	ffffffff 	.word	0xffffffff
 801bfdc:	7fefffff 	.word	0x7fefffff
 801bfe0:	080211a4 	.word	0x080211a4
 801bfe4:	080211a0 	.word	0x080211a0
 801bfe8:	080211ac 	.word	0x080211ac
 801bfec:	080211a8 	.word	0x080211a8
 801bff0:	080212df 	.word	0x080212df
 801bff4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801bff6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801bffa:	4553      	cmp	r3, sl
 801bffc:	bfa8      	it	ge
 801bffe:	4653      	movge	r3, sl
 801c000:	2b00      	cmp	r3, #0
 801c002:	4699      	mov	r9, r3
 801c004:	dc37      	bgt.n	801c076 <_printf_float+0x33e>
 801c006:	2300      	movs	r3, #0
 801c008:	9307      	str	r3, [sp, #28]
 801c00a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c00e:	f104 021a 	add.w	r2, r4, #26
 801c012:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c014:	9907      	ldr	r1, [sp, #28]
 801c016:	9306      	str	r3, [sp, #24]
 801c018:	eba3 0309 	sub.w	r3, r3, r9
 801c01c:	428b      	cmp	r3, r1
 801c01e:	dc31      	bgt.n	801c084 <_printf_float+0x34c>
 801c020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c022:	459a      	cmp	sl, r3
 801c024:	dc3b      	bgt.n	801c09e <_printf_float+0x366>
 801c026:	6823      	ldr	r3, [r4, #0]
 801c028:	07da      	lsls	r2, r3, #31
 801c02a:	d438      	bmi.n	801c09e <_printf_float+0x366>
 801c02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c02e:	ebaa 0903 	sub.w	r9, sl, r3
 801c032:	9b06      	ldr	r3, [sp, #24]
 801c034:	ebaa 0303 	sub.w	r3, sl, r3
 801c038:	4599      	cmp	r9, r3
 801c03a:	bfa8      	it	ge
 801c03c:	4699      	movge	r9, r3
 801c03e:	f1b9 0f00 	cmp.w	r9, #0
 801c042:	dc34      	bgt.n	801c0ae <_printf_float+0x376>
 801c044:	f04f 0800 	mov.w	r8, #0
 801c048:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c04c:	f104 0b1a 	add.w	fp, r4, #26
 801c050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c052:	ebaa 0303 	sub.w	r3, sl, r3
 801c056:	eba3 0309 	sub.w	r3, r3, r9
 801c05a:	4543      	cmp	r3, r8
 801c05c:	f77f af76 	ble.w	801bf4c <_printf_float+0x214>
 801c060:	2301      	movs	r3, #1
 801c062:	465a      	mov	r2, fp
 801c064:	4631      	mov	r1, r6
 801c066:	4628      	mov	r0, r5
 801c068:	47b8      	blx	r7
 801c06a:	3001      	adds	r0, #1
 801c06c:	f43f aeb0 	beq.w	801bdd0 <_printf_float+0x98>
 801c070:	f108 0801 	add.w	r8, r8, #1
 801c074:	e7ec      	b.n	801c050 <_printf_float+0x318>
 801c076:	4642      	mov	r2, r8
 801c078:	4631      	mov	r1, r6
 801c07a:	4628      	mov	r0, r5
 801c07c:	47b8      	blx	r7
 801c07e:	3001      	adds	r0, #1
 801c080:	d1c1      	bne.n	801c006 <_printf_float+0x2ce>
 801c082:	e6a5      	b.n	801bdd0 <_printf_float+0x98>
 801c084:	2301      	movs	r3, #1
 801c086:	4631      	mov	r1, r6
 801c088:	4628      	mov	r0, r5
 801c08a:	9206      	str	r2, [sp, #24]
 801c08c:	47b8      	blx	r7
 801c08e:	3001      	adds	r0, #1
 801c090:	f43f ae9e 	beq.w	801bdd0 <_printf_float+0x98>
 801c094:	9b07      	ldr	r3, [sp, #28]
 801c096:	9a06      	ldr	r2, [sp, #24]
 801c098:	3301      	adds	r3, #1
 801c09a:	9307      	str	r3, [sp, #28]
 801c09c:	e7b9      	b.n	801c012 <_printf_float+0x2da>
 801c09e:	9b05      	ldr	r3, [sp, #20]
 801c0a0:	465a      	mov	r2, fp
 801c0a2:	4631      	mov	r1, r6
 801c0a4:	4628      	mov	r0, r5
 801c0a6:	47b8      	blx	r7
 801c0a8:	3001      	adds	r0, #1
 801c0aa:	d1bf      	bne.n	801c02c <_printf_float+0x2f4>
 801c0ac:	e690      	b.n	801bdd0 <_printf_float+0x98>
 801c0ae:	9a06      	ldr	r2, [sp, #24]
 801c0b0:	464b      	mov	r3, r9
 801c0b2:	4442      	add	r2, r8
 801c0b4:	4631      	mov	r1, r6
 801c0b6:	4628      	mov	r0, r5
 801c0b8:	47b8      	blx	r7
 801c0ba:	3001      	adds	r0, #1
 801c0bc:	d1c2      	bne.n	801c044 <_printf_float+0x30c>
 801c0be:	e687      	b.n	801bdd0 <_printf_float+0x98>
 801c0c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801c0c4:	f1b9 0f01 	cmp.w	r9, #1
 801c0c8:	dc01      	bgt.n	801c0ce <_printf_float+0x396>
 801c0ca:	07db      	lsls	r3, r3, #31
 801c0cc:	d536      	bpl.n	801c13c <_printf_float+0x404>
 801c0ce:	2301      	movs	r3, #1
 801c0d0:	4642      	mov	r2, r8
 801c0d2:	4631      	mov	r1, r6
 801c0d4:	4628      	mov	r0, r5
 801c0d6:	47b8      	blx	r7
 801c0d8:	3001      	adds	r0, #1
 801c0da:	f43f ae79 	beq.w	801bdd0 <_printf_float+0x98>
 801c0de:	9b05      	ldr	r3, [sp, #20]
 801c0e0:	465a      	mov	r2, fp
 801c0e2:	4631      	mov	r1, r6
 801c0e4:	4628      	mov	r0, r5
 801c0e6:	47b8      	blx	r7
 801c0e8:	3001      	adds	r0, #1
 801c0ea:	f43f ae71 	beq.w	801bdd0 <_printf_float+0x98>
 801c0ee:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801c0f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0fa:	f109 39ff 	add.w	r9, r9, #4294967295
 801c0fe:	d018      	beq.n	801c132 <_printf_float+0x3fa>
 801c100:	464b      	mov	r3, r9
 801c102:	f108 0201 	add.w	r2, r8, #1
 801c106:	4631      	mov	r1, r6
 801c108:	4628      	mov	r0, r5
 801c10a:	47b8      	blx	r7
 801c10c:	3001      	adds	r0, #1
 801c10e:	d10c      	bne.n	801c12a <_printf_float+0x3f2>
 801c110:	e65e      	b.n	801bdd0 <_printf_float+0x98>
 801c112:	2301      	movs	r3, #1
 801c114:	465a      	mov	r2, fp
 801c116:	4631      	mov	r1, r6
 801c118:	4628      	mov	r0, r5
 801c11a:	47b8      	blx	r7
 801c11c:	3001      	adds	r0, #1
 801c11e:	f43f ae57 	beq.w	801bdd0 <_printf_float+0x98>
 801c122:	f108 0801 	add.w	r8, r8, #1
 801c126:	45c8      	cmp	r8, r9
 801c128:	dbf3      	blt.n	801c112 <_printf_float+0x3da>
 801c12a:	4653      	mov	r3, sl
 801c12c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c130:	e6dc      	b.n	801beec <_printf_float+0x1b4>
 801c132:	f04f 0800 	mov.w	r8, #0
 801c136:	f104 0b1a 	add.w	fp, r4, #26
 801c13a:	e7f4      	b.n	801c126 <_printf_float+0x3ee>
 801c13c:	2301      	movs	r3, #1
 801c13e:	4642      	mov	r2, r8
 801c140:	e7e1      	b.n	801c106 <_printf_float+0x3ce>
 801c142:	2301      	movs	r3, #1
 801c144:	464a      	mov	r2, r9
 801c146:	4631      	mov	r1, r6
 801c148:	4628      	mov	r0, r5
 801c14a:	47b8      	blx	r7
 801c14c:	3001      	adds	r0, #1
 801c14e:	f43f ae3f 	beq.w	801bdd0 <_printf_float+0x98>
 801c152:	f108 0801 	add.w	r8, r8, #1
 801c156:	68e3      	ldr	r3, [r4, #12]
 801c158:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c15a:	1a5b      	subs	r3, r3, r1
 801c15c:	4543      	cmp	r3, r8
 801c15e:	dcf0      	bgt.n	801c142 <_printf_float+0x40a>
 801c160:	e6f8      	b.n	801bf54 <_printf_float+0x21c>
 801c162:	f04f 0800 	mov.w	r8, #0
 801c166:	f104 0919 	add.w	r9, r4, #25
 801c16a:	e7f4      	b.n	801c156 <_printf_float+0x41e>

0801c16c <_printf_common>:
 801c16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c170:	4616      	mov	r6, r2
 801c172:	4698      	mov	r8, r3
 801c174:	688a      	ldr	r2, [r1, #8]
 801c176:	690b      	ldr	r3, [r1, #16]
 801c178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c17c:	4293      	cmp	r3, r2
 801c17e:	bfb8      	it	lt
 801c180:	4613      	movlt	r3, r2
 801c182:	6033      	str	r3, [r6, #0]
 801c184:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c188:	4607      	mov	r7, r0
 801c18a:	460c      	mov	r4, r1
 801c18c:	b10a      	cbz	r2, 801c192 <_printf_common+0x26>
 801c18e:	3301      	adds	r3, #1
 801c190:	6033      	str	r3, [r6, #0]
 801c192:	6823      	ldr	r3, [r4, #0]
 801c194:	0699      	lsls	r1, r3, #26
 801c196:	bf42      	ittt	mi
 801c198:	6833      	ldrmi	r3, [r6, #0]
 801c19a:	3302      	addmi	r3, #2
 801c19c:	6033      	strmi	r3, [r6, #0]
 801c19e:	6825      	ldr	r5, [r4, #0]
 801c1a0:	f015 0506 	ands.w	r5, r5, #6
 801c1a4:	d106      	bne.n	801c1b4 <_printf_common+0x48>
 801c1a6:	f104 0a19 	add.w	sl, r4, #25
 801c1aa:	68e3      	ldr	r3, [r4, #12]
 801c1ac:	6832      	ldr	r2, [r6, #0]
 801c1ae:	1a9b      	subs	r3, r3, r2
 801c1b0:	42ab      	cmp	r3, r5
 801c1b2:	dc26      	bgt.n	801c202 <_printf_common+0x96>
 801c1b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c1b8:	6822      	ldr	r2, [r4, #0]
 801c1ba:	3b00      	subs	r3, #0
 801c1bc:	bf18      	it	ne
 801c1be:	2301      	movne	r3, #1
 801c1c0:	0692      	lsls	r2, r2, #26
 801c1c2:	d42b      	bmi.n	801c21c <_printf_common+0xb0>
 801c1c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c1c8:	4641      	mov	r1, r8
 801c1ca:	4638      	mov	r0, r7
 801c1cc:	47c8      	blx	r9
 801c1ce:	3001      	adds	r0, #1
 801c1d0:	d01e      	beq.n	801c210 <_printf_common+0xa4>
 801c1d2:	6823      	ldr	r3, [r4, #0]
 801c1d4:	6922      	ldr	r2, [r4, #16]
 801c1d6:	f003 0306 	and.w	r3, r3, #6
 801c1da:	2b04      	cmp	r3, #4
 801c1dc:	bf02      	ittt	eq
 801c1de:	68e5      	ldreq	r5, [r4, #12]
 801c1e0:	6833      	ldreq	r3, [r6, #0]
 801c1e2:	1aed      	subeq	r5, r5, r3
 801c1e4:	68a3      	ldr	r3, [r4, #8]
 801c1e6:	bf0c      	ite	eq
 801c1e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c1ec:	2500      	movne	r5, #0
 801c1ee:	4293      	cmp	r3, r2
 801c1f0:	bfc4      	itt	gt
 801c1f2:	1a9b      	subgt	r3, r3, r2
 801c1f4:	18ed      	addgt	r5, r5, r3
 801c1f6:	2600      	movs	r6, #0
 801c1f8:	341a      	adds	r4, #26
 801c1fa:	42b5      	cmp	r5, r6
 801c1fc:	d11a      	bne.n	801c234 <_printf_common+0xc8>
 801c1fe:	2000      	movs	r0, #0
 801c200:	e008      	b.n	801c214 <_printf_common+0xa8>
 801c202:	2301      	movs	r3, #1
 801c204:	4652      	mov	r2, sl
 801c206:	4641      	mov	r1, r8
 801c208:	4638      	mov	r0, r7
 801c20a:	47c8      	blx	r9
 801c20c:	3001      	adds	r0, #1
 801c20e:	d103      	bne.n	801c218 <_printf_common+0xac>
 801c210:	f04f 30ff 	mov.w	r0, #4294967295
 801c214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c218:	3501      	adds	r5, #1
 801c21a:	e7c6      	b.n	801c1aa <_printf_common+0x3e>
 801c21c:	18e1      	adds	r1, r4, r3
 801c21e:	1c5a      	adds	r2, r3, #1
 801c220:	2030      	movs	r0, #48	@ 0x30
 801c222:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c226:	4422      	add	r2, r4
 801c228:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c22c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c230:	3302      	adds	r3, #2
 801c232:	e7c7      	b.n	801c1c4 <_printf_common+0x58>
 801c234:	2301      	movs	r3, #1
 801c236:	4622      	mov	r2, r4
 801c238:	4641      	mov	r1, r8
 801c23a:	4638      	mov	r0, r7
 801c23c:	47c8      	blx	r9
 801c23e:	3001      	adds	r0, #1
 801c240:	d0e6      	beq.n	801c210 <_printf_common+0xa4>
 801c242:	3601      	adds	r6, #1
 801c244:	e7d9      	b.n	801c1fa <_printf_common+0x8e>
	...

0801c248 <_printf_i>:
 801c248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c24c:	7e0f      	ldrb	r7, [r1, #24]
 801c24e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c250:	2f78      	cmp	r7, #120	@ 0x78
 801c252:	4691      	mov	r9, r2
 801c254:	4680      	mov	r8, r0
 801c256:	460c      	mov	r4, r1
 801c258:	469a      	mov	sl, r3
 801c25a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c25e:	d807      	bhi.n	801c270 <_printf_i+0x28>
 801c260:	2f62      	cmp	r7, #98	@ 0x62
 801c262:	d80a      	bhi.n	801c27a <_printf_i+0x32>
 801c264:	2f00      	cmp	r7, #0
 801c266:	f000 80d1 	beq.w	801c40c <_printf_i+0x1c4>
 801c26a:	2f58      	cmp	r7, #88	@ 0x58
 801c26c:	f000 80b8 	beq.w	801c3e0 <_printf_i+0x198>
 801c270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c274:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c278:	e03a      	b.n	801c2f0 <_printf_i+0xa8>
 801c27a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c27e:	2b15      	cmp	r3, #21
 801c280:	d8f6      	bhi.n	801c270 <_printf_i+0x28>
 801c282:	a101      	add	r1, pc, #4	@ (adr r1, 801c288 <_printf_i+0x40>)
 801c284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c288:	0801c2e1 	.word	0x0801c2e1
 801c28c:	0801c2f5 	.word	0x0801c2f5
 801c290:	0801c271 	.word	0x0801c271
 801c294:	0801c271 	.word	0x0801c271
 801c298:	0801c271 	.word	0x0801c271
 801c29c:	0801c271 	.word	0x0801c271
 801c2a0:	0801c2f5 	.word	0x0801c2f5
 801c2a4:	0801c271 	.word	0x0801c271
 801c2a8:	0801c271 	.word	0x0801c271
 801c2ac:	0801c271 	.word	0x0801c271
 801c2b0:	0801c271 	.word	0x0801c271
 801c2b4:	0801c3f3 	.word	0x0801c3f3
 801c2b8:	0801c31f 	.word	0x0801c31f
 801c2bc:	0801c3ad 	.word	0x0801c3ad
 801c2c0:	0801c271 	.word	0x0801c271
 801c2c4:	0801c271 	.word	0x0801c271
 801c2c8:	0801c415 	.word	0x0801c415
 801c2cc:	0801c271 	.word	0x0801c271
 801c2d0:	0801c31f 	.word	0x0801c31f
 801c2d4:	0801c271 	.word	0x0801c271
 801c2d8:	0801c271 	.word	0x0801c271
 801c2dc:	0801c3b5 	.word	0x0801c3b5
 801c2e0:	6833      	ldr	r3, [r6, #0]
 801c2e2:	1d1a      	adds	r2, r3, #4
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	6032      	str	r2, [r6, #0]
 801c2e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c2ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c2f0:	2301      	movs	r3, #1
 801c2f2:	e09c      	b.n	801c42e <_printf_i+0x1e6>
 801c2f4:	6833      	ldr	r3, [r6, #0]
 801c2f6:	6820      	ldr	r0, [r4, #0]
 801c2f8:	1d19      	adds	r1, r3, #4
 801c2fa:	6031      	str	r1, [r6, #0]
 801c2fc:	0606      	lsls	r6, r0, #24
 801c2fe:	d501      	bpl.n	801c304 <_printf_i+0xbc>
 801c300:	681d      	ldr	r5, [r3, #0]
 801c302:	e003      	b.n	801c30c <_printf_i+0xc4>
 801c304:	0645      	lsls	r5, r0, #25
 801c306:	d5fb      	bpl.n	801c300 <_printf_i+0xb8>
 801c308:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c30c:	2d00      	cmp	r5, #0
 801c30e:	da03      	bge.n	801c318 <_printf_i+0xd0>
 801c310:	232d      	movs	r3, #45	@ 0x2d
 801c312:	426d      	negs	r5, r5
 801c314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c318:	4858      	ldr	r0, [pc, #352]	@ (801c47c <_printf_i+0x234>)
 801c31a:	230a      	movs	r3, #10
 801c31c:	e011      	b.n	801c342 <_printf_i+0xfa>
 801c31e:	6821      	ldr	r1, [r4, #0]
 801c320:	6833      	ldr	r3, [r6, #0]
 801c322:	0608      	lsls	r0, r1, #24
 801c324:	f853 5b04 	ldr.w	r5, [r3], #4
 801c328:	d402      	bmi.n	801c330 <_printf_i+0xe8>
 801c32a:	0649      	lsls	r1, r1, #25
 801c32c:	bf48      	it	mi
 801c32e:	b2ad      	uxthmi	r5, r5
 801c330:	2f6f      	cmp	r7, #111	@ 0x6f
 801c332:	4852      	ldr	r0, [pc, #328]	@ (801c47c <_printf_i+0x234>)
 801c334:	6033      	str	r3, [r6, #0]
 801c336:	bf14      	ite	ne
 801c338:	230a      	movne	r3, #10
 801c33a:	2308      	moveq	r3, #8
 801c33c:	2100      	movs	r1, #0
 801c33e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c342:	6866      	ldr	r6, [r4, #4]
 801c344:	60a6      	str	r6, [r4, #8]
 801c346:	2e00      	cmp	r6, #0
 801c348:	db05      	blt.n	801c356 <_printf_i+0x10e>
 801c34a:	6821      	ldr	r1, [r4, #0]
 801c34c:	432e      	orrs	r6, r5
 801c34e:	f021 0104 	bic.w	r1, r1, #4
 801c352:	6021      	str	r1, [r4, #0]
 801c354:	d04b      	beq.n	801c3ee <_printf_i+0x1a6>
 801c356:	4616      	mov	r6, r2
 801c358:	fbb5 f1f3 	udiv	r1, r5, r3
 801c35c:	fb03 5711 	mls	r7, r3, r1, r5
 801c360:	5dc7      	ldrb	r7, [r0, r7]
 801c362:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c366:	462f      	mov	r7, r5
 801c368:	42bb      	cmp	r3, r7
 801c36a:	460d      	mov	r5, r1
 801c36c:	d9f4      	bls.n	801c358 <_printf_i+0x110>
 801c36e:	2b08      	cmp	r3, #8
 801c370:	d10b      	bne.n	801c38a <_printf_i+0x142>
 801c372:	6823      	ldr	r3, [r4, #0]
 801c374:	07df      	lsls	r7, r3, #31
 801c376:	d508      	bpl.n	801c38a <_printf_i+0x142>
 801c378:	6923      	ldr	r3, [r4, #16]
 801c37a:	6861      	ldr	r1, [r4, #4]
 801c37c:	4299      	cmp	r1, r3
 801c37e:	bfde      	ittt	le
 801c380:	2330      	movle	r3, #48	@ 0x30
 801c382:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c386:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c38a:	1b92      	subs	r2, r2, r6
 801c38c:	6122      	str	r2, [r4, #16]
 801c38e:	f8cd a000 	str.w	sl, [sp]
 801c392:	464b      	mov	r3, r9
 801c394:	aa03      	add	r2, sp, #12
 801c396:	4621      	mov	r1, r4
 801c398:	4640      	mov	r0, r8
 801c39a:	f7ff fee7 	bl	801c16c <_printf_common>
 801c39e:	3001      	adds	r0, #1
 801c3a0:	d14a      	bne.n	801c438 <_printf_i+0x1f0>
 801c3a2:	f04f 30ff 	mov.w	r0, #4294967295
 801c3a6:	b004      	add	sp, #16
 801c3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c3ac:	6823      	ldr	r3, [r4, #0]
 801c3ae:	f043 0320 	orr.w	r3, r3, #32
 801c3b2:	6023      	str	r3, [r4, #0]
 801c3b4:	4832      	ldr	r0, [pc, #200]	@ (801c480 <_printf_i+0x238>)
 801c3b6:	2778      	movs	r7, #120	@ 0x78
 801c3b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c3bc:	6823      	ldr	r3, [r4, #0]
 801c3be:	6831      	ldr	r1, [r6, #0]
 801c3c0:	061f      	lsls	r7, r3, #24
 801c3c2:	f851 5b04 	ldr.w	r5, [r1], #4
 801c3c6:	d402      	bmi.n	801c3ce <_printf_i+0x186>
 801c3c8:	065f      	lsls	r7, r3, #25
 801c3ca:	bf48      	it	mi
 801c3cc:	b2ad      	uxthmi	r5, r5
 801c3ce:	6031      	str	r1, [r6, #0]
 801c3d0:	07d9      	lsls	r1, r3, #31
 801c3d2:	bf44      	itt	mi
 801c3d4:	f043 0320 	orrmi.w	r3, r3, #32
 801c3d8:	6023      	strmi	r3, [r4, #0]
 801c3da:	b11d      	cbz	r5, 801c3e4 <_printf_i+0x19c>
 801c3dc:	2310      	movs	r3, #16
 801c3de:	e7ad      	b.n	801c33c <_printf_i+0xf4>
 801c3e0:	4826      	ldr	r0, [pc, #152]	@ (801c47c <_printf_i+0x234>)
 801c3e2:	e7e9      	b.n	801c3b8 <_printf_i+0x170>
 801c3e4:	6823      	ldr	r3, [r4, #0]
 801c3e6:	f023 0320 	bic.w	r3, r3, #32
 801c3ea:	6023      	str	r3, [r4, #0]
 801c3ec:	e7f6      	b.n	801c3dc <_printf_i+0x194>
 801c3ee:	4616      	mov	r6, r2
 801c3f0:	e7bd      	b.n	801c36e <_printf_i+0x126>
 801c3f2:	6833      	ldr	r3, [r6, #0]
 801c3f4:	6825      	ldr	r5, [r4, #0]
 801c3f6:	6961      	ldr	r1, [r4, #20]
 801c3f8:	1d18      	adds	r0, r3, #4
 801c3fa:	6030      	str	r0, [r6, #0]
 801c3fc:	062e      	lsls	r6, r5, #24
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	d501      	bpl.n	801c406 <_printf_i+0x1be>
 801c402:	6019      	str	r1, [r3, #0]
 801c404:	e002      	b.n	801c40c <_printf_i+0x1c4>
 801c406:	0668      	lsls	r0, r5, #25
 801c408:	d5fb      	bpl.n	801c402 <_printf_i+0x1ba>
 801c40a:	8019      	strh	r1, [r3, #0]
 801c40c:	2300      	movs	r3, #0
 801c40e:	6123      	str	r3, [r4, #16]
 801c410:	4616      	mov	r6, r2
 801c412:	e7bc      	b.n	801c38e <_printf_i+0x146>
 801c414:	6833      	ldr	r3, [r6, #0]
 801c416:	1d1a      	adds	r2, r3, #4
 801c418:	6032      	str	r2, [r6, #0]
 801c41a:	681e      	ldr	r6, [r3, #0]
 801c41c:	6862      	ldr	r2, [r4, #4]
 801c41e:	2100      	movs	r1, #0
 801c420:	4630      	mov	r0, r6
 801c422:	f7e3 ff5d 	bl	80002e0 <memchr>
 801c426:	b108      	cbz	r0, 801c42c <_printf_i+0x1e4>
 801c428:	1b80      	subs	r0, r0, r6
 801c42a:	6060      	str	r0, [r4, #4]
 801c42c:	6863      	ldr	r3, [r4, #4]
 801c42e:	6123      	str	r3, [r4, #16]
 801c430:	2300      	movs	r3, #0
 801c432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c436:	e7aa      	b.n	801c38e <_printf_i+0x146>
 801c438:	6923      	ldr	r3, [r4, #16]
 801c43a:	4632      	mov	r2, r6
 801c43c:	4649      	mov	r1, r9
 801c43e:	4640      	mov	r0, r8
 801c440:	47d0      	blx	sl
 801c442:	3001      	adds	r0, #1
 801c444:	d0ad      	beq.n	801c3a2 <_printf_i+0x15a>
 801c446:	6823      	ldr	r3, [r4, #0]
 801c448:	079b      	lsls	r3, r3, #30
 801c44a:	d413      	bmi.n	801c474 <_printf_i+0x22c>
 801c44c:	68e0      	ldr	r0, [r4, #12]
 801c44e:	9b03      	ldr	r3, [sp, #12]
 801c450:	4298      	cmp	r0, r3
 801c452:	bfb8      	it	lt
 801c454:	4618      	movlt	r0, r3
 801c456:	e7a6      	b.n	801c3a6 <_printf_i+0x15e>
 801c458:	2301      	movs	r3, #1
 801c45a:	4632      	mov	r2, r6
 801c45c:	4649      	mov	r1, r9
 801c45e:	4640      	mov	r0, r8
 801c460:	47d0      	blx	sl
 801c462:	3001      	adds	r0, #1
 801c464:	d09d      	beq.n	801c3a2 <_printf_i+0x15a>
 801c466:	3501      	adds	r5, #1
 801c468:	68e3      	ldr	r3, [r4, #12]
 801c46a:	9903      	ldr	r1, [sp, #12]
 801c46c:	1a5b      	subs	r3, r3, r1
 801c46e:	42ab      	cmp	r3, r5
 801c470:	dcf2      	bgt.n	801c458 <_printf_i+0x210>
 801c472:	e7eb      	b.n	801c44c <_printf_i+0x204>
 801c474:	2500      	movs	r5, #0
 801c476:	f104 0619 	add.w	r6, r4, #25
 801c47a:	e7f5      	b.n	801c468 <_printf_i+0x220>
 801c47c:	080211b0 	.word	0x080211b0
 801c480:	080211c1 	.word	0x080211c1

0801c484 <std>:
 801c484:	2300      	movs	r3, #0
 801c486:	b510      	push	{r4, lr}
 801c488:	4604      	mov	r4, r0
 801c48a:	e9c0 3300 	strd	r3, r3, [r0]
 801c48e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c492:	6083      	str	r3, [r0, #8]
 801c494:	8181      	strh	r1, [r0, #12]
 801c496:	6643      	str	r3, [r0, #100]	@ 0x64
 801c498:	81c2      	strh	r2, [r0, #14]
 801c49a:	6183      	str	r3, [r0, #24]
 801c49c:	4619      	mov	r1, r3
 801c49e:	2208      	movs	r2, #8
 801c4a0:	305c      	adds	r0, #92	@ 0x5c
 801c4a2:	f000 f9ad 	bl	801c800 <memset>
 801c4a6:	4b0d      	ldr	r3, [pc, #52]	@ (801c4dc <std+0x58>)
 801c4a8:	6263      	str	r3, [r4, #36]	@ 0x24
 801c4aa:	4b0d      	ldr	r3, [pc, #52]	@ (801c4e0 <std+0x5c>)
 801c4ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c4ae:	4b0d      	ldr	r3, [pc, #52]	@ (801c4e4 <std+0x60>)
 801c4b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c4b2:	4b0d      	ldr	r3, [pc, #52]	@ (801c4e8 <std+0x64>)
 801c4b4:	6323      	str	r3, [r4, #48]	@ 0x30
 801c4b6:	4b0d      	ldr	r3, [pc, #52]	@ (801c4ec <std+0x68>)
 801c4b8:	6224      	str	r4, [r4, #32]
 801c4ba:	429c      	cmp	r4, r3
 801c4bc:	d006      	beq.n	801c4cc <std+0x48>
 801c4be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c4c2:	4294      	cmp	r4, r2
 801c4c4:	d002      	beq.n	801c4cc <std+0x48>
 801c4c6:	33d0      	adds	r3, #208	@ 0xd0
 801c4c8:	429c      	cmp	r4, r3
 801c4ca:	d105      	bne.n	801c4d8 <std+0x54>
 801c4cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4d4:	f000 ba10 	b.w	801c8f8 <__retarget_lock_init_recursive>
 801c4d8:	bd10      	pop	{r4, pc}
 801c4da:	bf00      	nop
 801c4dc:	0801c735 	.word	0x0801c735
 801c4e0:	0801c75b 	.word	0x0801c75b
 801c4e4:	0801c793 	.word	0x0801c793
 801c4e8:	0801c7b7 	.word	0x0801c7b7
 801c4ec:	24002d40 	.word	0x24002d40

0801c4f0 <stdio_exit_handler>:
 801c4f0:	4a02      	ldr	r2, [pc, #8]	@ (801c4fc <stdio_exit_handler+0xc>)
 801c4f2:	4903      	ldr	r1, [pc, #12]	@ (801c500 <stdio_exit_handler+0x10>)
 801c4f4:	4803      	ldr	r0, [pc, #12]	@ (801c504 <stdio_exit_handler+0x14>)
 801c4f6:	f000 b87b 	b.w	801c5f0 <_fwalk_sglue>
 801c4fa:	bf00      	nop
 801c4fc:	240005b0 	.word	0x240005b0
 801c500:	0801ea49 	.word	0x0801ea49
 801c504:	240005c0 	.word	0x240005c0

0801c508 <cleanup_stdio>:
 801c508:	6841      	ldr	r1, [r0, #4]
 801c50a:	4b0c      	ldr	r3, [pc, #48]	@ (801c53c <cleanup_stdio+0x34>)
 801c50c:	4299      	cmp	r1, r3
 801c50e:	b510      	push	{r4, lr}
 801c510:	4604      	mov	r4, r0
 801c512:	d001      	beq.n	801c518 <cleanup_stdio+0x10>
 801c514:	f002 fa98 	bl	801ea48 <_fflush_r>
 801c518:	68a1      	ldr	r1, [r4, #8]
 801c51a:	4b09      	ldr	r3, [pc, #36]	@ (801c540 <cleanup_stdio+0x38>)
 801c51c:	4299      	cmp	r1, r3
 801c51e:	d002      	beq.n	801c526 <cleanup_stdio+0x1e>
 801c520:	4620      	mov	r0, r4
 801c522:	f002 fa91 	bl	801ea48 <_fflush_r>
 801c526:	68e1      	ldr	r1, [r4, #12]
 801c528:	4b06      	ldr	r3, [pc, #24]	@ (801c544 <cleanup_stdio+0x3c>)
 801c52a:	4299      	cmp	r1, r3
 801c52c:	d004      	beq.n	801c538 <cleanup_stdio+0x30>
 801c52e:	4620      	mov	r0, r4
 801c530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c534:	f002 ba88 	b.w	801ea48 <_fflush_r>
 801c538:	bd10      	pop	{r4, pc}
 801c53a:	bf00      	nop
 801c53c:	24002d40 	.word	0x24002d40
 801c540:	24002da8 	.word	0x24002da8
 801c544:	24002e10 	.word	0x24002e10

0801c548 <global_stdio_init.part.0>:
 801c548:	b510      	push	{r4, lr}
 801c54a:	4b0b      	ldr	r3, [pc, #44]	@ (801c578 <global_stdio_init.part.0+0x30>)
 801c54c:	4c0b      	ldr	r4, [pc, #44]	@ (801c57c <global_stdio_init.part.0+0x34>)
 801c54e:	4a0c      	ldr	r2, [pc, #48]	@ (801c580 <global_stdio_init.part.0+0x38>)
 801c550:	601a      	str	r2, [r3, #0]
 801c552:	4620      	mov	r0, r4
 801c554:	2200      	movs	r2, #0
 801c556:	2104      	movs	r1, #4
 801c558:	f7ff ff94 	bl	801c484 <std>
 801c55c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c560:	2201      	movs	r2, #1
 801c562:	2109      	movs	r1, #9
 801c564:	f7ff ff8e 	bl	801c484 <std>
 801c568:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c56c:	2202      	movs	r2, #2
 801c56e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c572:	2112      	movs	r1, #18
 801c574:	f7ff bf86 	b.w	801c484 <std>
 801c578:	24002e78 	.word	0x24002e78
 801c57c:	24002d40 	.word	0x24002d40
 801c580:	0801c4f1 	.word	0x0801c4f1

0801c584 <__sfp_lock_acquire>:
 801c584:	4801      	ldr	r0, [pc, #4]	@ (801c58c <__sfp_lock_acquire+0x8>)
 801c586:	f000 b9b8 	b.w	801c8fa <__retarget_lock_acquire_recursive>
 801c58a:	bf00      	nop
 801c58c:	24002e81 	.word	0x24002e81

0801c590 <__sfp_lock_release>:
 801c590:	4801      	ldr	r0, [pc, #4]	@ (801c598 <__sfp_lock_release+0x8>)
 801c592:	f000 b9b3 	b.w	801c8fc <__retarget_lock_release_recursive>
 801c596:	bf00      	nop
 801c598:	24002e81 	.word	0x24002e81

0801c59c <__sinit>:
 801c59c:	b510      	push	{r4, lr}
 801c59e:	4604      	mov	r4, r0
 801c5a0:	f7ff fff0 	bl	801c584 <__sfp_lock_acquire>
 801c5a4:	6a23      	ldr	r3, [r4, #32]
 801c5a6:	b11b      	cbz	r3, 801c5b0 <__sinit+0x14>
 801c5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c5ac:	f7ff bff0 	b.w	801c590 <__sfp_lock_release>
 801c5b0:	4b04      	ldr	r3, [pc, #16]	@ (801c5c4 <__sinit+0x28>)
 801c5b2:	6223      	str	r3, [r4, #32]
 801c5b4:	4b04      	ldr	r3, [pc, #16]	@ (801c5c8 <__sinit+0x2c>)
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d1f5      	bne.n	801c5a8 <__sinit+0xc>
 801c5bc:	f7ff ffc4 	bl	801c548 <global_stdio_init.part.0>
 801c5c0:	e7f2      	b.n	801c5a8 <__sinit+0xc>
 801c5c2:	bf00      	nop
 801c5c4:	0801c509 	.word	0x0801c509
 801c5c8:	24002e78 	.word	0x24002e78

0801c5cc <fiprintf>:
 801c5cc:	b40e      	push	{r1, r2, r3}
 801c5ce:	b503      	push	{r0, r1, lr}
 801c5d0:	4601      	mov	r1, r0
 801c5d2:	ab03      	add	r3, sp, #12
 801c5d4:	4805      	ldr	r0, [pc, #20]	@ (801c5ec <fiprintf+0x20>)
 801c5d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c5da:	6800      	ldr	r0, [r0, #0]
 801c5dc:	9301      	str	r3, [sp, #4]
 801c5de:	f001 ff49 	bl	801e474 <_vfiprintf_r>
 801c5e2:	b002      	add	sp, #8
 801c5e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801c5e8:	b003      	add	sp, #12
 801c5ea:	4770      	bx	lr
 801c5ec:	240005bc 	.word	0x240005bc

0801c5f0 <_fwalk_sglue>:
 801c5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c5f4:	4607      	mov	r7, r0
 801c5f6:	4688      	mov	r8, r1
 801c5f8:	4614      	mov	r4, r2
 801c5fa:	2600      	movs	r6, #0
 801c5fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c600:	f1b9 0901 	subs.w	r9, r9, #1
 801c604:	d505      	bpl.n	801c612 <_fwalk_sglue+0x22>
 801c606:	6824      	ldr	r4, [r4, #0]
 801c608:	2c00      	cmp	r4, #0
 801c60a:	d1f7      	bne.n	801c5fc <_fwalk_sglue+0xc>
 801c60c:	4630      	mov	r0, r6
 801c60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c612:	89ab      	ldrh	r3, [r5, #12]
 801c614:	2b01      	cmp	r3, #1
 801c616:	d907      	bls.n	801c628 <_fwalk_sglue+0x38>
 801c618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c61c:	3301      	adds	r3, #1
 801c61e:	d003      	beq.n	801c628 <_fwalk_sglue+0x38>
 801c620:	4629      	mov	r1, r5
 801c622:	4638      	mov	r0, r7
 801c624:	47c0      	blx	r8
 801c626:	4306      	orrs	r6, r0
 801c628:	3568      	adds	r5, #104	@ 0x68
 801c62a:	e7e9      	b.n	801c600 <_fwalk_sglue+0x10>

0801c62c <sniprintf>:
 801c62c:	b40c      	push	{r2, r3}
 801c62e:	b530      	push	{r4, r5, lr}
 801c630:	4b18      	ldr	r3, [pc, #96]	@ (801c694 <sniprintf+0x68>)
 801c632:	1e0c      	subs	r4, r1, #0
 801c634:	681d      	ldr	r5, [r3, #0]
 801c636:	b09d      	sub	sp, #116	@ 0x74
 801c638:	da08      	bge.n	801c64c <sniprintf+0x20>
 801c63a:	238b      	movs	r3, #139	@ 0x8b
 801c63c:	602b      	str	r3, [r5, #0]
 801c63e:	f04f 30ff 	mov.w	r0, #4294967295
 801c642:	b01d      	add	sp, #116	@ 0x74
 801c644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c648:	b002      	add	sp, #8
 801c64a:	4770      	bx	lr
 801c64c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c650:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c654:	f04f 0300 	mov.w	r3, #0
 801c658:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c65a:	bf14      	ite	ne
 801c65c:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c660:	4623      	moveq	r3, r4
 801c662:	9304      	str	r3, [sp, #16]
 801c664:	9307      	str	r3, [sp, #28]
 801c666:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c66a:	9002      	str	r0, [sp, #8]
 801c66c:	9006      	str	r0, [sp, #24]
 801c66e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c672:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c674:	ab21      	add	r3, sp, #132	@ 0x84
 801c676:	a902      	add	r1, sp, #8
 801c678:	4628      	mov	r0, r5
 801c67a:	9301      	str	r3, [sp, #4]
 801c67c:	f001 fc04 	bl	801de88 <_svfiprintf_r>
 801c680:	1c43      	adds	r3, r0, #1
 801c682:	bfbc      	itt	lt
 801c684:	238b      	movlt	r3, #139	@ 0x8b
 801c686:	602b      	strlt	r3, [r5, #0]
 801c688:	2c00      	cmp	r4, #0
 801c68a:	d0da      	beq.n	801c642 <sniprintf+0x16>
 801c68c:	9b02      	ldr	r3, [sp, #8]
 801c68e:	2200      	movs	r2, #0
 801c690:	701a      	strb	r2, [r3, #0]
 801c692:	e7d6      	b.n	801c642 <sniprintf+0x16>
 801c694:	240005bc 	.word	0x240005bc

0801c698 <siprintf>:
 801c698:	b40e      	push	{r1, r2, r3}
 801c69a:	b510      	push	{r4, lr}
 801c69c:	b09d      	sub	sp, #116	@ 0x74
 801c69e:	ab1f      	add	r3, sp, #124	@ 0x7c
 801c6a0:	9002      	str	r0, [sp, #8]
 801c6a2:	9006      	str	r0, [sp, #24]
 801c6a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c6a8:	480a      	ldr	r0, [pc, #40]	@ (801c6d4 <siprintf+0x3c>)
 801c6aa:	9107      	str	r1, [sp, #28]
 801c6ac:	9104      	str	r1, [sp, #16]
 801c6ae:	490a      	ldr	r1, [pc, #40]	@ (801c6d8 <siprintf+0x40>)
 801c6b0:	f853 2b04 	ldr.w	r2, [r3], #4
 801c6b4:	9105      	str	r1, [sp, #20]
 801c6b6:	2400      	movs	r4, #0
 801c6b8:	a902      	add	r1, sp, #8
 801c6ba:	6800      	ldr	r0, [r0, #0]
 801c6bc:	9301      	str	r3, [sp, #4]
 801c6be:	941b      	str	r4, [sp, #108]	@ 0x6c
 801c6c0:	f001 fbe2 	bl	801de88 <_svfiprintf_r>
 801c6c4:	9b02      	ldr	r3, [sp, #8]
 801c6c6:	701c      	strb	r4, [r3, #0]
 801c6c8:	b01d      	add	sp, #116	@ 0x74
 801c6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c6ce:	b003      	add	sp, #12
 801c6d0:	4770      	bx	lr
 801c6d2:	bf00      	nop
 801c6d4:	240005bc 	.word	0x240005bc
 801c6d8:	ffff0208 	.word	0xffff0208

0801c6dc <siscanf>:
 801c6dc:	b40e      	push	{r1, r2, r3}
 801c6de:	b570      	push	{r4, r5, r6, lr}
 801c6e0:	b09d      	sub	sp, #116	@ 0x74
 801c6e2:	ac21      	add	r4, sp, #132	@ 0x84
 801c6e4:	2500      	movs	r5, #0
 801c6e6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801c6ea:	f854 6b04 	ldr.w	r6, [r4], #4
 801c6ee:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c6f2:	951b      	str	r5, [sp, #108]	@ 0x6c
 801c6f4:	9002      	str	r0, [sp, #8]
 801c6f6:	9006      	str	r0, [sp, #24]
 801c6f8:	f7e3 fe42 	bl	8000380 <strlen>
 801c6fc:	4b0b      	ldr	r3, [pc, #44]	@ (801c72c <siscanf+0x50>)
 801c6fe:	9003      	str	r0, [sp, #12]
 801c700:	9007      	str	r0, [sp, #28]
 801c702:	480b      	ldr	r0, [pc, #44]	@ (801c730 <siscanf+0x54>)
 801c704:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c706:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c70a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c70e:	4632      	mov	r2, r6
 801c710:	4623      	mov	r3, r4
 801c712:	a902      	add	r1, sp, #8
 801c714:	6800      	ldr	r0, [r0, #0]
 801c716:	950f      	str	r5, [sp, #60]	@ 0x3c
 801c718:	9514      	str	r5, [sp, #80]	@ 0x50
 801c71a:	9401      	str	r4, [sp, #4]
 801c71c:	f001 fd0a 	bl	801e134 <__ssvfiscanf_r>
 801c720:	b01d      	add	sp, #116	@ 0x74
 801c722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c726:	b003      	add	sp, #12
 801c728:	4770      	bx	lr
 801c72a:	bf00      	nop
 801c72c:	0801c757 	.word	0x0801c757
 801c730:	240005bc 	.word	0x240005bc

0801c734 <__sread>:
 801c734:	b510      	push	{r4, lr}
 801c736:	460c      	mov	r4, r1
 801c738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c73c:	f000 f88e 	bl	801c85c <_read_r>
 801c740:	2800      	cmp	r0, #0
 801c742:	bfab      	itete	ge
 801c744:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c746:	89a3      	ldrhlt	r3, [r4, #12]
 801c748:	181b      	addge	r3, r3, r0
 801c74a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c74e:	bfac      	ite	ge
 801c750:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c752:	81a3      	strhlt	r3, [r4, #12]
 801c754:	bd10      	pop	{r4, pc}

0801c756 <__seofread>:
 801c756:	2000      	movs	r0, #0
 801c758:	4770      	bx	lr

0801c75a <__swrite>:
 801c75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c75e:	461f      	mov	r7, r3
 801c760:	898b      	ldrh	r3, [r1, #12]
 801c762:	05db      	lsls	r3, r3, #23
 801c764:	4605      	mov	r5, r0
 801c766:	460c      	mov	r4, r1
 801c768:	4616      	mov	r6, r2
 801c76a:	d505      	bpl.n	801c778 <__swrite+0x1e>
 801c76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c770:	2302      	movs	r3, #2
 801c772:	2200      	movs	r2, #0
 801c774:	f000 f860 	bl	801c838 <_lseek_r>
 801c778:	89a3      	ldrh	r3, [r4, #12]
 801c77a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c77e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c782:	81a3      	strh	r3, [r4, #12]
 801c784:	4632      	mov	r2, r6
 801c786:	463b      	mov	r3, r7
 801c788:	4628      	mov	r0, r5
 801c78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c78e:	f000 b877 	b.w	801c880 <_write_r>

0801c792 <__sseek>:
 801c792:	b510      	push	{r4, lr}
 801c794:	460c      	mov	r4, r1
 801c796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c79a:	f000 f84d 	bl	801c838 <_lseek_r>
 801c79e:	1c43      	adds	r3, r0, #1
 801c7a0:	89a3      	ldrh	r3, [r4, #12]
 801c7a2:	bf15      	itete	ne
 801c7a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c7a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c7aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c7ae:	81a3      	strheq	r3, [r4, #12]
 801c7b0:	bf18      	it	ne
 801c7b2:	81a3      	strhne	r3, [r4, #12]
 801c7b4:	bd10      	pop	{r4, pc}

0801c7b6 <__sclose>:
 801c7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7ba:	f000 b82d 	b.w	801c818 <_close_r>
	...

0801c7c0 <_vsiprintf_r>:
 801c7c0:	b510      	push	{r4, lr}
 801c7c2:	b09a      	sub	sp, #104	@ 0x68
 801c7c4:	2400      	movs	r4, #0
 801c7c6:	9100      	str	r1, [sp, #0]
 801c7c8:	9104      	str	r1, [sp, #16]
 801c7ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c7ce:	9105      	str	r1, [sp, #20]
 801c7d0:	9102      	str	r1, [sp, #8]
 801c7d2:	4905      	ldr	r1, [pc, #20]	@ (801c7e8 <_vsiprintf_r+0x28>)
 801c7d4:	9103      	str	r1, [sp, #12]
 801c7d6:	4669      	mov	r1, sp
 801c7d8:	9419      	str	r4, [sp, #100]	@ 0x64
 801c7da:	f001 fb55 	bl	801de88 <_svfiprintf_r>
 801c7de:	9b00      	ldr	r3, [sp, #0]
 801c7e0:	701c      	strb	r4, [r3, #0]
 801c7e2:	b01a      	add	sp, #104	@ 0x68
 801c7e4:	bd10      	pop	{r4, pc}
 801c7e6:	bf00      	nop
 801c7e8:	ffff0208 	.word	0xffff0208

0801c7ec <vsiprintf>:
 801c7ec:	4613      	mov	r3, r2
 801c7ee:	460a      	mov	r2, r1
 801c7f0:	4601      	mov	r1, r0
 801c7f2:	4802      	ldr	r0, [pc, #8]	@ (801c7fc <vsiprintf+0x10>)
 801c7f4:	6800      	ldr	r0, [r0, #0]
 801c7f6:	f7ff bfe3 	b.w	801c7c0 <_vsiprintf_r>
 801c7fa:	bf00      	nop
 801c7fc:	240005bc 	.word	0x240005bc

0801c800 <memset>:
 801c800:	4402      	add	r2, r0
 801c802:	4603      	mov	r3, r0
 801c804:	4293      	cmp	r3, r2
 801c806:	d100      	bne.n	801c80a <memset+0xa>
 801c808:	4770      	bx	lr
 801c80a:	f803 1b01 	strb.w	r1, [r3], #1
 801c80e:	e7f9      	b.n	801c804 <memset+0x4>

0801c810 <_localeconv_r>:
 801c810:	4800      	ldr	r0, [pc, #0]	@ (801c814 <_localeconv_r+0x4>)
 801c812:	4770      	bx	lr
 801c814:	240006fc 	.word	0x240006fc

0801c818 <_close_r>:
 801c818:	b538      	push	{r3, r4, r5, lr}
 801c81a:	4d06      	ldr	r5, [pc, #24]	@ (801c834 <_close_r+0x1c>)
 801c81c:	2300      	movs	r3, #0
 801c81e:	4604      	mov	r4, r0
 801c820:	4608      	mov	r0, r1
 801c822:	602b      	str	r3, [r5, #0]
 801c824:	f002 fc26 	bl	801f074 <_close>
 801c828:	1c43      	adds	r3, r0, #1
 801c82a:	d102      	bne.n	801c832 <_close_r+0x1a>
 801c82c:	682b      	ldr	r3, [r5, #0]
 801c82e:	b103      	cbz	r3, 801c832 <_close_r+0x1a>
 801c830:	6023      	str	r3, [r4, #0]
 801c832:	bd38      	pop	{r3, r4, r5, pc}
 801c834:	24002e7c 	.word	0x24002e7c

0801c838 <_lseek_r>:
 801c838:	b538      	push	{r3, r4, r5, lr}
 801c83a:	4d07      	ldr	r5, [pc, #28]	@ (801c858 <_lseek_r+0x20>)
 801c83c:	4604      	mov	r4, r0
 801c83e:	4608      	mov	r0, r1
 801c840:	4611      	mov	r1, r2
 801c842:	2200      	movs	r2, #0
 801c844:	602a      	str	r2, [r5, #0]
 801c846:	461a      	mov	r2, r3
 801c848:	f002 fc3c 	bl	801f0c4 <_lseek>
 801c84c:	1c43      	adds	r3, r0, #1
 801c84e:	d102      	bne.n	801c856 <_lseek_r+0x1e>
 801c850:	682b      	ldr	r3, [r5, #0]
 801c852:	b103      	cbz	r3, 801c856 <_lseek_r+0x1e>
 801c854:	6023      	str	r3, [r4, #0]
 801c856:	bd38      	pop	{r3, r4, r5, pc}
 801c858:	24002e7c 	.word	0x24002e7c

0801c85c <_read_r>:
 801c85c:	b538      	push	{r3, r4, r5, lr}
 801c85e:	4d07      	ldr	r5, [pc, #28]	@ (801c87c <_read_r+0x20>)
 801c860:	4604      	mov	r4, r0
 801c862:	4608      	mov	r0, r1
 801c864:	4611      	mov	r1, r2
 801c866:	2200      	movs	r2, #0
 801c868:	602a      	str	r2, [r5, #0]
 801c86a:	461a      	mov	r2, r3
 801c86c:	f002 fc32 	bl	801f0d4 <_read>
 801c870:	1c43      	adds	r3, r0, #1
 801c872:	d102      	bne.n	801c87a <_read_r+0x1e>
 801c874:	682b      	ldr	r3, [r5, #0]
 801c876:	b103      	cbz	r3, 801c87a <_read_r+0x1e>
 801c878:	6023      	str	r3, [r4, #0]
 801c87a:	bd38      	pop	{r3, r4, r5, pc}
 801c87c:	24002e7c 	.word	0x24002e7c

0801c880 <_write_r>:
 801c880:	b538      	push	{r3, r4, r5, lr}
 801c882:	4d07      	ldr	r5, [pc, #28]	@ (801c8a0 <_write_r+0x20>)
 801c884:	4604      	mov	r4, r0
 801c886:	4608      	mov	r0, r1
 801c888:	4611      	mov	r1, r2
 801c88a:	2200      	movs	r2, #0
 801c88c:	602a      	str	r2, [r5, #0]
 801c88e:	461a      	mov	r2, r3
 801c890:	f002 fc28 	bl	801f0e4 <_write>
 801c894:	1c43      	adds	r3, r0, #1
 801c896:	d102      	bne.n	801c89e <_write_r+0x1e>
 801c898:	682b      	ldr	r3, [r5, #0]
 801c89a:	b103      	cbz	r3, 801c89e <_write_r+0x1e>
 801c89c:	6023      	str	r3, [r4, #0]
 801c89e:	bd38      	pop	{r3, r4, r5, pc}
 801c8a0:	24002e7c 	.word	0x24002e7c

0801c8a4 <__errno>:
 801c8a4:	4b01      	ldr	r3, [pc, #4]	@ (801c8ac <__errno+0x8>)
 801c8a6:	6818      	ldr	r0, [r3, #0]
 801c8a8:	4770      	bx	lr
 801c8aa:	bf00      	nop
 801c8ac:	240005bc 	.word	0x240005bc

0801c8b0 <__libc_init_array>:
 801c8b0:	b570      	push	{r4, r5, r6, lr}
 801c8b2:	4d0d      	ldr	r5, [pc, #52]	@ (801c8e8 <__libc_init_array+0x38>)
 801c8b4:	4c0d      	ldr	r4, [pc, #52]	@ (801c8ec <__libc_init_array+0x3c>)
 801c8b6:	1b64      	subs	r4, r4, r5
 801c8b8:	10a4      	asrs	r4, r4, #2
 801c8ba:	2600      	movs	r6, #0
 801c8bc:	42a6      	cmp	r6, r4
 801c8be:	d109      	bne.n	801c8d4 <__libc_init_array+0x24>
 801c8c0:	4d0b      	ldr	r5, [pc, #44]	@ (801c8f0 <__libc_init_array+0x40>)
 801c8c2:	4c0c      	ldr	r4, [pc, #48]	@ (801c8f4 <__libc_init_array+0x44>)
 801c8c4:	f002 fc18 	bl	801f0f8 <_init>
 801c8c8:	1b64      	subs	r4, r4, r5
 801c8ca:	10a4      	asrs	r4, r4, #2
 801c8cc:	2600      	movs	r6, #0
 801c8ce:	42a6      	cmp	r6, r4
 801c8d0:	d105      	bne.n	801c8de <__libc_init_array+0x2e>
 801c8d2:	bd70      	pop	{r4, r5, r6, pc}
 801c8d4:	f855 3b04 	ldr.w	r3, [r5], #4
 801c8d8:	4798      	blx	r3
 801c8da:	3601      	adds	r6, #1
 801c8dc:	e7ee      	b.n	801c8bc <__libc_init_array+0xc>
 801c8de:	f855 3b04 	ldr.w	r3, [r5], #4
 801c8e2:	4798      	blx	r3
 801c8e4:	3601      	adds	r6, #1
 801c8e6:	e7f2      	b.n	801c8ce <__libc_init_array+0x1e>
 801c8e8:	080214f8 	.word	0x080214f8
 801c8ec:	080214f8 	.word	0x080214f8
 801c8f0:	080214f8 	.word	0x080214f8
 801c8f4:	08021500 	.word	0x08021500

0801c8f8 <__retarget_lock_init_recursive>:
 801c8f8:	4770      	bx	lr

0801c8fa <__retarget_lock_acquire_recursive>:
 801c8fa:	4770      	bx	lr

0801c8fc <__retarget_lock_release_recursive>:
 801c8fc:	4770      	bx	lr

0801c8fe <abort>:
 801c8fe:	b508      	push	{r3, lr}
 801c900:	2006      	movs	r0, #6
 801c902:	f002 fa13 	bl	801ed2c <raise>
 801c906:	2001      	movs	r0, #1
 801c908:	f002 fbf4 	bl	801f0f4 <_exit>

0801c90c <quorem>:
 801c90c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c910:	6903      	ldr	r3, [r0, #16]
 801c912:	690c      	ldr	r4, [r1, #16]
 801c914:	42a3      	cmp	r3, r4
 801c916:	4607      	mov	r7, r0
 801c918:	db7e      	blt.n	801ca18 <quorem+0x10c>
 801c91a:	3c01      	subs	r4, #1
 801c91c:	f101 0814 	add.w	r8, r1, #20
 801c920:	00a3      	lsls	r3, r4, #2
 801c922:	f100 0514 	add.w	r5, r0, #20
 801c926:	9300      	str	r3, [sp, #0]
 801c928:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c92c:	9301      	str	r3, [sp, #4]
 801c92e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c932:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c936:	3301      	adds	r3, #1
 801c938:	429a      	cmp	r2, r3
 801c93a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c93e:	fbb2 f6f3 	udiv	r6, r2, r3
 801c942:	d32e      	bcc.n	801c9a2 <quorem+0x96>
 801c944:	f04f 0a00 	mov.w	sl, #0
 801c948:	46c4      	mov	ip, r8
 801c94a:	46ae      	mov	lr, r5
 801c94c:	46d3      	mov	fp, sl
 801c94e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c952:	b298      	uxth	r0, r3
 801c954:	fb06 a000 	mla	r0, r6, r0, sl
 801c958:	0c02      	lsrs	r2, r0, #16
 801c95a:	0c1b      	lsrs	r3, r3, #16
 801c95c:	fb06 2303 	mla	r3, r6, r3, r2
 801c960:	f8de 2000 	ldr.w	r2, [lr]
 801c964:	b280      	uxth	r0, r0
 801c966:	b292      	uxth	r2, r2
 801c968:	1a12      	subs	r2, r2, r0
 801c96a:	445a      	add	r2, fp
 801c96c:	f8de 0000 	ldr.w	r0, [lr]
 801c970:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c974:	b29b      	uxth	r3, r3
 801c976:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801c97a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801c97e:	b292      	uxth	r2, r2
 801c980:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801c984:	45e1      	cmp	r9, ip
 801c986:	f84e 2b04 	str.w	r2, [lr], #4
 801c98a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801c98e:	d2de      	bcs.n	801c94e <quorem+0x42>
 801c990:	9b00      	ldr	r3, [sp, #0]
 801c992:	58eb      	ldr	r3, [r5, r3]
 801c994:	b92b      	cbnz	r3, 801c9a2 <quorem+0x96>
 801c996:	9b01      	ldr	r3, [sp, #4]
 801c998:	3b04      	subs	r3, #4
 801c99a:	429d      	cmp	r5, r3
 801c99c:	461a      	mov	r2, r3
 801c99e:	d32f      	bcc.n	801ca00 <quorem+0xf4>
 801c9a0:	613c      	str	r4, [r7, #16]
 801c9a2:	4638      	mov	r0, r7
 801c9a4:	f001 f90c 	bl	801dbc0 <__mcmp>
 801c9a8:	2800      	cmp	r0, #0
 801c9aa:	db25      	blt.n	801c9f8 <quorem+0xec>
 801c9ac:	4629      	mov	r1, r5
 801c9ae:	2000      	movs	r0, #0
 801c9b0:	f858 2b04 	ldr.w	r2, [r8], #4
 801c9b4:	f8d1 c000 	ldr.w	ip, [r1]
 801c9b8:	fa1f fe82 	uxth.w	lr, r2
 801c9bc:	fa1f f38c 	uxth.w	r3, ip
 801c9c0:	eba3 030e 	sub.w	r3, r3, lr
 801c9c4:	4403      	add	r3, r0
 801c9c6:	0c12      	lsrs	r2, r2, #16
 801c9c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801c9cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801c9d0:	b29b      	uxth	r3, r3
 801c9d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c9d6:	45c1      	cmp	r9, r8
 801c9d8:	f841 3b04 	str.w	r3, [r1], #4
 801c9dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c9e0:	d2e6      	bcs.n	801c9b0 <quorem+0xa4>
 801c9e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c9e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c9ea:	b922      	cbnz	r2, 801c9f6 <quorem+0xea>
 801c9ec:	3b04      	subs	r3, #4
 801c9ee:	429d      	cmp	r5, r3
 801c9f0:	461a      	mov	r2, r3
 801c9f2:	d30b      	bcc.n	801ca0c <quorem+0x100>
 801c9f4:	613c      	str	r4, [r7, #16]
 801c9f6:	3601      	adds	r6, #1
 801c9f8:	4630      	mov	r0, r6
 801c9fa:	b003      	add	sp, #12
 801c9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca00:	6812      	ldr	r2, [r2, #0]
 801ca02:	3b04      	subs	r3, #4
 801ca04:	2a00      	cmp	r2, #0
 801ca06:	d1cb      	bne.n	801c9a0 <quorem+0x94>
 801ca08:	3c01      	subs	r4, #1
 801ca0a:	e7c6      	b.n	801c99a <quorem+0x8e>
 801ca0c:	6812      	ldr	r2, [r2, #0]
 801ca0e:	3b04      	subs	r3, #4
 801ca10:	2a00      	cmp	r2, #0
 801ca12:	d1ef      	bne.n	801c9f4 <quorem+0xe8>
 801ca14:	3c01      	subs	r4, #1
 801ca16:	e7ea      	b.n	801c9ee <quorem+0xe2>
 801ca18:	2000      	movs	r0, #0
 801ca1a:	e7ee      	b.n	801c9fa <quorem+0xee>
 801ca1c:	0000      	movs	r0, r0
	...

0801ca20 <_dtoa_r>:
 801ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca24:	ed2d 8b02 	vpush	{d8}
 801ca28:	69c7      	ldr	r7, [r0, #28]
 801ca2a:	b091      	sub	sp, #68	@ 0x44
 801ca2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ca30:	ec55 4b10 	vmov	r4, r5, d0
 801ca34:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801ca36:	9107      	str	r1, [sp, #28]
 801ca38:	4681      	mov	r9, r0
 801ca3a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca3c:	930d      	str	r3, [sp, #52]	@ 0x34
 801ca3e:	b97f      	cbnz	r7, 801ca60 <_dtoa_r+0x40>
 801ca40:	2010      	movs	r0, #16
 801ca42:	f000 fd95 	bl	801d570 <malloc>
 801ca46:	4602      	mov	r2, r0
 801ca48:	f8c9 001c 	str.w	r0, [r9, #28]
 801ca4c:	b920      	cbnz	r0, 801ca58 <_dtoa_r+0x38>
 801ca4e:	4ba0      	ldr	r3, [pc, #640]	@ (801ccd0 <_dtoa_r+0x2b0>)
 801ca50:	21ef      	movs	r1, #239	@ 0xef
 801ca52:	48a0      	ldr	r0, [pc, #640]	@ (801ccd4 <_dtoa_r+0x2b4>)
 801ca54:	f7ff f848 	bl	801bae8 <__assert_func>
 801ca58:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801ca5c:	6007      	str	r7, [r0, #0]
 801ca5e:	60c7      	str	r7, [r0, #12]
 801ca60:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801ca64:	6819      	ldr	r1, [r3, #0]
 801ca66:	b159      	cbz	r1, 801ca80 <_dtoa_r+0x60>
 801ca68:	685a      	ldr	r2, [r3, #4]
 801ca6a:	604a      	str	r2, [r1, #4]
 801ca6c:	2301      	movs	r3, #1
 801ca6e:	4093      	lsls	r3, r2
 801ca70:	608b      	str	r3, [r1, #8]
 801ca72:	4648      	mov	r0, r9
 801ca74:	f000 fe72 	bl	801d75c <_Bfree>
 801ca78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801ca7c:	2200      	movs	r2, #0
 801ca7e:	601a      	str	r2, [r3, #0]
 801ca80:	1e2b      	subs	r3, r5, #0
 801ca82:	bfbb      	ittet	lt
 801ca84:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801ca88:	9303      	strlt	r3, [sp, #12]
 801ca8a:	2300      	movge	r3, #0
 801ca8c:	2201      	movlt	r2, #1
 801ca8e:	bfac      	ite	ge
 801ca90:	6033      	strge	r3, [r6, #0]
 801ca92:	6032      	strlt	r2, [r6, #0]
 801ca94:	4b90      	ldr	r3, [pc, #576]	@ (801ccd8 <_dtoa_r+0x2b8>)
 801ca96:	9e03      	ldr	r6, [sp, #12]
 801ca98:	43b3      	bics	r3, r6
 801ca9a:	d110      	bne.n	801cabe <_dtoa_r+0x9e>
 801ca9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ca9e:	f242 730f 	movw	r3, #9999	@ 0x270f
 801caa2:	6013      	str	r3, [r2, #0]
 801caa4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801caa8:	4323      	orrs	r3, r4
 801caaa:	f000 84e6 	beq.w	801d47a <_dtoa_r+0xa5a>
 801caae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cab0:	4f8a      	ldr	r7, [pc, #552]	@ (801ccdc <_dtoa_r+0x2bc>)
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	f000 84e8 	beq.w	801d488 <_dtoa_r+0xa68>
 801cab8:	1cfb      	adds	r3, r7, #3
 801caba:	f000 bce3 	b.w	801d484 <_dtoa_r+0xa64>
 801cabe:	ed9d 8b02 	vldr	d8, [sp, #8]
 801cac2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801cac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801caca:	d10a      	bne.n	801cae2 <_dtoa_r+0xc2>
 801cacc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cace:	2301      	movs	r3, #1
 801cad0:	6013      	str	r3, [r2, #0]
 801cad2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cad4:	b113      	cbz	r3, 801cadc <_dtoa_r+0xbc>
 801cad6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801cad8:	4b81      	ldr	r3, [pc, #516]	@ (801cce0 <_dtoa_r+0x2c0>)
 801cada:	6013      	str	r3, [r2, #0]
 801cadc:	4f81      	ldr	r7, [pc, #516]	@ (801cce4 <_dtoa_r+0x2c4>)
 801cade:	f000 bcd3 	b.w	801d488 <_dtoa_r+0xa68>
 801cae2:	aa0e      	add	r2, sp, #56	@ 0x38
 801cae4:	a90f      	add	r1, sp, #60	@ 0x3c
 801cae6:	4648      	mov	r0, r9
 801cae8:	eeb0 0b48 	vmov.f64	d0, d8
 801caec:	f001 f918 	bl	801dd20 <__d2b>
 801caf0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801caf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801caf6:	9001      	str	r0, [sp, #4]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d045      	beq.n	801cb88 <_dtoa_r+0x168>
 801cafc:	eeb0 7b48 	vmov.f64	d7, d8
 801cb00:	ee18 1a90 	vmov	r1, s17
 801cb04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801cb08:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801cb0c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801cb10:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801cb14:	2500      	movs	r5, #0
 801cb16:	ee07 1a90 	vmov	s15, r1
 801cb1a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801cb1e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801ccb8 <_dtoa_r+0x298>
 801cb22:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cb26:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801ccc0 <_dtoa_r+0x2a0>
 801cb2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801cb2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801ccc8 <_dtoa_r+0x2a8>
 801cb32:	ee07 3a90 	vmov	s15, r3
 801cb36:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801cb3a:	eeb0 7b46 	vmov.f64	d7, d6
 801cb3e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801cb42:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801cb46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801cb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb4e:	ee16 8a90 	vmov	r8, s13
 801cb52:	d508      	bpl.n	801cb66 <_dtoa_r+0x146>
 801cb54:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801cb58:	eeb4 6b47 	vcmp.f64	d6, d7
 801cb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb60:	bf18      	it	ne
 801cb62:	f108 38ff 	addne.w	r8, r8, #4294967295
 801cb66:	f1b8 0f16 	cmp.w	r8, #22
 801cb6a:	d82b      	bhi.n	801cbc4 <_dtoa_r+0x1a4>
 801cb6c:	495e      	ldr	r1, [pc, #376]	@ (801cce8 <_dtoa_r+0x2c8>)
 801cb6e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801cb72:	ed91 7b00 	vldr	d7, [r1]
 801cb76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801cb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb7e:	d501      	bpl.n	801cb84 <_dtoa_r+0x164>
 801cb80:	f108 38ff 	add.w	r8, r8, #4294967295
 801cb84:	2100      	movs	r1, #0
 801cb86:	e01e      	b.n	801cbc6 <_dtoa_r+0x1a6>
 801cb88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb8a:	4413      	add	r3, r2
 801cb8c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801cb90:	2920      	cmp	r1, #32
 801cb92:	bfc1      	itttt	gt
 801cb94:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801cb98:	408e      	lslgt	r6, r1
 801cb9a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801cb9e:	fa24 f101 	lsrgt.w	r1, r4, r1
 801cba2:	bfd6      	itet	le
 801cba4:	f1c1 0120 	rsble	r1, r1, #32
 801cba8:	4331      	orrgt	r1, r6
 801cbaa:	fa04 f101 	lslle.w	r1, r4, r1
 801cbae:	ee07 1a90 	vmov	s15, r1
 801cbb2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801cbb6:	3b01      	subs	r3, #1
 801cbb8:	ee17 1a90 	vmov	r1, s15
 801cbbc:	2501      	movs	r5, #1
 801cbbe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801cbc2:	e7a8      	b.n	801cb16 <_dtoa_r+0xf6>
 801cbc4:	2101      	movs	r1, #1
 801cbc6:	1ad2      	subs	r2, r2, r3
 801cbc8:	1e53      	subs	r3, r2, #1
 801cbca:	9306      	str	r3, [sp, #24]
 801cbcc:	bf45      	ittet	mi
 801cbce:	f1c2 0301 	rsbmi	r3, r2, #1
 801cbd2:	9304      	strmi	r3, [sp, #16]
 801cbd4:	2300      	movpl	r3, #0
 801cbd6:	2300      	movmi	r3, #0
 801cbd8:	bf4c      	ite	mi
 801cbda:	9306      	strmi	r3, [sp, #24]
 801cbdc:	9304      	strpl	r3, [sp, #16]
 801cbde:	f1b8 0f00 	cmp.w	r8, #0
 801cbe2:	910c      	str	r1, [sp, #48]	@ 0x30
 801cbe4:	db18      	blt.n	801cc18 <_dtoa_r+0x1f8>
 801cbe6:	9b06      	ldr	r3, [sp, #24]
 801cbe8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801cbec:	4443      	add	r3, r8
 801cbee:	9306      	str	r3, [sp, #24]
 801cbf0:	2300      	movs	r3, #0
 801cbf2:	9a07      	ldr	r2, [sp, #28]
 801cbf4:	2a09      	cmp	r2, #9
 801cbf6:	d845      	bhi.n	801cc84 <_dtoa_r+0x264>
 801cbf8:	2a05      	cmp	r2, #5
 801cbfa:	bfc4      	itt	gt
 801cbfc:	3a04      	subgt	r2, #4
 801cbfe:	9207      	strgt	r2, [sp, #28]
 801cc00:	9a07      	ldr	r2, [sp, #28]
 801cc02:	f1a2 0202 	sub.w	r2, r2, #2
 801cc06:	bfcc      	ite	gt
 801cc08:	2400      	movgt	r4, #0
 801cc0a:	2401      	movle	r4, #1
 801cc0c:	2a03      	cmp	r2, #3
 801cc0e:	d844      	bhi.n	801cc9a <_dtoa_r+0x27a>
 801cc10:	e8df f002 	tbb	[pc, r2]
 801cc14:	0b173634 	.word	0x0b173634
 801cc18:	9b04      	ldr	r3, [sp, #16]
 801cc1a:	2200      	movs	r2, #0
 801cc1c:	eba3 0308 	sub.w	r3, r3, r8
 801cc20:	9304      	str	r3, [sp, #16]
 801cc22:	920a      	str	r2, [sp, #40]	@ 0x28
 801cc24:	f1c8 0300 	rsb	r3, r8, #0
 801cc28:	e7e3      	b.n	801cbf2 <_dtoa_r+0x1d2>
 801cc2a:	2201      	movs	r2, #1
 801cc2c:	9208      	str	r2, [sp, #32]
 801cc2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cc30:	eb08 0b02 	add.w	fp, r8, r2
 801cc34:	f10b 0a01 	add.w	sl, fp, #1
 801cc38:	4652      	mov	r2, sl
 801cc3a:	2a01      	cmp	r2, #1
 801cc3c:	bfb8      	it	lt
 801cc3e:	2201      	movlt	r2, #1
 801cc40:	e006      	b.n	801cc50 <_dtoa_r+0x230>
 801cc42:	2201      	movs	r2, #1
 801cc44:	9208      	str	r2, [sp, #32]
 801cc46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cc48:	2a00      	cmp	r2, #0
 801cc4a:	dd29      	ble.n	801cca0 <_dtoa_r+0x280>
 801cc4c:	4693      	mov	fp, r2
 801cc4e:	4692      	mov	sl, r2
 801cc50:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801cc54:	2100      	movs	r1, #0
 801cc56:	2004      	movs	r0, #4
 801cc58:	f100 0614 	add.w	r6, r0, #20
 801cc5c:	4296      	cmp	r6, r2
 801cc5e:	d926      	bls.n	801ccae <_dtoa_r+0x28e>
 801cc60:	6079      	str	r1, [r7, #4]
 801cc62:	4648      	mov	r0, r9
 801cc64:	9305      	str	r3, [sp, #20]
 801cc66:	f000 fd39 	bl	801d6dc <_Balloc>
 801cc6a:	9b05      	ldr	r3, [sp, #20]
 801cc6c:	4607      	mov	r7, r0
 801cc6e:	2800      	cmp	r0, #0
 801cc70:	d13e      	bne.n	801ccf0 <_dtoa_r+0x2d0>
 801cc72:	4b1e      	ldr	r3, [pc, #120]	@ (801ccec <_dtoa_r+0x2cc>)
 801cc74:	4602      	mov	r2, r0
 801cc76:	f240 11af 	movw	r1, #431	@ 0x1af
 801cc7a:	e6ea      	b.n	801ca52 <_dtoa_r+0x32>
 801cc7c:	2200      	movs	r2, #0
 801cc7e:	e7e1      	b.n	801cc44 <_dtoa_r+0x224>
 801cc80:	2200      	movs	r2, #0
 801cc82:	e7d3      	b.n	801cc2c <_dtoa_r+0x20c>
 801cc84:	2401      	movs	r4, #1
 801cc86:	2200      	movs	r2, #0
 801cc88:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801cc8c:	f04f 3bff 	mov.w	fp, #4294967295
 801cc90:	2100      	movs	r1, #0
 801cc92:	46da      	mov	sl, fp
 801cc94:	2212      	movs	r2, #18
 801cc96:	9109      	str	r1, [sp, #36]	@ 0x24
 801cc98:	e7da      	b.n	801cc50 <_dtoa_r+0x230>
 801cc9a:	2201      	movs	r2, #1
 801cc9c:	9208      	str	r2, [sp, #32]
 801cc9e:	e7f5      	b.n	801cc8c <_dtoa_r+0x26c>
 801cca0:	f04f 0b01 	mov.w	fp, #1
 801cca4:	46da      	mov	sl, fp
 801cca6:	465a      	mov	r2, fp
 801cca8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801ccac:	e7d0      	b.n	801cc50 <_dtoa_r+0x230>
 801ccae:	3101      	adds	r1, #1
 801ccb0:	0040      	lsls	r0, r0, #1
 801ccb2:	e7d1      	b.n	801cc58 <_dtoa_r+0x238>
 801ccb4:	f3af 8000 	nop.w
 801ccb8:	636f4361 	.word	0x636f4361
 801ccbc:	3fd287a7 	.word	0x3fd287a7
 801ccc0:	8b60c8b3 	.word	0x8b60c8b3
 801ccc4:	3fc68a28 	.word	0x3fc68a28
 801ccc8:	509f79fb 	.word	0x509f79fb
 801cccc:	3fd34413 	.word	0x3fd34413
 801ccd0:	080211df 	.word	0x080211df
 801ccd4:	080211f6 	.word	0x080211f6
 801ccd8:	7ff00000 	.word	0x7ff00000
 801ccdc:	080211db 	.word	0x080211db
 801cce0:	080212e0 	.word	0x080212e0
 801cce4:	080212df 	.word	0x080212df
 801cce8:	08021428 	.word	0x08021428
 801ccec:	0802124e 	.word	0x0802124e
 801ccf0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801ccf4:	f1ba 0f0e 	cmp.w	sl, #14
 801ccf8:	6010      	str	r0, [r2, #0]
 801ccfa:	d86e      	bhi.n	801cdda <_dtoa_r+0x3ba>
 801ccfc:	2c00      	cmp	r4, #0
 801ccfe:	d06c      	beq.n	801cdda <_dtoa_r+0x3ba>
 801cd00:	f1b8 0f00 	cmp.w	r8, #0
 801cd04:	f340 80b4 	ble.w	801ce70 <_dtoa_r+0x450>
 801cd08:	4ac8      	ldr	r2, [pc, #800]	@ (801d02c <_dtoa_r+0x60c>)
 801cd0a:	f008 010f 	and.w	r1, r8, #15
 801cd0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801cd12:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801cd16:	ed92 7b00 	vldr	d7, [r2]
 801cd1a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801cd1e:	f000 809b 	beq.w	801ce58 <_dtoa_r+0x438>
 801cd22:	4ac3      	ldr	r2, [pc, #780]	@ (801d030 <_dtoa_r+0x610>)
 801cd24:	ed92 6b08 	vldr	d6, [r2, #32]
 801cd28:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801cd2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801cd30:	f001 010f 	and.w	r1, r1, #15
 801cd34:	2203      	movs	r2, #3
 801cd36:	48be      	ldr	r0, [pc, #760]	@ (801d030 <_dtoa_r+0x610>)
 801cd38:	2900      	cmp	r1, #0
 801cd3a:	f040 808f 	bne.w	801ce5c <_dtoa_r+0x43c>
 801cd3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801cd42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801cd46:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cd4a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801cd4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cd50:	2900      	cmp	r1, #0
 801cd52:	f000 80b3 	beq.w	801cebc <_dtoa_r+0x49c>
 801cd56:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801cd5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801cd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd62:	f140 80ab 	bpl.w	801cebc <_dtoa_r+0x49c>
 801cd66:	f1ba 0f00 	cmp.w	sl, #0
 801cd6a:	f000 80a7 	beq.w	801cebc <_dtoa_r+0x49c>
 801cd6e:	f1bb 0f00 	cmp.w	fp, #0
 801cd72:	dd30      	ble.n	801cdd6 <_dtoa_r+0x3b6>
 801cd74:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801cd78:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cd7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cd80:	f108 31ff 	add.w	r1, r8, #4294967295
 801cd84:	9105      	str	r1, [sp, #20]
 801cd86:	3201      	adds	r2, #1
 801cd88:	465c      	mov	r4, fp
 801cd8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801cd8e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801cd92:	ee07 2a90 	vmov	s15, r2
 801cd96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cd9a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801cd9e:	ee15 2a90 	vmov	r2, s11
 801cda2:	ec51 0b15 	vmov	r0, r1, d5
 801cda6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801cdaa:	2c00      	cmp	r4, #0
 801cdac:	f040 808a 	bne.w	801cec4 <_dtoa_r+0x4a4>
 801cdb0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801cdb4:	ee36 6b47 	vsub.f64	d6, d6, d7
 801cdb8:	ec41 0b17 	vmov	d7, r0, r1
 801cdbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdc4:	f300 826a 	bgt.w	801d29c <_dtoa_r+0x87c>
 801cdc8:	eeb1 7b47 	vneg.f64	d7, d7
 801cdcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdd4:	d423      	bmi.n	801ce1e <_dtoa_r+0x3fe>
 801cdd6:	ed8d 8b02 	vstr	d8, [sp, #8]
 801cdda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cddc:	2a00      	cmp	r2, #0
 801cdde:	f2c0 8129 	blt.w	801d034 <_dtoa_r+0x614>
 801cde2:	f1b8 0f0e 	cmp.w	r8, #14
 801cde6:	f300 8125 	bgt.w	801d034 <_dtoa_r+0x614>
 801cdea:	4b90      	ldr	r3, [pc, #576]	@ (801d02c <_dtoa_r+0x60c>)
 801cdec:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801cdf0:	ed93 6b00 	vldr	d6, [r3]
 801cdf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	f280 80c8 	bge.w	801cf8c <_dtoa_r+0x56c>
 801cdfc:	f1ba 0f00 	cmp.w	sl, #0
 801ce00:	f300 80c4 	bgt.w	801cf8c <_dtoa_r+0x56c>
 801ce04:	d10b      	bne.n	801ce1e <_dtoa_r+0x3fe>
 801ce06:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801ce0a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ce0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ce12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ce16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce1a:	f2c0 823c 	blt.w	801d296 <_dtoa_r+0x876>
 801ce1e:	2400      	movs	r4, #0
 801ce20:	4625      	mov	r5, r4
 801ce22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce24:	43db      	mvns	r3, r3
 801ce26:	9305      	str	r3, [sp, #20]
 801ce28:	463e      	mov	r6, r7
 801ce2a:	f04f 0800 	mov.w	r8, #0
 801ce2e:	4621      	mov	r1, r4
 801ce30:	4648      	mov	r0, r9
 801ce32:	f000 fc93 	bl	801d75c <_Bfree>
 801ce36:	2d00      	cmp	r5, #0
 801ce38:	f000 80a2 	beq.w	801cf80 <_dtoa_r+0x560>
 801ce3c:	f1b8 0f00 	cmp.w	r8, #0
 801ce40:	d005      	beq.n	801ce4e <_dtoa_r+0x42e>
 801ce42:	45a8      	cmp	r8, r5
 801ce44:	d003      	beq.n	801ce4e <_dtoa_r+0x42e>
 801ce46:	4641      	mov	r1, r8
 801ce48:	4648      	mov	r0, r9
 801ce4a:	f000 fc87 	bl	801d75c <_Bfree>
 801ce4e:	4629      	mov	r1, r5
 801ce50:	4648      	mov	r0, r9
 801ce52:	f000 fc83 	bl	801d75c <_Bfree>
 801ce56:	e093      	b.n	801cf80 <_dtoa_r+0x560>
 801ce58:	2202      	movs	r2, #2
 801ce5a:	e76c      	b.n	801cd36 <_dtoa_r+0x316>
 801ce5c:	07cc      	lsls	r4, r1, #31
 801ce5e:	d504      	bpl.n	801ce6a <_dtoa_r+0x44a>
 801ce60:	ed90 6b00 	vldr	d6, [r0]
 801ce64:	3201      	adds	r2, #1
 801ce66:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ce6a:	1049      	asrs	r1, r1, #1
 801ce6c:	3008      	adds	r0, #8
 801ce6e:	e763      	b.n	801cd38 <_dtoa_r+0x318>
 801ce70:	d022      	beq.n	801ceb8 <_dtoa_r+0x498>
 801ce72:	f1c8 0100 	rsb	r1, r8, #0
 801ce76:	4a6d      	ldr	r2, [pc, #436]	@ (801d02c <_dtoa_r+0x60c>)
 801ce78:	f001 000f 	and.w	r0, r1, #15
 801ce7c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801ce80:	ed92 7b00 	vldr	d7, [r2]
 801ce84:	ee28 7b07 	vmul.f64	d7, d8, d7
 801ce88:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ce8c:	4868      	ldr	r0, [pc, #416]	@ (801d030 <_dtoa_r+0x610>)
 801ce8e:	1109      	asrs	r1, r1, #4
 801ce90:	2400      	movs	r4, #0
 801ce92:	2202      	movs	r2, #2
 801ce94:	b929      	cbnz	r1, 801cea2 <_dtoa_r+0x482>
 801ce96:	2c00      	cmp	r4, #0
 801ce98:	f43f af57 	beq.w	801cd4a <_dtoa_r+0x32a>
 801ce9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cea0:	e753      	b.n	801cd4a <_dtoa_r+0x32a>
 801cea2:	07ce      	lsls	r6, r1, #31
 801cea4:	d505      	bpl.n	801ceb2 <_dtoa_r+0x492>
 801cea6:	ed90 6b00 	vldr	d6, [r0]
 801ceaa:	3201      	adds	r2, #1
 801ceac:	2401      	movs	r4, #1
 801ceae:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ceb2:	1049      	asrs	r1, r1, #1
 801ceb4:	3008      	adds	r0, #8
 801ceb6:	e7ed      	b.n	801ce94 <_dtoa_r+0x474>
 801ceb8:	2202      	movs	r2, #2
 801ceba:	e746      	b.n	801cd4a <_dtoa_r+0x32a>
 801cebc:	f8cd 8014 	str.w	r8, [sp, #20]
 801cec0:	4654      	mov	r4, sl
 801cec2:	e762      	b.n	801cd8a <_dtoa_r+0x36a>
 801cec4:	4a59      	ldr	r2, [pc, #356]	@ (801d02c <_dtoa_r+0x60c>)
 801cec6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801ceca:	ed12 4b02 	vldr	d4, [r2, #-8]
 801cece:	9a08      	ldr	r2, [sp, #32]
 801ced0:	ec41 0b17 	vmov	d7, r0, r1
 801ced4:	443c      	add	r4, r7
 801ced6:	b34a      	cbz	r2, 801cf2c <_dtoa_r+0x50c>
 801ced8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801cedc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801cee0:	463e      	mov	r6, r7
 801cee2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801cee6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801ceea:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ceee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801cef2:	ee14 2a90 	vmov	r2, s9
 801cef6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801cefa:	3230      	adds	r2, #48	@ 0x30
 801cefc:	ee36 6b45 	vsub.f64	d6, d6, d5
 801cf00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cf04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf08:	f806 2b01 	strb.w	r2, [r6], #1
 801cf0c:	d438      	bmi.n	801cf80 <_dtoa_r+0x560>
 801cf0e:	ee32 5b46 	vsub.f64	d5, d2, d6
 801cf12:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801cf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf1a:	d46e      	bmi.n	801cffa <_dtoa_r+0x5da>
 801cf1c:	42a6      	cmp	r6, r4
 801cf1e:	f43f af5a 	beq.w	801cdd6 <_dtoa_r+0x3b6>
 801cf22:	ee27 7b03 	vmul.f64	d7, d7, d3
 801cf26:	ee26 6b03 	vmul.f64	d6, d6, d3
 801cf2a:	e7e0      	b.n	801ceee <_dtoa_r+0x4ce>
 801cf2c:	4621      	mov	r1, r4
 801cf2e:	463e      	mov	r6, r7
 801cf30:	ee27 7b04 	vmul.f64	d7, d7, d4
 801cf34:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801cf38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801cf3c:	ee14 2a90 	vmov	r2, s9
 801cf40:	3230      	adds	r2, #48	@ 0x30
 801cf42:	f806 2b01 	strb.w	r2, [r6], #1
 801cf46:	42a6      	cmp	r6, r4
 801cf48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801cf4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 801cf50:	d119      	bne.n	801cf86 <_dtoa_r+0x566>
 801cf52:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801cf56:	ee37 4b05 	vadd.f64	d4, d7, d5
 801cf5a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801cf5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf62:	dc4a      	bgt.n	801cffa <_dtoa_r+0x5da>
 801cf64:	ee35 5b47 	vsub.f64	d5, d5, d7
 801cf68:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801cf6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf70:	f57f af31 	bpl.w	801cdd6 <_dtoa_r+0x3b6>
 801cf74:	460e      	mov	r6, r1
 801cf76:	3901      	subs	r1, #1
 801cf78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cf7c:	2b30      	cmp	r3, #48	@ 0x30
 801cf7e:	d0f9      	beq.n	801cf74 <_dtoa_r+0x554>
 801cf80:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801cf84:	e027      	b.n	801cfd6 <_dtoa_r+0x5b6>
 801cf86:	ee26 6b03 	vmul.f64	d6, d6, d3
 801cf8a:	e7d5      	b.n	801cf38 <_dtoa_r+0x518>
 801cf8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cf90:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801cf94:	463e      	mov	r6, r7
 801cf96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801cf9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801cf9e:	ee15 3a10 	vmov	r3, s10
 801cfa2:	3330      	adds	r3, #48	@ 0x30
 801cfa4:	f806 3b01 	strb.w	r3, [r6], #1
 801cfa8:	1bf3      	subs	r3, r6, r7
 801cfaa:	459a      	cmp	sl, r3
 801cfac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801cfb0:	eea3 7b46 	vfms.f64	d7, d3, d6
 801cfb4:	d132      	bne.n	801d01c <_dtoa_r+0x5fc>
 801cfb6:	ee37 7b07 	vadd.f64	d7, d7, d7
 801cfba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801cfbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfc2:	dc18      	bgt.n	801cff6 <_dtoa_r+0x5d6>
 801cfc4:	eeb4 7b46 	vcmp.f64	d7, d6
 801cfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfcc:	d103      	bne.n	801cfd6 <_dtoa_r+0x5b6>
 801cfce:	ee15 3a10 	vmov	r3, s10
 801cfd2:	07db      	lsls	r3, r3, #31
 801cfd4:	d40f      	bmi.n	801cff6 <_dtoa_r+0x5d6>
 801cfd6:	9901      	ldr	r1, [sp, #4]
 801cfd8:	4648      	mov	r0, r9
 801cfda:	f000 fbbf 	bl	801d75c <_Bfree>
 801cfde:	2300      	movs	r3, #0
 801cfe0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cfe2:	7033      	strb	r3, [r6, #0]
 801cfe4:	f108 0301 	add.w	r3, r8, #1
 801cfe8:	6013      	str	r3, [r2, #0]
 801cfea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	f000 824b 	beq.w	801d488 <_dtoa_r+0xa68>
 801cff2:	601e      	str	r6, [r3, #0]
 801cff4:	e248      	b.n	801d488 <_dtoa_r+0xa68>
 801cff6:	f8cd 8014 	str.w	r8, [sp, #20]
 801cffa:	4633      	mov	r3, r6
 801cffc:	461e      	mov	r6, r3
 801cffe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d002:	2a39      	cmp	r2, #57	@ 0x39
 801d004:	d106      	bne.n	801d014 <_dtoa_r+0x5f4>
 801d006:	429f      	cmp	r7, r3
 801d008:	d1f8      	bne.n	801cffc <_dtoa_r+0x5dc>
 801d00a:	9a05      	ldr	r2, [sp, #20]
 801d00c:	3201      	adds	r2, #1
 801d00e:	9205      	str	r2, [sp, #20]
 801d010:	2230      	movs	r2, #48	@ 0x30
 801d012:	703a      	strb	r2, [r7, #0]
 801d014:	781a      	ldrb	r2, [r3, #0]
 801d016:	3201      	adds	r2, #1
 801d018:	701a      	strb	r2, [r3, #0]
 801d01a:	e7b1      	b.n	801cf80 <_dtoa_r+0x560>
 801d01c:	ee27 7b04 	vmul.f64	d7, d7, d4
 801d020:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d028:	d1b5      	bne.n	801cf96 <_dtoa_r+0x576>
 801d02a:	e7d4      	b.n	801cfd6 <_dtoa_r+0x5b6>
 801d02c:	08021428 	.word	0x08021428
 801d030:	08021400 	.word	0x08021400
 801d034:	9908      	ldr	r1, [sp, #32]
 801d036:	2900      	cmp	r1, #0
 801d038:	f000 80e9 	beq.w	801d20e <_dtoa_r+0x7ee>
 801d03c:	9907      	ldr	r1, [sp, #28]
 801d03e:	2901      	cmp	r1, #1
 801d040:	f300 80cb 	bgt.w	801d1da <_dtoa_r+0x7ba>
 801d044:	2d00      	cmp	r5, #0
 801d046:	f000 80c4 	beq.w	801d1d2 <_dtoa_r+0x7b2>
 801d04a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801d04e:	9e04      	ldr	r6, [sp, #16]
 801d050:	461c      	mov	r4, r3
 801d052:	9305      	str	r3, [sp, #20]
 801d054:	9b04      	ldr	r3, [sp, #16]
 801d056:	4413      	add	r3, r2
 801d058:	9304      	str	r3, [sp, #16]
 801d05a:	9b06      	ldr	r3, [sp, #24]
 801d05c:	2101      	movs	r1, #1
 801d05e:	4413      	add	r3, r2
 801d060:	4648      	mov	r0, r9
 801d062:	9306      	str	r3, [sp, #24]
 801d064:	f000 fc2e 	bl	801d8c4 <__i2b>
 801d068:	9b05      	ldr	r3, [sp, #20]
 801d06a:	4605      	mov	r5, r0
 801d06c:	b166      	cbz	r6, 801d088 <_dtoa_r+0x668>
 801d06e:	9a06      	ldr	r2, [sp, #24]
 801d070:	2a00      	cmp	r2, #0
 801d072:	dd09      	ble.n	801d088 <_dtoa_r+0x668>
 801d074:	42b2      	cmp	r2, r6
 801d076:	9904      	ldr	r1, [sp, #16]
 801d078:	bfa8      	it	ge
 801d07a:	4632      	movge	r2, r6
 801d07c:	1a89      	subs	r1, r1, r2
 801d07e:	9104      	str	r1, [sp, #16]
 801d080:	9906      	ldr	r1, [sp, #24]
 801d082:	1ab6      	subs	r6, r6, r2
 801d084:	1a8a      	subs	r2, r1, r2
 801d086:	9206      	str	r2, [sp, #24]
 801d088:	b30b      	cbz	r3, 801d0ce <_dtoa_r+0x6ae>
 801d08a:	9a08      	ldr	r2, [sp, #32]
 801d08c:	2a00      	cmp	r2, #0
 801d08e:	f000 80c5 	beq.w	801d21c <_dtoa_r+0x7fc>
 801d092:	2c00      	cmp	r4, #0
 801d094:	f000 80bf 	beq.w	801d216 <_dtoa_r+0x7f6>
 801d098:	4629      	mov	r1, r5
 801d09a:	4622      	mov	r2, r4
 801d09c:	4648      	mov	r0, r9
 801d09e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d0a0:	f000 fcc8 	bl	801da34 <__pow5mult>
 801d0a4:	9a01      	ldr	r2, [sp, #4]
 801d0a6:	4601      	mov	r1, r0
 801d0a8:	4605      	mov	r5, r0
 801d0aa:	4648      	mov	r0, r9
 801d0ac:	f000 fc20 	bl	801d8f0 <__multiply>
 801d0b0:	9901      	ldr	r1, [sp, #4]
 801d0b2:	9005      	str	r0, [sp, #20]
 801d0b4:	4648      	mov	r0, r9
 801d0b6:	f000 fb51 	bl	801d75c <_Bfree>
 801d0ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d0bc:	1b1b      	subs	r3, r3, r4
 801d0be:	f000 80b0 	beq.w	801d222 <_dtoa_r+0x802>
 801d0c2:	9905      	ldr	r1, [sp, #20]
 801d0c4:	461a      	mov	r2, r3
 801d0c6:	4648      	mov	r0, r9
 801d0c8:	f000 fcb4 	bl	801da34 <__pow5mult>
 801d0cc:	9001      	str	r0, [sp, #4]
 801d0ce:	2101      	movs	r1, #1
 801d0d0:	4648      	mov	r0, r9
 801d0d2:	f000 fbf7 	bl	801d8c4 <__i2b>
 801d0d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d0d8:	4604      	mov	r4, r0
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	f000 81da 	beq.w	801d494 <_dtoa_r+0xa74>
 801d0e0:	461a      	mov	r2, r3
 801d0e2:	4601      	mov	r1, r0
 801d0e4:	4648      	mov	r0, r9
 801d0e6:	f000 fca5 	bl	801da34 <__pow5mult>
 801d0ea:	9b07      	ldr	r3, [sp, #28]
 801d0ec:	2b01      	cmp	r3, #1
 801d0ee:	4604      	mov	r4, r0
 801d0f0:	f300 80a0 	bgt.w	801d234 <_dtoa_r+0x814>
 801d0f4:	9b02      	ldr	r3, [sp, #8]
 801d0f6:	2b00      	cmp	r3, #0
 801d0f8:	f040 8096 	bne.w	801d228 <_dtoa_r+0x808>
 801d0fc:	9b03      	ldr	r3, [sp, #12]
 801d0fe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801d102:	2a00      	cmp	r2, #0
 801d104:	f040 8092 	bne.w	801d22c <_dtoa_r+0x80c>
 801d108:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801d10c:	0d12      	lsrs	r2, r2, #20
 801d10e:	0512      	lsls	r2, r2, #20
 801d110:	2a00      	cmp	r2, #0
 801d112:	f000 808d 	beq.w	801d230 <_dtoa_r+0x810>
 801d116:	9b04      	ldr	r3, [sp, #16]
 801d118:	3301      	adds	r3, #1
 801d11a:	9304      	str	r3, [sp, #16]
 801d11c:	9b06      	ldr	r3, [sp, #24]
 801d11e:	3301      	adds	r3, #1
 801d120:	9306      	str	r3, [sp, #24]
 801d122:	2301      	movs	r3, #1
 801d124:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d128:	2b00      	cmp	r3, #0
 801d12a:	f000 81b9 	beq.w	801d4a0 <_dtoa_r+0xa80>
 801d12e:	6922      	ldr	r2, [r4, #16]
 801d130:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d134:	6910      	ldr	r0, [r2, #16]
 801d136:	f000 fb79 	bl	801d82c <__hi0bits>
 801d13a:	f1c0 0020 	rsb	r0, r0, #32
 801d13e:	9b06      	ldr	r3, [sp, #24]
 801d140:	4418      	add	r0, r3
 801d142:	f010 001f 	ands.w	r0, r0, #31
 801d146:	f000 8081 	beq.w	801d24c <_dtoa_r+0x82c>
 801d14a:	f1c0 0220 	rsb	r2, r0, #32
 801d14e:	2a04      	cmp	r2, #4
 801d150:	dd73      	ble.n	801d23a <_dtoa_r+0x81a>
 801d152:	9b04      	ldr	r3, [sp, #16]
 801d154:	f1c0 001c 	rsb	r0, r0, #28
 801d158:	4403      	add	r3, r0
 801d15a:	9304      	str	r3, [sp, #16]
 801d15c:	9b06      	ldr	r3, [sp, #24]
 801d15e:	4406      	add	r6, r0
 801d160:	4403      	add	r3, r0
 801d162:	9306      	str	r3, [sp, #24]
 801d164:	9b04      	ldr	r3, [sp, #16]
 801d166:	2b00      	cmp	r3, #0
 801d168:	dd05      	ble.n	801d176 <_dtoa_r+0x756>
 801d16a:	9901      	ldr	r1, [sp, #4]
 801d16c:	461a      	mov	r2, r3
 801d16e:	4648      	mov	r0, r9
 801d170:	f000 fcba 	bl	801dae8 <__lshift>
 801d174:	9001      	str	r0, [sp, #4]
 801d176:	9b06      	ldr	r3, [sp, #24]
 801d178:	2b00      	cmp	r3, #0
 801d17a:	dd05      	ble.n	801d188 <_dtoa_r+0x768>
 801d17c:	4621      	mov	r1, r4
 801d17e:	461a      	mov	r2, r3
 801d180:	4648      	mov	r0, r9
 801d182:	f000 fcb1 	bl	801dae8 <__lshift>
 801d186:	4604      	mov	r4, r0
 801d188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d060      	beq.n	801d250 <_dtoa_r+0x830>
 801d18e:	9801      	ldr	r0, [sp, #4]
 801d190:	4621      	mov	r1, r4
 801d192:	f000 fd15 	bl	801dbc0 <__mcmp>
 801d196:	2800      	cmp	r0, #0
 801d198:	da5a      	bge.n	801d250 <_dtoa_r+0x830>
 801d19a:	f108 33ff 	add.w	r3, r8, #4294967295
 801d19e:	9305      	str	r3, [sp, #20]
 801d1a0:	9901      	ldr	r1, [sp, #4]
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	220a      	movs	r2, #10
 801d1a6:	4648      	mov	r0, r9
 801d1a8:	f000 fafa 	bl	801d7a0 <__multadd>
 801d1ac:	9b08      	ldr	r3, [sp, #32]
 801d1ae:	9001      	str	r0, [sp, #4]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	f000 8177 	beq.w	801d4a4 <_dtoa_r+0xa84>
 801d1b6:	4629      	mov	r1, r5
 801d1b8:	2300      	movs	r3, #0
 801d1ba:	220a      	movs	r2, #10
 801d1bc:	4648      	mov	r0, r9
 801d1be:	f000 faef 	bl	801d7a0 <__multadd>
 801d1c2:	f1bb 0f00 	cmp.w	fp, #0
 801d1c6:	4605      	mov	r5, r0
 801d1c8:	dc6e      	bgt.n	801d2a8 <_dtoa_r+0x888>
 801d1ca:	9b07      	ldr	r3, [sp, #28]
 801d1cc:	2b02      	cmp	r3, #2
 801d1ce:	dc48      	bgt.n	801d262 <_dtoa_r+0x842>
 801d1d0:	e06a      	b.n	801d2a8 <_dtoa_r+0x888>
 801d1d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d1d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801d1d8:	e739      	b.n	801d04e <_dtoa_r+0x62e>
 801d1da:	f10a 34ff 	add.w	r4, sl, #4294967295
 801d1de:	42a3      	cmp	r3, r4
 801d1e0:	db07      	blt.n	801d1f2 <_dtoa_r+0x7d2>
 801d1e2:	f1ba 0f00 	cmp.w	sl, #0
 801d1e6:	eba3 0404 	sub.w	r4, r3, r4
 801d1ea:	db0b      	blt.n	801d204 <_dtoa_r+0x7e4>
 801d1ec:	9e04      	ldr	r6, [sp, #16]
 801d1ee:	4652      	mov	r2, sl
 801d1f0:	e72f      	b.n	801d052 <_dtoa_r+0x632>
 801d1f2:	1ae2      	subs	r2, r4, r3
 801d1f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d1f6:	9e04      	ldr	r6, [sp, #16]
 801d1f8:	4413      	add	r3, r2
 801d1fa:	930a      	str	r3, [sp, #40]	@ 0x28
 801d1fc:	4652      	mov	r2, sl
 801d1fe:	4623      	mov	r3, r4
 801d200:	2400      	movs	r4, #0
 801d202:	e726      	b.n	801d052 <_dtoa_r+0x632>
 801d204:	9a04      	ldr	r2, [sp, #16]
 801d206:	eba2 060a 	sub.w	r6, r2, sl
 801d20a:	2200      	movs	r2, #0
 801d20c:	e721      	b.n	801d052 <_dtoa_r+0x632>
 801d20e:	9e04      	ldr	r6, [sp, #16]
 801d210:	9d08      	ldr	r5, [sp, #32]
 801d212:	461c      	mov	r4, r3
 801d214:	e72a      	b.n	801d06c <_dtoa_r+0x64c>
 801d216:	9a01      	ldr	r2, [sp, #4]
 801d218:	9205      	str	r2, [sp, #20]
 801d21a:	e752      	b.n	801d0c2 <_dtoa_r+0x6a2>
 801d21c:	9901      	ldr	r1, [sp, #4]
 801d21e:	461a      	mov	r2, r3
 801d220:	e751      	b.n	801d0c6 <_dtoa_r+0x6a6>
 801d222:	9b05      	ldr	r3, [sp, #20]
 801d224:	9301      	str	r3, [sp, #4]
 801d226:	e752      	b.n	801d0ce <_dtoa_r+0x6ae>
 801d228:	2300      	movs	r3, #0
 801d22a:	e77b      	b.n	801d124 <_dtoa_r+0x704>
 801d22c:	9b02      	ldr	r3, [sp, #8]
 801d22e:	e779      	b.n	801d124 <_dtoa_r+0x704>
 801d230:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d232:	e778      	b.n	801d126 <_dtoa_r+0x706>
 801d234:	2300      	movs	r3, #0
 801d236:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d238:	e779      	b.n	801d12e <_dtoa_r+0x70e>
 801d23a:	d093      	beq.n	801d164 <_dtoa_r+0x744>
 801d23c:	9b04      	ldr	r3, [sp, #16]
 801d23e:	321c      	adds	r2, #28
 801d240:	4413      	add	r3, r2
 801d242:	9304      	str	r3, [sp, #16]
 801d244:	9b06      	ldr	r3, [sp, #24]
 801d246:	4416      	add	r6, r2
 801d248:	4413      	add	r3, r2
 801d24a:	e78a      	b.n	801d162 <_dtoa_r+0x742>
 801d24c:	4602      	mov	r2, r0
 801d24e:	e7f5      	b.n	801d23c <_dtoa_r+0x81c>
 801d250:	f1ba 0f00 	cmp.w	sl, #0
 801d254:	f8cd 8014 	str.w	r8, [sp, #20]
 801d258:	46d3      	mov	fp, sl
 801d25a:	dc21      	bgt.n	801d2a0 <_dtoa_r+0x880>
 801d25c:	9b07      	ldr	r3, [sp, #28]
 801d25e:	2b02      	cmp	r3, #2
 801d260:	dd1e      	ble.n	801d2a0 <_dtoa_r+0x880>
 801d262:	f1bb 0f00 	cmp.w	fp, #0
 801d266:	f47f addc 	bne.w	801ce22 <_dtoa_r+0x402>
 801d26a:	4621      	mov	r1, r4
 801d26c:	465b      	mov	r3, fp
 801d26e:	2205      	movs	r2, #5
 801d270:	4648      	mov	r0, r9
 801d272:	f000 fa95 	bl	801d7a0 <__multadd>
 801d276:	4601      	mov	r1, r0
 801d278:	4604      	mov	r4, r0
 801d27a:	9801      	ldr	r0, [sp, #4]
 801d27c:	f000 fca0 	bl	801dbc0 <__mcmp>
 801d280:	2800      	cmp	r0, #0
 801d282:	f77f adce 	ble.w	801ce22 <_dtoa_r+0x402>
 801d286:	463e      	mov	r6, r7
 801d288:	2331      	movs	r3, #49	@ 0x31
 801d28a:	f806 3b01 	strb.w	r3, [r6], #1
 801d28e:	9b05      	ldr	r3, [sp, #20]
 801d290:	3301      	adds	r3, #1
 801d292:	9305      	str	r3, [sp, #20]
 801d294:	e5c9      	b.n	801ce2a <_dtoa_r+0x40a>
 801d296:	f8cd 8014 	str.w	r8, [sp, #20]
 801d29a:	4654      	mov	r4, sl
 801d29c:	4625      	mov	r5, r4
 801d29e:	e7f2      	b.n	801d286 <_dtoa_r+0x866>
 801d2a0:	9b08      	ldr	r3, [sp, #32]
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	f000 8102 	beq.w	801d4ac <_dtoa_r+0xa8c>
 801d2a8:	2e00      	cmp	r6, #0
 801d2aa:	dd05      	ble.n	801d2b8 <_dtoa_r+0x898>
 801d2ac:	4629      	mov	r1, r5
 801d2ae:	4632      	mov	r2, r6
 801d2b0:	4648      	mov	r0, r9
 801d2b2:	f000 fc19 	bl	801dae8 <__lshift>
 801d2b6:	4605      	mov	r5, r0
 801d2b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d058      	beq.n	801d370 <_dtoa_r+0x950>
 801d2be:	6869      	ldr	r1, [r5, #4]
 801d2c0:	4648      	mov	r0, r9
 801d2c2:	f000 fa0b 	bl	801d6dc <_Balloc>
 801d2c6:	4606      	mov	r6, r0
 801d2c8:	b928      	cbnz	r0, 801d2d6 <_dtoa_r+0x8b6>
 801d2ca:	4b82      	ldr	r3, [pc, #520]	@ (801d4d4 <_dtoa_r+0xab4>)
 801d2cc:	4602      	mov	r2, r0
 801d2ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d2d2:	f7ff bbbe 	b.w	801ca52 <_dtoa_r+0x32>
 801d2d6:	692a      	ldr	r2, [r5, #16]
 801d2d8:	3202      	adds	r2, #2
 801d2da:	0092      	lsls	r2, r2, #2
 801d2dc:	f105 010c 	add.w	r1, r5, #12
 801d2e0:	300c      	adds	r0, #12
 801d2e2:	f001 fd4f 	bl	801ed84 <memcpy>
 801d2e6:	2201      	movs	r2, #1
 801d2e8:	4631      	mov	r1, r6
 801d2ea:	4648      	mov	r0, r9
 801d2ec:	f000 fbfc 	bl	801dae8 <__lshift>
 801d2f0:	1c7b      	adds	r3, r7, #1
 801d2f2:	9304      	str	r3, [sp, #16]
 801d2f4:	eb07 030b 	add.w	r3, r7, fp
 801d2f8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d2fa:	9b02      	ldr	r3, [sp, #8]
 801d2fc:	f003 0301 	and.w	r3, r3, #1
 801d300:	46a8      	mov	r8, r5
 801d302:	9308      	str	r3, [sp, #32]
 801d304:	4605      	mov	r5, r0
 801d306:	9b04      	ldr	r3, [sp, #16]
 801d308:	9801      	ldr	r0, [sp, #4]
 801d30a:	4621      	mov	r1, r4
 801d30c:	f103 3bff 	add.w	fp, r3, #4294967295
 801d310:	f7ff fafc 	bl	801c90c <quorem>
 801d314:	4641      	mov	r1, r8
 801d316:	9002      	str	r0, [sp, #8]
 801d318:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801d31c:	9801      	ldr	r0, [sp, #4]
 801d31e:	f000 fc4f 	bl	801dbc0 <__mcmp>
 801d322:	462a      	mov	r2, r5
 801d324:	9006      	str	r0, [sp, #24]
 801d326:	4621      	mov	r1, r4
 801d328:	4648      	mov	r0, r9
 801d32a:	f000 fc65 	bl	801dbf8 <__mdiff>
 801d32e:	68c2      	ldr	r2, [r0, #12]
 801d330:	4606      	mov	r6, r0
 801d332:	b9fa      	cbnz	r2, 801d374 <_dtoa_r+0x954>
 801d334:	4601      	mov	r1, r0
 801d336:	9801      	ldr	r0, [sp, #4]
 801d338:	f000 fc42 	bl	801dbc0 <__mcmp>
 801d33c:	4602      	mov	r2, r0
 801d33e:	4631      	mov	r1, r6
 801d340:	4648      	mov	r0, r9
 801d342:	920a      	str	r2, [sp, #40]	@ 0x28
 801d344:	f000 fa0a 	bl	801d75c <_Bfree>
 801d348:	9b07      	ldr	r3, [sp, #28]
 801d34a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d34c:	9e04      	ldr	r6, [sp, #16]
 801d34e:	ea42 0103 	orr.w	r1, r2, r3
 801d352:	9b08      	ldr	r3, [sp, #32]
 801d354:	4319      	orrs	r1, r3
 801d356:	d10f      	bne.n	801d378 <_dtoa_r+0x958>
 801d358:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801d35c:	d028      	beq.n	801d3b0 <_dtoa_r+0x990>
 801d35e:	9b06      	ldr	r3, [sp, #24]
 801d360:	2b00      	cmp	r3, #0
 801d362:	dd02      	ble.n	801d36a <_dtoa_r+0x94a>
 801d364:	9b02      	ldr	r3, [sp, #8]
 801d366:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801d36a:	f88b a000 	strb.w	sl, [fp]
 801d36e:	e55e      	b.n	801ce2e <_dtoa_r+0x40e>
 801d370:	4628      	mov	r0, r5
 801d372:	e7bd      	b.n	801d2f0 <_dtoa_r+0x8d0>
 801d374:	2201      	movs	r2, #1
 801d376:	e7e2      	b.n	801d33e <_dtoa_r+0x91e>
 801d378:	9b06      	ldr	r3, [sp, #24]
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	db04      	blt.n	801d388 <_dtoa_r+0x968>
 801d37e:	9907      	ldr	r1, [sp, #28]
 801d380:	430b      	orrs	r3, r1
 801d382:	9908      	ldr	r1, [sp, #32]
 801d384:	430b      	orrs	r3, r1
 801d386:	d120      	bne.n	801d3ca <_dtoa_r+0x9aa>
 801d388:	2a00      	cmp	r2, #0
 801d38a:	ddee      	ble.n	801d36a <_dtoa_r+0x94a>
 801d38c:	9901      	ldr	r1, [sp, #4]
 801d38e:	2201      	movs	r2, #1
 801d390:	4648      	mov	r0, r9
 801d392:	f000 fba9 	bl	801dae8 <__lshift>
 801d396:	4621      	mov	r1, r4
 801d398:	9001      	str	r0, [sp, #4]
 801d39a:	f000 fc11 	bl	801dbc0 <__mcmp>
 801d39e:	2800      	cmp	r0, #0
 801d3a0:	dc03      	bgt.n	801d3aa <_dtoa_r+0x98a>
 801d3a2:	d1e2      	bne.n	801d36a <_dtoa_r+0x94a>
 801d3a4:	f01a 0f01 	tst.w	sl, #1
 801d3a8:	d0df      	beq.n	801d36a <_dtoa_r+0x94a>
 801d3aa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801d3ae:	d1d9      	bne.n	801d364 <_dtoa_r+0x944>
 801d3b0:	2339      	movs	r3, #57	@ 0x39
 801d3b2:	f88b 3000 	strb.w	r3, [fp]
 801d3b6:	4633      	mov	r3, r6
 801d3b8:	461e      	mov	r6, r3
 801d3ba:	3b01      	subs	r3, #1
 801d3bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d3c0:	2a39      	cmp	r2, #57	@ 0x39
 801d3c2:	d052      	beq.n	801d46a <_dtoa_r+0xa4a>
 801d3c4:	3201      	adds	r2, #1
 801d3c6:	701a      	strb	r2, [r3, #0]
 801d3c8:	e531      	b.n	801ce2e <_dtoa_r+0x40e>
 801d3ca:	2a00      	cmp	r2, #0
 801d3cc:	dd07      	ble.n	801d3de <_dtoa_r+0x9be>
 801d3ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801d3d2:	d0ed      	beq.n	801d3b0 <_dtoa_r+0x990>
 801d3d4:	f10a 0301 	add.w	r3, sl, #1
 801d3d8:	f88b 3000 	strb.w	r3, [fp]
 801d3dc:	e527      	b.n	801ce2e <_dtoa_r+0x40e>
 801d3de:	9b04      	ldr	r3, [sp, #16]
 801d3e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d3e2:	f803 ac01 	strb.w	sl, [r3, #-1]
 801d3e6:	4293      	cmp	r3, r2
 801d3e8:	d029      	beq.n	801d43e <_dtoa_r+0xa1e>
 801d3ea:	9901      	ldr	r1, [sp, #4]
 801d3ec:	2300      	movs	r3, #0
 801d3ee:	220a      	movs	r2, #10
 801d3f0:	4648      	mov	r0, r9
 801d3f2:	f000 f9d5 	bl	801d7a0 <__multadd>
 801d3f6:	45a8      	cmp	r8, r5
 801d3f8:	9001      	str	r0, [sp, #4]
 801d3fa:	f04f 0300 	mov.w	r3, #0
 801d3fe:	f04f 020a 	mov.w	r2, #10
 801d402:	4641      	mov	r1, r8
 801d404:	4648      	mov	r0, r9
 801d406:	d107      	bne.n	801d418 <_dtoa_r+0x9f8>
 801d408:	f000 f9ca 	bl	801d7a0 <__multadd>
 801d40c:	4680      	mov	r8, r0
 801d40e:	4605      	mov	r5, r0
 801d410:	9b04      	ldr	r3, [sp, #16]
 801d412:	3301      	adds	r3, #1
 801d414:	9304      	str	r3, [sp, #16]
 801d416:	e776      	b.n	801d306 <_dtoa_r+0x8e6>
 801d418:	f000 f9c2 	bl	801d7a0 <__multadd>
 801d41c:	4629      	mov	r1, r5
 801d41e:	4680      	mov	r8, r0
 801d420:	2300      	movs	r3, #0
 801d422:	220a      	movs	r2, #10
 801d424:	4648      	mov	r0, r9
 801d426:	f000 f9bb 	bl	801d7a0 <__multadd>
 801d42a:	4605      	mov	r5, r0
 801d42c:	e7f0      	b.n	801d410 <_dtoa_r+0x9f0>
 801d42e:	f1bb 0f00 	cmp.w	fp, #0
 801d432:	bfcc      	ite	gt
 801d434:	465e      	movgt	r6, fp
 801d436:	2601      	movle	r6, #1
 801d438:	443e      	add	r6, r7
 801d43a:	f04f 0800 	mov.w	r8, #0
 801d43e:	9901      	ldr	r1, [sp, #4]
 801d440:	2201      	movs	r2, #1
 801d442:	4648      	mov	r0, r9
 801d444:	f000 fb50 	bl	801dae8 <__lshift>
 801d448:	4621      	mov	r1, r4
 801d44a:	9001      	str	r0, [sp, #4]
 801d44c:	f000 fbb8 	bl	801dbc0 <__mcmp>
 801d450:	2800      	cmp	r0, #0
 801d452:	dcb0      	bgt.n	801d3b6 <_dtoa_r+0x996>
 801d454:	d102      	bne.n	801d45c <_dtoa_r+0xa3c>
 801d456:	f01a 0f01 	tst.w	sl, #1
 801d45a:	d1ac      	bne.n	801d3b6 <_dtoa_r+0x996>
 801d45c:	4633      	mov	r3, r6
 801d45e:	461e      	mov	r6, r3
 801d460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d464:	2a30      	cmp	r2, #48	@ 0x30
 801d466:	d0fa      	beq.n	801d45e <_dtoa_r+0xa3e>
 801d468:	e4e1      	b.n	801ce2e <_dtoa_r+0x40e>
 801d46a:	429f      	cmp	r7, r3
 801d46c:	d1a4      	bne.n	801d3b8 <_dtoa_r+0x998>
 801d46e:	9b05      	ldr	r3, [sp, #20]
 801d470:	3301      	adds	r3, #1
 801d472:	9305      	str	r3, [sp, #20]
 801d474:	2331      	movs	r3, #49	@ 0x31
 801d476:	703b      	strb	r3, [r7, #0]
 801d478:	e4d9      	b.n	801ce2e <_dtoa_r+0x40e>
 801d47a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d47c:	4f16      	ldr	r7, [pc, #88]	@ (801d4d8 <_dtoa_r+0xab8>)
 801d47e:	b11b      	cbz	r3, 801d488 <_dtoa_r+0xa68>
 801d480:	f107 0308 	add.w	r3, r7, #8
 801d484:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801d486:	6013      	str	r3, [r2, #0]
 801d488:	4638      	mov	r0, r7
 801d48a:	b011      	add	sp, #68	@ 0x44
 801d48c:	ecbd 8b02 	vpop	{d8}
 801d490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d494:	9b07      	ldr	r3, [sp, #28]
 801d496:	2b01      	cmp	r3, #1
 801d498:	f77f ae2c 	ble.w	801d0f4 <_dtoa_r+0x6d4>
 801d49c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d49e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d4a0:	2001      	movs	r0, #1
 801d4a2:	e64c      	b.n	801d13e <_dtoa_r+0x71e>
 801d4a4:	f1bb 0f00 	cmp.w	fp, #0
 801d4a8:	f77f aed8 	ble.w	801d25c <_dtoa_r+0x83c>
 801d4ac:	463e      	mov	r6, r7
 801d4ae:	9801      	ldr	r0, [sp, #4]
 801d4b0:	4621      	mov	r1, r4
 801d4b2:	f7ff fa2b 	bl	801c90c <quorem>
 801d4b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801d4ba:	f806 ab01 	strb.w	sl, [r6], #1
 801d4be:	1bf2      	subs	r2, r6, r7
 801d4c0:	4593      	cmp	fp, r2
 801d4c2:	ddb4      	ble.n	801d42e <_dtoa_r+0xa0e>
 801d4c4:	9901      	ldr	r1, [sp, #4]
 801d4c6:	2300      	movs	r3, #0
 801d4c8:	220a      	movs	r2, #10
 801d4ca:	4648      	mov	r0, r9
 801d4cc:	f000 f968 	bl	801d7a0 <__multadd>
 801d4d0:	9001      	str	r0, [sp, #4]
 801d4d2:	e7ec      	b.n	801d4ae <_dtoa_r+0xa8e>
 801d4d4:	0802124e 	.word	0x0802124e
 801d4d8:	080211d2 	.word	0x080211d2

0801d4dc <_free_r>:
 801d4dc:	b538      	push	{r3, r4, r5, lr}
 801d4de:	4605      	mov	r5, r0
 801d4e0:	2900      	cmp	r1, #0
 801d4e2:	d041      	beq.n	801d568 <_free_r+0x8c>
 801d4e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d4e8:	1f0c      	subs	r4, r1, #4
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	bfb8      	it	lt
 801d4ee:	18e4      	addlt	r4, r4, r3
 801d4f0:	f000 f8e8 	bl	801d6c4 <__malloc_lock>
 801d4f4:	4a1d      	ldr	r2, [pc, #116]	@ (801d56c <_free_r+0x90>)
 801d4f6:	6813      	ldr	r3, [r2, #0]
 801d4f8:	b933      	cbnz	r3, 801d508 <_free_r+0x2c>
 801d4fa:	6063      	str	r3, [r4, #4]
 801d4fc:	6014      	str	r4, [r2, #0]
 801d4fe:	4628      	mov	r0, r5
 801d500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d504:	f000 b8e4 	b.w	801d6d0 <__malloc_unlock>
 801d508:	42a3      	cmp	r3, r4
 801d50a:	d908      	bls.n	801d51e <_free_r+0x42>
 801d50c:	6820      	ldr	r0, [r4, #0]
 801d50e:	1821      	adds	r1, r4, r0
 801d510:	428b      	cmp	r3, r1
 801d512:	bf01      	itttt	eq
 801d514:	6819      	ldreq	r1, [r3, #0]
 801d516:	685b      	ldreq	r3, [r3, #4]
 801d518:	1809      	addeq	r1, r1, r0
 801d51a:	6021      	streq	r1, [r4, #0]
 801d51c:	e7ed      	b.n	801d4fa <_free_r+0x1e>
 801d51e:	461a      	mov	r2, r3
 801d520:	685b      	ldr	r3, [r3, #4]
 801d522:	b10b      	cbz	r3, 801d528 <_free_r+0x4c>
 801d524:	42a3      	cmp	r3, r4
 801d526:	d9fa      	bls.n	801d51e <_free_r+0x42>
 801d528:	6811      	ldr	r1, [r2, #0]
 801d52a:	1850      	adds	r0, r2, r1
 801d52c:	42a0      	cmp	r0, r4
 801d52e:	d10b      	bne.n	801d548 <_free_r+0x6c>
 801d530:	6820      	ldr	r0, [r4, #0]
 801d532:	4401      	add	r1, r0
 801d534:	1850      	adds	r0, r2, r1
 801d536:	4283      	cmp	r3, r0
 801d538:	6011      	str	r1, [r2, #0]
 801d53a:	d1e0      	bne.n	801d4fe <_free_r+0x22>
 801d53c:	6818      	ldr	r0, [r3, #0]
 801d53e:	685b      	ldr	r3, [r3, #4]
 801d540:	6053      	str	r3, [r2, #4]
 801d542:	4408      	add	r0, r1
 801d544:	6010      	str	r0, [r2, #0]
 801d546:	e7da      	b.n	801d4fe <_free_r+0x22>
 801d548:	d902      	bls.n	801d550 <_free_r+0x74>
 801d54a:	230c      	movs	r3, #12
 801d54c:	602b      	str	r3, [r5, #0]
 801d54e:	e7d6      	b.n	801d4fe <_free_r+0x22>
 801d550:	6820      	ldr	r0, [r4, #0]
 801d552:	1821      	adds	r1, r4, r0
 801d554:	428b      	cmp	r3, r1
 801d556:	bf04      	itt	eq
 801d558:	6819      	ldreq	r1, [r3, #0]
 801d55a:	685b      	ldreq	r3, [r3, #4]
 801d55c:	6063      	str	r3, [r4, #4]
 801d55e:	bf04      	itt	eq
 801d560:	1809      	addeq	r1, r1, r0
 801d562:	6021      	streq	r1, [r4, #0]
 801d564:	6054      	str	r4, [r2, #4]
 801d566:	e7ca      	b.n	801d4fe <_free_r+0x22>
 801d568:	bd38      	pop	{r3, r4, r5, pc}
 801d56a:	bf00      	nop
 801d56c:	24002e88 	.word	0x24002e88

0801d570 <malloc>:
 801d570:	4b02      	ldr	r3, [pc, #8]	@ (801d57c <malloc+0xc>)
 801d572:	4601      	mov	r1, r0
 801d574:	6818      	ldr	r0, [r3, #0]
 801d576:	f000 b825 	b.w	801d5c4 <_malloc_r>
 801d57a:	bf00      	nop
 801d57c:	240005bc 	.word	0x240005bc

0801d580 <sbrk_aligned>:
 801d580:	b570      	push	{r4, r5, r6, lr}
 801d582:	4e0f      	ldr	r6, [pc, #60]	@ (801d5c0 <sbrk_aligned+0x40>)
 801d584:	460c      	mov	r4, r1
 801d586:	6831      	ldr	r1, [r6, #0]
 801d588:	4605      	mov	r5, r0
 801d58a:	b911      	cbnz	r1, 801d592 <sbrk_aligned+0x12>
 801d58c:	f001 fbea 	bl	801ed64 <_sbrk_r>
 801d590:	6030      	str	r0, [r6, #0]
 801d592:	4621      	mov	r1, r4
 801d594:	4628      	mov	r0, r5
 801d596:	f001 fbe5 	bl	801ed64 <_sbrk_r>
 801d59a:	1c43      	adds	r3, r0, #1
 801d59c:	d103      	bne.n	801d5a6 <sbrk_aligned+0x26>
 801d59e:	f04f 34ff 	mov.w	r4, #4294967295
 801d5a2:	4620      	mov	r0, r4
 801d5a4:	bd70      	pop	{r4, r5, r6, pc}
 801d5a6:	1cc4      	adds	r4, r0, #3
 801d5a8:	f024 0403 	bic.w	r4, r4, #3
 801d5ac:	42a0      	cmp	r0, r4
 801d5ae:	d0f8      	beq.n	801d5a2 <sbrk_aligned+0x22>
 801d5b0:	1a21      	subs	r1, r4, r0
 801d5b2:	4628      	mov	r0, r5
 801d5b4:	f001 fbd6 	bl	801ed64 <_sbrk_r>
 801d5b8:	3001      	adds	r0, #1
 801d5ba:	d1f2      	bne.n	801d5a2 <sbrk_aligned+0x22>
 801d5bc:	e7ef      	b.n	801d59e <sbrk_aligned+0x1e>
 801d5be:	bf00      	nop
 801d5c0:	24002e84 	.word	0x24002e84

0801d5c4 <_malloc_r>:
 801d5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d5c8:	1ccd      	adds	r5, r1, #3
 801d5ca:	f025 0503 	bic.w	r5, r5, #3
 801d5ce:	3508      	adds	r5, #8
 801d5d0:	2d0c      	cmp	r5, #12
 801d5d2:	bf38      	it	cc
 801d5d4:	250c      	movcc	r5, #12
 801d5d6:	2d00      	cmp	r5, #0
 801d5d8:	4606      	mov	r6, r0
 801d5da:	db01      	blt.n	801d5e0 <_malloc_r+0x1c>
 801d5dc:	42a9      	cmp	r1, r5
 801d5de:	d904      	bls.n	801d5ea <_malloc_r+0x26>
 801d5e0:	230c      	movs	r3, #12
 801d5e2:	6033      	str	r3, [r6, #0]
 801d5e4:	2000      	movs	r0, #0
 801d5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d5ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d6c0 <_malloc_r+0xfc>
 801d5ee:	f000 f869 	bl	801d6c4 <__malloc_lock>
 801d5f2:	f8d8 3000 	ldr.w	r3, [r8]
 801d5f6:	461c      	mov	r4, r3
 801d5f8:	bb44      	cbnz	r4, 801d64c <_malloc_r+0x88>
 801d5fa:	4629      	mov	r1, r5
 801d5fc:	4630      	mov	r0, r6
 801d5fe:	f7ff ffbf 	bl	801d580 <sbrk_aligned>
 801d602:	1c43      	adds	r3, r0, #1
 801d604:	4604      	mov	r4, r0
 801d606:	d158      	bne.n	801d6ba <_malloc_r+0xf6>
 801d608:	f8d8 4000 	ldr.w	r4, [r8]
 801d60c:	4627      	mov	r7, r4
 801d60e:	2f00      	cmp	r7, #0
 801d610:	d143      	bne.n	801d69a <_malloc_r+0xd6>
 801d612:	2c00      	cmp	r4, #0
 801d614:	d04b      	beq.n	801d6ae <_malloc_r+0xea>
 801d616:	6823      	ldr	r3, [r4, #0]
 801d618:	4639      	mov	r1, r7
 801d61a:	4630      	mov	r0, r6
 801d61c:	eb04 0903 	add.w	r9, r4, r3
 801d620:	f001 fba0 	bl	801ed64 <_sbrk_r>
 801d624:	4581      	cmp	r9, r0
 801d626:	d142      	bne.n	801d6ae <_malloc_r+0xea>
 801d628:	6821      	ldr	r1, [r4, #0]
 801d62a:	1a6d      	subs	r5, r5, r1
 801d62c:	4629      	mov	r1, r5
 801d62e:	4630      	mov	r0, r6
 801d630:	f7ff ffa6 	bl	801d580 <sbrk_aligned>
 801d634:	3001      	adds	r0, #1
 801d636:	d03a      	beq.n	801d6ae <_malloc_r+0xea>
 801d638:	6823      	ldr	r3, [r4, #0]
 801d63a:	442b      	add	r3, r5
 801d63c:	6023      	str	r3, [r4, #0]
 801d63e:	f8d8 3000 	ldr.w	r3, [r8]
 801d642:	685a      	ldr	r2, [r3, #4]
 801d644:	bb62      	cbnz	r2, 801d6a0 <_malloc_r+0xdc>
 801d646:	f8c8 7000 	str.w	r7, [r8]
 801d64a:	e00f      	b.n	801d66c <_malloc_r+0xa8>
 801d64c:	6822      	ldr	r2, [r4, #0]
 801d64e:	1b52      	subs	r2, r2, r5
 801d650:	d420      	bmi.n	801d694 <_malloc_r+0xd0>
 801d652:	2a0b      	cmp	r2, #11
 801d654:	d917      	bls.n	801d686 <_malloc_r+0xc2>
 801d656:	1961      	adds	r1, r4, r5
 801d658:	42a3      	cmp	r3, r4
 801d65a:	6025      	str	r5, [r4, #0]
 801d65c:	bf18      	it	ne
 801d65e:	6059      	strne	r1, [r3, #4]
 801d660:	6863      	ldr	r3, [r4, #4]
 801d662:	bf08      	it	eq
 801d664:	f8c8 1000 	streq.w	r1, [r8]
 801d668:	5162      	str	r2, [r4, r5]
 801d66a:	604b      	str	r3, [r1, #4]
 801d66c:	4630      	mov	r0, r6
 801d66e:	f000 f82f 	bl	801d6d0 <__malloc_unlock>
 801d672:	f104 000b 	add.w	r0, r4, #11
 801d676:	1d23      	adds	r3, r4, #4
 801d678:	f020 0007 	bic.w	r0, r0, #7
 801d67c:	1ac2      	subs	r2, r0, r3
 801d67e:	bf1c      	itt	ne
 801d680:	1a1b      	subne	r3, r3, r0
 801d682:	50a3      	strne	r3, [r4, r2]
 801d684:	e7af      	b.n	801d5e6 <_malloc_r+0x22>
 801d686:	6862      	ldr	r2, [r4, #4]
 801d688:	42a3      	cmp	r3, r4
 801d68a:	bf0c      	ite	eq
 801d68c:	f8c8 2000 	streq.w	r2, [r8]
 801d690:	605a      	strne	r2, [r3, #4]
 801d692:	e7eb      	b.n	801d66c <_malloc_r+0xa8>
 801d694:	4623      	mov	r3, r4
 801d696:	6864      	ldr	r4, [r4, #4]
 801d698:	e7ae      	b.n	801d5f8 <_malloc_r+0x34>
 801d69a:	463c      	mov	r4, r7
 801d69c:	687f      	ldr	r7, [r7, #4]
 801d69e:	e7b6      	b.n	801d60e <_malloc_r+0x4a>
 801d6a0:	461a      	mov	r2, r3
 801d6a2:	685b      	ldr	r3, [r3, #4]
 801d6a4:	42a3      	cmp	r3, r4
 801d6a6:	d1fb      	bne.n	801d6a0 <_malloc_r+0xdc>
 801d6a8:	2300      	movs	r3, #0
 801d6aa:	6053      	str	r3, [r2, #4]
 801d6ac:	e7de      	b.n	801d66c <_malloc_r+0xa8>
 801d6ae:	230c      	movs	r3, #12
 801d6b0:	6033      	str	r3, [r6, #0]
 801d6b2:	4630      	mov	r0, r6
 801d6b4:	f000 f80c 	bl	801d6d0 <__malloc_unlock>
 801d6b8:	e794      	b.n	801d5e4 <_malloc_r+0x20>
 801d6ba:	6005      	str	r5, [r0, #0]
 801d6bc:	e7d6      	b.n	801d66c <_malloc_r+0xa8>
 801d6be:	bf00      	nop
 801d6c0:	24002e88 	.word	0x24002e88

0801d6c4 <__malloc_lock>:
 801d6c4:	4801      	ldr	r0, [pc, #4]	@ (801d6cc <__malloc_lock+0x8>)
 801d6c6:	f7ff b918 	b.w	801c8fa <__retarget_lock_acquire_recursive>
 801d6ca:	bf00      	nop
 801d6cc:	24002e80 	.word	0x24002e80

0801d6d0 <__malloc_unlock>:
 801d6d0:	4801      	ldr	r0, [pc, #4]	@ (801d6d8 <__malloc_unlock+0x8>)
 801d6d2:	f7ff b913 	b.w	801c8fc <__retarget_lock_release_recursive>
 801d6d6:	bf00      	nop
 801d6d8:	24002e80 	.word	0x24002e80

0801d6dc <_Balloc>:
 801d6dc:	b570      	push	{r4, r5, r6, lr}
 801d6de:	69c6      	ldr	r6, [r0, #28]
 801d6e0:	4604      	mov	r4, r0
 801d6e2:	460d      	mov	r5, r1
 801d6e4:	b976      	cbnz	r6, 801d704 <_Balloc+0x28>
 801d6e6:	2010      	movs	r0, #16
 801d6e8:	f7ff ff42 	bl	801d570 <malloc>
 801d6ec:	4602      	mov	r2, r0
 801d6ee:	61e0      	str	r0, [r4, #28]
 801d6f0:	b920      	cbnz	r0, 801d6fc <_Balloc+0x20>
 801d6f2:	4b18      	ldr	r3, [pc, #96]	@ (801d754 <_Balloc+0x78>)
 801d6f4:	4818      	ldr	r0, [pc, #96]	@ (801d758 <_Balloc+0x7c>)
 801d6f6:	216b      	movs	r1, #107	@ 0x6b
 801d6f8:	f7fe f9f6 	bl	801bae8 <__assert_func>
 801d6fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d700:	6006      	str	r6, [r0, #0]
 801d702:	60c6      	str	r6, [r0, #12]
 801d704:	69e6      	ldr	r6, [r4, #28]
 801d706:	68f3      	ldr	r3, [r6, #12]
 801d708:	b183      	cbz	r3, 801d72c <_Balloc+0x50>
 801d70a:	69e3      	ldr	r3, [r4, #28]
 801d70c:	68db      	ldr	r3, [r3, #12]
 801d70e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d712:	b9b8      	cbnz	r0, 801d744 <_Balloc+0x68>
 801d714:	2101      	movs	r1, #1
 801d716:	fa01 f605 	lsl.w	r6, r1, r5
 801d71a:	1d72      	adds	r2, r6, #5
 801d71c:	0092      	lsls	r2, r2, #2
 801d71e:	4620      	mov	r0, r4
 801d720:	f001 fb3e 	bl	801eda0 <_calloc_r>
 801d724:	b160      	cbz	r0, 801d740 <_Balloc+0x64>
 801d726:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d72a:	e00e      	b.n	801d74a <_Balloc+0x6e>
 801d72c:	2221      	movs	r2, #33	@ 0x21
 801d72e:	2104      	movs	r1, #4
 801d730:	4620      	mov	r0, r4
 801d732:	f001 fb35 	bl	801eda0 <_calloc_r>
 801d736:	69e3      	ldr	r3, [r4, #28]
 801d738:	60f0      	str	r0, [r6, #12]
 801d73a:	68db      	ldr	r3, [r3, #12]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d1e4      	bne.n	801d70a <_Balloc+0x2e>
 801d740:	2000      	movs	r0, #0
 801d742:	bd70      	pop	{r4, r5, r6, pc}
 801d744:	6802      	ldr	r2, [r0, #0]
 801d746:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d74a:	2300      	movs	r3, #0
 801d74c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d750:	e7f7      	b.n	801d742 <_Balloc+0x66>
 801d752:	bf00      	nop
 801d754:	080211df 	.word	0x080211df
 801d758:	0802125f 	.word	0x0802125f

0801d75c <_Bfree>:
 801d75c:	b570      	push	{r4, r5, r6, lr}
 801d75e:	69c6      	ldr	r6, [r0, #28]
 801d760:	4605      	mov	r5, r0
 801d762:	460c      	mov	r4, r1
 801d764:	b976      	cbnz	r6, 801d784 <_Bfree+0x28>
 801d766:	2010      	movs	r0, #16
 801d768:	f7ff ff02 	bl	801d570 <malloc>
 801d76c:	4602      	mov	r2, r0
 801d76e:	61e8      	str	r0, [r5, #28]
 801d770:	b920      	cbnz	r0, 801d77c <_Bfree+0x20>
 801d772:	4b09      	ldr	r3, [pc, #36]	@ (801d798 <_Bfree+0x3c>)
 801d774:	4809      	ldr	r0, [pc, #36]	@ (801d79c <_Bfree+0x40>)
 801d776:	218f      	movs	r1, #143	@ 0x8f
 801d778:	f7fe f9b6 	bl	801bae8 <__assert_func>
 801d77c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d780:	6006      	str	r6, [r0, #0]
 801d782:	60c6      	str	r6, [r0, #12]
 801d784:	b13c      	cbz	r4, 801d796 <_Bfree+0x3a>
 801d786:	69eb      	ldr	r3, [r5, #28]
 801d788:	6862      	ldr	r2, [r4, #4]
 801d78a:	68db      	ldr	r3, [r3, #12]
 801d78c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d790:	6021      	str	r1, [r4, #0]
 801d792:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d796:	bd70      	pop	{r4, r5, r6, pc}
 801d798:	080211df 	.word	0x080211df
 801d79c:	0802125f 	.word	0x0802125f

0801d7a0 <__multadd>:
 801d7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7a4:	690d      	ldr	r5, [r1, #16]
 801d7a6:	4607      	mov	r7, r0
 801d7a8:	460c      	mov	r4, r1
 801d7aa:	461e      	mov	r6, r3
 801d7ac:	f101 0c14 	add.w	ip, r1, #20
 801d7b0:	2000      	movs	r0, #0
 801d7b2:	f8dc 3000 	ldr.w	r3, [ip]
 801d7b6:	b299      	uxth	r1, r3
 801d7b8:	fb02 6101 	mla	r1, r2, r1, r6
 801d7bc:	0c1e      	lsrs	r6, r3, #16
 801d7be:	0c0b      	lsrs	r3, r1, #16
 801d7c0:	fb02 3306 	mla	r3, r2, r6, r3
 801d7c4:	b289      	uxth	r1, r1
 801d7c6:	3001      	adds	r0, #1
 801d7c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d7cc:	4285      	cmp	r5, r0
 801d7ce:	f84c 1b04 	str.w	r1, [ip], #4
 801d7d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d7d6:	dcec      	bgt.n	801d7b2 <__multadd+0x12>
 801d7d8:	b30e      	cbz	r6, 801d81e <__multadd+0x7e>
 801d7da:	68a3      	ldr	r3, [r4, #8]
 801d7dc:	42ab      	cmp	r3, r5
 801d7de:	dc19      	bgt.n	801d814 <__multadd+0x74>
 801d7e0:	6861      	ldr	r1, [r4, #4]
 801d7e2:	4638      	mov	r0, r7
 801d7e4:	3101      	adds	r1, #1
 801d7e6:	f7ff ff79 	bl	801d6dc <_Balloc>
 801d7ea:	4680      	mov	r8, r0
 801d7ec:	b928      	cbnz	r0, 801d7fa <__multadd+0x5a>
 801d7ee:	4602      	mov	r2, r0
 801d7f0:	4b0c      	ldr	r3, [pc, #48]	@ (801d824 <__multadd+0x84>)
 801d7f2:	480d      	ldr	r0, [pc, #52]	@ (801d828 <__multadd+0x88>)
 801d7f4:	21ba      	movs	r1, #186	@ 0xba
 801d7f6:	f7fe f977 	bl	801bae8 <__assert_func>
 801d7fa:	6922      	ldr	r2, [r4, #16]
 801d7fc:	3202      	adds	r2, #2
 801d7fe:	f104 010c 	add.w	r1, r4, #12
 801d802:	0092      	lsls	r2, r2, #2
 801d804:	300c      	adds	r0, #12
 801d806:	f001 fabd 	bl	801ed84 <memcpy>
 801d80a:	4621      	mov	r1, r4
 801d80c:	4638      	mov	r0, r7
 801d80e:	f7ff ffa5 	bl	801d75c <_Bfree>
 801d812:	4644      	mov	r4, r8
 801d814:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d818:	3501      	adds	r5, #1
 801d81a:	615e      	str	r6, [r3, #20]
 801d81c:	6125      	str	r5, [r4, #16]
 801d81e:	4620      	mov	r0, r4
 801d820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d824:	0802124e 	.word	0x0802124e
 801d828:	0802125f 	.word	0x0802125f

0801d82c <__hi0bits>:
 801d82c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801d830:	4603      	mov	r3, r0
 801d832:	bf36      	itet	cc
 801d834:	0403      	lslcc	r3, r0, #16
 801d836:	2000      	movcs	r0, #0
 801d838:	2010      	movcc	r0, #16
 801d83a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d83e:	bf3c      	itt	cc
 801d840:	021b      	lslcc	r3, r3, #8
 801d842:	3008      	addcc	r0, #8
 801d844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d848:	bf3c      	itt	cc
 801d84a:	011b      	lslcc	r3, r3, #4
 801d84c:	3004      	addcc	r0, #4
 801d84e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d852:	bf3c      	itt	cc
 801d854:	009b      	lslcc	r3, r3, #2
 801d856:	3002      	addcc	r0, #2
 801d858:	2b00      	cmp	r3, #0
 801d85a:	db05      	blt.n	801d868 <__hi0bits+0x3c>
 801d85c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801d860:	f100 0001 	add.w	r0, r0, #1
 801d864:	bf08      	it	eq
 801d866:	2020      	moveq	r0, #32
 801d868:	4770      	bx	lr

0801d86a <__lo0bits>:
 801d86a:	6803      	ldr	r3, [r0, #0]
 801d86c:	4602      	mov	r2, r0
 801d86e:	f013 0007 	ands.w	r0, r3, #7
 801d872:	d00b      	beq.n	801d88c <__lo0bits+0x22>
 801d874:	07d9      	lsls	r1, r3, #31
 801d876:	d421      	bmi.n	801d8bc <__lo0bits+0x52>
 801d878:	0798      	lsls	r0, r3, #30
 801d87a:	bf49      	itett	mi
 801d87c:	085b      	lsrmi	r3, r3, #1
 801d87e:	089b      	lsrpl	r3, r3, #2
 801d880:	2001      	movmi	r0, #1
 801d882:	6013      	strmi	r3, [r2, #0]
 801d884:	bf5c      	itt	pl
 801d886:	6013      	strpl	r3, [r2, #0]
 801d888:	2002      	movpl	r0, #2
 801d88a:	4770      	bx	lr
 801d88c:	b299      	uxth	r1, r3
 801d88e:	b909      	cbnz	r1, 801d894 <__lo0bits+0x2a>
 801d890:	0c1b      	lsrs	r3, r3, #16
 801d892:	2010      	movs	r0, #16
 801d894:	b2d9      	uxtb	r1, r3
 801d896:	b909      	cbnz	r1, 801d89c <__lo0bits+0x32>
 801d898:	3008      	adds	r0, #8
 801d89a:	0a1b      	lsrs	r3, r3, #8
 801d89c:	0719      	lsls	r1, r3, #28
 801d89e:	bf04      	itt	eq
 801d8a0:	091b      	lsreq	r3, r3, #4
 801d8a2:	3004      	addeq	r0, #4
 801d8a4:	0799      	lsls	r1, r3, #30
 801d8a6:	bf04      	itt	eq
 801d8a8:	089b      	lsreq	r3, r3, #2
 801d8aa:	3002      	addeq	r0, #2
 801d8ac:	07d9      	lsls	r1, r3, #31
 801d8ae:	d403      	bmi.n	801d8b8 <__lo0bits+0x4e>
 801d8b0:	085b      	lsrs	r3, r3, #1
 801d8b2:	f100 0001 	add.w	r0, r0, #1
 801d8b6:	d003      	beq.n	801d8c0 <__lo0bits+0x56>
 801d8b8:	6013      	str	r3, [r2, #0]
 801d8ba:	4770      	bx	lr
 801d8bc:	2000      	movs	r0, #0
 801d8be:	4770      	bx	lr
 801d8c0:	2020      	movs	r0, #32
 801d8c2:	4770      	bx	lr

0801d8c4 <__i2b>:
 801d8c4:	b510      	push	{r4, lr}
 801d8c6:	460c      	mov	r4, r1
 801d8c8:	2101      	movs	r1, #1
 801d8ca:	f7ff ff07 	bl	801d6dc <_Balloc>
 801d8ce:	4602      	mov	r2, r0
 801d8d0:	b928      	cbnz	r0, 801d8de <__i2b+0x1a>
 801d8d2:	4b05      	ldr	r3, [pc, #20]	@ (801d8e8 <__i2b+0x24>)
 801d8d4:	4805      	ldr	r0, [pc, #20]	@ (801d8ec <__i2b+0x28>)
 801d8d6:	f240 1145 	movw	r1, #325	@ 0x145
 801d8da:	f7fe f905 	bl	801bae8 <__assert_func>
 801d8de:	2301      	movs	r3, #1
 801d8e0:	6144      	str	r4, [r0, #20]
 801d8e2:	6103      	str	r3, [r0, #16]
 801d8e4:	bd10      	pop	{r4, pc}
 801d8e6:	bf00      	nop
 801d8e8:	0802124e 	.word	0x0802124e
 801d8ec:	0802125f 	.word	0x0802125f

0801d8f0 <__multiply>:
 801d8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8f4:	4617      	mov	r7, r2
 801d8f6:	690a      	ldr	r2, [r1, #16]
 801d8f8:	693b      	ldr	r3, [r7, #16]
 801d8fa:	429a      	cmp	r2, r3
 801d8fc:	bfa8      	it	ge
 801d8fe:	463b      	movge	r3, r7
 801d900:	4689      	mov	r9, r1
 801d902:	bfa4      	itt	ge
 801d904:	460f      	movge	r7, r1
 801d906:	4699      	movge	r9, r3
 801d908:	693d      	ldr	r5, [r7, #16]
 801d90a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d90e:	68bb      	ldr	r3, [r7, #8]
 801d910:	6879      	ldr	r1, [r7, #4]
 801d912:	eb05 060a 	add.w	r6, r5, sl
 801d916:	42b3      	cmp	r3, r6
 801d918:	b085      	sub	sp, #20
 801d91a:	bfb8      	it	lt
 801d91c:	3101      	addlt	r1, #1
 801d91e:	f7ff fedd 	bl	801d6dc <_Balloc>
 801d922:	b930      	cbnz	r0, 801d932 <__multiply+0x42>
 801d924:	4602      	mov	r2, r0
 801d926:	4b41      	ldr	r3, [pc, #260]	@ (801da2c <__multiply+0x13c>)
 801d928:	4841      	ldr	r0, [pc, #260]	@ (801da30 <__multiply+0x140>)
 801d92a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d92e:	f7fe f8db 	bl	801bae8 <__assert_func>
 801d932:	f100 0414 	add.w	r4, r0, #20
 801d936:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801d93a:	4623      	mov	r3, r4
 801d93c:	2200      	movs	r2, #0
 801d93e:	4573      	cmp	r3, lr
 801d940:	d320      	bcc.n	801d984 <__multiply+0x94>
 801d942:	f107 0814 	add.w	r8, r7, #20
 801d946:	f109 0114 	add.w	r1, r9, #20
 801d94a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801d94e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801d952:	9302      	str	r3, [sp, #8]
 801d954:	1beb      	subs	r3, r5, r7
 801d956:	3b15      	subs	r3, #21
 801d958:	f023 0303 	bic.w	r3, r3, #3
 801d95c:	3304      	adds	r3, #4
 801d95e:	3715      	adds	r7, #21
 801d960:	42bd      	cmp	r5, r7
 801d962:	bf38      	it	cc
 801d964:	2304      	movcc	r3, #4
 801d966:	9301      	str	r3, [sp, #4]
 801d968:	9b02      	ldr	r3, [sp, #8]
 801d96a:	9103      	str	r1, [sp, #12]
 801d96c:	428b      	cmp	r3, r1
 801d96e:	d80c      	bhi.n	801d98a <__multiply+0x9a>
 801d970:	2e00      	cmp	r6, #0
 801d972:	dd03      	ble.n	801d97c <__multiply+0x8c>
 801d974:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d978:	2b00      	cmp	r3, #0
 801d97a:	d055      	beq.n	801da28 <__multiply+0x138>
 801d97c:	6106      	str	r6, [r0, #16]
 801d97e:	b005      	add	sp, #20
 801d980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d984:	f843 2b04 	str.w	r2, [r3], #4
 801d988:	e7d9      	b.n	801d93e <__multiply+0x4e>
 801d98a:	f8b1 a000 	ldrh.w	sl, [r1]
 801d98e:	f1ba 0f00 	cmp.w	sl, #0
 801d992:	d01f      	beq.n	801d9d4 <__multiply+0xe4>
 801d994:	46c4      	mov	ip, r8
 801d996:	46a1      	mov	r9, r4
 801d998:	2700      	movs	r7, #0
 801d99a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d99e:	f8d9 3000 	ldr.w	r3, [r9]
 801d9a2:	fa1f fb82 	uxth.w	fp, r2
 801d9a6:	b29b      	uxth	r3, r3
 801d9a8:	fb0a 330b 	mla	r3, sl, fp, r3
 801d9ac:	443b      	add	r3, r7
 801d9ae:	f8d9 7000 	ldr.w	r7, [r9]
 801d9b2:	0c12      	lsrs	r2, r2, #16
 801d9b4:	0c3f      	lsrs	r7, r7, #16
 801d9b6:	fb0a 7202 	mla	r2, sl, r2, r7
 801d9ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801d9be:	b29b      	uxth	r3, r3
 801d9c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d9c4:	4565      	cmp	r5, ip
 801d9c6:	f849 3b04 	str.w	r3, [r9], #4
 801d9ca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801d9ce:	d8e4      	bhi.n	801d99a <__multiply+0xaa>
 801d9d0:	9b01      	ldr	r3, [sp, #4]
 801d9d2:	50e7      	str	r7, [r4, r3]
 801d9d4:	9b03      	ldr	r3, [sp, #12]
 801d9d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d9da:	3104      	adds	r1, #4
 801d9dc:	f1b9 0f00 	cmp.w	r9, #0
 801d9e0:	d020      	beq.n	801da24 <__multiply+0x134>
 801d9e2:	6823      	ldr	r3, [r4, #0]
 801d9e4:	4647      	mov	r7, r8
 801d9e6:	46a4      	mov	ip, r4
 801d9e8:	f04f 0a00 	mov.w	sl, #0
 801d9ec:	f8b7 b000 	ldrh.w	fp, [r7]
 801d9f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801d9f4:	fb09 220b 	mla	r2, r9, fp, r2
 801d9f8:	4452      	add	r2, sl
 801d9fa:	b29b      	uxth	r3, r3
 801d9fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801da00:	f84c 3b04 	str.w	r3, [ip], #4
 801da04:	f857 3b04 	ldr.w	r3, [r7], #4
 801da08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801da0c:	f8bc 3000 	ldrh.w	r3, [ip]
 801da10:	fb09 330a 	mla	r3, r9, sl, r3
 801da14:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801da18:	42bd      	cmp	r5, r7
 801da1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801da1e:	d8e5      	bhi.n	801d9ec <__multiply+0xfc>
 801da20:	9a01      	ldr	r2, [sp, #4]
 801da22:	50a3      	str	r3, [r4, r2]
 801da24:	3404      	adds	r4, #4
 801da26:	e79f      	b.n	801d968 <__multiply+0x78>
 801da28:	3e01      	subs	r6, #1
 801da2a:	e7a1      	b.n	801d970 <__multiply+0x80>
 801da2c:	0802124e 	.word	0x0802124e
 801da30:	0802125f 	.word	0x0802125f

0801da34 <__pow5mult>:
 801da34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da38:	4615      	mov	r5, r2
 801da3a:	f012 0203 	ands.w	r2, r2, #3
 801da3e:	4607      	mov	r7, r0
 801da40:	460e      	mov	r6, r1
 801da42:	d007      	beq.n	801da54 <__pow5mult+0x20>
 801da44:	4c25      	ldr	r4, [pc, #148]	@ (801dadc <__pow5mult+0xa8>)
 801da46:	3a01      	subs	r2, #1
 801da48:	2300      	movs	r3, #0
 801da4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801da4e:	f7ff fea7 	bl	801d7a0 <__multadd>
 801da52:	4606      	mov	r6, r0
 801da54:	10ad      	asrs	r5, r5, #2
 801da56:	d03d      	beq.n	801dad4 <__pow5mult+0xa0>
 801da58:	69fc      	ldr	r4, [r7, #28]
 801da5a:	b97c      	cbnz	r4, 801da7c <__pow5mult+0x48>
 801da5c:	2010      	movs	r0, #16
 801da5e:	f7ff fd87 	bl	801d570 <malloc>
 801da62:	4602      	mov	r2, r0
 801da64:	61f8      	str	r0, [r7, #28]
 801da66:	b928      	cbnz	r0, 801da74 <__pow5mult+0x40>
 801da68:	4b1d      	ldr	r3, [pc, #116]	@ (801dae0 <__pow5mult+0xac>)
 801da6a:	481e      	ldr	r0, [pc, #120]	@ (801dae4 <__pow5mult+0xb0>)
 801da6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801da70:	f7fe f83a 	bl	801bae8 <__assert_func>
 801da74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801da78:	6004      	str	r4, [r0, #0]
 801da7a:	60c4      	str	r4, [r0, #12]
 801da7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801da80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801da84:	b94c      	cbnz	r4, 801da9a <__pow5mult+0x66>
 801da86:	f240 2171 	movw	r1, #625	@ 0x271
 801da8a:	4638      	mov	r0, r7
 801da8c:	f7ff ff1a 	bl	801d8c4 <__i2b>
 801da90:	2300      	movs	r3, #0
 801da92:	f8c8 0008 	str.w	r0, [r8, #8]
 801da96:	4604      	mov	r4, r0
 801da98:	6003      	str	r3, [r0, #0]
 801da9a:	f04f 0900 	mov.w	r9, #0
 801da9e:	07eb      	lsls	r3, r5, #31
 801daa0:	d50a      	bpl.n	801dab8 <__pow5mult+0x84>
 801daa2:	4631      	mov	r1, r6
 801daa4:	4622      	mov	r2, r4
 801daa6:	4638      	mov	r0, r7
 801daa8:	f7ff ff22 	bl	801d8f0 <__multiply>
 801daac:	4631      	mov	r1, r6
 801daae:	4680      	mov	r8, r0
 801dab0:	4638      	mov	r0, r7
 801dab2:	f7ff fe53 	bl	801d75c <_Bfree>
 801dab6:	4646      	mov	r6, r8
 801dab8:	106d      	asrs	r5, r5, #1
 801daba:	d00b      	beq.n	801dad4 <__pow5mult+0xa0>
 801dabc:	6820      	ldr	r0, [r4, #0]
 801dabe:	b938      	cbnz	r0, 801dad0 <__pow5mult+0x9c>
 801dac0:	4622      	mov	r2, r4
 801dac2:	4621      	mov	r1, r4
 801dac4:	4638      	mov	r0, r7
 801dac6:	f7ff ff13 	bl	801d8f0 <__multiply>
 801daca:	6020      	str	r0, [r4, #0]
 801dacc:	f8c0 9000 	str.w	r9, [r0]
 801dad0:	4604      	mov	r4, r0
 801dad2:	e7e4      	b.n	801da9e <__pow5mult+0x6a>
 801dad4:	4630      	mov	r0, r6
 801dad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dada:	bf00      	nop
 801dadc:	080213f0 	.word	0x080213f0
 801dae0:	080211df 	.word	0x080211df
 801dae4:	0802125f 	.word	0x0802125f

0801dae8 <__lshift>:
 801dae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801daec:	460c      	mov	r4, r1
 801daee:	6849      	ldr	r1, [r1, #4]
 801daf0:	6923      	ldr	r3, [r4, #16]
 801daf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801daf6:	68a3      	ldr	r3, [r4, #8]
 801daf8:	4607      	mov	r7, r0
 801dafa:	4691      	mov	r9, r2
 801dafc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801db00:	f108 0601 	add.w	r6, r8, #1
 801db04:	42b3      	cmp	r3, r6
 801db06:	db0b      	blt.n	801db20 <__lshift+0x38>
 801db08:	4638      	mov	r0, r7
 801db0a:	f7ff fde7 	bl	801d6dc <_Balloc>
 801db0e:	4605      	mov	r5, r0
 801db10:	b948      	cbnz	r0, 801db26 <__lshift+0x3e>
 801db12:	4602      	mov	r2, r0
 801db14:	4b28      	ldr	r3, [pc, #160]	@ (801dbb8 <__lshift+0xd0>)
 801db16:	4829      	ldr	r0, [pc, #164]	@ (801dbbc <__lshift+0xd4>)
 801db18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801db1c:	f7fd ffe4 	bl	801bae8 <__assert_func>
 801db20:	3101      	adds	r1, #1
 801db22:	005b      	lsls	r3, r3, #1
 801db24:	e7ee      	b.n	801db04 <__lshift+0x1c>
 801db26:	2300      	movs	r3, #0
 801db28:	f100 0114 	add.w	r1, r0, #20
 801db2c:	f100 0210 	add.w	r2, r0, #16
 801db30:	4618      	mov	r0, r3
 801db32:	4553      	cmp	r3, sl
 801db34:	db33      	blt.n	801db9e <__lshift+0xb6>
 801db36:	6920      	ldr	r0, [r4, #16]
 801db38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801db3c:	f104 0314 	add.w	r3, r4, #20
 801db40:	f019 091f 	ands.w	r9, r9, #31
 801db44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801db48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801db4c:	d02b      	beq.n	801dba6 <__lshift+0xbe>
 801db4e:	f1c9 0e20 	rsb	lr, r9, #32
 801db52:	468a      	mov	sl, r1
 801db54:	2200      	movs	r2, #0
 801db56:	6818      	ldr	r0, [r3, #0]
 801db58:	fa00 f009 	lsl.w	r0, r0, r9
 801db5c:	4310      	orrs	r0, r2
 801db5e:	f84a 0b04 	str.w	r0, [sl], #4
 801db62:	f853 2b04 	ldr.w	r2, [r3], #4
 801db66:	459c      	cmp	ip, r3
 801db68:	fa22 f20e 	lsr.w	r2, r2, lr
 801db6c:	d8f3      	bhi.n	801db56 <__lshift+0x6e>
 801db6e:	ebac 0304 	sub.w	r3, ip, r4
 801db72:	3b15      	subs	r3, #21
 801db74:	f023 0303 	bic.w	r3, r3, #3
 801db78:	3304      	adds	r3, #4
 801db7a:	f104 0015 	add.w	r0, r4, #21
 801db7e:	4560      	cmp	r0, ip
 801db80:	bf88      	it	hi
 801db82:	2304      	movhi	r3, #4
 801db84:	50ca      	str	r2, [r1, r3]
 801db86:	b10a      	cbz	r2, 801db8c <__lshift+0xa4>
 801db88:	f108 0602 	add.w	r6, r8, #2
 801db8c:	3e01      	subs	r6, #1
 801db8e:	4638      	mov	r0, r7
 801db90:	612e      	str	r6, [r5, #16]
 801db92:	4621      	mov	r1, r4
 801db94:	f7ff fde2 	bl	801d75c <_Bfree>
 801db98:	4628      	mov	r0, r5
 801db9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db9e:	f842 0f04 	str.w	r0, [r2, #4]!
 801dba2:	3301      	adds	r3, #1
 801dba4:	e7c5      	b.n	801db32 <__lshift+0x4a>
 801dba6:	3904      	subs	r1, #4
 801dba8:	f853 2b04 	ldr.w	r2, [r3], #4
 801dbac:	f841 2f04 	str.w	r2, [r1, #4]!
 801dbb0:	459c      	cmp	ip, r3
 801dbb2:	d8f9      	bhi.n	801dba8 <__lshift+0xc0>
 801dbb4:	e7ea      	b.n	801db8c <__lshift+0xa4>
 801dbb6:	bf00      	nop
 801dbb8:	0802124e 	.word	0x0802124e
 801dbbc:	0802125f 	.word	0x0802125f

0801dbc0 <__mcmp>:
 801dbc0:	690a      	ldr	r2, [r1, #16]
 801dbc2:	4603      	mov	r3, r0
 801dbc4:	6900      	ldr	r0, [r0, #16]
 801dbc6:	1a80      	subs	r0, r0, r2
 801dbc8:	b530      	push	{r4, r5, lr}
 801dbca:	d10e      	bne.n	801dbea <__mcmp+0x2a>
 801dbcc:	3314      	adds	r3, #20
 801dbce:	3114      	adds	r1, #20
 801dbd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801dbd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801dbd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801dbdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801dbe0:	4295      	cmp	r5, r2
 801dbe2:	d003      	beq.n	801dbec <__mcmp+0x2c>
 801dbe4:	d205      	bcs.n	801dbf2 <__mcmp+0x32>
 801dbe6:	f04f 30ff 	mov.w	r0, #4294967295
 801dbea:	bd30      	pop	{r4, r5, pc}
 801dbec:	42a3      	cmp	r3, r4
 801dbee:	d3f3      	bcc.n	801dbd8 <__mcmp+0x18>
 801dbf0:	e7fb      	b.n	801dbea <__mcmp+0x2a>
 801dbf2:	2001      	movs	r0, #1
 801dbf4:	e7f9      	b.n	801dbea <__mcmp+0x2a>
	...

0801dbf8 <__mdiff>:
 801dbf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbfc:	4689      	mov	r9, r1
 801dbfe:	4606      	mov	r6, r0
 801dc00:	4611      	mov	r1, r2
 801dc02:	4648      	mov	r0, r9
 801dc04:	4614      	mov	r4, r2
 801dc06:	f7ff ffdb 	bl	801dbc0 <__mcmp>
 801dc0a:	1e05      	subs	r5, r0, #0
 801dc0c:	d112      	bne.n	801dc34 <__mdiff+0x3c>
 801dc0e:	4629      	mov	r1, r5
 801dc10:	4630      	mov	r0, r6
 801dc12:	f7ff fd63 	bl	801d6dc <_Balloc>
 801dc16:	4602      	mov	r2, r0
 801dc18:	b928      	cbnz	r0, 801dc26 <__mdiff+0x2e>
 801dc1a:	4b3f      	ldr	r3, [pc, #252]	@ (801dd18 <__mdiff+0x120>)
 801dc1c:	f240 2137 	movw	r1, #567	@ 0x237
 801dc20:	483e      	ldr	r0, [pc, #248]	@ (801dd1c <__mdiff+0x124>)
 801dc22:	f7fd ff61 	bl	801bae8 <__assert_func>
 801dc26:	2301      	movs	r3, #1
 801dc28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801dc2c:	4610      	mov	r0, r2
 801dc2e:	b003      	add	sp, #12
 801dc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc34:	bfbc      	itt	lt
 801dc36:	464b      	movlt	r3, r9
 801dc38:	46a1      	movlt	r9, r4
 801dc3a:	4630      	mov	r0, r6
 801dc3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801dc40:	bfba      	itte	lt
 801dc42:	461c      	movlt	r4, r3
 801dc44:	2501      	movlt	r5, #1
 801dc46:	2500      	movge	r5, #0
 801dc48:	f7ff fd48 	bl	801d6dc <_Balloc>
 801dc4c:	4602      	mov	r2, r0
 801dc4e:	b918      	cbnz	r0, 801dc58 <__mdiff+0x60>
 801dc50:	4b31      	ldr	r3, [pc, #196]	@ (801dd18 <__mdiff+0x120>)
 801dc52:	f240 2145 	movw	r1, #581	@ 0x245
 801dc56:	e7e3      	b.n	801dc20 <__mdiff+0x28>
 801dc58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801dc5c:	6926      	ldr	r6, [r4, #16]
 801dc5e:	60c5      	str	r5, [r0, #12]
 801dc60:	f109 0310 	add.w	r3, r9, #16
 801dc64:	f109 0514 	add.w	r5, r9, #20
 801dc68:	f104 0e14 	add.w	lr, r4, #20
 801dc6c:	f100 0b14 	add.w	fp, r0, #20
 801dc70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801dc74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801dc78:	9301      	str	r3, [sp, #4]
 801dc7a:	46d9      	mov	r9, fp
 801dc7c:	f04f 0c00 	mov.w	ip, #0
 801dc80:	9b01      	ldr	r3, [sp, #4]
 801dc82:	f85e 0b04 	ldr.w	r0, [lr], #4
 801dc86:	f853 af04 	ldr.w	sl, [r3, #4]!
 801dc8a:	9301      	str	r3, [sp, #4]
 801dc8c:	fa1f f38a 	uxth.w	r3, sl
 801dc90:	4619      	mov	r1, r3
 801dc92:	b283      	uxth	r3, r0
 801dc94:	1acb      	subs	r3, r1, r3
 801dc96:	0c00      	lsrs	r0, r0, #16
 801dc98:	4463      	add	r3, ip
 801dc9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801dc9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801dca2:	b29b      	uxth	r3, r3
 801dca4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801dca8:	4576      	cmp	r6, lr
 801dcaa:	f849 3b04 	str.w	r3, [r9], #4
 801dcae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801dcb2:	d8e5      	bhi.n	801dc80 <__mdiff+0x88>
 801dcb4:	1b33      	subs	r3, r6, r4
 801dcb6:	3b15      	subs	r3, #21
 801dcb8:	f023 0303 	bic.w	r3, r3, #3
 801dcbc:	3415      	adds	r4, #21
 801dcbe:	3304      	adds	r3, #4
 801dcc0:	42a6      	cmp	r6, r4
 801dcc2:	bf38      	it	cc
 801dcc4:	2304      	movcc	r3, #4
 801dcc6:	441d      	add	r5, r3
 801dcc8:	445b      	add	r3, fp
 801dcca:	461e      	mov	r6, r3
 801dccc:	462c      	mov	r4, r5
 801dcce:	4544      	cmp	r4, r8
 801dcd0:	d30e      	bcc.n	801dcf0 <__mdiff+0xf8>
 801dcd2:	f108 0103 	add.w	r1, r8, #3
 801dcd6:	1b49      	subs	r1, r1, r5
 801dcd8:	f021 0103 	bic.w	r1, r1, #3
 801dcdc:	3d03      	subs	r5, #3
 801dcde:	45a8      	cmp	r8, r5
 801dce0:	bf38      	it	cc
 801dce2:	2100      	movcc	r1, #0
 801dce4:	440b      	add	r3, r1
 801dce6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801dcea:	b191      	cbz	r1, 801dd12 <__mdiff+0x11a>
 801dcec:	6117      	str	r7, [r2, #16]
 801dcee:	e79d      	b.n	801dc2c <__mdiff+0x34>
 801dcf0:	f854 1b04 	ldr.w	r1, [r4], #4
 801dcf4:	46e6      	mov	lr, ip
 801dcf6:	0c08      	lsrs	r0, r1, #16
 801dcf8:	fa1c fc81 	uxtah	ip, ip, r1
 801dcfc:	4471      	add	r1, lr
 801dcfe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801dd02:	b289      	uxth	r1, r1
 801dd04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801dd08:	f846 1b04 	str.w	r1, [r6], #4
 801dd0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801dd10:	e7dd      	b.n	801dcce <__mdiff+0xd6>
 801dd12:	3f01      	subs	r7, #1
 801dd14:	e7e7      	b.n	801dce6 <__mdiff+0xee>
 801dd16:	bf00      	nop
 801dd18:	0802124e 	.word	0x0802124e
 801dd1c:	0802125f 	.word	0x0802125f

0801dd20 <__d2b>:
 801dd20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dd24:	460f      	mov	r7, r1
 801dd26:	2101      	movs	r1, #1
 801dd28:	ec59 8b10 	vmov	r8, r9, d0
 801dd2c:	4616      	mov	r6, r2
 801dd2e:	f7ff fcd5 	bl	801d6dc <_Balloc>
 801dd32:	4604      	mov	r4, r0
 801dd34:	b930      	cbnz	r0, 801dd44 <__d2b+0x24>
 801dd36:	4602      	mov	r2, r0
 801dd38:	4b23      	ldr	r3, [pc, #140]	@ (801ddc8 <__d2b+0xa8>)
 801dd3a:	4824      	ldr	r0, [pc, #144]	@ (801ddcc <__d2b+0xac>)
 801dd3c:	f240 310f 	movw	r1, #783	@ 0x30f
 801dd40:	f7fd fed2 	bl	801bae8 <__assert_func>
 801dd44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801dd48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801dd4c:	b10d      	cbz	r5, 801dd52 <__d2b+0x32>
 801dd4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801dd52:	9301      	str	r3, [sp, #4]
 801dd54:	f1b8 0300 	subs.w	r3, r8, #0
 801dd58:	d023      	beq.n	801dda2 <__d2b+0x82>
 801dd5a:	4668      	mov	r0, sp
 801dd5c:	9300      	str	r3, [sp, #0]
 801dd5e:	f7ff fd84 	bl	801d86a <__lo0bits>
 801dd62:	e9dd 1200 	ldrd	r1, r2, [sp]
 801dd66:	b1d0      	cbz	r0, 801dd9e <__d2b+0x7e>
 801dd68:	f1c0 0320 	rsb	r3, r0, #32
 801dd6c:	fa02 f303 	lsl.w	r3, r2, r3
 801dd70:	430b      	orrs	r3, r1
 801dd72:	40c2      	lsrs	r2, r0
 801dd74:	6163      	str	r3, [r4, #20]
 801dd76:	9201      	str	r2, [sp, #4]
 801dd78:	9b01      	ldr	r3, [sp, #4]
 801dd7a:	61a3      	str	r3, [r4, #24]
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	bf0c      	ite	eq
 801dd80:	2201      	moveq	r2, #1
 801dd82:	2202      	movne	r2, #2
 801dd84:	6122      	str	r2, [r4, #16]
 801dd86:	b1a5      	cbz	r5, 801ddb2 <__d2b+0x92>
 801dd88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801dd8c:	4405      	add	r5, r0
 801dd8e:	603d      	str	r5, [r7, #0]
 801dd90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801dd94:	6030      	str	r0, [r6, #0]
 801dd96:	4620      	mov	r0, r4
 801dd98:	b003      	add	sp, #12
 801dd9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dd9e:	6161      	str	r1, [r4, #20]
 801dda0:	e7ea      	b.n	801dd78 <__d2b+0x58>
 801dda2:	a801      	add	r0, sp, #4
 801dda4:	f7ff fd61 	bl	801d86a <__lo0bits>
 801dda8:	9b01      	ldr	r3, [sp, #4]
 801ddaa:	6163      	str	r3, [r4, #20]
 801ddac:	3020      	adds	r0, #32
 801ddae:	2201      	movs	r2, #1
 801ddb0:	e7e8      	b.n	801dd84 <__d2b+0x64>
 801ddb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ddb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ddba:	6038      	str	r0, [r7, #0]
 801ddbc:	6918      	ldr	r0, [r3, #16]
 801ddbe:	f7ff fd35 	bl	801d82c <__hi0bits>
 801ddc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ddc6:	e7e5      	b.n	801dd94 <__d2b+0x74>
 801ddc8:	0802124e 	.word	0x0802124e
 801ddcc:	0802125f 	.word	0x0802125f

0801ddd0 <__ssputs_r>:
 801ddd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddd4:	688e      	ldr	r6, [r1, #8]
 801ddd6:	461f      	mov	r7, r3
 801ddd8:	42be      	cmp	r6, r7
 801ddda:	680b      	ldr	r3, [r1, #0]
 801dddc:	4682      	mov	sl, r0
 801ddde:	460c      	mov	r4, r1
 801dde0:	4690      	mov	r8, r2
 801dde2:	d82d      	bhi.n	801de40 <__ssputs_r+0x70>
 801dde4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dde8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ddec:	d026      	beq.n	801de3c <__ssputs_r+0x6c>
 801ddee:	6965      	ldr	r5, [r4, #20]
 801ddf0:	6909      	ldr	r1, [r1, #16]
 801ddf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ddf6:	eba3 0901 	sub.w	r9, r3, r1
 801ddfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ddfe:	1c7b      	adds	r3, r7, #1
 801de00:	444b      	add	r3, r9
 801de02:	106d      	asrs	r5, r5, #1
 801de04:	429d      	cmp	r5, r3
 801de06:	bf38      	it	cc
 801de08:	461d      	movcc	r5, r3
 801de0a:	0553      	lsls	r3, r2, #21
 801de0c:	d527      	bpl.n	801de5e <__ssputs_r+0x8e>
 801de0e:	4629      	mov	r1, r5
 801de10:	f7ff fbd8 	bl	801d5c4 <_malloc_r>
 801de14:	4606      	mov	r6, r0
 801de16:	b360      	cbz	r0, 801de72 <__ssputs_r+0xa2>
 801de18:	6921      	ldr	r1, [r4, #16]
 801de1a:	464a      	mov	r2, r9
 801de1c:	f000 ffb2 	bl	801ed84 <memcpy>
 801de20:	89a3      	ldrh	r3, [r4, #12]
 801de22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801de26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801de2a:	81a3      	strh	r3, [r4, #12]
 801de2c:	6126      	str	r6, [r4, #16]
 801de2e:	6165      	str	r5, [r4, #20]
 801de30:	444e      	add	r6, r9
 801de32:	eba5 0509 	sub.w	r5, r5, r9
 801de36:	6026      	str	r6, [r4, #0]
 801de38:	60a5      	str	r5, [r4, #8]
 801de3a:	463e      	mov	r6, r7
 801de3c:	42be      	cmp	r6, r7
 801de3e:	d900      	bls.n	801de42 <__ssputs_r+0x72>
 801de40:	463e      	mov	r6, r7
 801de42:	6820      	ldr	r0, [r4, #0]
 801de44:	4632      	mov	r2, r6
 801de46:	4641      	mov	r1, r8
 801de48:	f000 ff2e 	bl	801eca8 <memmove>
 801de4c:	68a3      	ldr	r3, [r4, #8]
 801de4e:	1b9b      	subs	r3, r3, r6
 801de50:	60a3      	str	r3, [r4, #8]
 801de52:	6823      	ldr	r3, [r4, #0]
 801de54:	4433      	add	r3, r6
 801de56:	6023      	str	r3, [r4, #0]
 801de58:	2000      	movs	r0, #0
 801de5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de5e:	462a      	mov	r2, r5
 801de60:	f000 ffc4 	bl	801edec <_realloc_r>
 801de64:	4606      	mov	r6, r0
 801de66:	2800      	cmp	r0, #0
 801de68:	d1e0      	bne.n	801de2c <__ssputs_r+0x5c>
 801de6a:	6921      	ldr	r1, [r4, #16]
 801de6c:	4650      	mov	r0, sl
 801de6e:	f7ff fb35 	bl	801d4dc <_free_r>
 801de72:	230c      	movs	r3, #12
 801de74:	f8ca 3000 	str.w	r3, [sl]
 801de78:	89a3      	ldrh	r3, [r4, #12]
 801de7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801de7e:	81a3      	strh	r3, [r4, #12]
 801de80:	f04f 30ff 	mov.w	r0, #4294967295
 801de84:	e7e9      	b.n	801de5a <__ssputs_r+0x8a>
	...

0801de88 <_svfiprintf_r>:
 801de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de8c:	4698      	mov	r8, r3
 801de8e:	898b      	ldrh	r3, [r1, #12]
 801de90:	061b      	lsls	r3, r3, #24
 801de92:	b09d      	sub	sp, #116	@ 0x74
 801de94:	4607      	mov	r7, r0
 801de96:	460d      	mov	r5, r1
 801de98:	4614      	mov	r4, r2
 801de9a:	d510      	bpl.n	801debe <_svfiprintf_r+0x36>
 801de9c:	690b      	ldr	r3, [r1, #16]
 801de9e:	b973      	cbnz	r3, 801debe <_svfiprintf_r+0x36>
 801dea0:	2140      	movs	r1, #64	@ 0x40
 801dea2:	f7ff fb8f 	bl	801d5c4 <_malloc_r>
 801dea6:	6028      	str	r0, [r5, #0]
 801dea8:	6128      	str	r0, [r5, #16]
 801deaa:	b930      	cbnz	r0, 801deba <_svfiprintf_r+0x32>
 801deac:	230c      	movs	r3, #12
 801deae:	603b      	str	r3, [r7, #0]
 801deb0:	f04f 30ff 	mov.w	r0, #4294967295
 801deb4:	b01d      	add	sp, #116	@ 0x74
 801deb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801deba:	2340      	movs	r3, #64	@ 0x40
 801debc:	616b      	str	r3, [r5, #20]
 801debe:	2300      	movs	r3, #0
 801dec0:	9309      	str	r3, [sp, #36]	@ 0x24
 801dec2:	2320      	movs	r3, #32
 801dec4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801dec8:	f8cd 800c 	str.w	r8, [sp, #12]
 801decc:	2330      	movs	r3, #48	@ 0x30
 801dece:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e06c <_svfiprintf_r+0x1e4>
 801ded2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ded6:	f04f 0901 	mov.w	r9, #1
 801deda:	4623      	mov	r3, r4
 801dedc:	469a      	mov	sl, r3
 801dede:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dee2:	b10a      	cbz	r2, 801dee8 <_svfiprintf_r+0x60>
 801dee4:	2a25      	cmp	r2, #37	@ 0x25
 801dee6:	d1f9      	bne.n	801dedc <_svfiprintf_r+0x54>
 801dee8:	ebba 0b04 	subs.w	fp, sl, r4
 801deec:	d00b      	beq.n	801df06 <_svfiprintf_r+0x7e>
 801deee:	465b      	mov	r3, fp
 801def0:	4622      	mov	r2, r4
 801def2:	4629      	mov	r1, r5
 801def4:	4638      	mov	r0, r7
 801def6:	f7ff ff6b 	bl	801ddd0 <__ssputs_r>
 801defa:	3001      	adds	r0, #1
 801defc:	f000 80a7 	beq.w	801e04e <_svfiprintf_r+0x1c6>
 801df00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df02:	445a      	add	r2, fp
 801df04:	9209      	str	r2, [sp, #36]	@ 0x24
 801df06:	f89a 3000 	ldrb.w	r3, [sl]
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	f000 809f 	beq.w	801e04e <_svfiprintf_r+0x1c6>
 801df10:	2300      	movs	r3, #0
 801df12:	f04f 32ff 	mov.w	r2, #4294967295
 801df16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801df1a:	f10a 0a01 	add.w	sl, sl, #1
 801df1e:	9304      	str	r3, [sp, #16]
 801df20:	9307      	str	r3, [sp, #28]
 801df22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801df26:	931a      	str	r3, [sp, #104]	@ 0x68
 801df28:	4654      	mov	r4, sl
 801df2a:	2205      	movs	r2, #5
 801df2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df30:	484e      	ldr	r0, [pc, #312]	@ (801e06c <_svfiprintf_r+0x1e4>)
 801df32:	f7e2 f9d5 	bl	80002e0 <memchr>
 801df36:	9a04      	ldr	r2, [sp, #16]
 801df38:	b9d8      	cbnz	r0, 801df72 <_svfiprintf_r+0xea>
 801df3a:	06d0      	lsls	r0, r2, #27
 801df3c:	bf44      	itt	mi
 801df3e:	2320      	movmi	r3, #32
 801df40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801df44:	0711      	lsls	r1, r2, #28
 801df46:	bf44      	itt	mi
 801df48:	232b      	movmi	r3, #43	@ 0x2b
 801df4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801df4e:	f89a 3000 	ldrb.w	r3, [sl]
 801df52:	2b2a      	cmp	r3, #42	@ 0x2a
 801df54:	d015      	beq.n	801df82 <_svfiprintf_r+0xfa>
 801df56:	9a07      	ldr	r2, [sp, #28]
 801df58:	4654      	mov	r4, sl
 801df5a:	2000      	movs	r0, #0
 801df5c:	f04f 0c0a 	mov.w	ip, #10
 801df60:	4621      	mov	r1, r4
 801df62:	f811 3b01 	ldrb.w	r3, [r1], #1
 801df66:	3b30      	subs	r3, #48	@ 0x30
 801df68:	2b09      	cmp	r3, #9
 801df6a:	d94b      	bls.n	801e004 <_svfiprintf_r+0x17c>
 801df6c:	b1b0      	cbz	r0, 801df9c <_svfiprintf_r+0x114>
 801df6e:	9207      	str	r2, [sp, #28]
 801df70:	e014      	b.n	801df9c <_svfiprintf_r+0x114>
 801df72:	eba0 0308 	sub.w	r3, r0, r8
 801df76:	fa09 f303 	lsl.w	r3, r9, r3
 801df7a:	4313      	orrs	r3, r2
 801df7c:	9304      	str	r3, [sp, #16]
 801df7e:	46a2      	mov	sl, r4
 801df80:	e7d2      	b.n	801df28 <_svfiprintf_r+0xa0>
 801df82:	9b03      	ldr	r3, [sp, #12]
 801df84:	1d19      	adds	r1, r3, #4
 801df86:	681b      	ldr	r3, [r3, #0]
 801df88:	9103      	str	r1, [sp, #12]
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	bfbb      	ittet	lt
 801df8e:	425b      	neglt	r3, r3
 801df90:	f042 0202 	orrlt.w	r2, r2, #2
 801df94:	9307      	strge	r3, [sp, #28]
 801df96:	9307      	strlt	r3, [sp, #28]
 801df98:	bfb8      	it	lt
 801df9a:	9204      	strlt	r2, [sp, #16]
 801df9c:	7823      	ldrb	r3, [r4, #0]
 801df9e:	2b2e      	cmp	r3, #46	@ 0x2e
 801dfa0:	d10a      	bne.n	801dfb8 <_svfiprintf_r+0x130>
 801dfa2:	7863      	ldrb	r3, [r4, #1]
 801dfa4:	2b2a      	cmp	r3, #42	@ 0x2a
 801dfa6:	d132      	bne.n	801e00e <_svfiprintf_r+0x186>
 801dfa8:	9b03      	ldr	r3, [sp, #12]
 801dfaa:	1d1a      	adds	r2, r3, #4
 801dfac:	681b      	ldr	r3, [r3, #0]
 801dfae:	9203      	str	r2, [sp, #12]
 801dfb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dfb4:	3402      	adds	r4, #2
 801dfb6:	9305      	str	r3, [sp, #20]
 801dfb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e07c <_svfiprintf_r+0x1f4>
 801dfbc:	7821      	ldrb	r1, [r4, #0]
 801dfbe:	2203      	movs	r2, #3
 801dfc0:	4650      	mov	r0, sl
 801dfc2:	f7e2 f98d 	bl	80002e0 <memchr>
 801dfc6:	b138      	cbz	r0, 801dfd8 <_svfiprintf_r+0x150>
 801dfc8:	9b04      	ldr	r3, [sp, #16]
 801dfca:	eba0 000a 	sub.w	r0, r0, sl
 801dfce:	2240      	movs	r2, #64	@ 0x40
 801dfd0:	4082      	lsls	r2, r0
 801dfd2:	4313      	orrs	r3, r2
 801dfd4:	3401      	adds	r4, #1
 801dfd6:	9304      	str	r3, [sp, #16]
 801dfd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dfdc:	4824      	ldr	r0, [pc, #144]	@ (801e070 <_svfiprintf_r+0x1e8>)
 801dfde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dfe2:	2206      	movs	r2, #6
 801dfe4:	f7e2 f97c 	bl	80002e0 <memchr>
 801dfe8:	2800      	cmp	r0, #0
 801dfea:	d036      	beq.n	801e05a <_svfiprintf_r+0x1d2>
 801dfec:	4b21      	ldr	r3, [pc, #132]	@ (801e074 <_svfiprintf_r+0x1ec>)
 801dfee:	bb1b      	cbnz	r3, 801e038 <_svfiprintf_r+0x1b0>
 801dff0:	9b03      	ldr	r3, [sp, #12]
 801dff2:	3307      	adds	r3, #7
 801dff4:	f023 0307 	bic.w	r3, r3, #7
 801dff8:	3308      	adds	r3, #8
 801dffa:	9303      	str	r3, [sp, #12]
 801dffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dffe:	4433      	add	r3, r6
 801e000:	9309      	str	r3, [sp, #36]	@ 0x24
 801e002:	e76a      	b.n	801deda <_svfiprintf_r+0x52>
 801e004:	fb0c 3202 	mla	r2, ip, r2, r3
 801e008:	460c      	mov	r4, r1
 801e00a:	2001      	movs	r0, #1
 801e00c:	e7a8      	b.n	801df60 <_svfiprintf_r+0xd8>
 801e00e:	2300      	movs	r3, #0
 801e010:	3401      	adds	r4, #1
 801e012:	9305      	str	r3, [sp, #20]
 801e014:	4619      	mov	r1, r3
 801e016:	f04f 0c0a 	mov.w	ip, #10
 801e01a:	4620      	mov	r0, r4
 801e01c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e020:	3a30      	subs	r2, #48	@ 0x30
 801e022:	2a09      	cmp	r2, #9
 801e024:	d903      	bls.n	801e02e <_svfiprintf_r+0x1a6>
 801e026:	2b00      	cmp	r3, #0
 801e028:	d0c6      	beq.n	801dfb8 <_svfiprintf_r+0x130>
 801e02a:	9105      	str	r1, [sp, #20]
 801e02c:	e7c4      	b.n	801dfb8 <_svfiprintf_r+0x130>
 801e02e:	fb0c 2101 	mla	r1, ip, r1, r2
 801e032:	4604      	mov	r4, r0
 801e034:	2301      	movs	r3, #1
 801e036:	e7f0      	b.n	801e01a <_svfiprintf_r+0x192>
 801e038:	ab03      	add	r3, sp, #12
 801e03a:	9300      	str	r3, [sp, #0]
 801e03c:	462a      	mov	r2, r5
 801e03e:	4b0e      	ldr	r3, [pc, #56]	@ (801e078 <_svfiprintf_r+0x1f0>)
 801e040:	a904      	add	r1, sp, #16
 801e042:	4638      	mov	r0, r7
 801e044:	f7fd fe78 	bl	801bd38 <_printf_float>
 801e048:	1c42      	adds	r2, r0, #1
 801e04a:	4606      	mov	r6, r0
 801e04c:	d1d6      	bne.n	801dffc <_svfiprintf_r+0x174>
 801e04e:	89ab      	ldrh	r3, [r5, #12]
 801e050:	065b      	lsls	r3, r3, #25
 801e052:	f53f af2d 	bmi.w	801deb0 <_svfiprintf_r+0x28>
 801e056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e058:	e72c      	b.n	801deb4 <_svfiprintf_r+0x2c>
 801e05a:	ab03      	add	r3, sp, #12
 801e05c:	9300      	str	r3, [sp, #0]
 801e05e:	462a      	mov	r2, r5
 801e060:	4b05      	ldr	r3, [pc, #20]	@ (801e078 <_svfiprintf_r+0x1f0>)
 801e062:	a904      	add	r1, sp, #16
 801e064:	4638      	mov	r0, r7
 801e066:	f7fe f8ef 	bl	801c248 <_printf_i>
 801e06a:	e7ed      	b.n	801e048 <_svfiprintf_r+0x1c0>
 801e06c:	080212b8 	.word	0x080212b8
 801e070:	080212c2 	.word	0x080212c2
 801e074:	0801bd39 	.word	0x0801bd39
 801e078:	0801ddd1 	.word	0x0801ddd1
 801e07c:	080212be 	.word	0x080212be

0801e080 <_sungetc_r>:
 801e080:	b538      	push	{r3, r4, r5, lr}
 801e082:	1c4b      	adds	r3, r1, #1
 801e084:	4614      	mov	r4, r2
 801e086:	d103      	bne.n	801e090 <_sungetc_r+0x10>
 801e088:	f04f 35ff 	mov.w	r5, #4294967295
 801e08c:	4628      	mov	r0, r5
 801e08e:	bd38      	pop	{r3, r4, r5, pc}
 801e090:	8993      	ldrh	r3, [r2, #12]
 801e092:	f023 0320 	bic.w	r3, r3, #32
 801e096:	8193      	strh	r3, [r2, #12]
 801e098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e09a:	6852      	ldr	r2, [r2, #4]
 801e09c:	b2cd      	uxtb	r5, r1
 801e09e:	b18b      	cbz	r3, 801e0c4 <_sungetc_r+0x44>
 801e0a0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801e0a2:	4293      	cmp	r3, r2
 801e0a4:	dd08      	ble.n	801e0b8 <_sungetc_r+0x38>
 801e0a6:	6823      	ldr	r3, [r4, #0]
 801e0a8:	1e5a      	subs	r2, r3, #1
 801e0aa:	6022      	str	r2, [r4, #0]
 801e0ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e0b0:	6863      	ldr	r3, [r4, #4]
 801e0b2:	3301      	adds	r3, #1
 801e0b4:	6063      	str	r3, [r4, #4]
 801e0b6:	e7e9      	b.n	801e08c <_sungetc_r+0xc>
 801e0b8:	4621      	mov	r1, r4
 801e0ba:	f000 fd26 	bl	801eb0a <__submore>
 801e0be:	2800      	cmp	r0, #0
 801e0c0:	d0f1      	beq.n	801e0a6 <_sungetc_r+0x26>
 801e0c2:	e7e1      	b.n	801e088 <_sungetc_r+0x8>
 801e0c4:	6921      	ldr	r1, [r4, #16]
 801e0c6:	6823      	ldr	r3, [r4, #0]
 801e0c8:	b151      	cbz	r1, 801e0e0 <_sungetc_r+0x60>
 801e0ca:	4299      	cmp	r1, r3
 801e0cc:	d208      	bcs.n	801e0e0 <_sungetc_r+0x60>
 801e0ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801e0d2:	42a9      	cmp	r1, r5
 801e0d4:	d104      	bne.n	801e0e0 <_sungetc_r+0x60>
 801e0d6:	3b01      	subs	r3, #1
 801e0d8:	3201      	adds	r2, #1
 801e0da:	6023      	str	r3, [r4, #0]
 801e0dc:	6062      	str	r2, [r4, #4]
 801e0de:	e7d5      	b.n	801e08c <_sungetc_r+0xc>
 801e0e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801e0e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e0e8:	6363      	str	r3, [r4, #52]	@ 0x34
 801e0ea:	2303      	movs	r3, #3
 801e0ec:	63a3      	str	r3, [r4, #56]	@ 0x38
 801e0ee:	4623      	mov	r3, r4
 801e0f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 801e0f4:	6023      	str	r3, [r4, #0]
 801e0f6:	2301      	movs	r3, #1
 801e0f8:	e7dc      	b.n	801e0b4 <_sungetc_r+0x34>

0801e0fa <__ssrefill_r>:
 801e0fa:	b510      	push	{r4, lr}
 801e0fc:	460c      	mov	r4, r1
 801e0fe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801e100:	b169      	cbz	r1, 801e11e <__ssrefill_r+0x24>
 801e102:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e106:	4299      	cmp	r1, r3
 801e108:	d001      	beq.n	801e10e <__ssrefill_r+0x14>
 801e10a:	f7ff f9e7 	bl	801d4dc <_free_r>
 801e10e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e110:	6063      	str	r3, [r4, #4]
 801e112:	2000      	movs	r0, #0
 801e114:	6360      	str	r0, [r4, #52]	@ 0x34
 801e116:	b113      	cbz	r3, 801e11e <__ssrefill_r+0x24>
 801e118:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801e11a:	6023      	str	r3, [r4, #0]
 801e11c:	bd10      	pop	{r4, pc}
 801e11e:	6923      	ldr	r3, [r4, #16]
 801e120:	6023      	str	r3, [r4, #0]
 801e122:	2300      	movs	r3, #0
 801e124:	6063      	str	r3, [r4, #4]
 801e126:	89a3      	ldrh	r3, [r4, #12]
 801e128:	f043 0320 	orr.w	r3, r3, #32
 801e12c:	81a3      	strh	r3, [r4, #12]
 801e12e:	f04f 30ff 	mov.w	r0, #4294967295
 801e132:	e7f3      	b.n	801e11c <__ssrefill_r+0x22>

0801e134 <__ssvfiscanf_r>:
 801e134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e138:	460c      	mov	r4, r1
 801e13a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801e13e:	2100      	movs	r1, #0
 801e140:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801e144:	49a6      	ldr	r1, [pc, #664]	@ (801e3e0 <__ssvfiscanf_r+0x2ac>)
 801e146:	91a0      	str	r1, [sp, #640]	@ 0x280
 801e148:	f10d 0804 	add.w	r8, sp, #4
 801e14c:	49a5      	ldr	r1, [pc, #660]	@ (801e3e4 <__ssvfiscanf_r+0x2b0>)
 801e14e:	4fa6      	ldr	r7, [pc, #664]	@ (801e3e8 <__ssvfiscanf_r+0x2b4>)
 801e150:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801e154:	4606      	mov	r6, r0
 801e156:	91a1      	str	r1, [sp, #644]	@ 0x284
 801e158:	9300      	str	r3, [sp, #0]
 801e15a:	f892 9000 	ldrb.w	r9, [r2]
 801e15e:	f1b9 0f00 	cmp.w	r9, #0
 801e162:	f000 8158 	beq.w	801e416 <__ssvfiscanf_r+0x2e2>
 801e166:	f817 3009 	ldrb.w	r3, [r7, r9]
 801e16a:	f013 0308 	ands.w	r3, r3, #8
 801e16e:	f102 0501 	add.w	r5, r2, #1
 801e172:	d019      	beq.n	801e1a8 <__ssvfiscanf_r+0x74>
 801e174:	6863      	ldr	r3, [r4, #4]
 801e176:	2b00      	cmp	r3, #0
 801e178:	dd0f      	ble.n	801e19a <__ssvfiscanf_r+0x66>
 801e17a:	6823      	ldr	r3, [r4, #0]
 801e17c:	781a      	ldrb	r2, [r3, #0]
 801e17e:	5cba      	ldrb	r2, [r7, r2]
 801e180:	0712      	lsls	r2, r2, #28
 801e182:	d401      	bmi.n	801e188 <__ssvfiscanf_r+0x54>
 801e184:	462a      	mov	r2, r5
 801e186:	e7e8      	b.n	801e15a <__ssvfiscanf_r+0x26>
 801e188:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801e18a:	3201      	adds	r2, #1
 801e18c:	9245      	str	r2, [sp, #276]	@ 0x114
 801e18e:	6862      	ldr	r2, [r4, #4]
 801e190:	3301      	adds	r3, #1
 801e192:	3a01      	subs	r2, #1
 801e194:	6062      	str	r2, [r4, #4]
 801e196:	6023      	str	r3, [r4, #0]
 801e198:	e7ec      	b.n	801e174 <__ssvfiscanf_r+0x40>
 801e19a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801e19c:	4621      	mov	r1, r4
 801e19e:	4630      	mov	r0, r6
 801e1a0:	4798      	blx	r3
 801e1a2:	2800      	cmp	r0, #0
 801e1a4:	d0e9      	beq.n	801e17a <__ssvfiscanf_r+0x46>
 801e1a6:	e7ed      	b.n	801e184 <__ssvfiscanf_r+0x50>
 801e1a8:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801e1ac:	f040 8085 	bne.w	801e2ba <__ssvfiscanf_r+0x186>
 801e1b0:	9341      	str	r3, [sp, #260]	@ 0x104
 801e1b2:	9343      	str	r3, [sp, #268]	@ 0x10c
 801e1b4:	7853      	ldrb	r3, [r2, #1]
 801e1b6:	2b2a      	cmp	r3, #42	@ 0x2a
 801e1b8:	bf02      	ittt	eq
 801e1ba:	2310      	moveq	r3, #16
 801e1bc:	1c95      	addeq	r5, r2, #2
 801e1be:	9341      	streq	r3, [sp, #260]	@ 0x104
 801e1c0:	220a      	movs	r2, #10
 801e1c2:	46aa      	mov	sl, r5
 801e1c4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801e1c8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801e1cc:	2b09      	cmp	r3, #9
 801e1ce:	d91e      	bls.n	801e20e <__ssvfiscanf_r+0xda>
 801e1d0:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801e3ec <__ssvfiscanf_r+0x2b8>
 801e1d4:	2203      	movs	r2, #3
 801e1d6:	4658      	mov	r0, fp
 801e1d8:	f7e2 f882 	bl	80002e0 <memchr>
 801e1dc:	b138      	cbz	r0, 801e1ee <__ssvfiscanf_r+0xba>
 801e1de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801e1e0:	eba0 000b 	sub.w	r0, r0, fp
 801e1e4:	2301      	movs	r3, #1
 801e1e6:	4083      	lsls	r3, r0
 801e1e8:	4313      	orrs	r3, r2
 801e1ea:	9341      	str	r3, [sp, #260]	@ 0x104
 801e1ec:	4655      	mov	r5, sl
 801e1ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e1f2:	2b78      	cmp	r3, #120	@ 0x78
 801e1f4:	d806      	bhi.n	801e204 <__ssvfiscanf_r+0xd0>
 801e1f6:	2b57      	cmp	r3, #87	@ 0x57
 801e1f8:	d810      	bhi.n	801e21c <__ssvfiscanf_r+0xe8>
 801e1fa:	2b25      	cmp	r3, #37	@ 0x25
 801e1fc:	d05d      	beq.n	801e2ba <__ssvfiscanf_r+0x186>
 801e1fe:	d857      	bhi.n	801e2b0 <__ssvfiscanf_r+0x17c>
 801e200:	2b00      	cmp	r3, #0
 801e202:	d075      	beq.n	801e2f0 <__ssvfiscanf_r+0x1bc>
 801e204:	2303      	movs	r3, #3
 801e206:	9347      	str	r3, [sp, #284]	@ 0x11c
 801e208:	230a      	movs	r3, #10
 801e20a:	9342      	str	r3, [sp, #264]	@ 0x108
 801e20c:	e088      	b.n	801e320 <__ssvfiscanf_r+0x1ec>
 801e20e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801e210:	fb02 1103 	mla	r1, r2, r3, r1
 801e214:	3930      	subs	r1, #48	@ 0x30
 801e216:	9143      	str	r1, [sp, #268]	@ 0x10c
 801e218:	4655      	mov	r5, sl
 801e21a:	e7d2      	b.n	801e1c2 <__ssvfiscanf_r+0x8e>
 801e21c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801e220:	2a20      	cmp	r2, #32
 801e222:	d8ef      	bhi.n	801e204 <__ssvfiscanf_r+0xd0>
 801e224:	a101      	add	r1, pc, #4	@ (adr r1, 801e22c <__ssvfiscanf_r+0xf8>)
 801e226:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e22a:	bf00      	nop
 801e22c:	0801e2ff 	.word	0x0801e2ff
 801e230:	0801e205 	.word	0x0801e205
 801e234:	0801e205 	.word	0x0801e205
 801e238:	0801e359 	.word	0x0801e359
 801e23c:	0801e205 	.word	0x0801e205
 801e240:	0801e205 	.word	0x0801e205
 801e244:	0801e205 	.word	0x0801e205
 801e248:	0801e205 	.word	0x0801e205
 801e24c:	0801e205 	.word	0x0801e205
 801e250:	0801e205 	.word	0x0801e205
 801e254:	0801e205 	.word	0x0801e205
 801e258:	0801e36f 	.word	0x0801e36f
 801e25c:	0801e355 	.word	0x0801e355
 801e260:	0801e2b7 	.word	0x0801e2b7
 801e264:	0801e2b7 	.word	0x0801e2b7
 801e268:	0801e2b7 	.word	0x0801e2b7
 801e26c:	0801e205 	.word	0x0801e205
 801e270:	0801e311 	.word	0x0801e311
 801e274:	0801e205 	.word	0x0801e205
 801e278:	0801e205 	.word	0x0801e205
 801e27c:	0801e205 	.word	0x0801e205
 801e280:	0801e205 	.word	0x0801e205
 801e284:	0801e37f 	.word	0x0801e37f
 801e288:	0801e319 	.word	0x0801e319
 801e28c:	0801e2f7 	.word	0x0801e2f7
 801e290:	0801e205 	.word	0x0801e205
 801e294:	0801e205 	.word	0x0801e205
 801e298:	0801e37b 	.word	0x0801e37b
 801e29c:	0801e205 	.word	0x0801e205
 801e2a0:	0801e355 	.word	0x0801e355
 801e2a4:	0801e205 	.word	0x0801e205
 801e2a8:	0801e205 	.word	0x0801e205
 801e2ac:	0801e2ff 	.word	0x0801e2ff
 801e2b0:	3b45      	subs	r3, #69	@ 0x45
 801e2b2:	2b02      	cmp	r3, #2
 801e2b4:	d8a6      	bhi.n	801e204 <__ssvfiscanf_r+0xd0>
 801e2b6:	2305      	movs	r3, #5
 801e2b8:	e031      	b.n	801e31e <__ssvfiscanf_r+0x1ea>
 801e2ba:	6863      	ldr	r3, [r4, #4]
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	dd0d      	ble.n	801e2dc <__ssvfiscanf_r+0x1a8>
 801e2c0:	6823      	ldr	r3, [r4, #0]
 801e2c2:	781a      	ldrb	r2, [r3, #0]
 801e2c4:	454a      	cmp	r2, r9
 801e2c6:	f040 80a6 	bne.w	801e416 <__ssvfiscanf_r+0x2e2>
 801e2ca:	3301      	adds	r3, #1
 801e2cc:	6862      	ldr	r2, [r4, #4]
 801e2ce:	6023      	str	r3, [r4, #0]
 801e2d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801e2d2:	3a01      	subs	r2, #1
 801e2d4:	3301      	adds	r3, #1
 801e2d6:	6062      	str	r2, [r4, #4]
 801e2d8:	9345      	str	r3, [sp, #276]	@ 0x114
 801e2da:	e753      	b.n	801e184 <__ssvfiscanf_r+0x50>
 801e2dc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801e2de:	4621      	mov	r1, r4
 801e2e0:	4630      	mov	r0, r6
 801e2e2:	4798      	blx	r3
 801e2e4:	2800      	cmp	r0, #0
 801e2e6:	d0eb      	beq.n	801e2c0 <__ssvfiscanf_r+0x18c>
 801e2e8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801e2ea:	2800      	cmp	r0, #0
 801e2ec:	f040 808b 	bne.w	801e406 <__ssvfiscanf_r+0x2d2>
 801e2f0:	f04f 30ff 	mov.w	r0, #4294967295
 801e2f4:	e08b      	b.n	801e40e <__ssvfiscanf_r+0x2da>
 801e2f6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801e2f8:	f042 0220 	orr.w	r2, r2, #32
 801e2fc:	9241      	str	r2, [sp, #260]	@ 0x104
 801e2fe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801e300:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801e304:	9241      	str	r2, [sp, #260]	@ 0x104
 801e306:	2210      	movs	r2, #16
 801e308:	2b6e      	cmp	r3, #110	@ 0x6e
 801e30a:	9242      	str	r2, [sp, #264]	@ 0x108
 801e30c:	d902      	bls.n	801e314 <__ssvfiscanf_r+0x1e0>
 801e30e:	e005      	b.n	801e31c <__ssvfiscanf_r+0x1e8>
 801e310:	2300      	movs	r3, #0
 801e312:	9342      	str	r3, [sp, #264]	@ 0x108
 801e314:	2303      	movs	r3, #3
 801e316:	e002      	b.n	801e31e <__ssvfiscanf_r+0x1ea>
 801e318:	2308      	movs	r3, #8
 801e31a:	9342      	str	r3, [sp, #264]	@ 0x108
 801e31c:	2304      	movs	r3, #4
 801e31e:	9347      	str	r3, [sp, #284]	@ 0x11c
 801e320:	6863      	ldr	r3, [r4, #4]
 801e322:	2b00      	cmp	r3, #0
 801e324:	dd39      	ble.n	801e39a <__ssvfiscanf_r+0x266>
 801e326:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801e328:	0659      	lsls	r1, r3, #25
 801e32a:	d404      	bmi.n	801e336 <__ssvfiscanf_r+0x202>
 801e32c:	6823      	ldr	r3, [r4, #0]
 801e32e:	781a      	ldrb	r2, [r3, #0]
 801e330:	5cba      	ldrb	r2, [r7, r2]
 801e332:	0712      	lsls	r2, r2, #28
 801e334:	d438      	bmi.n	801e3a8 <__ssvfiscanf_r+0x274>
 801e336:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801e338:	2b02      	cmp	r3, #2
 801e33a:	dc47      	bgt.n	801e3cc <__ssvfiscanf_r+0x298>
 801e33c:	466b      	mov	r3, sp
 801e33e:	4622      	mov	r2, r4
 801e340:	a941      	add	r1, sp, #260	@ 0x104
 801e342:	4630      	mov	r0, r6
 801e344:	f000 f9ae 	bl	801e6a4 <_scanf_chars>
 801e348:	2801      	cmp	r0, #1
 801e34a:	d064      	beq.n	801e416 <__ssvfiscanf_r+0x2e2>
 801e34c:	2802      	cmp	r0, #2
 801e34e:	f47f af19 	bne.w	801e184 <__ssvfiscanf_r+0x50>
 801e352:	e7c9      	b.n	801e2e8 <__ssvfiscanf_r+0x1b4>
 801e354:	220a      	movs	r2, #10
 801e356:	e7d7      	b.n	801e308 <__ssvfiscanf_r+0x1d4>
 801e358:	4629      	mov	r1, r5
 801e35a:	4640      	mov	r0, r8
 801e35c:	f000 fb9c 	bl	801ea98 <__sccl>
 801e360:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801e362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e366:	9341      	str	r3, [sp, #260]	@ 0x104
 801e368:	4605      	mov	r5, r0
 801e36a:	2301      	movs	r3, #1
 801e36c:	e7d7      	b.n	801e31e <__ssvfiscanf_r+0x1ea>
 801e36e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801e370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e374:	9341      	str	r3, [sp, #260]	@ 0x104
 801e376:	2300      	movs	r3, #0
 801e378:	e7d1      	b.n	801e31e <__ssvfiscanf_r+0x1ea>
 801e37a:	2302      	movs	r3, #2
 801e37c:	e7cf      	b.n	801e31e <__ssvfiscanf_r+0x1ea>
 801e37e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801e380:	06c3      	lsls	r3, r0, #27
 801e382:	f53f aeff 	bmi.w	801e184 <__ssvfiscanf_r+0x50>
 801e386:	9b00      	ldr	r3, [sp, #0]
 801e388:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801e38a:	1d19      	adds	r1, r3, #4
 801e38c:	9100      	str	r1, [sp, #0]
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	07c0      	lsls	r0, r0, #31
 801e392:	bf4c      	ite	mi
 801e394:	801a      	strhmi	r2, [r3, #0]
 801e396:	601a      	strpl	r2, [r3, #0]
 801e398:	e6f4      	b.n	801e184 <__ssvfiscanf_r+0x50>
 801e39a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801e39c:	4621      	mov	r1, r4
 801e39e:	4630      	mov	r0, r6
 801e3a0:	4798      	blx	r3
 801e3a2:	2800      	cmp	r0, #0
 801e3a4:	d0bf      	beq.n	801e326 <__ssvfiscanf_r+0x1f2>
 801e3a6:	e79f      	b.n	801e2e8 <__ssvfiscanf_r+0x1b4>
 801e3a8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801e3aa:	3201      	adds	r2, #1
 801e3ac:	9245      	str	r2, [sp, #276]	@ 0x114
 801e3ae:	6862      	ldr	r2, [r4, #4]
 801e3b0:	3a01      	subs	r2, #1
 801e3b2:	2a00      	cmp	r2, #0
 801e3b4:	6062      	str	r2, [r4, #4]
 801e3b6:	dd02      	ble.n	801e3be <__ssvfiscanf_r+0x28a>
 801e3b8:	3301      	adds	r3, #1
 801e3ba:	6023      	str	r3, [r4, #0]
 801e3bc:	e7b6      	b.n	801e32c <__ssvfiscanf_r+0x1f8>
 801e3be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801e3c0:	4621      	mov	r1, r4
 801e3c2:	4630      	mov	r0, r6
 801e3c4:	4798      	blx	r3
 801e3c6:	2800      	cmp	r0, #0
 801e3c8:	d0b0      	beq.n	801e32c <__ssvfiscanf_r+0x1f8>
 801e3ca:	e78d      	b.n	801e2e8 <__ssvfiscanf_r+0x1b4>
 801e3cc:	2b04      	cmp	r3, #4
 801e3ce:	dc0f      	bgt.n	801e3f0 <__ssvfiscanf_r+0x2bc>
 801e3d0:	466b      	mov	r3, sp
 801e3d2:	4622      	mov	r2, r4
 801e3d4:	a941      	add	r1, sp, #260	@ 0x104
 801e3d6:	4630      	mov	r0, r6
 801e3d8:	f000 f9be 	bl	801e758 <_scanf_i>
 801e3dc:	e7b4      	b.n	801e348 <__ssvfiscanf_r+0x214>
 801e3de:	bf00      	nop
 801e3e0:	0801e081 	.word	0x0801e081
 801e3e4:	0801e0fb 	.word	0x0801e0fb
 801e3e8:	080212ef 	.word	0x080212ef
 801e3ec:	080212be 	.word	0x080212be
 801e3f0:	4b0a      	ldr	r3, [pc, #40]	@ (801e41c <__ssvfiscanf_r+0x2e8>)
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	f43f aec6 	beq.w	801e184 <__ssvfiscanf_r+0x50>
 801e3f8:	466b      	mov	r3, sp
 801e3fa:	4622      	mov	r2, r4
 801e3fc:	a941      	add	r1, sp, #260	@ 0x104
 801e3fe:	4630      	mov	r0, r6
 801e400:	f3af 8000 	nop.w
 801e404:	e7a0      	b.n	801e348 <__ssvfiscanf_r+0x214>
 801e406:	89a3      	ldrh	r3, [r4, #12]
 801e408:	065b      	lsls	r3, r3, #25
 801e40a:	f53f af71 	bmi.w	801e2f0 <__ssvfiscanf_r+0x1bc>
 801e40e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801e412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e416:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801e418:	e7f9      	b.n	801e40e <__ssvfiscanf_r+0x2da>
 801e41a:	bf00      	nop
 801e41c:	00000000 	.word	0x00000000

0801e420 <__sfputc_r>:
 801e420:	6893      	ldr	r3, [r2, #8]
 801e422:	3b01      	subs	r3, #1
 801e424:	2b00      	cmp	r3, #0
 801e426:	b410      	push	{r4}
 801e428:	6093      	str	r3, [r2, #8]
 801e42a:	da08      	bge.n	801e43e <__sfputc_r+0x1e>
 801e42c:	6994      	ldr	r4, [r2, #24]
 801e42e:	42a3      	cmp	r3, r4
 801e430:	db01      	blt.n	801e436 <__sfputc_r+0x16>
 801e432:	290a      	cmp	r1, #10
 801e434:	d103      	bne.n	801e43e <__sfputc_r+0x1e>
 801e436:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e43a:	f000 bba0 	b.w	801eb7e <__swbuf_r>
 801e43e:	6813      	ldr	r3, [r2, #0]
 801e440:	1c58      	adds	r0, r3, #1
 801e442:	6010      	str	r0, [r2, #0]
 801e444:	7019      	strb	r1, [r3, #0]
 801e446:	4608      	mov	r0, r1
 801e448:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e44c:	4770      	bx	lr

0801e44e <__sfputs_r>:
 801e44e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e450:	4606      	mov	r6, r0
 801e452:	460f      	mov	r7, r1
 801e454:	4614      	mov	r4, r2
 801e456:	18d5      	adds	r5, r2, r3
 801e458:	42ac      	cmp	r4, r5
 801e45a:	d101      	bne.n	801e460 <__sfputs_r+0x12>
 801e45c:	2000      	movs	r0, #0
 801e45e:	e007      	b.n	801e470 <__sfputs_r+0x22>
 801e460:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e464:	463a      	mov	r2, r7
 801e466:	4630      	mov	r0, r6
 801e468:	f7ff ffda 	bl	801e420 <__sfputc_r>
 801e46c:	1c43      	adds	r3, r0, #1
 801e46e:	d1f3      	bne.n	801e458 <__sfputs_r+0xa>
 801e470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e474 <_vfiprintf_r>:
 801e474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e478:	460d      	mov	r5, r1
 801e47a:	b09d      	sub	sp, #116	@ 0x74
 801e47c:	4614      	mov	r4, r2
 801e47e:	4698      	mov	r8, r3
 801e480:	4606      	mov	r6, r0
 801e482:	b118      	cbz	r0, 801e48c <_vfiprintf_r+0x18>
 801e484:	6a03      	ldr	r3, [r0, #32]
 801e486:	b90b      	cbnz	r3, 801e48c <_vfiprintf_r+0x18>
 801e488:	f7fe f888 	bl	801c59c <__sinit>
 801e48c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e48e:	07d9      	lsls	r1, r3, #31
 801e490:	d405      	bmi.n	801e49e <_vfiprintf_r+0x2a>
 801e492:	89ab      	ldrh	r3, [r5, #12]
 801e494:	059a      	lsls	r2, r3, #22
 801e496:	d402      	bmi.n	801e49e <_vfiprintf_r+0x2a>
 801e498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e49a:	f7fe fa2e 	bl	801c8fa <__retarget_lock_acquire_recursive>
 801e49e:	89ab      	ldrh	r3, [r5, #12]
 801e4a0:	071b      	lsls	r3, r3, #28
 801e4a2:	d501      	bpl.n	801e4a8 <_vfiprintf_r+0x34>
 801e4a4:	692b      	ldr	r3, [r5, #16]
 801e4a6:	b99b      	cbnz	r3, 801e4d0 <_vfiprintf_r+0x5c>
 801e4a8:	4629      	mov	r1, r5
 801e4aa:	4630      	mov	r0, r6
 801e4ac:	f000 fba6 	bl	801ebfc <__swsetup_r>
 801e4b0:	b170      	cbz	r0, 801e4d0 <_vfiprintf_r+0x5c>
 801e4b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e4b4:	07dc      	lsls	r4, r3, #31
 801e4b6:	d504      	bpl.n	801e4c2 <_vfiprintf_r+0x4e>
 801e4b8:	f04f 30ff 	mov.w	r0, #4294967295
 801e4bc:	b01d      	add	sp, #116	@ 0x74
 801e4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4c2:	89ab      	ldrh	r3, [r5, #12]
 801e4c4:	0598      	lsls	r0, r3, #22
 801e4c6:	d4f7      	bmi.n	801e4b8 <_vfiprintf_r+0x44>
 801e4c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e4ca:	f7fe fa17 	bl	801c8fc <__retarget_lock_release_recursive>
 801e4ce:	e7f3      	b.n	801e4b8 <_vfiprintf_r+0x44>
 801e4d0:	2300      	movs	r3, #0
 801e4d2:	9309      	str	r3, [sp, #36]	@ 0x24
 801e4d4:	2320      	movs	r3, #32
 801e4d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e4da:	f8cd 800c 	str.w	r8, [sp, #12]
 801e4de:	2330      	movs	r3, #48	@ 0x30
 801e4e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e690 <_vfiprintf_r+0x21c>
 801e4e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e4e8:	f04f 0901 	mov.w	r9, #1
 801e4ec:	4623      	mov	r3, r4
 801e4ee:	469a      	mov	sl, r3
 801e4f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e4f4:	b10a      	cbz	r2, 801e4fa <_vfiprintf_r+0x86>
 801e4f6:	2a25      	cmp	r2, #37	@ 0x25
 801e4f8:	d1f9      	bne.n	801e4ee <_vfiprintf_r+0x7a>
 801e4fa:	ebba 0b04 	subs.w	fp, sl, r4
 801e4fe:	d00b      	beq.n	801e518 <_vfiprintf_r+0xa4>
 801e500:	465b      	mov	r3, fp
 801e502:	4622      	mov	r2, r4
 801e504:	4629      	mov	r1, r5
 801e506:	4630      	mov	r0, r6
 801e508:	f7ff ffa1 	bl	801e44e <__sfputs_r>
 801e50c:	3001      	adds	r0, #1
 801e50e:	f000 80a7 	beq.w	801e660 <_vfiprintf_r+0x1ec>
 801e512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e514:	445a      	add	r2, fp
 801e516:	9209      	str	r2, [sp, #36]	@ 0x24
 801e518:	f89a 3000 	ldrb.w	r3, [sl]
 801e51c:	2b00      	cmp	r3, #0
 801e51e:	f000 809f 	beq.w	801e660 <_vfiprintf_r+0x1ec>
 801e522:	2300      	movs	r3, #0
 801e524:	f04f 32ff 	mov.w	r2, #4294967295
 801e528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e52c:	f10a 0a01 	add.w	sl, sl, #1
 801e530:	9304      	str	r3, [sp, #16]
 801e532:	9307      	str	r3, [sp, #28]
 801e534:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e538:	931a      	str	r3, [sp, #104]	@ 0x68
 801e53a:	4654      	mov	r4, sl
 801e53c:	2205      	movs	r2, #5
 801e53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e542:	4853      	ldr	r0, [pc, #332]	@ (801e690 <_vfiprintf_r+0x21c>)
 801e544:	f7e1 fecc 	bl	80002e0 <memchr>
 801e548:	9a04      	ldr	r2, [sp, #16]
 801e54a:	b9d8      	cbnz	r0, 801e584 <_vfiprintf_r+0x110>
 801e54c:	06d1      	lsls	r1, r2, #27
 801e54e:	bf44      	itt	mi
 801e550:	2320      	movmi	r3, #32
 801e552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e556:	0713      	lsls	r3, r2, #28
 801e558:	bf44      	itt	mi
 801e55a:	232b      	movmi	r3, #43	@ 0x2b
 801e55c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e560:	f89a 3000 	ldrb.w	r3, [sl]
 801e564:	2b2a      	cmp	r3, #42	@ 0x2a
 801e566:	d015      	beq.n	801e594 <_vfiprintf_r+0x120>
 801e568:	9a07      	ldr	r2, [sp, #28]
 801e56a:	4654      	mov	r4, sl
 801e56c:	2000      	movs	r0, #0
 801e56e:	f04f 0c0a 	mov.w	ip, #10
 801e572:	4621      	mov	r1, r4
 801e574:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e578:	3b30      	subs	r3, #48	@ 0x30
 801e57a:	2b09      	cmp	r3, #9
 801e57c:	d94b      	bls.n	801e616 <_vfiprintf_r+0x1a2>
 801e57e:	b1b0      	cbz	r0, 801e5ae <_vfiprintf_r+0x13a>
 801e580:	9207      	str	r2, [sp, #28]
 801e582:	e014      	b.n	801e5ae <_vfiprintf_r+0x13a>
 801e584:	eba0 0308 	sub.w	r3, r0, r8
 801e588:	fa09 f303 	lsl.w	r3, r9, r3
 801e58c:	4313      	orrs	r3, r2
 801e58e:	9304      	str	r3, [sp, #16]
 801e590:	46a2      	mov	sl, r4
 801e592:	e7d2      	b.n	801e53a <_vfiprintf_r+0xc6>
 801e594:	9b03      	ldr	r3, [sp, #12]
 801e596:	1d19      	adds	r1, r3, #4
 801e598:	681b      	ldr	r3, [r3, #0]
 801e59a:	9103      	str	r1, [sp, #12]
 801e59c:	2b00      	cmp	r3, #0
 801e59e:	bfbb      	ittet	lt
 801e5a0:	425b      	neglt	r3, r3
 801e5a2:	f042 0202 	orrlt.w	r2, r2, #2
 801e5a6:	9307      	strge	r3, [sp, #28]
 801e5a8:	9307      	strlt	r3, [sp, #28]
 801e5aa:	bfb8      	it	lt
 801e5ac:	9204      	strlt	r2, [sp, #16]
 801e5ae:	7823      	ldrb	r3, [r4, #0]
 801e5b0:	2b2e      	cmp	r3, #46	@ 0x2e
 801e5b2:	d10a      	bne.n	801e5ca <_vfiprintf_r+0x156>
 801e5b4:	7863      	ldrb	r3, [r4, #1]
 801e5b6:	2b2a      	cmp	r3, #42	@ 0x2a
 801e5b8:	d132      	bne.n	801e620 <_vfiprintf_r+0x1ac>
 801e5ba:	9b03      	ldr	r3, [sp, #12]
 801e5bc:	1d1a      	adds	r2, r3, #4
 801e5be:	681b      	ldr	r3, [r3, #0]
 801e5c0:	9203      	str	r2, [sp, #12]
 801e5c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e5c6:	3402      	adds	r4, #2
 801e5c8:	9305      	str	r3, [sp, #20]
 801e5ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e6a0 <_vfiprintf_r+0x22c>
 801e5ce:	7821      	ldrb	r1, [r4, #0]
 801e5d0:	2203      	movs	r2, #3
 801e5d2:	4650      	mov	r0, sl
 801e5d4:	f7e1 fe84 	bl	80002e0 <memchr>
 801e5d8:	b138      	cbz	r0, 801e5ea <_vfiprintf_r+0x176>
 801e5da:	9b04      	ldr	r3, [sp, #16]
 801e5dc:	eba0 000a 	sub.w	r0, r0, sl
 801e5e0:	2240      	movs	r2, #64	@ 0x40
 801e5e2:	4082      	lsls	r2, r0
 801e5e4:	4313      	orrs	r3, r2
 801e5e6:	3401      	adds	r4, #1
 801e5e8:	9304      	str	r3, [sp, #16]
 801e5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5ee:	4829      	ldr	r0, [pc, #164]	@ (801e694 <_vfiprintf_r+0x220>)
 801e5f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e5f4:	2206      	movs	r2, #6
 801e5f6:	f7e1 fe73 	bl	80002e0 <memchr>
 801e5fa:	2800      	cmp	r0, #0
 801e5fc:	d03f      	beq.n	801e67e <_vfiprintf_r+0x20a>
 801e5fe:	4b26      	ldr	r3, [pc, #152]	@ (801e698 <_vfiprintf_r+0x224>)
 801e600:	bb1b      	cbnz	r3, 801e64a <_vfiprintf_r+0x1d6>
 801e602:	9b03      	ldr	r3, [sp, #12]
 801e604:	3307      	adds	r3, #7
 801e606:	f023 0307 	bic.w	r3, r3, #7
 801e60a:	3308      	adds	r3, #8
 801e60c:	9303      	str	r3, [sp, #12]
 801e60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e610:	443b      	add	r3, r7
 801e612:	9309      	str	r3, [sp, #36]	@ 0x24
 801e614:	e76a      	b.n	801e4ec <_vfiprintf_r+0x78>
 801e616:	fb0c 3202 	mla	r2, ip, r2, r3
 801e61a:	460c      	mov	r4, r1
 801e61c:	2001      	movs	r0, #1
 801e61e:	e7a8      	b.n	801e572 <_vfiprintf_r+0xfe>
 801e620:	2300      	movs	r3, #0
 801e622:	3401      	adds	r4, #1
 801e624:	9305      	str	r3, [sp, #20]
 801e626:	4619      	mov	r1, r3
 801e628:	f04f 0c0a 	mov.w	ip, #10
 801e62c:	4620      	mov	r0, r4
 801e62e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e632:	3a30      	subs	r2, #48	@ 0x30
 801e634:	2a09      	cmp	r2, #9
 801e636:	d903      	bls.n	801e640 <_vfiprintf_r+0x1cc>
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d0c6      	beq.n	801e5ca <_vfiprintf_r+0x156>
 801e63c:	9105      	str	r1, [sp, #20]
 801e63e:	e7c4      	b.n	801e5ca <_vfiprintf_r+0x156>
 801e640:	fb0c 2101 	mla	r1, ip, r1, r2
 801e644:	4604      	mov	r4, r0
 801e646:	2301      	movs	r3, #1
 801e648:	e7f0      	b.n	801e62c <_vfiprintf_r+0x1b8>
 801e64a:	ab03      	add	r3, sp, #12
 801e64c:	9300      	str	r3, [sp, #0]
 801e64e:	462a      	mov	r2, r5
 801e650:	4b12      	ldr	r3, [pc, #72]	@ (801e69c <_vfiprintf_r+0x228>)
 801e652:	a904      	add	r1, sp, #16
 801e654:	4630      	mov	r0, r6
 801e656:	f7fd fb6f 	bl	801bd38 <_printf_float>
 801e65a:	4607      	mov	r7, r0
 801e65c:	1c78      	adds	r0, r7, #1
 801e65e:	d1d6      	bne.n	801e60e <_vfiprintf_r+0x19a>
 801e660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e662:	07d9      	lsls	r1, r3, #31
 801e664:	d405      	bmi.n	801e672 <_vfiprintf_r+0x1fe>
 801e666:	89ab      	ldrh	r3, [r5, #12]
 801e668:	059a      	lsls	r2, r3, #22
 801e66a:	d402      	bmi.n	801e672 <_vfiprintf_r+0x1fe>
 801e66c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e66e:	f7fe f945 	bl	801c8fc <__retarget_lock_release_recursive>
 801e672:	89ab      	ldrh	r3, [r5, #12]
 801e674:	065b      	lsls	r3, r3, #25
 801e676:	f53f af1f 	bmi.w	801e4b8 <_vfiprintf_r+0x44>
 801e67a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e67c:	e71e      	b.n	801e4bc <_vfiprintf_r+0x48>
 801e67e:	ab03      	add	r3, sp, #12
 801e680:	9300      	str	r3, [sp, #0]
 801e682:	462a      	mov	r2, r5
 801e684:	4b05      	ldr	r3, [pc, #20]	@ (801e69c <_vfiprintf_r+0x228>)
 801e686:	a904      	add	r1, sp, #16
 801e688:	4630      	mov	r0, r6
 801e68a:	f7fd fddd 	bl	801c248 <_printf_i>
 801e68e:	e7e4      	b.n	801e65a <_vfiprintf_r+0x1e6>
 801e690:	080212b8 	.word	0x080212b8
 801e694:	080212c2 	.word	0x080212c2
 801e698:	0801bd39 	.word	0x0801bd39
 801e69c:	0801e44f 	.word	0x0801e44f
 801e6a0:	080212be 	.word	0x080212be

0801e6a4 <_scanf_chars>:
 801e6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e6a8:	4615      	mov	r5, r2
 801e6aa:	688a      	ldr	r2, [r1, #8]
 801e6ac:	4680      	mov	r8, r0
 801e6ae:	460c      	mov	r4, r1
 801e6b0:	b932      	cbnz	r2, 801e6c0 <_scanf_chars+0x1c>
 801e6b2:	698a      	ldr	r2, [r1, #24]
 801e6b4:	2a00      	cmp	r2, #0
 801e6b6:	bf14      	ite	ne
 801e6b8:	f04f 32ff 	movne.w	r2, #4294967295
 801e6bc:	2201      	moveq	r2, #1
 801e6be:	608a      	str	r2, [r1, #8]
 801e6c0:	6822      	ldr	r2, [r4, #0]
 801e6c2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801e754 <_scanf_chars+0xb0>
 801e6c6:	06d1      	lsls	r1, r2, #27
 801e6c8:	bf5f      	itttt	pl
 801e6ca:	681a      	ldrpl	r2, [r3, #0]
 801e6cc:	1d11      	addpl	r1, r2, #4
 801e6ce:	6019      	strpl	r1, [r3, #0]
 801e6d0:	6816      	ldrpl	r6, [r2, #0]
 801e6d2:	2700      	movs	r7, #0
 801e6d4:	69a0      	ldr	r0, [r4, #24]
 801e6d6:	b188      	cbz	r0, 801e6fc <_scanf_chars+0x58>
 801e6d8:	2801      	cmp	r0, #1
 801e6da:	d107      	bne.n	801e6ec <_scanf_chars+0x48>
 801e6dc:	682b      	ldr	r3, [r5, #0]
 801e6de:	781a      	ldrb	r2, [r3, #0]
 801e6e0:	6963      	ldr	r3, [r4, #20]
 801e6e2:	5c9b      	ldrb	r3, [r3, r2]
 801e6e4:	b953      	cbnz	r3, 801e6fc <_scanf_chars+0x58>
 801e6e6:	2f00      	cmp	r7, #0
 801e6e8:	d031      	beq.n	801e74e <_scanf_chars+0xaa>
 801e6ea:	e022      	b.n	801e732 <_scanf_chars+0x8e>
 801e6ec:	2802      	cmp	r0, #2
 801e6ee:	d120      	bne.n	801e732 <_scanf_chars+0x8e>
 801e6f0:	682b      	ldr	r3, [r5, #0]
 801e6f2:	781b      	ldrb	r3, [r3, #0]
 801e6f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e6f8:	071b      	lsls	r3, r3, #28
 801e6fa:	d41a      	bmi.n	801e732 <_scanf_chars+0x8e>
 801e6fc:	6823      	ldr	r3, [r4, #0]
 801e6fe:	06da      	lsls	r2, r3, #27
 801e700:	bf5e      	ittt	pl
 801e702:	682b      	ldrpl	r3, [r5, #0]
 801e704:	781b      	ldrbpl	r3, [r3, #0]
 801e706:	f806 3b01 	strbpl.w	r3, [r6], #1
 801e70a:	682a      	ldr	r2, [r5, #0]
 801e70c:	686b      	ldr	r3, [r5, #4]
 801e70e:	3201      	adds	r2, #1
 801e710:	602a      	str	r2, [r5, #0]
 801e712:	68a2      	ldr	r2, [r4, #8]
 801e714:	3b01      	subs	r3, #1
 801e716:	3a01      	subs	r2, #1
 801e718:	606b      	str	r3, [r5, #4]
 801e71a:	3701      	adds	r7, #1
 801e71c:	60a2      	str	r2, [r4, #8]
 801e71e:	b142      	cbz	r2, 801e732 <_scanf_chars+0x8e>
 801e720:	2b00      	cmp	r3, #0
 801e722:	dcd7      	bgt.n	801e6d4 <_scanf_chars+0x30>
 801e724:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e728:	4629      	mov	r1, r5
 801e72a:	4640      	mov	r0, r8
 801e72c:	4798      	blx	r3
 801e72e:	2800      	cmp	r0, #0
 801e730:	d0d0      	beq.n	801e6d4 <_scanf_chars+0x30>
 801e732:	6823      	ldr	r3, [r4, #0]
 801e734:	f013 0310 	ands.w	r3, r3, #16
 801e738:	d105      	bne.n	801e746 <_scanf_chars+0xa2>
 801e73a:	68e2      	ldr	r2, [r4, #12]
 801e73c:	3201      	adds	r2, #1
 801e73e:	60e2      	str	r2, [r4, #12]
 801e740:	69a2      	ldr	r2, [r4, #24]
 801e742:	b102      	cbz	r2, 801e746 <_scanf_chars+0xa2>
 801e744:	7033      	strb	r3, [r6, #0]
 801e746:	6923      	ldr	r3, [r4, #16]
 801e748:	443b      	add	r3, r7
 801e74a:	6123      	str	r3, [r4, #16]
 801e74c:	2000      	movs	r0, #0
 801e74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e752:	bf00      	nop
 801e754:	080212ef 	.word	0x080212ef

0801e758 <_scanf_i>:
 801e758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e75c:	4698      	mov	r8, r3
 801e75e:	4b74      	ldr	r3, [pc, #464]	@ (801e930 <_scanf_i+0x1d8>)
 801e760:	460c      	mov	r4, r1
 801e762:	4682      	mov	sl, r0
 801e764:	4616      	mov	r6, r2
 801e766:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e76a:	b087      	sub	sp, #28
 801e76c:	ab03      	add	r3, sp, #12
 801e76e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e772:	4b70      	ldr	r3, [pc, #448]	@ (801e934 <_scanf_i+0x1dc>)
 801e774:	69a1      	ldr	r1, [r4, #24]
 801e776:	4a70      	ldr	r2, [pc, #448]	@ (801e938 <_scanf_i+0x1e0>)
 801e778:	2903      	cmp	r1, #3
 801e77a:	bf08      	it	eq
 801e77c:	461a      	moveq	r2, r3
 801e77e:	68a3      	ldr	r3, [r4, #8]
 801e780:	9201      	str	r2, [sp, #4]
 801e782:	1e5a      	subs	r2, r3, #1
 801e784:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801e788:	bf88      	it	hi
 801e78a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801e78e:	4627      	mov	r7, r4
 801e790:	bf82      	ittt	hi
 801e792:	eb03 0905 	addhi.w	r9, r3, r5
 801e796:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801e79a:	60a3      	strhi	r3, [r4, #8]
 801e79c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801e7a0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801e7a4:	bf98      	it	ls
 801e7a6:	f04f 0900 	movls.w	r9, #0
 801e7aa:	6023      	str	r3, [r4, #0]
 801e7ac:	463d      	mov	r5, r7
 801e7ae:	f04f 0b00 	mov.w	fp, #0
 801e7b2:	6831      	ldr	r1, [r6, #0]
 801e7b4:	ab03      	add	r3, sp, #12
 801e7b6:	7809      	ldrb	r1, [r1, #0]
 801e7b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801e7bc:	2202      	movs	r2, #2
 801e7be:	f7e1 fd8f 	bl	80002e0 <memchr>
 801e7c2:	b328      	cbz	r0, 801e810 <_scanf_i+0xb8>
 801e7c4:	f1bb 0f01 	cmp.w	fp, #1
 801e7c8:	d159      	bne.n	801e87e <_scanf_i+0x126>
 801e7ca:	6862      	ldr	r2, [r4, #4]
 801e7cc:	b92a      	cbnz	r2, 801e7da <_scanf_i+0x82>
 801e7ce:	6822      	ldr	r2, [r4, #0]
 801e7d0:	2108      	movs	r1, #8
 801e7d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801e7d6:	6061      	str	r1, [r4, #4]
 801e7d8:	6022      	str	r2, [r4, #0]
 801e7da:	6822      	ldr	r2, [r4, #0]
 801e7dc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801e7e0:	6022      	str	r2, [r4, #0]
 801e7e2:	68a2      	ldr	r2, [r4, #8]
 801e7e4:	1e51      	subs	r1, r2, #1
 801e7e6:	60a1      	str	r1, [r4, #8]
 801e7e8:	b192      	cbz	r2, 801e810 <_scanf_i+0xb8>
 801e7ea:	6832      	ldr	r2, [r6, #0]
 801e7ec:	1c51      	adds	r1, r2, #1
 801e7ee:	6031      	str	r1, [r6, #0]
 801e7f0:	7812      	ldrb	r2, [r2, #0]
 801e7f2:	f805 2b01 	strb.w	r2, [r5], #1
 801e7f6:	6872      	ldr	r2, [r6, #4]
 801e7f8:	3a01      	subs	r2, #1
 801e7fa:	2a00      	cmp	r2, #0
 801e7fc:	6072      	str	r2, [r6, #4]
 801e7fe:	dc07      	bgt.n	801e810 <_scanf_i+0xb8>
 801e800:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801e804:	4631      	mov	r1, r6
 801e806:	4650      	mov	r0, sl
 801e808:	4790      	blx	r2
 801e80a:	2800      	cmp	r0, #0
 801e80c:	f040 8085 	bne.w	801e91a <_scanf_i+0x1c2>
 801e810:	f10b 0b01 	add.w	fp, fp, #1
 801e814:	f1bb 0f03 	cmp.w	fp, #3
 801e818:	d1cb      	bne.n	801e7b2 <_scanf_i+0x5a>
 801e81a:	6863      	ldr	r3, [r4, #4]
 801e81c:	b90b      	cbnz	r3, 801e822 <_scanf_i+0xca>
 801e81e:	230a      	movs	r3, #10
 801e820:	6063      	str	r3, [r4, #4]
 801e822:	6863      	ldr	r3, [r4, #4]
 801e824:	4945      	ldr	r1, [pc, #276]	@ (801e93c <_scanf_i+0x1e4>)
 801e826:	6960      	ldr	r0, [r4, #20]
 801e828:	1ac9      	subs	r1, r1, r3
 801e82a:	f000 f935 	bl	801ea98 <__sccl>
 801e82e:	f04f 0b00 	mov.w	fp, #0
 801e832:	68a3      	ldr	r3, [r4, #8]
 801e834:	6822      	ldr	r2, [r4, #0]
 801e836:	2b00      	cmp	r3, #0
 801e838:	d03d      	beq.n	801e8b6 <_scanf_i+0x15e>
 801e83a:	6831      	ldr	r1, [r6, #0]
 801e83c:	6960      	ldr	r0, [r4, #20]
 801e83e:	f891 c000 	ldrb.w	ip, [r1]
 801e842:	f810 000c 	ldrb.w	r0, [r0, ip]
 801e846:	2800      	cmp	r0, #0
 801e848:	d035      	beq.n	801e8b6 <_scanf_i+0x15e>
 801e84a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801e84e:	d124      	bne.n	801e89a <_scanf_i+0x142>
 801e850:	0510      	lsls	r0, r2, #20
 801e852:	d522      	bpl.n	801e89a <_scanf_i+0x142>
 801e854:	f10b 0b01 	add.w	fp, fp, #1
 801e858:	f1b9 0f00 	cmp.w	r9, #0
 801e85c:	d003      	beq.n	801e866 <_scanf_i+0x10e>
 801e85e:	3301      	adds	r3, #1
 801e860:	f109 39ff 	add.w	r9, r9, #4294967295
 801e864:	60a3      	str	r3, [r4, #8]
 801e866:	6873      	ldr	r3, [r6, #4]
 801e868:	3b01      	subs	r3, #1
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	6073      	str	r3, [r6, #4]
 801e86e:	dd1b      	ble.n	801e8a8 <_scanf_i+0x150>
 801e870:	6833      	ldr	r3, [r6, #0]
 801e872:	3301      	adds	r3, #1
 801e874:	6033      	str	r3, [r6, #0]
 801e876:	68a3      	ldr	r3, [r4, #8]
 801e878:	3b01      	subs	r3, #1
 801e87a:	60a3      	str	r3, [r4, #8]
 801e87c:	e7d9      	b.n	801e832 <_scanf_i+0xda>
 801e87e:	f1bb 0f02 	cmp.w	fp, #2
 801e882:	d1ae      	bne.n	801e7e2 <_scanf_i+0x8a>
 801e884:	6822      	ldr	r2, [r4, #0]
 801e886:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801e88a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801e88e:	d1c4      	bne.n	801e81a <_scanf_i+0xc2>
 801e890:	2110      	movs	r1, #16
 801e892:	6061      	str	r1, [r4, #4]
 801e894:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e898:	e7a2      	b.n	801e7e0 <_scanf_i+0x88>
 801e89a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801e89e:	6022      	str	r2, [r4, #0]
 801e8a0:	780b      	ldrb	r3, [r1, #0]
 801e8a2:	f805 3b01 	strb.w	r3, [r5], #1
 801e8a6:	e7de      	b.n	801e866 <_scanf_i+0x10e>
 801e8a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e8ac:	4631      	mov	r1, r6
 801e8ae:	4650      	mov	r0, sl
 801e8b0:	4798      	blx	r3
 801e8b2:	2800      	cmp	r0, #0
 801e8b4:	d0df      	beq.n	801e876 <_scanf_i+0x11e>
 801e8b6:	6823      	ldr	r3, [r4, #0]
 801e8b8:	05d9      	lsls	r1, r3, #23
 801e8ba:	d50d      	bpl.n	801e8d8 <_scanf_i+0x180>
 801e8bc:	42bd      	cmp	r5, r7
 801e8be:	d909      	bls.n	801e8d4 <_scanf_i+0x17c>
 801e8c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e8c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e8c8:	4632      	mov	r2, r6
 801e8ca:	4650      	mov	r0, sl
 801e8cc:	4798      	blx	r3
 801e8ce:	f105 39ff 	add.w	r9, r5, #4294967295
 801e8d2:	464d      	mov	r5, r9
 801e8d4:	42bd      	cmp	r5, r7
 801e8d6:	d028      	beq.n	801e92a <_scanf_i+0x1d2>
 801e8d8:	6822      	ldr	r2, [r4, #0]
 801e8da:	f012 0210 	ands.w	r2, r2, #16
 801e8de:	d113      	bne.n	801e908 <_scanf_i+0x1b0>
 801e8e0:	702a      	strb	r2, [r5, #0]
 801e8e2:	6863      	ldr	r3, [r4, #4]
 801e8e4:	9e01      	ldr	r6, [sp, #4]
 801e8e6:	4639      	mov	r1, r7
 801e8e8:	4650      	mov	r0, sl
 801e8ea:	47b0      	blx	r6
 801e8ec:	f8d8 3000 	ldr.w	r3, [r8]
 801e8f0:	6821      	ldr	r1, [r4, #0]
 801e8f2:	1d1a      	adds	r2, r3, #4
 801e8f4:	f8c8 2000 	str.w	r2, [r8]
 801e8f8:	f011 0f20 	tst.w	r1, #32
 801e8fc:	681b      	ldr	r3, [r3, #0]
 801e8fe:	d00f      	beq.n	801e920 <_scanf_i+0x1c8>
 801e900:	6018      	str	r0, [r3, #0]
 801e902:	68e3      	ldr	r3, [r4, #12]
 801e904:	3301      	adds	r3, #1
 801e906:	60e3      	str	r3, [r4, #12]
 801e908:	6923      	ldr	r3, [r4, #16]
 801e90a:	1bed      	subs	r5, r5, r7
 801e90c:	445d      	add	r5, fp
 801e90e:	442b      	add	r3, r5
 801e910:	6123      	str	r3, [r4, #16]
 801e912:	2000      	movs	r0, #0
 801e914:	b007      	add	sp, #28
 801e916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e91a:	f04f 0b00 	mov.w	fp, #0
 801e91e:	e7ca      	b.n	801e8b6 <_scanf_i+0x15e>
 801e920:	07ca      	lsls	r2, r1, #31
 801e922:	bf4c      	ite	mi
 801e924:	8018      	strhmi	r0, [r3, #0]
 801e926:	6018      	strpl	r0, [r3, #0]
 801e928:	e7eb      	b.n	801e902 <_scanf_i+0x1aa>
 801e92a:	2001      	movs	r0, #1
 801e92c:	e7f2      	b.n	801e914 <_scanf_i+0x1bc>
 801e92e:	bf00      	nop
 801e930:	0801f600 	.word	0x0801f600
 801e934:	0801ef3d 	.word	0x0801ef3d
 801e938:	0801bc01 	.word	0x0801bc01
 801e93c:	080212d9 	.word	0x080212d9

0801e940 <__sflush_r>:
 801e940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e948:	0716      	lsls	r6, r2, #28
 801e94a:	4605      	mov	r5, r0
 801e94c:	460c      	mov	r4, r1
 801e94e:	d454      	bmi.n	801e9fa <__sflush_r+0xba>
 801e950:	684b      	ldr	r3, [r1, #4]
 801e952:	2b00      	cmp	r3, #0
 801e954:	dc02      	bgt.n	801e95c <__sflush_r+0x1c>
 801e956:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e958:	2b00      	cmp	r3, #0
 801e95a:	dd48      	ble.n	801e9ee <__sflush_r+0xae>
 801e95c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e95e:	2e00      	cmp	r6, #0
 801e960:	d045      	beq.n	801e9ee <__sflush_r+0xae>
 801e962:	2300      	movs	r3, #0
 801e964:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e968:	682f      	ldr	r7, [r5, #0]
 801e96a:	6a21      	ldr	r1, [r4, #32]
 801e96c:	602b      	str	r3, [r5, #0]
 801e96e:	d030      	beq.n	801e9d2 <__sflush_r+0x92>
 801e970:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e972:	89a3      	ldrh	r3, [r4, #12]
 801e974:	0759      	lsls	r1, r3, #29
 801e976:	d505      	bpl.n	801e984 <__sflush_r+0x44>
 801e978:	6863      	ldr	r3, [r4, #4]
 801e97a:	1ad2      	subs	r2, r2, r3
 801e97c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e97e:	b10b      	cbz	r3, 801e984 <__sflush_r+0x44>
 801e980:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e982:	1ad2      	subs	r2, r2, r3
 801e984:	2300      	movs	r3, #0
 801e986:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e988:	6a21      	ldr	r1, [r4, #32]
 801e98a:	4628      	mov	r0, r5
 801e98c:	47b0      	blx	r6
 801e98e:	1c43      	adds	r3, r0, #1
 801e990:	89a3      	ldrh	r3, [r4, #12]
 801e992:	d106      	bne.n	801e9a2 <__sflush_r+0x62>
 801e994:	6829      	ldr	r1, [r5, #0]
 801e996:	291d      	cmp	r1, #29
 801e998:	d82b      	bhi.n	801e9f2 <__sflush_r+0xb2>
 801e99a:	4a2a      	ldr	r2, [pc, #168]	@ (801ea44 <__sflush_r+0x104>)
 801e99c:	40ca      	lsrs	r2, r1
 801e99e:	07d6      	lsls	r6, r2, #31
 801e9a0:	d527      	bpl.n	801e9f2 <__sflush_r+0xb2>
 801e9a2:	2200      	movs	r2, #0
 801e9a4:	6062      	str	r2, [r4, #4]
 801e9a6:	04d9      	lsls	r1, r3, #19
 801e9a8:	6922      	ldr	r2, [r4, #16]
 801e9aa:	6022      	str	r2, [r4, #0]
 801e9ac:	d504      	bpl.n	801e9b8 <__sflush_r+0x78>
 801e9ae:	1c42      	adds	r2, r0, #1
 801e9b0:	d101      	bne.n	801e9b6 <__sflush_r+0x76>
 801e9b2:	682b      	ldr	r3, [r5, #0]
 801e9b4:	b903      	cbnz	r3, 801e9b8 <__sflush_r+0x78>
 801e9b6:	6560      	str	r0, [r4, #84]	@ 0x54
 801e9b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e9ba:	602f      	str	r7, [r5, #0]
 801e9bc:	b1b9      	cbz	r1, 801e9ee <__sflush_r+0xae>
 801e9be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e9c2:	4299      	cmp	r1, r3
 801e9c4:	d002      	beq.n	801e9cc <__sflush_r+0x8c>
 801e9c6:	4628      	mov	r0, r5
 801e9c8:	f7fe fd88 	bl	801d4dc <_free_r>
 801e9cc:	2300      	movs	r3, #0
 801e9ce:	6363      	str	r3, [r4, #52]	@ 0x34
 801e9d0:	e00d      	b.n	801e9ee <__sflush_r+0xae>
 801e9d2:	2301      	movs	r3, #1
 801e9d4:	4628      	mov	r0, r5
 801e9d6:	47b0      	blx	r6
 801e9d8:	4602      	mov	r2, r0
 801e9da:	1c50      	adds	r0, r2, #1
 801e9dc:	d1c9      	bne.n	801e972 <__sflush_r+0x32>
 801e9de:	682b      	ldr	r3, [r5, #0]
 801e9e0:	2b00      	cmp	r3, #0
 801e9e2:	d0c6      	beq.n	801e972 <__sflush_r+0x32>
 801e9e4:	2b1d      	cmp	r3, #29
 801e9e6:	d001      	beq.n	801e9ec <__sflush_r+0xac>
 801e9e8:	2b16      	cmp	r3, #22
 801e9ea:	d11e      	bne.n	801ea2a <__sflush_r+0xea>
 801e9ec:	602f      	str	r7, [r5, #0]
 801e9ee:	2000      	movs	r0, #0
 801e9f0:	e022      	b.n	801ea38 <__sflush_r+0xf8>
 801e9f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e9f6:	b21b      	sxth	r3, r3
 801e9f8:	e01b      	b.n	801ea32 <__sflush_r+0xf2>
 801e9fa:	690f      	ldr	r7, [r1, #16]
 801e9fc:	2f00      	cmp	r7, #0
 801e9fe:	d0f6      	beq.n	801e9ee <__sflush_r+0xae>
 801ea00:	0793      	lsls	r3, r2, #30
 801ea02:	680e      	ldr	r6, [r1, #0]
 801ea04:	bf08      	it	eq
 801ea06:	694b      	ldreq	r3, [r1, #20]
 801ea08:	600f      	str	r7, [r1, #0]
 801ea0a:	bf18      	it	ne
 801ea0c:	2300      	movne	r3, #0
 801ea0e:	eba6 0807 	sub.w	r8, r6, r7
 801ea12:	608b      	str	r3, [r1, #8]
 801ea14:	f1b8 0f00 	cmp.w	r8, #0
 801ea18:	dde9      	ble.n	801e9ee <__sflush_r+0xae>
 801ea1a:	6a21      	ldr	r1, [r4, #32]
 801ea1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ea1e:	4643      	mov	r3, r8
 801ea20:	463a      	mov	r2, r7
 801ea22:	4628      	mov	r0, r5
 801ea24:	47b0      	blx	r6
 801ea26:	2800      	cmp	r0, #0
 801ea28:	dc08      	bgt.n	801ea3c <__sflush_r+0xfc>
 801ea2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ea32:	81a3      	strh	r3, [r4, #12]
 801ea34:	f04f 30ff 	mov.w	r0, #4294967295
 801ea38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea3c:	4407      	add	r7, r0
 801ea3e:	eba8 0800 	sub.w	r8, r8, r0
 801ea42:	e7e7      	b.n	801ea14 <__sflush_r+0xd4>
 801ea44:	20400001 	.word	0x20400001

0801ea48 <_fflush_r>:
 801ea48:	b538      	push	{r3, r4, r5, lr}
 801ea4a:	690b      	ldr	r3, [r1, #16]
 801ea4c:	4605      	mov	r5, r0
 801ea4e:	460c      	mov	r4, r1
 801ea50:	b913      	cbnz	r3, 801ea58 <_fflush_r+0x10>
 801ea52:	2500      	movs	r5, #0
 801ea54:	4628      	mov	r0, r5
 801ea56:	bd38      	pop	{r3, r4, r5, pc}
 801ea58:	b118      	cbz	r0, 801ea62 <_fflush_r+0x1a>
 801ea5a:	6a03      	ldr	r3, [r0, #32]
 801ea5c:	b90b      	cbnz	r3, 801ea62 <_fflush_r+0x1a>
 801ea5e:	f7fd fd9d 	bl	801c59c <__sinit>
 801ea62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea66:	2b00      	cmp	r3, #0
 801ea68:	d0f3      	beq.n	801ea52 <_fflush_r+0xa>
 801ea6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ea6c:	07d0      	lsls	r0, r2, #31
 801ea6e:	d404      	bmi.n	801ea7a <_fflush_r+0x32>
 801ea70:	0599      	lsls	r1, r3, #22
 801ea72:	d402      	bmi.n	801ea7a <_fflush_r+0x32>
 801ea74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ea76:	f7fd ff40 	bl	801c8fa <__retarget_lock_acquire_recursive>
 801ea7a:	4628      	mov	r0, r5
 801ea7c:	4621      	mov	r1, r4
 801ea7e:	f7ff ff5f 	bl	801e940 <__sflush_r>
 801ea82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ea84:	07da      	lsls	r2, r3, #31
 801ea86:	4605      	mov	r5, r0
 801ea88:	d4e4      	bmi.n	801ea54 <_fflush_r+0xc>
 801ea8a:	89a3      	ldrh	r3, [r4, #12]
 801ea8c:	059b      	lsls	r3, r3, #22
 801ea8e:	d4e1      	bmi.n	801ea54 <_fflush_r+0xc>
 801ea90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ea92:	f7fd ff33 	bl	801c8fc <__retarget_lock_release_recursive>
 801ea96:	e7dd      	b.n	801ea54 <_fflush_r+0xc>

0801ea98 <__sccl>:
 801ea98:	b570      	push	{r4, r5, r6, lr}
 801ea9a:	780b      	ldrb	r3, [r1, #0]
 801ea9c:	4604      	mov	r4, r0
 801ea9e:	2b5e      	cmp	r3, #94	@ 0x5e
 801eaa0:	bf0b      	itete	eq
 801eaa2:	784b      	ldrbeq	r3, [r1, #1]
 801eaa4:	1c4a      	addne	r2, r1, #1
 801eaa6:	1c8a      	addeq	r2, r1, #2
 801eaa8:	2100      	movne	r1, #0
 801eaaa:	bf08      	it	eq
 801eaac:	2101      	moveq	r1, #1
 801eaae:	3801      	subs	r0, #1
 801eab0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801eab4:	f800 1f01 	strb.w	r1, [r0, #1]!
 801eab8:	42a8      	cmp	r0, r5
 801eaba:	d1fb      	bne.n	801eab4 <__sccl+0x1c>
 801eabc:	b90b      	cbnz	r3, 801eac2 <__sccl+0x2a>
 801eabe:	1e50      	subs	r0, r2, #1
 801eac0:	bd70      	pop	{r4, r5, r6, pc}
 801eac2:	f081 0101 	eor.w	r1, r1, #1
 801eac6:	54e1      	strb	r1, [r4, r3]
 801eac8:	4610      	mov	r0, r2
 801eaca:	4602      	mov	r2, r0
 801eacc:	f812 5b01 	ldrb.w	r5, [r2], #1
 801ead0:	2d2d      	cmp	r5, #45	@ 0x2d
 801ead2:	d005      	beq.n	801eae0 <__sccl+0x48>
 801ead4:	2d5d      	cmp	r5, #93	@ 0x5d
 801ead6:	d016      	beq.n	801eb06 <__sccl+0x6e>
 801ead8:	2d00      	cmp	r5, #0
 801eada:	d0f1      	beq.n	801eac0 <__sccl+0x28>
 801eadc:	462b      	mov	r3, r5
 801eade:	e7f2      	b.n	801eac6 <__sccl+0x2e>
 801eae0:	7846      	ldrb	r6, [r0, #1]
 801eae2:	2e5d      	cmp	r6, #93	@ 0x5d
 801eae4:	d0fa      	beq.n	801eadc <__sccl+0x44>
 801eae6:	42b3      	cmp	r3, r6
 801eae8:	dcf8      	bgt.n	801eadc <__sccl+0x44>
 801eaea:	3002      	adds	r0, #2
 801eaec:	461a      	mov	r2, r3
 801eaee:	3201      	adds	r2, #1
 801eaf0:	4296      	cmp	r6, r2
 801eaf2:	54a1      	strb	r1, [r4, r2]
 801eaf4:	dcfb      	bgt.n	801eaee <__sccl+0x56>
 801eaf6:	1af2      	subs	r2, r6, r3
 801eaf8:	3a01      	subs	r2, #1
 801eafa:	1c5d      	adds	r5, r3, #1
 801eafc:	42b3      	cmp	r3, r6
 801eafe:	bfa8      	it	ge
 801eb00:	2200      	movge	r2, #0
 801eb02:	18ab      	adds	r3, r5, r2
 801eb04:	e7e1      	b.n	801eaca <__sccl+0x32>
 801eb06:	4610      	mov	r0, r2
 801eb08:	e7da      	b.n	801eac0 <__sccl+0x28>

0801eb0a <__submore>:
 801eb0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb0e:	460c      	mov	r4, r1
 801eb10:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801eb12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801eb16:	4299      	cmp	r1, r3
 801eb18:	d11d      	bne.n	801eb56 <__submore+0x4c>
 801eb1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801eb1e:	f7fe fd51 	bl	801d5c4 <_malloc_r>
 801eb22:	b918      	cbnz	r0, 801eb2c <__submore+0x22>
 801eb24:	f04f 30ff 	mov.w	r0, #4294967295
 801eb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eb2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801eb30:	63a3      	str	r3, [r4, #56]	@ 0x38
 801eb32:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801eb36:	6360      	str	r0, [r4, #52]	@ 0x34
 801eb38:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801eb3c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801eb40:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801eb44:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801eb48:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801eb4c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801eb50:	6020      	str	r0, [r4, #0]
 801eb52:	2000      	movs	r0, #0
 801eb54:	e7e8      	b.n	801eb28 <__submore+0x1e>
 801eb56:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801eb58:	0077      	lsls	r7, r6, #1
 801eb5a:	463a      	mov	r2, r7
 801eb5c:	f000 f946 	bl	801edec <_realloc_r>
 801eb60:	4605      	mov	r5, r0
 801eb62:	2800      	cmp	r0, #0
 801eb64:	d0de      	beq.n	801eb24 <__submore+0x1a>
 801eb66:	eb00 0806 	add.w	r8, r0, r6
 801eb6a:	4601      	mov	r1, r0
 801eb6c:	4632      	mov	r2, r6
 801eb6e:	4640      	mov	r0, r8
 801eb70:	f000 f908 	bl	801ed84 <memcpy>
 801eb74:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801eb78:	f8c4 8000 	str.w	r8, [r4]
 801eb7c:	e7e9      	b.n	801eb52 <__submore+0x48>

0801eb7e <__swbuf_r>:
 801eb7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb80:	460e      	mov	r6, r1
 801eb82:	4614      	mov	r4, r2
 801eb84:	4605      	mov	r5, r0
 801eb86:	b118      	cbz	r0, 801eb90 <__swbuf_r+0x12>
 801eb88:	6a03      	ldr	r3, [r0, #32]
 801eb8a:	b90b      	cbnz	r3, 801eb90 <__swbuf_r+0x12>
 801eb8c:	f7fd fd06 	bl	801c59c <__sinit>
 801eb90:	69a3      	ldr	r3, [r4, #24]
 801eb92:	60a3      	str	r3, [r4, #8]
 801eb94:	89a3      	ldrh	r3, [r4, #12]
 801eb96:	071a      	lsls	r2, r3, #28
 801eb98:	d501      	bpl.n	801eb9e <__swbuf_r+0x20>
 801eb9a:	6923      	ldr	r3, [r4, #16]
 801eb9c:	b943      	cbnz	r3, 801ebb0 <__swbuf_r+0x32>
 801eb9e:	4621      	mov	r1, r4
 801eba0:	4628      	mov	r0, r5
 801eba2:	f000 f82b 	bl	801ebfc <__swsetup_r>
 801eba6:	b118      	cbz	r0, 801ebb0 <__swbuf_r+0x32>
 801eba8:	f04f 37ff 	mov.w	r7, #4294967295
 801ebac:	4638      	mov	r0, r7
 801ebae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ebb0:	6823      	ldr	r3, [r4, #0]
 801ebb2:	6922      	ldr	r2, [r4, #16]
 801ebb4:	1a98      	subs	r0, r3, r2
 801ebb6:	6963      	ldr	r3, [r4, #20]
 801ebb8:	b2f6      	uxtb	r6, r6
 801ebba:	4283      	cmp	r3, r0
 801ebbc:	4637      	mov	r7, r6
 801ebbe:	dc05      	bgt.n	801ebcc <__swbuf_r+0x4e>
 801ebc0:	4621      	mov	r1, r4
 801ebc2:	4628      	mov	r0, r5
 801ebc4:	f7ff ff40 	bl	801ea48 <_fflush_r>
 801ebc8:	2800      	cmp	r0, #0
 801ebca:	d1ed      	bne.n	801eba8 <__swbuf_r+0x2a>
 801ebcc:	68a3      	ldr	r3, [r4, #8]
 801ebce:	3b01      	subs	r3, #1
 801ebd0:	60a3      	str	r3, [r4, #8]
 801ebd2:	6823      	ldr	r3, [r4, #0]
 801ebd4:	1c5a      	adds	r2, r3, #1
 801ebd6:	6022      	str	r2, [r4, #0]
 801ebd8:	701e      	strb	r6, [r3, #0]
 801ebda:	6962      	ldr	r2, [r4, #20]
 801ebdc:	1c43      	adds	r3, r0, #1
 801ebde:	429a      	cmp	r2, r3
 801ebe0:	d004      	beq.n	801ebec <__swbuf_r+0x6e>
 801ebe2:	89a3      	ldrh	r3, [r4, #12]
 801ebe4:	07db      	lsls	r3, r3, #31
 801ebe6:	d5e1      	bpl.n	801ebac <__swbuf_r+0x2e>
 801ebe8:	2e0a      	cmp	r6, #10
 801ebea:	d1df      	bne.n	801ebac <__swbuf_r+0x2e>
 801ebec:	4621      	mov	r1, r4
 801ebee:	4628      	mov	r0, r5
 801ebf0:	f7ff ff2a 	bl	801ea48 <_fflush_r>
 801ebf4:	2800      	cmp	r0, #0
 801ebf6:	d0d9      	beq.n	801ebac <__swbuf_r+0x2e>
 801ebf8:	e7d6      	b.n	801eba8 <__swbuf_r+0x2a>
	...

0801ebfc <__swsetup_r>:
 801ebfc:	b538      	push	{r3, r4, r5, lr}
 801ebfe:	4b29      	ldr	r3, [pc, #164]	@ (801eca4 <__swsetup_r+0xa8>)
 801ec00:	4605      	mov	r5, r0
 801ec02:	6818      	ldr	r0, [r3, #0]
 801ec04:	460c      	mov	r4, r1
 801ec06:	b118      	cbz	r0, 801ec10 <__swsetup_r+0x14>
 801ec08:	6a03      	ldr	r3, [r0, #32]
 801ec0a:	b90b      	cbnz	r3, 801ec10 <__swsetup_r+0x14>
 801ec0c:	f7fd fcc6 	bl	801c59c <__sinit>
 801ec10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec14:	0719      	lsls	r1, r3, #28
 801ec16:	d422      	bmi.n	801ec5e <__swsetup_r+0x62>
 801ec18:	06da      	lsls	r2, r3, #27
 801ec1a:	d407      	bmi.n	801ec2c <__swsetup_r+0x30>
 801ec1c:	2209      	movs	r2, #9
 801ec1e:	602a      	str	r2, [r5, #0]
 801ec20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ec24:	81a3      	strh	r3, [r4, #12]
 801ec26:	f04f 30ff 	mov.w	r0, #4294967295
 801ec2a:	e033      	b.n	801ec94 <__swsetup_r+0x98>
 801ec2c:	0758      	lsls	r0, r3, #29
 801ec2e:	d512      	bpl.n	801ec56 <__swsetup_r+0x5a>
 801ec30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ec32:	b141      	cbz	r1, 801ec46 <__swsetup_r+0x4a>
 801ec34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ec38:	4299      	cmp	r1, r3
 801ec3a:	d002      	beq.n	801ec42 <__swsetup_r+0x46>
 801ec3c:	4628      	mov	r0, r5
 801ec3e:	f7fe fc4d 	bl	801d4dc <_free_r>
 801ec42:	2300      	movs	r3, #0
 801ec44:	6363      	str	r3, [r4, #52]	@ 0x34
 801ec46:	89a3      	ldrh	r3, [r4, #12]
 801ec48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ec4c:	81a3      	strh	r3, [r4, #12]
 801ec4e:	2300      	movs	r3, #0
 801ec50:	6063      	str	r3, [r4, #4]
 801ec52:	6923      	ldr	r3, [r4, #16]
 801ec54:	6023      	str	r3, [r4, #0]
 801ec56:	89a3      	ldrh	r3, [r4, #12]
 801ec58:	f043 0308 	orr.w	r3, r3, #8
 801ec5c:	81a3      	strh	r3, [r4, #12]
 801ec5e:	6923      	ldr	r3, [r4, #16]
 801ec60:	b94b      	cbnz	r3, 801ec76 <__swsetup_r+0x7a>
 801ec62:	89a3      	ldrh	r3, [r4, #12]
 801ec64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ec68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ec6c:	d003      	beq.n	801ec76 <__swsetup_r+0x7a>
 801ec6e:	4621      	mov	r1, r4
 801ec70:	4628      	mov	r0, r5
 801ec72:	f000 f998 	bl	801efa6 <__smakebuf_r>
 801ec76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec7a:	f013 0201 	ands.w	r2, r3, #1
 801ec7e:	d00a      	beq.n	801ec96 <__swsetup_r+0x9a>
 801ec80:	2200      	movs	r2, #0
 801ec82:	60a2      	str	r2, [r4, #8]
 801ec84:	6962      	ldr	r2, [r4, #20]
 801ec86:	4252      	negs	r2, r2
 801ec88:	61a2      	str	r2, [r4, #24]
 801ec8a:	6922      	ldr	r2, [r4, #16]
 801ec8c:	b942      	cbnz	r2, 801eca0 <__swsetup_r+0xa4>
 801ec8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ec92:	d1c5      	bne.n	801ec20 <__swsetup_r+0x24>
 801ec94:	bd38      	pop	{r3, r4, r5, pc}
 801ec96:	0799      	lsls	r1, r3, #30
 801ec98:	bf58      	it	pl
 801ec9a:	6962      	ldrpl	r2, [r4, #20]
 801ec9c:	60a2      	str	r2, [r4, #8]
 801ec9e:	e7f4      	b.n	801ec8a <__swsetup_r+0x8e>
 801eca0:	2000      	movs	r0, #0
 801eca2:	e7f7      	b.n	801ec94 <__swsetup_r+0x98>
 801eca4:	240005bc 	.word	0x240005bc

0801eca8 <memmove>:
 801eca8:	4288      	cmp	r0, r1
 801ecaa:	b510      	push	{r4, lr}
 801ecac:	eb01 0402 	add.w	r4, r1, r2
 801ecb0:	d902      	bls.n	801ecb8 <memmove+0x10>
 801ecb2:	4284      	cmp	r4, r0
 801ecb4:	4623      	mov	r3, r4
 801ecb6:	d807      	bhi.n	801ecc8 <memmove+0x20>
 801ecb8:	1e43      	subs	r3, r0, #1
 801ecba:	42a1      	cmp	r1, r4
 801ecbc:	d008      	beq.n	801ecd0 <memmove+0x28>
 801ecbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ecc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ecc6:	e7f8      	b.n	801ecba <memmove+0x12>
 801ecc8:	4402      	add	r2, r0
 801ecca:	4601      	mov	r1, r0
 801eccc:	428a      	cmp	r2, r1
 801ecce:	d100      	bne.n	801ecd2 <memmove+0x2a>
 801ecd0:	bd10      	pop	{r4, pc}
 801ecd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ecd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ecda:	e7f7      	b.n	801eccc <memmove+0x24>

0801ecdc <_raise_r>:
 801ecdc:	291f      	cmp	r1, #31
 801ecde:	b538      	push	{r3, r4, r5, lr}
 801ece0:	4605      	mov	r5, r0
 801ece2:	460c      	mov	r4, r1
 801ece4:	d904      	bls.n	801ecf0 <_raise_r+0x14>
 801ece6:	2316      	movs	r3, #22
 801ece8:	6003      	str	r3, [r0, #0]
 801ecea:	f04f 30ff 	mov.w	r0, #4294967295
 801ecee:	bd38      	pop	{r3, r4, r5, pc}
 801ecf0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ecf2:	b112      	cbz	r2, 801ecfa <_raise_r+0x1e>
 801ecf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ecf8:	b94b      	cbnz	r3, 801ed0e <_raise_r+0x32>
 801ecfa:	4628      	mov	r0, r5
 801ecfc:	f000 f830 	bl	801ed60 <_getpid_r>
 801ed00:	4622      	mov	r2, r4
 801ed02:	4601      	mov	r1, r0
 801ed04:	4628      	mov	r0, r5
 801ed06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ed0a:	f000 b817 	b.w	801ed3c <_kill_r>
 801ed0e:	2b01      	cmp	r3, #1
 801ed10:	d00a      	beq.n	801ed28 <_raise_r+0x4c>
 801ed12:	1c59      	adds	r1, r3, #1
 801ed14:	d103      	bne.n	801ed1e <_raise_r+0x42>
 801ed16:	2316      	movs	r3, #22
 801ed18:	6003      	str	r3, [r0, #0]
 801ed1a:	2001      	movs	r0, #1
 801ed1c:	e7e7      	b.n	801ecee <_raise_r+0x12>
 801ed1e:	2100      	movs	r1, #0
 801ed20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ed24:	4620      	mov	r0, r4
 801ed26:	4798      	blx	r3
 801ed28:	2000      	movs	r0, #0
 801ed2a:	e7e0      	b.n	801ecee <_raise_r+0x12>

0801ed2c <raise>:
 801ed2c:	4b02      	ldr	r3, [pc, #8]	@ (801ed38 <raise+0xc>)
 801ed2e:	4601      	mov	r1, r0
 801ed30:	6818      	ldr	r0, [r3, #0]
 801ed32:	f7ff bfd3 	b.w	801ecdc <_raise_r>
 801ed36:	bf00      	nop
 801ed38:	240005bc 	.word	0x240005bc

0801ed3c <_kill_r>:
 801ed3c:	b538      	push	{r3, r4, r5, lr}
 801ed3e:	4d07      	ldr	r5, [pc, #28]	@ (801ed5c <_kill_r+0x20>)
 801ed40:	2300      	movs	r3, #0
 801ed42:	4604      	mov	r4, r0
 801ed44:	4608      	mov	r0, r1
 801ed46:	4611      	mov	r1, r2
 801ed48:	602b      	str	r3, [r5, #0]
 801ed4a:	f000 f9b3 	bl	801f0b4 <_kill>
 801ed4e:	1c43      	adds	r3, r0, #1
 801ed50:	d102      	bne.n	801ed58 <_kill_r+0x1c>
 801ed52:	682b      	ldr	r3, [r5, #0]
 801ed54:	b103      	cbz	r3, 801ed58 <_kill_r+0x1c>
 801ed56:	6023      	str	r3, [r4, #0]
 801ed58:	bd38      	pop	{r3, r4, r5, pc}
 801ed5a:	bf00      	nop
 801ed5c:	24002e7c 	.word	0x24002e7c

0801ed60 <_getpid_r>:
 801ed60:	f000 b998 	b.w	801f094 <_getpid>

0801ed64 <_sbrk_r>:
 801ed64:	b538      	push	{r3, r4, r5, lr}
 801ed66:	4d06      	ldr	r5, [pc, #24]	@ (801ed80 <_sbrk_r+0x1c>)
 801ed68:	2300      	movs	r3, #0
 801ed6a:	4604      	mov	r4, r0
 801ed6c:	4608      	mov	r0, r1
 801ed6e:	602b      	str	r3, [r5, #0]
 801ed70:	f7e5 ff14 	bl	8004b9c <_sbrk>
 801ed74:	1c43      	adds	r3, r0, #1
 801ed76:	d102      	bne.n	801ed7e <_sbrk_r+0x1a>
 801ed78:	682b      	ldr	r3, [r5, #0]
 801ed7a:	b103      	cbz	r3, 801ed7e <_sbrk_r+0x1a>
 801ed7c:	6023      	str	r3, [r4, #0]
 801ed7e:	bd38      	pop	{r3, r4, r5, pc}
 801ed80:	24002e7c 	.word	0x24002e7c

0801ed84 <memcpy>:
 801ed84:	440a      	add	r2, r1
 801ed86:	4291      	cmp	r1, r2
 801ed88:	f100 33ff 	add.w	r3, r0, #4294967295
 801ed8c:	d100      	bne.n	801ed90 <memcpy+0xc>
 801ed8e:	4770      	bx	lr
 801ed90:	b510      	push	{r4, lr}
 801ed92:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ed96:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ed9a:	4291      	cmp	r1, r2
 801ed9c:	d1f9      	bne.n	801ed92 <memcpy+0xe>
 801ed9e:	bd10      	pop	{r4, pc}

0801eda0 <_calloc_r>:
 801eda0:	b570      	push	{r4, r5, r6, lr}
 801eda2:	fba1 5402 	umull	r5, r4, r1, r2
 801eda6:	b934      	cbnz	r4, 801edb6 <_calloc_r+0x16>
 801eda8:	4629      	mov	r1, r5
 801edaa:	f7fe fc0b 	bl	801d5c4 <_malloc_r>
 801edae:	4606      	mov	r6, r0
 801edb0:	b928      	cbnz	r0, 801edbe <_calloc_r+0x1e>
 801edb2:	4630      	mov	r0, r6
 801edb4:	bd70      	pop	{r4, r5, r6, pc}
 801edb6:	220c      	movs	r2, #12
 801edb8:	6002      	str	r2, [r0, #0]
 801edba:	2600      	movs	r6, #0
 801edbc:	e7f9      	b.n	801edb2 <_calloc_r+0x12>
 801edbe:	462a      	mov	r2, r5
 801edc0:	4621      	mov	r1, r4
 801edc2:	f7fd fd1d 	bl	801c800 <memset>
 801edc6:	e7f4      	b.n	801edb2 <_calloc_r+0x12>

0801edc8 <__ascii_mbtowc>:
 801edc8:	b082      	sub	sp, #8
 801edca:	b901      	cbnz	r1, 801edce <__ascii_mbtowc+0x6>
 801edcc:	a901      	add	r1, sp, #4
 801edce:	b142      	cbz	r2, 801ede2 <__ascii_mbtowc+0x1a>
 801edd0:	b14b      	cbz	r3, 801ede6 <__ascii_mbtowc+0x1e>
 801edd2:	7813      	ldrb	r3, [r2, #0]
 801edd4:	600b      	str	r3, [r1, #0]
 801edd6:	7812      	ldrb	r2, [r2, #0]
 801edd8:	1e10      	subs	r0, r2, #0
 801edda:	bf18      	it	ne
 801eddc:	2001      	movne	r0, #1
 801edde:	b002      	add	sp, #8
 801ede0:	4770      	bx	lr
 801ede2:	4610      	mov	r0, r2
 801ede4:	e7fb      	b.n	801edde <__ascii_mbtowc+0x16>
 801ede6:	f06f 0001 	mvn.w	r0, #1
 801edea:	e7f8      	b.n	801edde <__ascii_mbtowc+0x16>

0801edec <_realloc_r>:
 801edec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801edf0:	4607      	mov	r7, r0
 801edf2:	4614      	mov	r4, r2
 801edf4:	460d      	mov	r5, r1
 801edf6:	b921      	cbnz	r1, 801ee02 <_realloc_r+0x16>
 801edf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801edfc:	4611      	mov	r1, r2
 801edfe:	f7fe bbe1 	b.w	801d5c4 <_malloc_r>
 801ee02:	b92a      	cbnz	r2, 801ee10 <_realloc_r+0x24>
 801ee04:	f7fe fb6a 	bl	801d4dc <_free_r>
 801ee08:	4625      	mov	r5, r4
 801ee0a:	4628      	mov	r0, r5
 801ee0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee10:	f000 f928 	bl	801f064 <_malloc_usable_size_r>
 801ee14:	4284      	cmp	r4, r0
 801ee16:	4606      	mov	r6, r0
 801ee18:	d802      	bhi.n	801ee20 <_realloc_r+0x34>
 801ee1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ee1e:	d8f4      	bhi.n	801ee0a <_realloc_r+0x1e>
 801ee20:	4621      	mov	r1, r4
 801ee22:	4638      	mov	r0, r7
 801ee24:	f7fe fbce 	bl	801d5c4 <_malloc_r>
 801ee28:	4680      	mov	r8, r0
 801ee2a:	b908      	cbnz	r0, 801ee30 <_realloc_r+0x44>
 801ee2c:	4645      	mov	r5, r8
 801ee2e:	e7ec      	b.n	801ee0a <_realloc_r+0x1e>
 801ee30:	42b4      	cmp	r4, r6
 801ee32:	4622      	mov	r2, r4
 801ee34:	4629      	mov	r1, r5
 801ee36:	bf28      	it	cs
 801ee38:	4632      	movcs	r2, r6
 801ee3a:	f7ff ffa3 	bl	801ed84 <memcpy>
 801ee3e:	4629      	mov	r1, r5
 801ee40:	4638      	mov	r0, r7
 801ee42:	f7fe fb4b 	bl	801d4dc <_free_r>
 801ee46:	e7f1      	b.n	801ee2c <_realloc_r+0x40>

0801ee48 <_strtol_l.isra.0>:
 801ee48:	2b24      	cmp	r3, #36	@ 0x24
 801ee4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ee4e:	4686      	mov	lr, r0
 801ee50:	4690      	mov	r8, r2
 801ee52:	d801      	bhi.n	801ee58 <_strtol_l.isra.0+0x10>
 801ee54:	2b01      	cmp	r3, #1
 801ee56:	d106      	bne.n	801ee66 <_strtol_l.isra.0+0x1e>
 801ee58:	f7fd fd24 	bl	801c8a4 <__errno>
 801ee5c:	2316      	movs	r3, #22
 801ee5e:	6003      	str	r3, [r0, #0]
 801ee60:	2000      	movs	r0, #0
 801ee62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee66:	4834      	ldr	r0, [pc, #208]	@ (801ef38 <_strtol_l.isra.0+0xf0>)
 801ee68:	460d      	mov	r5, r1
 801ee6a:	462a      	mov	r2, r5
 801ee6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ee70:	5d06      	ldrb	r6, [r0, r4]
 801ee72:	f016 0608 	ands.w	r6, r6, #8
 801ee76:	d1f8      	bne.n	801ee6a <_strtol_l.isra.0+0x22>
 801ee78:	2c2d      	cmp	r4, #45	@ 0x2d
 801ee7a:	d110      	bne.n	801ee9e <_strtol_l.isra.0+0x56>
 801ee7c:	782c      	ldrb	r4, [r5, #0]
 801ee7e:	2601      	movs	r6, #1
 801ee80:	1c95      	adds	r5, r2, #2
 801ee82:	f033 0210 	bics.w	r2, r3, #16
 801ee86:	d115      	bne.n	801eeb4 <_strtol_l.isra.0+0x6c>
 801ee88:	2c30      	cmp	r4, #48	@ 0x30
 801ee8a:	d10d      	bne.n	801eea8 <_strtol_l.isra.0+0x60>
 801ee8c:	782a      	ldrb	r2, [r5, #0]
 801ee8e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801ee92:	2a58      	cmp	r2, #88	@ 0x58
 801ee94:	d108      	bne.n	801eea8 <_strtol_l.isra.0+0x60>
 801ee96:	786c      	ldrb	r4, [r5, #1]
 801ee98:	3502      	adds	r5, #2
 801ee9a:	2310      	movs	r3, #16
 801ee9c:	e00a      	b.n	801eeb4 <_strtol_l.isra.0+0x6c>
 801ee9e:	2c2b      	cmp	r4, #43	@ 0x2b
 801eea0:	bf04      	itt	eq
 801eea2:	782c      	ldrbeq	r4, [r5, #0]
 801eea4:	1c95      	addeq	r5, r2, #2
 801eea6:	e7ec      	b.n	801ee82 <_strtol_l.isra.0+0x3a>
 801eea8:	2b00      	cmp	r3, #0
 801eeaa:	d1f6      	bne.n	801ee9a <_strtol_l.isra.0+0x52>
 801eeac:	2c30      	cmp	r4, #48	@ 0x30
 801eeae:	bf14      	ite	ne
 801eeb0:	230a      	movne	r3, #10
 801eeb2:	2308      	moveq	r3, #8
 801eeb4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801eeb8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801eebc:	2200      	movs	r2, #0
 801eebe:	fbbc f9f3 	udiv	r9, ip, r3
 801eec2:	4610      	mov	r0, r2
 801eec4:	fb03 ca19 	mls	sl, r3, r9, ip
 801eec8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801eecc:	2f09      	cmp	r7, #9
 801eece:	d80f      	bhi.n	801eef0 <_strtol_l.isra.0+0xa8>
 801eed0:	463c      	mov	r4, r7
 801eed2:	42a3      	cmp	r3, r4
 801eed4:	dd1b      	ble.n	801ef0e <_strtol_l.isra.0+0xc6>
 801eed6:	1c57      	adds	r7, r2, #1
 801eed8:	d007      	beq.n	801eeea <_strtol_l.isra.0+0xa2>
 801eeda:	4581      	cmp	r9, r0
 801eedc:	d314      	bcc.n	801ef08 <_strtol_l.isra.0+0xc0>
 801eede:	d101      	bne.n	801eee4 <_strtol_l.isra.0+0x9c>
 801eee0:	45a2      	cmp	sl, r4
 801eee2:	db11      	blt.n	801ef08 <_strtol_l.isra.0+0xc0>
 801eee4:	fb00 4003 	mla	r0, r0, r3, r4
 801eee8:	2201      	movs	r2, #1
 801eeea:	f815 4b01 	ldrb.w	r4, [r5], #1
 801eeee:	e7eb      	b.n	801eec8 <_strtol_l.isra.0+0x80>
 801eef0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801eef4:	2f19      	cmp	r7, #25
 801eef6:	d801      	bhi.n	801eefc <_strtol_l.isra.0+0xb4>
 801eef8:	3c37      	subs	r4, #55	@ 0x37
 801eefa:	e7ea      	b.n	801eed2 <_strtol_l.isra.0+0x8a>
 801eefc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801ef00:	2f19      	cmp	r7, #25
 801ef02:	d804      	bhi.n	801ef0e <_strtol_l.isra.0+0xc6>
 801ef04:	3c57      	subs	r4, #87	@ 0x57
 801ef06:	e7e4      	b.n	801eed2 <_strtol_l.isra.0+0x8a>
 801ef08:	f04f 32ff 	mov.w	r2, #4294967295
 801ef0c:	e7ed      	b.n	801eeea <_strtol_l.isra.0+0xa2>
 801ef0e:	1c53      	adds	r3, r2, #1
 801ef10:	d108      	bne.n	801ef24 <_strtol_l.isra.0+0xdc>
 801ef12:	2322      	movs	r3, #34	@ 0x22
 801ef14:	f8ce 3000 	str.w	r3, [lr]
 801ef18:	4660      	mov	r0, ip
 801ef1a:	f1b8 0f00 	cmp.w	r8, #0
 801ef1e:	d0a0      	beq.n	801ee62 <_strtol_l.isra.0+0x1a>
 801ef20:	1e69      	subs	r1, r5, #1
 801ef22:	e006      	b.n	801ef32 <_strtol_l.isra.0+0xea>
 801ef24:	b106      	cbz	r6, 801ef28 <_strtol_l.isra.0+0xe0>
 801ef26:	4240      	negs	r0, r0
 801ef28:	f1b8 0f00 	cmp.w	r8, #0
 801ef2c:	d099      	beq.n	801ee62 <_strtol_l.isra.0+0x1a>
 801ef2e:	2a00      	cmp	r2, #0
 801ef30:	d1f6      	bne.n	801ef20 <_strtol_l.isra.0+0xd8>
 801ef32:	f8c8 1000 	str.w	r1, [r8]
 801ef36:	e794      	b.n	801ee62 <_strtol_l.isra.0+0x1a>
 801ef38:	080212ef 	.word	0x080212ef

0801ef3c <_strtol_r>:
 801ef3c:	f7ff bf84 	b.w	801ee48 <_strtol_l.isra.0>

0801ef40 <__ascii_wctomb>:
 801ef40:	4603      	mov	r3, r0
 801ef42:	4608      	mov	r0, r1
 801ef44:	b141      	cbz	r1, 801ef58 <__ascii_wctomb+0x18>
 801ef46:	2aff      	cmp	r2, #255	@ 0xff
 801ef48:	d904      	bls.n	801ef54 <__ascii_wctomb+0x14>
 801ef4a:	228a      	movs	r2, #138	@ 0x8a
 801ef4c:	601a      	str	r2, [r3, #0]
 801ef4e:	f04f 30ff 	mov.w	r0, #4294967295
 801ef52:	4770      	bx	lr
 801ef54:	700a      	strb	r2, [r1, #0]
 801ef56:	2001      	movs	r0, #1
 801ef58:	4770      	bx	lr

0801ef5a <__swhatbuf_r>:
 801ef5a:	b570      	push	{r4, r5, r6, lr}
 801ef5c:	460c      	mov	r4, r1
 801ef5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ef62:	2900      	cmp	r1, #0
 801ef64:	b096      	sub	sp, #88	@ 0x58
 801ef66:	4615      	mov	r5, r2
 801ef68:	461e      	mov	r6, r3
 801ef6a:	da0d      	bge.n	801ef88 <__swhatbuf_r+0x2e>
 801ef6c:	89a3      	ldrh	r3, [r4, #12]
 801ef6e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ef72:	f04f 0100 	mov.w	r1, #0
 801ef76:	bf14      	ite	ne
 801ef78:	2340      	movne	r3, #64	@ 0x40
 801ef7a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ef7e:	2000      	movs	r0, #0
 801ef80:	6031      	str	r1, [r6, #0]
 801ef82:	602b      	str	r3, [r5, #0]
 801ef84:	b016      	add	sp, #88	@ 0x58
 801ef86:	bd70      	pop	{r4, r5, r6, pc}
 801ef88:	466a      	mov	r2, sp
 801ef8a:	f000 f849 	bl	801f020 <_fstat_r>
 801ef8e:	2800      	cmp	r0, #0
 801ef90:	dbec      	blt.n	801ef6c <__swhatbuf_r+0x12>
 801ef92:	9901      	ldr	r1, [sp, #4]
 801ef94:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ef98:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ef9c:	4259      	negs	r1, r3
 801ef9e:	4159      	adcs	r1, r3
 801efa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801efa4:	e7eb      	b.n	801ef7e <__swhatbuf_r+0x24>

0801efa6 <__smakebuf_r>:
 801efa6:	898b      	ldrh	r3, [r1, #12]
 801efa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801efaa:	079d      	lsls	r5, r3, #30
 801efac:	4606      	mov	r6, r0
 801efae:	460c      	mov	r4, r1
 801efb0:	d507      	bpl.n	801efc2 <__smakebuf_r+0x1c>
 801efb2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801efb6:	6023      	str	r3, [r4, #0]
 801efb8:	6123      	str	r3, [r4, #16]
 801efba:	2301      	movs	r3, #1
 801efbc:	6163      	str	r3, [r4, #20]
 801efbe:	b003      	add	sp, #12
 801efc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801efc2:	ab01      	add	r3, sp, #4
 801efc4:	466a      	mov	r2, sp
 801efc6:	f7ff ffc8 	bl	801ef5a <__swhatbuf_r>
 801efca:	9f00      	ldr	r7, [sp, #0]
 801efcc:	4605      	mov	r5, r0
 801efce:	4639      	mov	r1, r7
 801efd0:	4630      	mov	r0, r6
 801efd2:	f7fe faf7 	bl	801d5c4 <_malloc_r>
 801efd6:	b948      	cbnz	r0, 801efec <__smakebuf_r+0x46>
 801efd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801efdc:	059a      	lsls	r2, r3, #22
 801efde:	d4ee      	bmi.n	801efbe <__smakebuf_r+0x18>
 801efe0:	f023 0303 	bic.w	r3, r3, #3
 801efe4:	f043 0302 	orr.w	r3, r3, #2
 801efe8:	81a3      	strh	r3, [r4, #12]
 801efea:	e7e2      	b.n	801efb2 <__smakebuf_r+0xc>
 801efec:	89a3      	ldrh	r3, [r4, #12]
 801efee:	6020      	str	r0, [r4, #0]
 801eff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801eff4:	81a3      	strh	r3, [r4, #12]
 801eff6:	9b01      	ldr	r3, [sp, #4]
 801eff8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801effc:	b15b      	cbz	r3, 801f016 <__smakebuf_r+0x70>
 801effe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f002:	4630      	mov	r0, r6
 801f004:	f000 f81e 	bl	801f044 <_isatty_r>
 801f008:	b128      	cbz	r0, 801f016 <__smakebuf_r+0x70>
 801f00a:	89a3      	ldrh	r3, [r4, #12]
 801f00c:	f023 0303 	bic.w	r3, r3, #3
 801f010:	f043 0301 	orr.w	r3, r3, #1
 801f014:	81a3      	strh	r3, [r4, #12]
 801f016:	89a3      	ldrh	r3, [r4, #12]
 801f018:	431d      	orrs	r5, r3
 801f01a:	81a5      	strh	r5, [r4, #12]
 801f01c:	e7cf      	b.n	801efbe <__smakebuf_r+0x18>
	...

0801f020 <_fstat_r>:
 801f020:	b538      	push	{r3, r4, r5, lr}
 801f022:	4d07      	ldr	r5, [pc, #28]	@ (801f040 <_fstat_r+0x20>)
 801f024:	2300      	movs	r3, #0
 801f026:	4604      	mov	r4, r0
 801f028:	4608      	mov	r0, r1
 801f02a:	4611      	mov	r1, r2
 801f02c:	602b      	str	r3, [r5, #0]
 801f02e:	f000 f829 	bl	801f084 <_fstat>
 801f032:	1c43      	adds	r3, r0, #1
 801f034:	d102      	bne.n	801f03c <_fstat_r+0x1c>
 801f036:	682b      	ldr	r3, [r5, #0]
 801f038:	b103      	cbz	r3, 801f03c <_fstat_r+0x1c>
 801f03a:	6023      	str	r3, [r4, #0]
 801f03c:	bd38      	pop	{r3, r4, r5, pc}
 801f03e:	bf00      	nop
 801f040:	24002e7c 	.word	0x24002e7c

0801f044 <_isatty_r>:
 801f044:	b538      	push	{r3, r4, r5, lr}
 801f046:	4d06      	ldr	r5, [pc, #24]	@ (801f060 <_isatty_r+0x1c>)
 801f048:	2300      	movs	r3, #0
 801f04a:	4604      	mov	r4, r0
 801f04c:	4608      	mov	r0, r1
 801f04e:	602b      	str	r3, [r5, #0]
 801f050:	f000 f828 	bl	801f0a4 <_isatty>
 801f054:	1c43      	adds	r3, r0, #1
 801f056:	d102      	bne.n	801f05e <_isatty_r+0x1a>
 801f058:	682b      	ldr	r3, [r5, #0]
 801f05a:	b103      	cbz	r3, 801f05e <_isatty_r+0x1a>
 801f05c:	6023      	str	r3, [r4, #0]
 801f05e:	bd38      	pop	{r3, r4, r5, pc}
 801f060:	24002e7c 	.word	0x24002e7c

0801f064 <_malloc_usable_size_r>:
 801f064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f068:	1f18      	subs	r0, r3, #4
 801f06a:	2b00      	cmp	r3, #0
 801f06c:	bfbc      	itt	lt
 801f06e:	580b      	ldrlt	r3, [r1, r0]
 801f070:	18c0      	addlt	r0, r0, r3
 801f072:	4770      	bx	lr

0801f074 <_close>:
 801f074:	4b02      	ldr	r3, [pc, #8]	@ (801f080 <_close+0xc>)
 801f076:	2258      	movs	r2, #88	@ 0x58
 801f078:	601a      	str	r2, [r3, #0]
 801f07a:	f04f 30ff 	mov.w	r0, #4294967295
 801f07e:	4770      	bx	lr
 801f080:	24002e7c 	.word	0x24002e7c

0801f084 <_fstat>:
 801f084:	4b02      	ldr	r3, [pc, #8]	@ (801f090 <_fstat+0xc>)
 801f086:	2258      	movs	r2, #88	@ 0x58
 801f088:	601a      	str	r2, [r3, #0]
 801f08a:	f04f 30ff 	mov.w	r0, #4294967295
 801f08e:	4770      	bx	lr
 801f090:	24002e7c 	.word	0x24002e7c

0801f094 <_getpid>:
 801f094:	4b02      	ldr	r3, [pc, #8]	@ (801f0a0 <_getpid+0xc>)
 801f096:	2258      	movs	r2, #88	@ 0x58
 801f098:	601a      	str	r2, [r3, #0]
 801f09a:	f04f 30ff 	mov.w	r0, #4294967295
 801f09e:	4770      	bx	lr
 801f0a0:	24002e7c 	.word	0x24002e7c

0801f0a4 <_isatty>:
 801f0a4:	4b02      	ldr	r3, [pc, #8]	@ (801f0b0 <_isatty+0xc>)
 801f0a6:	2258      	movs	r2, #88	@ 0x58
 801f0a8:	601a      	str	r2, [r3, #0]
 801f0aa:	2000      	movs	r0, #0
 801f0ac:	4770      	bx	lr
 801f0ae:	bf00      	nop
 801f0b0:	24002e7c 	.word	0x24002e7c

0801f0b4 <_kill>:
 801f0b4:	4b02      	ldr	r3, [pc, #8]	@ (801f0c0 <_kill+0xc>)
 801f0b6:	2258      	movs	r2, #88	@ 0x58
 801f0b8:	601a      	str	r2, [r3, #0]
 801f0ba:	f04f 30ff 	mov.w	r0, #4294967295
 801f0be:	4770      	bx	lr
 801f0c0:	24002e7c 	.word	0x24002e7c

0801f0c4 <_lseek>:
 801f0c4:	4b02      	ldr	r3, [pc, #8]	@ (801f0d0 <_lseek+0xc>)
 801f0c6:	2258      	movs	r2, #88	@ 0x58
 801f0c8:	601a      	str	r2, [r3, #0]
 801f0ca:	f04f 30ff 	mov.w	r0, #4294967295
 801f0ce:	4770      	bx	lr
 801f0d0:	24002e7c 	.word	0x24002e7c

0801f0d4 <_read>:
 801f0d4:	4b02      	ldr	r3, [pc, #8]	@ (801f0e0 <_read+0xc>)
 801f0d6:	2258      	movs	r2, #88	@ 0x58
 801f0d8:	601a      	str	r2, [r3, #0]
 801f0da:	f04f 30ff 	mov.w	r0, #4294967295
 801f0de:	4770      	bx	lr
 801f0e0:	24002e7c 	.word	0x24002e7c

0801f0e4 <_write>:
 801f0e4:	4b02      	ldr	r3, [pc, #8]	@ (801f0f0 <_write+0xc>)
 801f0e6:	2258      	movs	r2, #88	@ 0x58
 801f0e8:	601a      	str	r2, [r3, #0]
 801f0ea:	f04f 30ff 	mov.w	r0, #4294967295
 801f0ee:	4770      	bx	lr
 801f0f0:	24002e7c 	.word	0x24002e7c

0801f0f4 <_exit>:
 801f0f4:	e7fe      	b.n	801f0f4 <_exit>
	...

0801f0f8 <_init>:
 801f0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0fa:	bf00      	nop
 801f0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f0fe:	bc08      	pop	{r3}
 801f100:	469e      	mov	lr, r3
 801f102:	4770      	bx	lr

0801f104 <_fini>:
 801f104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f106:	bf00      	nop
 801f108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f10a:	bc08      	pop	{r3}
 801f10c:	469e      	mov	lr, r3
 801f10e:	4770      	bx	lr
